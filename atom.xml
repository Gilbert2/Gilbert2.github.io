<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>派大星の博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/maisy/atom.xml" rel="self"/>
  
  <link href="https://gilbert2.gitee.io/maisy/"/>
  <updated>2020-03-25T11:49:43.109Z</updated>
  <id>https://gilbert2.gitee.io/maisy/</id>
  
  <author>
    <name>派大星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python函数</title>
    <link href="https://gilbert2.gitee.io/maisy/Python%E5%87%BD%E6%95%B0.html"/>
    <id>https://gilbert2.gitee.io/maisy/Python%E5%87%BD%E6%95%B0.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="1、为什么要使用函数"><a href="#1、为什么要使用函数" class="headerlink" title="1、为什么要使用函数"></a>1、为什么要使用函数</h4><p>函数中的代码一次编写，所处运行</p><p>函数可以让代码复用，减少代码冗余</p><h4 id="2、定义函数"><a href="#2、定义函数" class="headerlink" title="2、定义函数"></a>2、定义函数</h4><p>关键字：def</p><p>函数名称右侧有小括号，结尾处有冒号</p><p>函数内第一行通常书写注释，表明该函数的意义</p><p>注释后空一行，开始写代码块</p><p>函数结束后，空两行</p><p>函数调用后空一行，再执行别的代码</p><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><h5 id="无参函数"><a href="#无参函数" class="headerlink" title="无参函数"></a>无参函数</h5><h5 id="带参函数"><a href="#带参函数" class="headerlink" title="带参函数"></a>带参函数</h5><blockquote><p>注意事项：调用函数时，实参传递的个数要与形参保持一致</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python小练习</title>
    <link href="https://gilbert2.gitee.io/maisy/Python%E5%B0%8F%E7%BB%83%E4%B9%A0.html"/>
    <id>https://gilbert2.gitee.io/maisy/Python%E5%B0%8F%E7%BB%83%E4%B9%A0.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.113Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1）猜拳游戏"><a href="#1）猜拳游戏" class="headerlink" title="1）猜拳游戏"></a>1）猜拳游戏</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">猜拳游戏：根据用户输入的数字，分别给出提示：“猜大了”或“猜小了”或“猜对了”，只有3次机会，否则退出程序</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">num = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">time = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> time &lt;= <span class="number">3</span>:</span><br><span class="line">    guess = int(input(<span class="string">'请输入你猜的数字：'</span>))</span><br><span class="line">    <span class="keyword">if</span> guess &lt; num:</span><br><span class="line">        print(<span class="string">'猜小了！！！'</span>)</span><br><span class="line">        time += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> guess &gt; num:</span><br><span class="line">        print(<span class="string">'猜大了！！！'</span>)</span><br><span class="line">        time += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'恭喜你，猜对了！！！'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">f'移动三次机会，现在是第<span class="subst">&#123;time&#125;</span>次！！！'</span>)</span><br><span class="line">    <span class="keyword">if</span> time == <span class="number">3</span>:</span><br><span class="line">        quiz = input(<span class="string">'三次都没对，是否继续（y/n）'</span>)</span><br><span class="line">        <span class="keyword">if</span> quiz == <span class="string">'y'</span>:</span><br><span class="line">            time = <span class="number">0</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> quiz == <span class="string">'n'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">请输入你猜的数字：<span class="number">7</span></span><br><span class="line">猜小了！！！</span><br><span class="line">移动三次机会，现在是第<span class="number">1</span>次！！！</span><br><span class="line">请输入你猜的数字：<span class="number">10</span></span><br><span class="line">恭喜你，猜对了！！！</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="2）跑马灯"><a href="#2）跑马灯" class="headerlink" title="2）跑马灯"></a>2）跑马灯</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">跑马灯特效</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    content = <span class="string">'武汉加油，中国加油'</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        os.system(<span class="string">'cls'</span>)</span><br><span class="line">        print(content)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        content = content[<span class="number">1</span>:] + content[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line">加油，中国加油武汉</span><br><span class="line">油，中国加油武汉加</span><br><span class="line">，中国加油武汉加油</span><br><span class="line">中国加油武汉加油，</span><br><span class="line">国加油武汉加油，中</span><br><span class="line">加油武汉加油，中国</span><br><span class="line">油武汉加油，中国加</span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line">加油，中国加油武汉</span><br><span class="line">油，中国加油武汉加</span><br><span class="line">，中国加油武汉加油</span><br><span class="line">中国加油武汉加油，</span><br><span class="line">国加油武汉加油，中</span><br><span class="line">加油武汉加油，中国</span><br><span class="line">油武汉加油，中国加</span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">-1</span></span><br></pre></td></tr></table></figure><h5 id="3）幸运数"><a href="#3）幸运数" class="headerlink" title="3）幸运数"></a>3）幸运数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入一个4位数，如果各个数字之和大于20，则次数为幸运数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lucky_numbers</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># num = int(input('请输入一个4位数：'))</span></span><br><span class="line">    <span class="comment"># print('您输入的是：' + str(num))</span></span><br><span class="line">    <span class="comment"># 分解四位数，获取各位数字</span></span><br><span class="line">    <span class="comment"># 获取个位数字</span></span><br><span class="line">    ge_wei = num % <span class="number">10</span></span><br><span class="line">    shi_wei = int(num % <span class="number">100</span> / <span class="number">10</span>)</span><br><span class="line">    bai_wei = int(num / <span class="number">100</span> % <span class="number">10</span>)</span><br><span class="line">    qian_wei = int(num / <span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 求四个数值的和，并进行判断，如果大于20，则输出提示：是幸运数</span></span><br><span class="line">    <span class="keyword">if</span> (ge_wei + shi_wei + bai_wei + qian_wei) &gt; <span class="number">20</span>:</span><br><span class="line">        print(<span class="string">'是幸运数字'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'不是幸运数字,谢谢参与'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    num = int(input(<span class="string">'请输入一个4位数：'</span>))</span><br><span class="line">    print(<span class="string">'您输入的是：'</span> + str(num))</span><br><span class="line">    lucky_numbers(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">请输入一个<span class="number">4</span>位数：<span class="number">6666</span></span><br><span class="line">您输入的是：<span class="number">6666</span></span><br><span class="line">是幸运数字</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="4）温度格式转换"><a href="#4）温度格式转换" class="headerlink" title="4）温度格式转换"></a>4）温度格式转换</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用while实现：输出摄氏温度与华氏温度的对照表，要求它从摄氏温度0度到250度，每隔20度为一项，</span></span><br><span class="line"><span class="comment"># 对照表中的条目不超过10条。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 转换关系：华氏温度 = 摄氏温度 * 9 / 5.0 + 32</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 循环操作：计算摄氏温度，并输出对照条目</span></span><br><span class="line"><span class="comment"># 循环条件：</span></span><br><span class="line"><span class="comment"># 条目&lt;=10 &amp;&amp; 摄氏温度 &lt;= 250</span></span><br><span class="line"></span><br><span class="line">celsius = <span class="number">0</span></span><br><span class="line">Fahrenheit = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> <span class="keyword">and</span> celsius &lt;= <span class="number">250</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    celsius = celsius + <span class="number">20</span></span><br><span class="line">    Fahrenheit = celsius * <span class="number">9</span> / <span class="number">5.0</span> + <span class="number">32</span></span><br><span class="line">    print(<span class="string">'摄氏温度：'</span>, celsius, <span class="string">'华氏温度：'</span>, Fahrenheit, end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">摄氏温度： <span class="number">20</span> 华氏温度： <span class="number">68.0</span> </span><br><span class="line">摄氏温度： <span class="number">40</span> 华氏温度： <span class="number">104.0</span> </span><br><span class="line">摄氏温度： <span class="number">60</span> 华氏温度： <span class="number">140.0</span> </span><br><span class="line">摄氏温度： <span class="number">80</span> 华氏温度： <span class="number">176.0</span> </span><br><span class="line">摄氏温度： <span class="number">100</span> 华氏温度： <span class="number">212.0</span> </span><br><span class="line">摄氏温度： <span class="number">120</span> 华氏温度： <span class="number">248.0</span> </span><br><span class="line">摄氏温度： <span class="number">140</span> 华氏温度： <span class="number">284.0</span> </span><br><span class="line">摄氏温度： <span class="number">160</span> 华氏温度： <span class="number">320.0</span> </span><br><span class="line">摄氏温度： <span class="number">180</span> 华氏温度： <span class="number">356.0</span> </span><br><span class="line">摄氏温度： <span class="number">200</span> 华氏温度： <span class="number">392.0</span> </span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python编写简单的学生管理系统</title>
    <link href="https://gilbert2.gitee.io/maisy/Python%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://gilbert2.gitee.io/maisy/Python%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.118Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python编写简单的学生管理系统"><a href="#Python编写简单的学生管理系统" class="headerlink" title="Python编写简单的学生管理系统"></a>Python编写简单的学生管理系统</h4><blockquote><p>一共两个文件，其中一个定义函数，另一个是主程序，调用函数，运行程序</p></blockquote><p><strong>CMS.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">编写“学生信息管理系统”，要求如下：</span></span><br><span class="line"><span class="string">必须使用自定义函数，完成对程序的模块化</span></span><br><span class="line"><span class="string">学生信息至少包含：姓名、年龄、学号，除此以外可以适当添加</span></span><br><span class="line"><span class="string">必须完成的功能：添加、删除、修改、查询、退出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 定义一个列表用来存储多个学生信息</span></span><br><span class="line">stuList = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义系统菜单显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">displayMenu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 完成显示系统菜单的功能</span></span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">"学 生 信 息 管 理 系 统 "</span>)</span><br><span class="line">    print(<span class="string">"1、添加学生信息"</span>)</span><br><span class="line">    print(<span class="string">"2、删除学生信息"</span>)</span><br><span class="line">    print(<span class="string">"3、修改学生信息"</span>)</span><br><span class="line">    print(<span class="string">"4、查询学生信息"</span>)</span><br><span class="line">    print(<span class="string">"5、退出学生信息管理系统"</span>)</span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNewStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 完成添加学生信息的功能</span></span><br><span class="line">    name = input(<span class="string">"请输入学生的姓名："</span>)</span><br><span class="line">    stuId = input(<span class="string">"请输入学生的学号："</span>)</span><br><span class="line">    age = input(<span class="string">"请输入学生的年龄："</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个字典用来存储每个学生的信息</span></span><br><span class="line">    stuDict = &#123;&#125;</span><br><span class="line">    stuDict[<span class="string">'name'</span>] = name</span><br><span class="line">    stuDict[<span class="string">'stuId'</span>] = stuId</span><br><span class="line">    stuDict[<span class="string">'age'</span>] = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 将每个学生的信息添加到列表中</span></span><br><span class="line">    stuList.append(stuDict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成删除学生信息的功能</span></span><br><span class="line">    delName = input(<span class="string">"请输入你要删除的学生姓名："</span>)</span><br><span class="line">    delFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> tempStu <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> delName == tempStu[<span class="string">'name'</span>]:</span><br><span class="line">            delName = stuList.index(tempStu)  <span class="comment"># 获取要删除的学生所在列表中的索引</span></span><br><span class="line">            <span class="keyword">del</span> stuList[delName]  <span class="comment"># 按索引删除</span></span><br><span class="line">            delFlag = <span class="number">1</span>  <span class="comment"># 删除成功</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> delFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"没有此人，请中心输入！！！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reviseStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成修改学生信息的功能</span></span><br><span class="line">    reviseName = input(<span class="string">"请输入你要修改信息的学生姓名："</span>)</span><br><span class="line">    reviseFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> tempStuDict <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> reviseName == tempStuDict[<span class="string">'name'</span>]:</span><br><span class="line">            <span class="comment"># 修改学生的信息</span></span><br><span class="line">            newStuId = input(<span class="string">"请输入要修改后学生的学号："</span>)</span><br><span class="line">            newAge = input(<span class="string">"请输入要修改后学生的年龄："</span>)</span><br><span class="line">            tempStuDict[<span class="string">'stuId'</span>] = newStuId</span><br><span class="line">            tempStuDict[<span class="string">'age'</span>] = newAge</span><br><span class="line">            reviseFlag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> reviseFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"没有此人，请重新输入"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inquireStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成查询学生信息的功能</span></span><br><span class="line">    inquireName = input(<span class="string">"请输入你要查询的学生的姓名："</span>)</span><br><span class="line">    inquireFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> inquireName == temp[<span class="string">'name'</span>]:</span><br><span class="line">            print(<span class="string">"%s\t%s\t%s"</span> % (temp[<span class="string">'name'</span>], temp[<span class="string">'stuId'</span>], temp[<span class="string">'age'</span>]))</span><br><span class="line">            inquireFlag = <span class="number">1</span>  <span class="comment"># 表示查询成功</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> inquireFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"查无此人..."</span>)</span><br></pre></td></tr></table></figure><p><strong>test_student.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">测试学生信息管理系统的功能</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> student_sys.CMS <span class="keyword">as</span> stu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数：程序从这里开始运行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 菜单显示</span></span><br><span class="line">    <span class="comment"># 1、提示用户选择功能</span></span><br><span class="line">    stu.displayMenu()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 2、获取用户的输入</span></span><br><span class="line">        key = int(input(<span class="string">"请输入你选择的功能序号："</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key == <span class="number">1</span>:</span><br><span class="line">            stu.addNewStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">2</span>:</span><br><span class="line">            stu.delStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">3</span>:</span><br><span class="line">            stu.reviseStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">4</span>:</span><br><span class="line">            stu.inquireStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">5</span>:</span><br><span class="line">            print(<span class="string">'退出程序！！！'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入！！！只能输入1-5的数字！！！"</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用主函数，运行程序</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">****************************************</span><br><span class="line">学 生 信 息 管 理 系 统 </span><br><span class="line"><span class="number">1</span>、添加学生信息</span><br><span class="line"><span class="number">2</span>、删除学生信息</span><br><span class="line"><span class="number">3</span>、修改学生信息</span><br><span class="line"><span class="number">4</span>、查询学生信息</span><br><span class="line"><span class="number">5</span>、退出学生信息管理系统</span><br><span class="line">****************************************</span><br><span class="line">请输入你选择的功能序号：<span class="number">1</span></span><br><span class="line">请输入学生的姓名：john</span><br><span class="line">请输入学生的学号：<span class="number">003</span></span><br><span class="line">请输入学生的年龄：<span class="number">18</span></span><br><span class="line"></span><br><span class="line">请输入你选择的功能序号：<span class="number">4</span></span><br><span class="line">请输入你要查询的学生的姓名：john</span><br><span class="line">john<span class="number">003</span><span class="number">18</span></span><br><span class="line"></span><br><span class="line">请输入你选择的功能序号：<span class="number">5</span></span><br><span class="line">退出程序！！！</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之if语句</title>
    <link href="https://gilbert2.gitee.io/maisy/Python%E4%B9%8Bif%E8%AF%AD%E5%8F%A5.html"/>
    <id>https://gilbert2.gitee.io/maisy/Python%E4%B9%8Bif%E8%AF%AD%E5%8F%A5.html</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2020-03-13T11:48:20.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python之if语句"><a href="#Python之if语句" class="headerlink" title="Python之if语句"></a>Python之if语句</h3><p><strong>应用场景</strong></p><p>编程时经常需要检查一列条件并根据此条件决定采取什么措施</p><p><strong>选择条件的实例：简单的if结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果天气晴朗，我们去室外散步；否则继续宅在家里</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">如果 天气晴朗:</span></span><br><span class="line"><span class="string">    我们去室外散步</span></span><br><span class="line"><span class="string">否则:</span></span><br><span class="line"><span class="string">    继续宅在家里</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">state = <span class="string">'晴朗'</span></span><br><span class="line"><span class="keyword">if</span> state == <span class="string">'晴朗'</span>:</span><br><span class="line">    print(<span class="string">'室外散步'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'宅在家里'</span>)</span><br><span class="line">室外散步</span><br></pre></td></tr></table></figure><p><strong>条件表达测试布尔表达式</strong></p><blockquote><p>比较运算符：（==、!=、&gt;、&lt;、&gt;=、&lt;=）</p><p>逻辑运算符：(and、or)</p><p>成员运算符：（in、not in）</p></blockquote><p><strong>if语句结构</strong></p><p>使用不同的条件做不同的事情</p><blockquote><p>简单的if语句</p><p>if-else语句</p><p>if-elif-else结构</p><p>多重if结构</p><p>注意事项：else代码也不是必须的</p></blockquote><p><strong>if语句在列表中的应用</strong></p><blockquote><p>检查元素</p><p>确定列表是不空的</p><p>使用多个列表</p></blockquote><p><strong>条件表达测试布尔表达式</strong></p><p><strong>比较运算符</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#比较运算符在条件表达式的应用：ATM/客服电话(请输入1，请输入2....)</span></span><br><span class="line"><span class="comment">#==</span></span><br><span class="line">key = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> key == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'存款'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'取款'</span>)</span><br><span class="line">存款</span><br><span class="line"><span class="comment">#！=</span></span><br><span class="line"><span class="keyword">if</span> key != <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'不存款'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'存款'</span>)</span><br><span class="line">存款</span><br><span class="line"><span class="comment">#&gt;=</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"允许进入网吧"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'未成年人禁止进入'</span>)</span><br><span class="line">允许进入网吧</span><br><span class="line"><span class="comment">#其他运算符都是一个道理</span></span><br></pre></td></tr></table></figure><p><strong>逻逻辑运算符：and、or</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#and</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">50</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">and</span> money &gt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">抱歉  <span class="comment">#and两边的条件必须都得成立</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">or</span> money &gt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">欢迎光临   <span class="comment">#or两边的条件只需要满足一个就行</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">id_hard = <span class="literal">True</span> <span class="comment">#布尔值</span></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span> <span class="keyword">or</span> money &gt;= <span class="number">100</span>) <span class="keyword">and</span> id_hard:  <span class="comment">#对于布尔值（True/or）可以省略</span></span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">欢迎光临</span><br></pre></td></tr></table></figure><p>总结and和or的区别：</p><blockquote><p>and两边的条件必须都得成立</p><p>or两边的条件只需要满足一个就行</p></blockquote><p><strong>成员运算符：in、not in</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义列表</span></span><br><span class="line"><span class="comment">#in</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">不存在</span><br><span class="line"><span class="comment">#在列表中加一个kety查看效果</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>,<span class="string">'kety'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">不存在</span><br><span class="line"><span class="comment">#因为添加的kety是小写，而定义的变量是大写的Kety，对于这种情况可以采用忽略大小写转换的方法</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>,<span class="string">'kety'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name.lower() <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">存在</span><br><span class="line"><span class="comment">#not in</span></span><br><span class="line"><span class="keyword">if</span> name.upper() <span class="keyword">not</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'no'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'yes'</span>)</span><br><span class="line">no</span><br></pre></td></tr></table></figure><p>条件测试的表达是的结果就是布尔值，要么是True，要么是False，不能用一个等值条件来做</p><p><strong>if语句结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单的if</span></span><br><span class="line">age = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line">婴儿</span><br><span class="line"><span class="comment">#if-else</span></span><br><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">2</span> <span class="keyword">and</span> age &lt;= <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'蹒跚学步'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line">蹒跚学步</span><br><span class="line"><span class="comment">#if-elif-else</span></span><br><span class="line">age = <span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">2</span> <span class="keyword">and</span> age &lt;= <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'蹒跚学步'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">4</span> <span class="keyword">and</span> age &lt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'上幼儿园'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'其他'</span>)</span><br><span class="line">其他</span><br><span class="line"><span class="comment">#else代码不是必须的，如果去掉else，是没有输出结果的</span></span><br></pre></td></tr></table></figure><p>如果在符合一个条件之后里面又有一个条件该怎么表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#男女学生参加100米赛跑，如果在10秒内跑完的，进入决赛；</span></span><br><span class="line"><span class="comment">#进入决赛，分男子组合进行比赛</span></span><br><span class="line"><span class="comment">#多重if结构</span></span><br><span class="line">second = <span class="number">6</span></span><br><span class="line">gender = <span class="string">'男'</span></span><br><span class="line"><span class="keyword">if</span> second &lt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">'进入决赛'</span>)</span><br><span class="line">    <span class="keyword">if</span> gender == <span class="string">'男'</span>:</span><br><span class="line">        print(<span class="string">'进入男子组'</span>)</span><br><span class="line">    <span class="keyword">elif</span> gender == <span class="string">'女'</span>:</span><br><span class="line">        print(<span class="string">'进入女子组'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'重在参与，弘扬体育精神'</span>)</span><br><span class="line">进入决赛</span><br><span class="line">进入男子组</span><br></pre></td></tr></table></figure><p><strong>if语句在列表中的应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="keyword">if</span> f == <span class="string">'pear'</span>:</span><br><span class="line">        print(<span class="string">'做个梨罐头'</span>)</span><br><span class="line">    <span class="keyword">elif</span> f == <span class="string">'orange'</span>:</span><br><span class="line">        print(<span class="string">'做句子罐头'</span>)</span><br><span class="line">    <span class="keyword">elif</span> f == <span class="string">'apple'</span>:</span><br><span class="line">        print(<span class="string">'做苹果罐头'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'做沙拉'</span>)</span><br><span class="line">做苹果罐头</span><br><span class="line">做沙拉</span><br><span class="line">做个梨罐头</span><br><span class="line">做句子罐头  <span class="comment">#最后结果的顺序是列表内的顺序</span></span><br><span class="line">fruits = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'pear'</span>,<span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">if</span> len(fruits) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'没有水果'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'开始做水果罐头了'</span>)</span><br><span class="line">    <span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">        print(fruit,end=<span class="string">" "</span>)</span><br><span class="line">开始做水果罐头了</span><br><span class="line">apple banana pear orange</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><strong>1、求100以内数字的偶数之和与奇数之和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#偶数之和</span></span><br><span class="line">print(sum(range(<span class="number">2</span>,<span class="number">101</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="comment">#奇数之和</span></span><br><span class="line">print(sum(range(<span class="number">1</span>,<span class="number">101</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="number">2550</span></span><br><span class="line"><span class="number">2500</span></span><br></pre></td></tr></table></figure><p><strong>2、输出100以内7的倍数的数字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">        print(i,end=<span class="string">" "</span>)</span><br><span class="line"> <span class="number">7</span> <span class="number">14</span> <span class="number">21</span> <span class="number">28</span> <span class="number">35</span> <span class="number">42</span> <span class="number">49</span> <span class="number">56</span> <span class="number">63</span> <span class="number">70</span> <span class="number">77</span> <span class="number">84</span> <span class="number">91</span> <span class="number">98</span></span><br></pre></td></tr></table></figure><p><strong>3、打印直角三角形，奇数用*号代替，偶数用#号代替</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span> <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">            print(<span class="string">'*'</span>,end=<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'#'</span>,end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># </span></span><br><span class="line">* <span class="comment"># * </span></span><br><span class="line">* <span class="comment"># * # </span></span><br><span class="line">* <span class="comment"># * # * </span></span><br><span class="line">* <span class="comment"># * # * # </span></span><br><span class="line">* <span class="comment"># * # * # * </span></span><br><span class="line">* <span class="comment"># * # * # * # </span></span><br><span class="line">* <span class="comment"># * # * # * # *</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型之列表的基本操作</title>
    <link href="https://gilbert2.gitee.io/maisy/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
    <id>https://gilbert2.gitee.io/maisy/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2020-03-13T11:48:20.960Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是列表"><a href="#什么是列表" class="headerlink" title="什么是列表"></a><strong>什么是列表</strong></h4><p>列表是Python中非常重要的数据类型，通常作为函数的返回值。由一组元素组成，列表可以实现添加、删除和查找操作，元素值可以被修改</p><p>由一系列按照特定的顺序排列起来的元素所组成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#普通的变量定义形式</span></span><br><span class="line">tom = <span class="string">"Tom"</span></span><br><span class="line">jack = <span class="string">"Jack"</span></span><br><span class="line">john = <span class="string">"John"</span></span><br><span class="line"></span><br><span class="line">pet1 = <span class="string">"cat"</span></span><br><span class="line">pet2 = <span class="string">"dog"</span></span><br><span class="line">pet3 = <span class="string">"bird"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义列表，语法格式</span></span><br><span class="line">name = [<span class="string">'Tom'</span>,<span class="string">'Jack'</span>,<span class="string">'John'</span>]</span><br><span class="line">pet = [<span class="string">'cat'</span>,<span class="string">'dog'</span>,<span class="string">'bird'</span>]   <span class="comment">#相比一个一个来定义会比较简洁，方便</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印列表</span></span><br><span class="line">print(name)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'Jack'</span>, <span class="string">'John'</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br></pre></td></tr></table></figure><p><strong>用索引访问列表元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过索引读取列表中的元素，索引从0开始，-1代表最后一个</span></span><br><span class="line">print(name[<span class="number">0</span>])</span><br><span class="line">print(pet[<span class="number">2</span>])</span><br><span class="line">Tom</span><br><span class="line">bird   <span class="comment">#这些数字就是列表中排列的顺序，是从0开始，按照一定的顺序，以此类推</span></span><br><span class="line"><span class="comment">#-1代表元素的最后一个，-2代表倒数第二个，以此类推</span></span><br><span class="line">print(name[<span class="number">-1</span>])</span><br><span class="line">print(pet[<span class="number">-2</span>])</span><br><span class="line">John</span><br><span class="line">dog</span><br></pre></td></tr></table></figure><h4 id="列表的基本操作"><a href="#列表的基本操作" class="headerlink" title="列表的基本操作"></a>列表的基本操作</h4><p><strong>修改：</strong></p><blockquote><p>通过索引获取元素，进行修改</p></blockquote><p><strong>添加：</strong></p><blockquote><p>append(元素)：在列表末尾添加</p><p>insert(索引，元素)：在列表指定位置插入</p></blockquote><p><strong>删除：</strong></p><blockquote><p>del：根据元素的索引删除元素，被删除的元素不可以在进行访问</p><p>pop()：删除列表末尾的元素</p><p>pop(索引)：弹出指定位置的元素，被删除的元素还能继续使用</p><p>remove(value)：根据元素的值进行删除</p></blockquote><p><strong>排序</strong></p><blockquote><p>sorted(列表)：临时排序</p><p>sort()：永久排序</p><p>sort(reverse=True)：倒序排序</p><p>len()：列表长度</p></blockquote><p><strong>修改列表的元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过索引获取元素，进行修改</span></span><br><span class="line">name[<span class="number">1</span>] = <span class="string">'San'</span></span><br><span class="line">print(name)</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'San'</span>, <span class="string">'John'</span>]  <span class="comment">#之前定义的是Jack，现在修改成了San</span></span><br></pre></td></tr></table></figure><p><strong>向列表中添加元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在列表末尾添加新元素</span></span><br><span class="line">name.append(<span class="string">'Bob'</span>)</span><br><span class="line">print(name)</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'San'</span>, <span class="string">'John'</span>, <span class="string">'Bob'</span>]</span><br><span class="line"><span class="comment">#在列表指定位置添加新元素</span></span><br><span class="line">print(pet)</span><br><span class="line">pet.insert(<span class="number">0</span>,<span class="string">'penguin'</span>)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br><span class="line">[<span class="string">'penguin'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br><span class="line"></span><br><span class="line">pet.insert(<span class="number">-2</span>,<span class="string">'pig'</span>)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'penguin'</span>, <span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br></pre></td></tr></table></figure><p><strong>删除列表中的元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据元素的索引删除元素</span></span><br><span class="line">print(pet)</span><br><span class="line"><span class="keyword">del</span> pet[<span class="number">0</span>]</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'penguin'</span>, <span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]  <span class="comment">#使用del删除的元素不可以进行访问</span></span><br><span class="line"><span class="comment">#删除列表末尾的元素</span></span><br><span class="line">print(pet)</span><br><span class="line">new_pet = pet.pop()  <span class="comment">#不加参数在表最后一个</span></span><br><span class="line">print(new_pet)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br><span class="line">bird</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>] </span><br><span class="line"><span class="comment">#弹出指定位置的元素</span></span><br><span class="line">print(pet)</span><br><span class="line">pet.pop(<span class="number">2</span>)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>]</span><br><span class="line"><span class="comment">#访问刚才删除的值</span></span><br><span class="line">print(new_pet)</span><br><span class="line">bird</span><br><span class="line"><span class="comment">#根据元素的值进行删除</span></span><br><span class="line">print(pet)</span><br><span class="line">pet.remove(<span class="string">'cat'</span>)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>]</span><br><span class="line">[<span class="string">'pig'</span>]</span><br><span class="line"><span class="comment">#删除一个不存在值</span></span><br><span class="line">pet.remove(<span class="string">'d'</span>)</span><br><span class="line">print(pet)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-16</span><span class="number">-086</span>f691d7e32&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> <span class="comment">#删除一个不存在值</span></span><br><span class="line">----&gt; 2 pet.remove('d')</span><br><span class="line">      <span class="number">3</span> print(pet)</span><br><span class="line"></span><br><span class="line">ValueError: list.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> list</span><br><span class="line"><span class="comment">#删除的值必须是真实存在的，不然就会报错</span></span><br></pre></td></tr></table></figure><p><strong>列表排序</strong></p><p>按照26个字母的顺序进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义列表：汽车的品牌</span></span><br><span class="line">print(<span class="string">'原始顺序：'</span>)</span><br><span class="line">brand = [<span class="string">'audi'</span>,<span class="string">'bmw'</span>,<span class="string">'toyota'</span>,<span class="string">'byd'</span>,<span class="string">'luhu'</span>]</span><br><span class="line">print(brand)</span><br><span class="line"><span class="comment">#临时排序</span></span><br><span class="line">print(<span class="string">'临时排序：'</span>)</span><br><span class="line">print(sorted(brand))</span><br><span class="line">print(brand)</span><br><span class="line"><span class="comment">#永久排序</span></span><br><span class="line">print(<span class="string">'永久排序：'</span>)</span><br><span class="line">brand.sort()</span><br><span class="line">print(brand)</span><br><span class="line"><span class="comment">#倒序排序</span></span><br><span class="line">print(<span class="string">'倒序排序：'</span>)</span><br><span class="line">brand.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(brand)</span><br><span class="line">原始顺序：</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>, <span class="string">'byd'</span>, <span class="string">'luhu'</span>]</span><br><span class="line">临时排序：</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'byd'</span>, <span class="string">'luhu'</span>, <span class="string">'toyota'</span>]</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>, <span class="string">'byd'</span>, <span class="string">'luhu'</span>]   <span class="comment">#排完序之后就又变会原来的顺序了</span></span><br><span class="line">永久排序：</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'byd'</span>, <span class="string">'luhu'</span>, <span class="string">'toyota'</span>]</span><br><span class="line">倒序排序：</span><br><span class="line">[<span class="string">'toyota'</span>, <span class="string">'luhu'</span>, <span class="string">'byd'</span>, <span class="string">'bmw'</span>, <span class="string">'audi'</span>]</span><br></pre></td></tr></table></figure><p><strong>获取列表的长度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取列表的长度</span></span><br><span class="line">print(len(brand))</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>常见错误：索引越界</strong></p><p>比如说列表长度为5，也就是说索引最多到4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正确索引</span></span><br><span class="line">print(brand[<span class="number">4</span>])</span><br><span class="line">audi</span><br><span class="line"><span class="comment">#错误索引，索引越界</span></span><br><span class="line">print(brand[<span class="number">5</span>])</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IndexError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-10</span><span class="number">-173</span>eb23c555f&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 print(brand[5])</span><br><span class="line"></span><br><span class="line">IndexError: list index out of range <span class="comment">#索引错误，列表索引超出范围</span></span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><strong>列表练习（一）</strong></p><blockquote><ol><li>定义一个列表，存储5个科目名称 </li><li>新增科目（末尾新增&amp;指定位置新增） </li><li>修改科目 </li><li>删除科目，并且在打印科目列表的时候，能够显示删除了哪个科目 </li><li>删除指定名称的科目 </li><li>删除第2个科目 </li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、定义一个列表，存储5个科目名称</span></span><br><span class="line">print(<span class="string">'定义列表：'</span>)</span><br><span class="line">subjects = [<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,<span class="string">'物理'</span>,<span class="string">'历史'</span>]</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#2、新增科目（末尾新增&amp;指定位置新增）</span></span><br><span class="line"><span class="comment">#末尾新增</span></span><br><span class="line">print(<span class="string">'末尾新增：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects.append(<span class="string">'化学'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#指定位置新增</span></span><br><span class="line">print(<span class="string">'指定位置新增：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects.insert(<span class="number">0</span>,<span class="string">'生物'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#3、修改科目</span></span><br><span class="line">print(<span class="string">'修改科目：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects[<span class="number">1</span>] = <span class="string">'政治'</span></span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#4、删除科目，并且在打印科目列表的时候，能够显示产出了哪个科目</span></span><br><span class="line">print(<span class="string">'删除科目，并且显示删除了哪个科目：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">new_subjects = subjects.pop()</span><br><span class="line">print(new_subjects)</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#5、删除指定名称的科目</span></span><br><span class="line">print(<span class="string">'删除指定名称的科目：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects.remove(<span class="string">'物理'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#6、删除第二个科目</span></span><br><span class="line">print(<span class="string">'删除第二个科目：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects.pop(<span class="number">1</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">定义列表：</span><br><span class="line">[<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>]</span><br><span class="line">末尾新增：</span><br><span class="line">[<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>]</span><br><span class="line">[<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">指定位置新增：</span><br><span class="line">[<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">修改科目：</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">删除科目，并且显示删除了哪个科目：</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">化学</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>]</span><br><span class="line">删除指定名称的科目：</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>]</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'历史'</span>]</span><br><span class="line">删除第二个科目：</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'历史'</span>]</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'历史'</span>]</span><br></pre></td></tr></table></figure><p><strong>列表练习（二）</strong> </p><blockquote><ol><li>将5个城市的名称存储到列表中，并且保证名称不是按照字母顺序排列的 </li><li>打印出原始的城市列表信息 </li><li>使用sorted()方法按字母顺序打印城市列表，但是不要修改列表元素的顺序 </li><li>打印该列表，确认城市名称排列顺序没有被修改 </li><li>使用sort()方法排列城市名称，确保永久性修改排列顺序</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、将5个城市的名称存储带列表中，并且保证名称不是按照字母顺序排列的</span></span><br><span class="line">print(<span class="string">'定义城市列表：'</span>)</span><br><span class="line">city = [<span class="string">'zhengzhou'</span>,<span class="string">'shanghai'</span>,<span class="string">'beijing'</span>,<span class="string">'guangzhou'</span>,<span class="string">'luoyang'</span>]</span><br><span class="line"><span class="comment">#2、打印出来原始的城市列表信息</span></span><br><span class="line">print(<span class="string">'原始列表信息：'</span>)</span><br><span class="line">print(city)</span><br><span class="line"><span class="comment">#3、使用sorted()方法按字母顺序打印城市列表，但不要修改列表元素的顺序</span></span><br><span class="line">print(<span class="string">'sorted()方法排序--临时排序：'</span>)</span><br><span class="line">print(city)</span><br><span class="line">print(sorted(city))</span><br><span class="line"><span class="comment">#4、打印该列表，确认城市名称排序没有被修改</span></span><br><span class="line">print(<span class="string">'验证城市名称排序没有被修改：'</span>)</span><br><span class="line">print(city)</span><br><span class="line"><span class="comment">#5、使用sort()方法排序城市名称，确保永久性排列顺序</span></span><br><span class="line">print(<span class="string">'使用sort()排序--永久排序：'</span>)</span><br><span class="line">city.sort()</span><br><span class="line">print(city)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">定义城市列表：</span><br><span class="line">原始列表信息：</span><br><span class="line">[<span class="string">'zhengzhou'</span>, <span class="string">'shanghai'</span>, <span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>]</span><br><span class="line">sorted()方法排序--临时排序：</span><br><span class="line">[<span class="string">'zhengzhou'</span>, <span class="string">'shanghai'</span>, <span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>]</span><br><span class="line">[<span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>, <span class="string">'shanghai'</span>, <span class="string">'zhengzhou'</span>]</span><br><span class="line">验证城市名称排序没有被修改：</span><br><span class="line">[<span class="string">'zhengzhou'</span>, <span class="string">'shanghai'</span>, <span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>]</span><br><span class="line">使用sort()排序--永久排序：</span><br><span class="line">[<span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>, <span class="string">'shanghai'</span>, <span class="string">'zhengzhou'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型之列表的进阶操作</title>
    <link href="https://gilbert2.gitee.io/maisy/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html"/>
    <id>https://gilbert2.gitee.io/maisy/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2020-03-13T11:48:20.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python数据类型之列表的进阶操作"><a href="#Python数据类型之列表的进阶操作" class="headerlink" title="Python数据类型之列表的进阶操作"></a>Python数据类型之列表的进阶操作</h3><p><strong>遍历</strong></p><p>重复性的内容需要按照步骤，分步式的读取出来</p><p>对文件内容已经有相似结构的循环读取</p><blockquote><ol><li>for循环</li><li>魔法推导式</li><li>常见的错误：缩进错误、遗漏冒号</li></ol></blockquote><p><strong>创建数值列表</strong></p><blockquote><ol><li><p>range(参数1，参数2，参数3)：包头不包尾</p><p>​    参数1：起始值（包含自己）</p><p>​    参数2：终止值（不包含自己）</p><p>​    参数3：步长（间隔数）</p></li><li><p>创建数字列表</p></li><li><p>数字列表的简单统计计算{最大值：max()、最小值：min()、总和：sum() }</p></li></ol></blockquote><p><strong>切片</strong></p><p>把一段数据进行分割</p><blockquote><ol><li><p>遍历切片</p></li><li><p>复制列表(把某一个列表中的数据给别的一个，同样的制造一份出来)</p></li></ol></blockquote><p><strong>元组</strong></p><blockquote><ol><li><p>元组与列表的区别（列表的值可以修改，元组的值不可修改）</p></li><li><p>定义元组</p></li><li><p>修改元组变量</p></li></ol></blockquote><h4 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个列表</span></span><br><span class="line">names = [<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"赵六"</span>,<span class="string">"田七"</span>]</span><br><span class="line">zhang_san = names[<span class="number">0</span>]</span><br><span class="line">li_si = names[<span class="number">1</span>]</span><br><span class="line">wang_wu = names[<span class="number">2</span>]</span><br><span class="line">print(zhang_san+<span class="string">" "</span>+li_si+<span class="string">" "</span>+wang_wu)</span><br><span class="line">张三 李四 王五</span><br><span class="line"><span class="comment">#想要读取某一个值，这样就很麻烦</span></span><br><span class="line"><span class="comment">#使用for循环来读取，重复的有规律的读取内容</span></span><br></pre></td></tr></table></figure><p><strong>for循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name,end=<span class="string">" "</span>)</span><br><span class="line">张三 李四 王五 赵六 田七</span><br><span class="line"><span class="comment">#如果是英文的名字，还可以进行一些操作，比如说大小写转换</span></span><br><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2:</span><br><span class="line">    print(name.title())</span><br><span class="line">Anlen</span><br><span class="line">Bob</span><br></pre></td></tr></table></figure><p><strong>魔法推导式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[name <span class="keyword">for</span> name <span class="keyword">in</span> names2]</span><br><span class="line">-----------------------------------------------------------------------------------------[<span class="string">'anlen'</span>, <span class="string">'bob'</span>]</span><br></pre></td></tr></table></figure><p><strong>常见的错误:</strong></p><p><strong>缩进错误</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2:</span><br><span class="line">print(name.title())  <span class="comment">#print没有缩进</span></span><br><span class="line">  File <span class="string">"&lt;ipython-input-12-89d8b78a3789&gt;"</span>, line <span class="number">3</span></span><br><span class="line">    print(name.title())</span><br><span class="line">    ^</span><br><span class="line">IndentationError: expected an indented bloc  <span class="comment">#提示缩进错误</span></span><br></pre></td></tr></table></figure><p><strong>遗漏冒号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2   <span class="comment">#遗漏冒号</span></span><br><span class="line">    print(name.title())</span><br><span class="line">  File <span class="string">"&lt;ipython-input-13-ee6eafbd451b&gt;"</span>, line <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names2</span><br><span class="line">                      ^</span><br><span class="line">SyntaxError: invalid syntax   <span class="comment">#提示语法错误</span></span><br></pre></td></tr></table></figure><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#循环输出1到10</span></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#这样会很麻烦，使用range()就会很方便</span></span><br></pre></td></tr></table></figure><p><strong>range(参数1，参数2，参数3)：包头不包尾</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#输出1-10之间的偶数</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>):  <span class="comment">#cong2开始每次加2</span></span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="comment">#输出1-10之间的奇数</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):  <span class="comment">#从1开始每次加2</span></span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="comment">#输出奇数的平方</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    print(num**<span class="number">2</span>,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">9</span> <span class="number">25</span> <span class="number">49</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><p><strong>创建数字列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">print(numbers)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p><strong>数字列表的简单计算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数字列表的最大值、最小值、总和</span></span><br><span class="line">print(max(numbers))</span><br><span class="line">print(min(numbers))</span><br><span class="line">print(sum(numbers))</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个列表</span></span><br><span class="line">pets = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"duck"</span>,<span class="string">"pig"</span>]</span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><p><strong>把数据进行分割，截取特定的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取开头</span></span><br><span class="line">pets[<span class="number">0</span>]  </span><br><span class="line"><span class="string">'cat'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#中间截取</span></span><br><span class="line">pets[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="string">'dog'</span>, <span class="string">'duck'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#全部截取</span></span><br><span class="line">pets[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#取最后</span></span><br><span class="line">pets[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'pig'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从开头到结尾</span></span><br><span class="line">pets[<span class="number">0</span>:]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从中间某一个到结尾</span></span><br><span class="line">pets[<span class="number">1</span>:]</span><br><span class="line">[<span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br></pre></td></tr></table></figure><p><strong>遍历切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> pets[<span class="number">-3</span>:]:</span><br><span class="line">    print(pet,end=<span class="string">" "</span>)</span><br><span class="line">dog duck pig</span><br></pre></td></tr></table></figure><p><strong>复制列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">games = [<span class="string">'王者'</span>,<span class="string">'吃鸡'</span>,<span class="string">'英雄联盟'</span>]</span><br><span class="line"><span class="comment">#friend_games = ['王者','吃鸡']  //这样代码创重复，是不可取的</span></span><br><span class="line">friend_games = games[:<span class="number">2</span>]</span><br><span class="line">print(<span class="string">'我喜欢的游戏有:'</span>+str(games))</span><br><span class="line">print(<span class="string">'我朋友喜欢的游戏有:'</span>+str(friend_games)</span><br><span class="line">我喜欢的游戏有:[<span class="string">'王者'</span>, <span class="string">'吃鸡'</span>, <span class="string">'英雄联盟'</span>]</span><br><span class="line">我朋友喜欢的游戏有:[<span class="string">'王者'</span>, <span class="string">'吃鸡'</span>]</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义列表</span></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">print(nums)</span><br><span class="line"><span class="comment">#定义元组</span></span><br><span class="line">numbers = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">print(numbers)</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-1</span><span class="number">-9</span>b5931007d67&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">5</span> <span class="comment">#定义元组</span></span><br><span class="line">      <span class="number">6</span> numbers = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">----&gt; 7 numbers[0] = 10</span><br><span class="line">      <span class="number">8</span> print(numbers[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment  <span class="comment">#tuple是只读，而不支持写</span></span><br><span class="line">     <span class="comment">#证明元组的值是不能被修改的</span></span><br><span class="line"><span class="comment">#但它的访问形式和列表一样</span></span><br><span class="line">print(nums[<span class="number">0</span>])</span><br><span class="line">print(numbers[<span class="number">0</span>])</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>给元组变量赋值，打包给它换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(numbers)</span><br><span class="line">numbers = (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(numbers)</span><br><span class="line">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>但是有些地方的值是不允许改变的，也不能改变的，比如（性别），这就可以使用元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sex = (<span class="string">"男"</span>,<span class="string">"女"</span>)</span><br><span class="line">print(sex)</span><br><span class="line">(<span class="string">'男'</span>, <span class="string">'女'</span>)   <span class="comment">#这个值就是固定的，不能被改，也没法该</span></span><br></pre></td></tr></table></figure><p>在日常生活中，要确定内容是否要进行二次修改来决定使用元组，还是列表</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><strong>批量生成50个C类IP–192.168.1.x</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pre = <span class="string">'192.168.1.'</span></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> list(range(<span class="number">1</span>,<span class="number">51</span>)):</span><br><span class="line">    print(pre+str(ip),end= <span class="string">"        "</span>)</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.7</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.8</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.9</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.13</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.15</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.16</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.17</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.18</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.19</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.20</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.21</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.22</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.23</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.24</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.25</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.26</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.27</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.28</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.29</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.30</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.31</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.32</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.33</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.34</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.35</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.36</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.37</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.38</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.39</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.40</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.41</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.42</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.43</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.44</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.45</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.46</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.47</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.48</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.49</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.50</span></span><br></pre></td></tr></table></figure><p><strong>for的双重循环使用</strong></p><p>使用口诀：</p><blockquote><p>外层循环控制行数</p><p>内层循环控制列数</p><p>外层循环执行1次，内层循环执行1轮</p></blockquote><p><strong>打印数字直角三角形</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        print(j+<span class="number">1</span>,end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="number">1234567</span></span><br><span class="line"><span class="number">12345678</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p><strong>打印九九乘法表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        print(str(j+<span class="number">1</span>)+<span class="string">"x"</span>+str(i)+<span class="string">"="</span>+str(i*(j+<span class="number">1</span>)),end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="number">1</span>x1=<span class="number">1</span> </span><br><span class="line"><span class="number">1</span>x2=<span class="number">2</span> <span class="number">2</span>x2=<span class="number">4</span> </span><br><span class="line"><span class="number">1</span>x3=<span class="number">3</span> <span class="number">2</span>x3=<span class="number">6</span> <span class="number">3</span>x3=<span class="number">9</span> </span><br><span class="line"><span class="number">1</span>x4=<span class="number">4</span> <span class="number">2</span>x4=<span class="number">8</span> <span class="number">3</span>x4=<span class="number">12</span> <span class="number">4</span>x4=<span class="number">16</span> </span><br><span class="line"><span class="number">1</span>x5=<span class="number">5</span> <span class="number">2</span>x5=<span class="number">10</span> <span class="number">3</span>x5=<span class="number">15</span> <span class="number">4</span>x5=<span class="number">20</span> <span class="number">5</span>x5=<span class="number">25</span> </span><br><span class="line"><span class="number">1</span>x6=<span class="number">6</span> <span class="number">2</span>x6=<span class="number">12</span> <span class="number">3</span>x6=<span class="number">18</span> <span class="number">4</span>x6=<span class="number">24</span> <span class="number">5</span>x6=<span class="number">30</span> <span class="number">6</span>x6=<span class="number">36</span> </span><br><span class="line"><span class="number">1</span>x7=<span class="number">7</span> <span class="number">2</span>x7=<span class="number">14</span> <span class="number">3</span>x7=<span class="number">21</span> <span class="number">4</span>x7=<span class="number">28</span> <span class="number">5</span>x7=<span class="number">35</span> <span class="number">6</span>x7=<span class="number">42</span> <span class="number">7</span>x7=<span class="number">49</span> </span><br><span class="line"><span class="number">1</span>x8=<span class="number">8</span> <span class="number">2</span>x8=<span class="number">16</span> <span class="number">3</span>x8=<span class="number">24</span> <span class="number">4</span>x8=<span class="number">32</span> <span class="number">5</span>x8=<span class="number">40</span> <span class="number">6</span>x8=<span class="number">48</span> <span class="number">7</span>x8=<span class="number">56</span> <span class="number">8</span>x8=<span class="number">64</span> </span><br><span class="line"><span class="number">1</span>x9=<span class="number">9</span> <span class="number">2</span>x9=<span class="number">18</span> <span class="number">3</span>x9=<span class="number">27</span> <span class="number">4</span>x9=<span class="number">36</span> <span class="number">5</span>x9=<span class="number">45</span> <span class="number">6</span>x9=<span class="number">54</span> <span class="number">7</span>x9=<span class="number">63</span> <span class="number">8</span>x9=<span class="number">72</span> <span class="number">9</span>x9=<span class="number">81</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python的变量和简单的数据类型</title>
    <link href="https://gilbert2.gitee.io/maisy/Python%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://gilbert2.gitee.io/maisy/Python%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</id>
    <published>2020-03-10T16:00:00.000Z</published>
    <updated>2020-03-11T09:59:20.859Z</updated>
    
    <content type="html"><![CDATA[<h4 id="IPython介绍"><a href="#IPython介绍" class="headerlink" title="IPython介绍"></a>IPython介绍</h4><p><code>ipython</code>是一个<code>python</code>的交互式<code>shell</code>，比默认的<code>python shell</code>好用得多，支持变量自动补全，自动缩进，支持<code>bash shell</code>命令，内置了许多很有用的功能和函数。学习<code>ipython</code>将会让我们以一种更高的效率来使用<code>python</code>。同时它也是利用Python进行科学计算和交互可视化的一个最佳的平台</p><p><strong>IPython提供了两个主要的组件：</strong></p><blockquote><ul><li>一个强大的python交互式shell </li><li>供Jupyter notebooks使用的一个Jupyter内核（IPython notebook）</li></ul></blockquote><p><strong>IPython的主要功能如下：</strong></p><blockquote><ul><li>运行ipython控制台 </li><li>使用ipython作为系统shell </li><li>使用历史输入(history) </li><li>Tab补全 </li><li>使用<code>%run</code>命令运行脚本 </li><li>使用<code>%timeit</code>命令快速测量时间 </li><li>使用<code>%pdb</code>命令快速debug </li><li>使用<code>pylab</code>进行交互计算 </li><li>使用IPython Notebook</li></ul></blockquote><p><strong>安装IPython</strong></p><p>ipython支持Python2.7版本或者3.3以上的版本，我用的是windows下的python 3.8.2版本。</p><p><strong>安装ipython很简单，可以直接使用pip管理工具即可:</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;pip3 install ipython</span><br></pre></td></tr></table></figure><p><strong>下载太慢可以使用国内镜像：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;pip3 install <span class="literal">-i</span> https://pypi.douban.com/simple ipython</span><br></pre></td></tr></table></figure><p><strong>查看当前库</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;pip3 list</span><br><span class="line">Package          Version</span><br><span class="line">---------------- -------</span><br><span class="line">backcall         <span class="number">0.1</span>.<span class="number">0</span></span><br><span class="line">colorama         <span class="number">0.4</span>.<span class="number">3</span></span><br><span class="line">decorator        <span class="number">4.4</span>.<span class="number">2</span></span><br><span class="line">ipython          <span class="number">7.13</span>.<span class="number">0</span></span><br><span class="line">ipython<span class="literal">-genutils</span> <span class="number">0.2</span>.<span class="number">0</span></span><br><span class="line">jedi             <span class="number">0.16</span>.<span class="number">0</span></span><br><span class="line">parso            <span class="number">0.6</span>.<span class="number">2</span></span><br><span class="line">pickleshare      <span class="number">0.7</span>.<span class="number">5</span></span><br><span class="line">pip              <span class="number">19.2</span>.<span class="number">3</span></span><br><span class="line">prompt<span class="literal">-toolkit</span>   <span class="number">3.0</span>.<span class="number">4</span></span><br><span class="line">Pygments         <span class="number">2.6</span>.<span class="number">1</span></span><br><span class="line">setuptools       <span class="number">41.2</span>.<span class="number">0</span></span><br><span class="line">six              <span class="number">1.14</span>.<span class="number">0</span></span><br><span class="line">traitlets        <span class="number">4.3</span>.<span class="number">3</span></span><br><span class="line">wcwidth          <span class="number">0.1</span>.<span class="number">8</span></span><br><span class="line">WARNING: You are <span class="keyword">using</span> pip version 19.2.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'python -m pip install --upgrade pip'</span> command.</span><br></pre></td></tr></table></figure><p><strong>根据提示更新下载源</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;python3 <span class="literal">-m</span> pip install -<span class="literal">-upgrade</span> pip</span><br></pre></td></tr></table></figure><p><strong>更显失败的利用豆瓣镜像源更新</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;python <span class="literal">-m</span> pip install -<span class="literal">-upgrade</span> pip <span class="literal">-i</span> https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p><strong>交互式使用IPython</strong></p><p>IPython支持所有python的标准输入输出，也就是我们在IDLE中或者Python shell中能用的，在IPython中都能够使用，唯一的不同之处使ipython会使用<code>In [x]</code>和<code>Out [x]</code>表示输入输出，并表示出相应的序号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在cmd窗口输出ipython即可</span></span><br><span class="line">C:\Users\Admin&gt;ipython</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.2</span> (tags/v3<span class="number">.8</span><span class="number">.2</span>:<span class="number">7</span>b3ab59, Feb <span class="number">25</span> <span class="number">2020</span>, <span class="number">23</span>:<span class="number">03</span>:<span class="number">10</span>) [MSC v<span class="number">.1916</span> <span class="number">64</span> bit (AMD64)]</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.13</span><span class="number">.0</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: print(<span class="string">'hello python!'</span>)</span><br><span class="line">hello python!</span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">In [<span class="number">2</span>]: exit</span><br></pre></td></tr></table></figure><h4 id="Jupyter-Notebook介绍"><a href="#Jupyter-Notebook介绍" class="headerlink" title="Jupyter Notebook介绍"></a>Jupyter Notebook介绍</h4><p>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。——<a href="https://link.jianshu.com/?t=https%3A%2F%2Fjupyter-notebook.readthedocs.io%2Fen%2Fstable%2Fnotebook.html" target="_blank" rel="noopener">Jupyter Notebook官方介绍</a></p><p>简而言之，Jupyter Notebook是以网页的形式打开，可以在网页页面中<strong>直接</strong>编写代码和运行代码，代码的运行结果也会直接在代码块下显示。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释</p><p><strong>组成部分</strong></p><p><strong>1、网页应用</strong></p><p>网页应用即基于网页形式的、结合了编写说明文档、数学公式、交互计算和其他富媒体形式的工具。<strong>简言之，网页应用是可以实现各种功能的工具</strong></p><p><strong>2、文档</strong></p><p>即Jupyter Notebook中所有交互计算、编写说明文档、数学公式、图片以及其他富媒体形式的输入和输出，都是以文档的形式体现的。</p><p>这些文档是保存为后缀名为<code>.ipynb</code>的<code>JSON</code>格式文件，不仅便于版本控制，也方便与他人共享。</p><p>此外，文档还可以导出为：HTML、LaTeX、PDF等格</p><p><strong>Jupyter Notebook的主要特点</strong></p><blockquote><ul><li>编程时具有<strong>语法高亮</strong>、<em>缩进</em>、<em>tab补全</em>的功能。</li><li>可直接通过浏览器运行代码，同时在代码块下方展示运行结果。</li><li>以富媒体格式展示计算结果。富媒体格式包括：HTML，LaTeX，PNG，SVG等。</li><li>对代码编写说明文档或语句时，支持Markdown语法。</li><li>支持使用LaTeX编写数学性说明</li></ul></blockquote><p><strong>安装Jupyter Notebook</strong></p><p><strong>安装前提</strong></p><p>安装Jupyter Notebook的前提是需要安装了Python（3.3版本及以上，或2.7版本</p><p><strong>使用pip命令安装</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;pip3 install <span class="literal">-i</span> https://pypi.douban.com/simple jupyter</span><br></pre></td></tr></table></figure><p><strong>运行Jupyter Notebook</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;jupyter  notebook</span><br></pre></td></tr></table></figure><p>执行命令之后，在终端中将会显示一系列notebook的服务器信息，同时浏览器将会自动启动Jupyter Notebook</p><p><strong>启动过程中终端显示内容如下：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.207</span> <span class="type">NotebookApp</span>] Serving notebooks from local directory: F:\python1\<span class="number">1</span></span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.208</span> <span class="type">NotebookApp</span>] The Jupyter Notebook is running at:</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.208</span> <span class="type">NotebookApp</span>] http://localhost:<span class="number">8888</span>/?token=c3ac105eef676358b314723d6d56a53ca773fac409c6fac8</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.208</span> <span class="type">NotebookApp</span>]  or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=c3ac105eef676358b314723d6d56a53ca773fac409c6fac8</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.208</span> <span class="type">NotebookApp</span>] Use Control<span class="literal">-C</span> to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[<span class="type">C</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.227</span> <span class="type">NotebookApp</span>]</span><br><span class="line"></span><br><span class="line">    To access the notebook, open this file <span class="keyword">in</span> a browser:</span><br><span class="line">        file:///C:/Users/Admin/AppData/Roaming/jupyter/runtime/nbserver<span class="literal">-6444</span><span class="literal">-open</span>.html</span><br><span class="line">    Or copy and paste one of these URLs:</span><br><span class="line">        http://localhost:<span class="number">8888</span>/?token=c3ac105eef676358b314723d6d56a53ca773fac409c6fac8</span><br><span class="line">     or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=c3ac105eef676358b314723d6d56a53ca773fac409c6fac8</span><br></pre></td></tr></table></figure><p>注意：之后在Jupyter Notebook的所有操作，都请保持终端<strong>不要关闭</strong>，因为一旦关闭终端，就会断开与本地服务器的链接，你将无法在Jupyter Notebook中进行其他操作啦<br><img src="https://img-blog.csdnimg.cn/20200311175251273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果你同时启动了多个Jupyter Notebook，由于默认端口“8888”被占用，因此地址栏中的数字将从“8888”起，每多启动一个Jupyter Notebook数字就加1，如“8889”、“8890”……</p><p><strong>启动服务器不打开浏览器</strong></p><p>如果你只是想启动Jupyter Notebook的服务器但不打算立刻进入到主页面，那么就无需立刻启动浏览器。在终端中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\python1\<span class="number">1</span>&gt;jupyter  notebook  -<span class="literal">-no</span><span class="literal">-browser</span></span><br></pre></td></tr></table></figure><p>此时，将会在终端显示启动的服务器信息，并在服务器启动之后，显示出打开浏览器页面的链接。当你需要启动浏览器页面时，只需要复制链接，并粘贴在浏览器的地址栏中，轻按回车变转到了你的Jupyter Notebook页面</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">F:\python1\<span class="number">1</span>&gt;jupyter  notebook  -<span class="literal">-no</span><span class="literal">-browser</span></span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.674</span> <span class="type">NotebookApp</span>] Serving notebooks from local directory: F:\python1\<span class="number">1</span></span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.675</span> <span class="type">NotebookApp</span>] The Jupyter Notebook is running at:</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.675</span> <span class="type">NotebookApp</span>] http://localhost:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.675</span> <span class="type">NotebookApp</span>]  or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.675</span> <span class="type">NotebookApp</span>] Use Control<span class="literal">-C</span> to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[<span class="type">C</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.678</span> <span class="type">NotebookApp</span>]</span><br><span class="line"></span><br><span class="line">    To access the notebook, open this file <span class="keyword">in</span> a browser:</span><br><span class="line">        file:///C:/Users/Admin/AppData/Roaming/jupyter/runtime/nbserver<span class="literal">-7204</span><span class="literal">-open</span>.html</span><br><span class="line">    Or copy and paste one of these URLs:</span><br><span class="line">        http://localhost:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br><span class="line">     or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br></pre></td></tr></table></figure><p>浏览器输入：<code>http://localhost:8888</code>就可以访问<br><img src="https://img-blog.csdnimg.cn/20200311175327800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>根据终端的提示输入token</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Or copy and paste one of these URLs:</span><br><span class="line">    http://localhost:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br><span class="line"> or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200311175345596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个目录取决于你在哪个目录下启动的</p><h4 id="安装完成后就开始使用"><a href="#安装完成后就开始使用" class="headerlink" title="安装完成后就开始使用"></a>安装完成后就开始使用</h4><h4 id="什么是变量："><a href="#什么是变量：" class="headerlink" title="什么是变量："></a>什么是变量：</h4><blockquote><p><strong>简单理解来说就是，起一个名字用等于号给它赋予一个值，这就是变量（固定不变的量叫做常量）</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">sum1 = <span class="number">0</span>  <span class="comment">#定义变量2</span></span><br><span class="line">sum2 = <span class="number">1</span>  <span class="comment">#定义变量2</span></span><br><span class="line">print(sum1) <span class="comment">#输出定义的变量1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">print(sum2)  <span class="comment">#输出定义的变量2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">#也可以一次定义多个变量</span></span><br><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">print(b)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">print(c)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">print(a,b,c)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>变量的用法有什么好处：</strong></p><blockquote><p><strong>在某种程度上可以实现代码的复用</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要很多地方都用到这个数据，而且这些数据还会存放在计算机内，占用内存</span></span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line"><span class="comment">#定义一个变量message="北京欢迎你"，message就比北京欢迎你占的字符小，占用内存也小</span></span><br><span class="line">message = <span class="string">"北京欢迎你"</span></span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br></pre></td></tr></table></figure><p><strong>变量的命令规则：</strong></p><blockquote><ul><li>只能包换字母、数字、下划线，但是不能以数字打头</li><li>不能包含空格，但是可以用下划线分隔其中的单词</li><li>不能使用Python关键字和函数的名称用作变量，比如：import、class、and、return、def、from …..等等</li><li>变量名应该简短并且见名之意</li><li>慎用小写字母 i 和大写字母 O（容易和数字混淆的字母）</li></ul></blockquote><p><strong>只能包换字母、数字、下划线，但是不能以数字打头</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#错误例子</span></span><br><span class="line">$a=<span class="number">89</span></span><br><span class="line">$a</span><br><span class="line">  File <span class="string">"&lt;ipython-input-6-cf2d0c5b3bb7&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    $a=<span class="number">89</span></span><br><span class="line">    ^</span><br><span class="line">SyntaxError: invalid  <span class="comment">#非法的输入</span></span><br><span class="line"><span class="comment">#数字开头也不行</span></span><br><span class="line"><span class="number">1</span>a=<span class="number">89</span></span><br><span class="line"><span class="number">1</span>a</span><br><span class="line">  File <span class="string">"&lt;ipython-input-7-e78e6d530639&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="number">1</span>a=<span class="number">89</span></span><br><span class="line">     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p><strong>不能包含空格，但是可以用下划线分隔其中的单词</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#包换空格示例</span></span><br><span class="line">a b=<span class="number">89</span></span><br><span class="line">a b</span><br><span class="line">  File <span class="string">"&lt;ipython-input-9-1917d5b6e6ca&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    a b=<span class="number">89</span></span><br><span class="line">      ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="comment">#以下划线分隔</span></span><br><span class="line">a_b=<span class="number">89</span></span><br><span class="line">a_b</span><br><span class="line"><span class="number">89</span></span><br></pre></td></tr></table></figure><p><strong>不能使用Python关键字和函数的名称用作变量</strong></p><p><strong>比如：import、class、and、return、def、from …..等等</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> = <span class="string">'ere'</span></span><br><span class="line">  File <span class="string">"&lt;ipython-input-11-58ece2b8d285&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">import</span> = <span class="string">'ere'</span></span><br><span class="line">           ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="keyword">and</span> = <span class="string">"ddd"</span></span><br><span class="line">  File <span class="string">"&lt;ipython-input-13-9498d9360549&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">and</span> = <span class="string">"ddd"</span></span><br><span class="line">    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="comment">#只要变量名称是绿色或者是红色的就不能使用</span></span><br></pre></td></tr></table></figure><p><strong>变量名应该简短并且见名之意</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="number">1</span></span><br><span class="line">num2=<span class="number">2</span></span><br><span class="line">teacher_name = <span class="string">"苏珊"</span>  <span class="comment">#老师的名字</span></span><br><span class="line">student_name = <span class="string">"吉米"</span>  <span class="comment">#学生的名字</span></span><br><span class="line">lengh_of_student = <span class="number">2</span>  <span class="comment">#学生名字的长度</span></span><br></pre></td></tr></table></figure><p><strong>慎用小写字母 i 和大写字母 O</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l=<span class="number">1</span>  <span class="comment">#小写L=数字1</span></span><br><span class="line">O=<span class="number">0</span>  <span class="comment">#大写O=数字0</span></span><br><span class="line">i=<span class="number">1</span>  <span class="comment">#小写I=数字1</span></span><br><span class="line"><span class="comment">#这些容以与数字混淆的慎用</span></span><br></pre></td></tr></table></figure><p><strong>使用常见的错误：</strong></p><blockquote><p><strong>变量未定义就使用</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>=(num)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-15</span>-f827eafea48a&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 print=(num)</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'num'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="comment">#变量要定义后再进行使用</span></span><br></pre></td></tr></table></figure><h4 id="Python常用的数据类型"><a href="#Python常用的数据类型" class="headerlink" title="Python常用的数据类型"></a>Python常用的数据类型</h4><p><strong>1、字符串</strong></p><p>Python中的字符串类型是一组包含数字、字母和符号的集合，作为一个整体使用</p><p><strong>字符串的表达形式</strong></p><p>在Python中有三种表示字符串的方式，单引号、双引号、三引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'hello'</span></span><br><span class="line">str2 = <span class="string">"world"</span></span><br><span class="line">str3 = <span class="string">'''</span></span><br><span class="line"><span class="string">春眠不觉晓</span></span><br><span class="line"><span class="string">处处闻啼鸟</span></span><br><span class="line"><span class="string">夜来风雨声</span></span><br><span class="line"><span class="string">花落知多少</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(str1)</span><br><span class="line">print(str2)</span><br><span class="line">print(str3)</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"></span><br><span class="line">春眠不觉晓</span><br><span class="line">处处闻啼鸟</span><br><span class="line">夜来风雨声</span><br><span class="line">花落知多少</span><br></pre></td></tr></table></figure><p>需要注意的是，单引号和双引号的作用是一样的，可以根据习惯使用，但是定义多行文字时，必须要使用三引号</p><p><strong>使用字符串的注意事项</strong></p><blockquote><ul><li>字符串的定义方式单引号、双引号、三引号大部分情况下作用是相同的，但在特殊情况下使用也有所区别，下面是需要注意的地方</li><li>单引号、双引号、三引号它们是成对出现的，如以单引号开头就要以单引号结尾，不能混合使用表示字符串</li><li>如果字符串中单独出现单引号或双引号，可以使用另一种引号定义</li><li>当字符串中出现单引号、双引号等特殊字符时，还可以使用转义字符定义。Python中的转移字符是“\”，只要在特殊字符前面加上“\”，就可以原样输出，而不用去管定义字符串使用的是单引号还是双引号</li></ul></blockquote><p><strong>字符串的常用方法</strong></p><blockquote><ul><li>修改字符串大小写（title、upper、lower）</li><li>拼接字符串（+、函数str() ）</li><li>添加空白（空格、换行符：\n、水平制表位：\t、end=’’：不进行换行直接连起来）</li><li>删除空白(开头：lstrip()、末尾：retrip()、两端：strip() )</li></ul></blockquote><p><strong>修改字符串大小写</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"ad loveLace"</span></span><br><span class="line">print(name.title())  <span class="comment">#首字母大写</span></span><br><span class="line">print(name.upper())  <span class="comment">#全部大写</span></span><br><span class="line">print(name.lower())  <span class="comment">#全部小写</span></span><br><span class="line">Ad Lovelace</span><br><span class="line">AD LOVELACE</span><br><span class="line">ad lovelace</span><br></pre></td></tr></table></figure><p><strong>拼接字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将name与要定义的age拼接起来</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">',今年'</span>+str(age)+<span class="string">'岁'</span>)</span><br><span class="line">我叫ad loveLace,今年<span class="number">18</span>岁</span><br></pre></td></tr></table></figure><p>PS：print输出的默认是字符串，而定义的age的值是数字，所以需要函数str() 将数字转化为字符串类型，不然会报错（<code>TypeError: can only concatenate str (not &quot;int&quot;) to str</code>）</p><p><strong>添加空白</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让18岁之间有空格</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">',今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,今年 <span class="number">18</span> 岁</span><br><span class="line"><span class="comment">#换行符：\n</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">',\n今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,</span><br><span class="line">今年 <span class="number">18</span> 岁</span><br><span class="line"><span class="comment">#水平制表为\t</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'我叫\t'</span>+name+<span class="string">',\n今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,</span><br><span class="line">今年 <span class="number">18</span> 岁</span><br><span class="line"><span class="comment">#end=''</span></span><br><span class="line">//先来看看不是使用end=<span class="string">''</span>的效果</span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">','</span>)</span><br><span class="line">print(<span class="string">'今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,</span><br><span class="line">今年 <span class="number">18</span> 岁      <span class="comment">#输出为了两行</span></span><br><span class="line">//使用end=<span class="string">''</span>将两行连起来</span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">','</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,今年 <span class="number">18</span> 岁</span><br></pre></td></tr></table></figure><p><strong>删除空白</strong></p><p>比如说在登录帐户的时候，一不小心手一抖多了个空格，但是是不允许有空格的，这时候就用到了删除空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量，值的坐中又均有空格</span></span><br><span class="line">content = <span class="string">" test demon "</span></span><br><span class="line">print(content)  <span class="comment">#没有改变的情况</span></span><br><span class="line">print(content.lstrip())  <span class="comment">#去掉左边的空格</span></span><br><span class="line">print(content.rstrip())  <span class="comment">#去掉右边的空格</span></span><br><span class="line">print(content.strip())  <span class="comment">#去掉两边的空格</span></span><br><span class="line"> test demon</span><br><span class="line">test demon </span><br><span class="line"> test demon</span><br><span class="line">test demon</span><br></pre></td></tr></table></figure><p><strong>常见的错误</strong></p><p>单引号里面含撇号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">say = <span class="string">'Let'</span>go!<span class="string">'</span></span><br><span class="line"><span class="string">  File "&lt;ipython-input-28-5ccc2ed9867a&gt;", line 1</span></span><br><span class="line"><span class="string">    say = '</span>Let<span class="string">'go!'</span></span><br><span class="line">               ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>如果引号里面需要用到撇号或着双引号，可以使用不用的引号引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#双引号里套撇号</span></span><br><span class="line">say_content = <span class="string">"Lest'go!"</span></span><br><span class="line">print(say_content)</span><br><span class="line">Lest<span class="string">'go!</span></span><br><span class="line"><span class="string">#三引号里套撇号</span></span><br><span class="line"><span class="string">s= '</span><span class="string">''</span>Let<span class="string">'go!'</span><span class="string">''</span>   <span class="comment">#这个就有点大材小用了，尽量别这样</span></span><br><span class="line">print(s)</span><br><span class="line">Let<span class="string">'go!</span></span><br><span class="line"><span class="string">#单引号里套双引号</span></span><br><span class="line"><span class="string">d = '</span><span class="string">"This is my book!"</span><span class="string">'</span></span><br><span class="line"><span class="string">print(d)</span></span><br><span class="line"><span class="string">"This is my book!"</span></span><br></pre></td></tr></table></figure><p><strong>2、数字</strong></p><p>数字类型包括整型、浮点型、布尔型等，声明时由Python内置的基本数据类型来管理变量，在程序的后台实现数值与类型的关联，以及转换等操作。根据变量的值自动判断变量的类型，我们无需关心变量空间是什么类型，只要知道创建的变量中存放了一个数，程序只是对这个数值进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">8</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">print(num1+num2)</span><br><span class="line">print(num1-num2)</span><br><span class="line">print(num1*num2)</span><br><span class="line">print(num1/num2)</span><br><span class="line">print(num1%num2</span><br><span class="line"><span class="number">8.5</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"><span class="number">4.0</span></span><br><span class="line"><span class="number">16.0</span></span><br><span class="line"><span class="number">0.0</span></span><br></pre></td></tr></table></figure><p><strong>注释（#号和三引号）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">以下代码是关于Python数据类型的演示案例</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#Python中的数字类型</span></span><br><span class="line">num1 = <span class="number">8</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">print(num1+num2)</span><br><span class="line">print(num1-num2)</span><br><span class="line">print(num1*num2)</span><br><span class="line">print(num1/num2)</span><br><span class="line">print(num1%num2)</span><br><span class="line"><span class="number">8.5</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"><span class="number">4.0</span></span><br><span class="line"><span class="number">16.0</span></span><br><span class="line"><span class="number">0.0</span></span><br></pre></td></tr></table></figure><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p>1、将用户的姓名存到一个变量中，并向该用户显示一条信息，显示内容为：“你好，艾瑞克，今天的Python课你学到东西了吗？”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"艾瑞克"</span></span><br><span class="line">print(<span class="string">'你好，'</span>+name+<span class="string">',今天的Python课你学到东西了吗'</span>)</span><br><span class="line">你好，艾瑞克,今天的Python课你学到东西了吗</span><br></pre></td></tr></table></figure><p>2、将一个人的名字存到变量中，再以小写、大写和首字母大写的方式显示这个人的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">noe_name = <span class="string">"mike"</span></span><br><span class="line">print(noe_name.lower())</span><br><span class="line">print(noe_name.upper())</span><br><span class="line">print(noe_name.title())</span><br><span class="line">mike</span><br><span class="line">MIKE</span><br><span class="line">Mike</span><br></pre></td></tr></table></figure><p>3、按一下格式打印诗词：</p><p>《自由》 </p><p>为人进出的门紧锁着;</p><p>想死的门敞开着。</p><p>有个病毒在外面高喊着:</p><p>“出来玩吧，给你自由！”</p><p>但我深深地知道……</p><p>出去了，不一定还能回来。</p><p>人的生命只有一次，</p><p>算球了，</p><p>再关十几天就自由了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">poem = <span class="string">'''</span></span><br><span class="line"><span class="string">《自由》 </span></span><br><span class="line"><span class="string">为人进出的门紧锁着;</span></span><br><span class="line"><span class="string">想死的门敞开着。</span></span><br><span class="line"><span class="string">有个病毒在外面高喊着:</span></span><br><span class="line"><span class="string">“出来玩吧，给你自由！”</span></span><br><span class="line"><span class="string">但我深深地知道……</span></span><br><span class="line"><span class="string">出去了，不一定还能回来。</span></span><br><span class="line"><span class="string">人的生命只有一次，</span></span><br><span class="line"><span class="string">算球了，</span></span><br><span class="line"><span class="string">再关十几天就自由了！</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(poem)</span><br><span class="line">《自由》 </span><br><span class="line">为人进出的门紧锁着;</span><br><span class="line">想死的门敞开着。</span><br><span class="line">有个病毒在外面高喊着:</span><br><span class="line">“出来玩吧，给你自由！”</span><br><span class="line">但我深深地知道……</span><br><span class="line">出去了，不一定还能回来。</span><br><span class="line">人的生命只有一次，</span><br><span class="line">算球了，</span><br><span class="line">再关十几天就自由了</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+GitLba针对k8s集群持续集成</title>
    <link href="https://gilbert2.gitee.io/maisy/Jenkins+GitLba%E9%92%88%E5%AF%B9k8s%E9%9B%86%E7%BE%A4%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90.html"/>
    <id>https://gilbert2.gitee.io/maisy/Jenkins+GitLba%E9%92%88%E5%AF%B9k8s%E9%9B%86%E7%BE%A4%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90.html</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2020-03-09T07:17:32.856Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Jenkins-GitLba针对k8s集群持续集成"><a href="#Jenkins-GitLba针对k8s集群持续集成" class="headerlink" title="Jenkins+GitLba针对k8s集群持续集成"></a>Jenkins+GitLba针对k8s集群持续集成</h4><p>持续集成概念</p><blockquote><p>持续集成Continuous Integration</p><p>​    持续集成是指开发者在代码的开发过程中，可以频繁的将代码部署集成到主干，并进程自动化测试</p><p>持续交付Continuous Delivery</p><p>​    持续交付指的是在持续集成的环境基础之上，将代码部署到预生产环境 </p><p>持续部署Continuous Deployment</p><p>​    在持续交付的基础上，把部署到生产环境的过程自动化，持续部署和持续交付的区别就是最终部署到生产环境是自动化的</p></blockquote><p>环境准备</p><blockquote><p>k8s集群环境，三台服务器，IP分别为：192.168.1.70（master）、50（node01）、40（node02）</p><p>Jenkins+GitLab部署在一台Docker服务器上（192.168.1.30），主要用于向仓库上传私有镜像</p><p>环境一共4台服务器，全部指向一个私有仓库，共享Docker镜像</p></blockquote><p>实验所用到的软件都可以在网盘下载：  <a href="https://pan.baidu.com/s/1bhdntBqfV6yIyRH97GT-rA" target="_blank" rel="noopener">下载地址</a></p><p>提取码：trv8  </p><p><strong>验证k8s集群没有问题</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get nodes </span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   64d   v1.15.0</span><br><span class="line">node01   Ready    &lt;none&gt;   64d   v1.15.0</span><br><span class="line">node02   Ready    &lt;none&gt;   64d   v1.15.0</span><br></pre></td></tr></table></figure><p><strong>首先我们需要做一个registry私有仓库，可以选择任意一台服务器都可以，这里我们选择kubernetes-master作为registry私有仓库</strong></p><p><strong>Harbor也是可以的</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker run -d --restart=always -p 5000:5000  registry:2</span><br><span class="line">[root@master ~]# vim  /usr/lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@master ~]# systemctl  daemon-reload </span><br><span class="line">[root@master ~]# systemctl  restart  docker</span><br><span class="line"><span class="meta">#</span><span class="bash">将nginx镜像上传到私有仓库</span></span><br><span class="line">[root@master ~]# docker pull  nginx</span><br><span class="line">[root@master ~]# docker tag nginx:latest  192.168.1.70:5000/nginx:v1</span><br><span class="line">[root@master ~]# docker push  192.168.1.70:5000/nginx:v1</span><br></pre></td></tr></table></figure><p><strong>node01、node02加入私有仓库，并拉去镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意实在那台机器上操作</span></span><br><span class="line">[root@master ~]# scp  /usr/lib/systemd/system/docker.service  node01:/usr/lib/systemd/system/docker.service                                     </span><br><span class="line">[root@master ~]# scp  /usr/lib/systemd/system/docker.service  node02:/usr/lib/systemd/system</span><br><span class="line">[root@node01 ~]# systemctl  daemon-reload </span><br><span class="line">[root@node01 ~]# systemctl  restart  docker</span><br><span class="line">[root@node02 ~]# systemctl  daemon-reload </span><br><span class="line">[root@node02 ~]# systemctl  restart  docker</span><br><span class="line">[root@node01 ~]# docker pull   192.168.1.70:5000/nginx:v1</span><br><span class="line">[root@node02 ~]# docker pull   192.168.1.70:5000/nginx:v1</span><br></pre></td></tr></table></figure><p><strong>建立yaml配置文件让k8s自己控制容器集群，用来模拟我们部署的服务</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">nginx.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span><span class="string">:5000/nginx:v1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span>  <span class="string">Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">nginx.yaml</span> </span><br><span class="line"><span class="string">deployment.extensions/nginx</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span>  <span class="string">deployments.</span></span><br><span class="line"><span class="string">NAME</span>    <span class="string">READY</span>   <span class="string">UP-TO-DATE</span>   <span class="string">AVAILABLE</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">nginx</span>   <span class="number">2</span><span class="string">/2</span>     <span class="number">2</span>            <span class="number">2</span>           <span class="string">61s</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span>  <span class="string">pod</span></span><br><span class="line"><span class="string">NAME</span>                     <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">nginx-57b9fd468d-dn2v7</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">29s</span></span><br><span class="line"><span class="string">nginx-57b9fd468d-q5qm6</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">29s</span></span><br></pre></td></tr></table></figure><p>容器的ip只能在容器本机上访问，集群内的其他主机和集群外的主机都没办法访问，这个时候就需要将容器的端口映射到服务器上的端口了，所以需要做一个service的模板。service 模板可以将容器的端口映射到服务器的端口上，并且可以固定映射在服务器上的端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">nginx-svc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31234</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">nginx-svc.yaml</span> </span><br><span class="line"><span class="string">service/nginx</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">svc</span></span><br><span class="line"><span class="string">NAME</span>         <span class="string">TYPE</span>        <span class="string">CLUSTER-IP</span>       <span class="string">EXTERNAL-IP</span>   <span class="string">PORT(S)</span>        <span class="string">AGE</span></span><br><span class="line"><span class="string">kubernetes</span>   <span class="string">ClusterIP</span>   <span class="number">10.96</span><span class="number">.0</span><span class="number">.1</span>        <span class="string">&lt;none&gt;</span>        <span class="number">443</span><span class="string">/TCP</span>        <span class="string">64d</span></span><br><span class="line"><span class="string">nginx</span>        <span class="string">NodePort</span>    <span class="number">10.105</span><span class="number">.100</span><span class="number">.181</span>   <span class="string">&lt;none&gt;</span>        <span class="number">80</span><span class="string">:31234/TCP</span>   <span class="string">6s</span></span><br></pre></td></tr></table></figure><p><strong>浏览器访问测试：192.168.1.70:31234</strong><br><img src="https://img-blog.csdnimg.cn/2020030914223329.png" alt="在这里插入图片描述"></p><p><strong>kubernetes完毕，开始配hijenkins+gitlab联动</strong></p><p><strong>基本环境准备</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# hostnamectl  set-hostname autoweb</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld</span><br><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">setenforce: SELinux is disabled</span><br><span class="line">[root@localhost ~]# vim  /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line"><span class="meta">#</span><span class="bash">加入私有仓库</span></span><br><span class="line">[root@autoweb ~]# vim  /usr/lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@autoweb ~]# systemctl  daemon-reload</span><br><span class="line">[root@autoweb ~]# systemctl  restart  docker</span><br></pre></td></tr></table></figure><p><strong>首先安装jenkins</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置java环境</span></span><br><span class="line">[root@autoweb ~]# tar zxf  jdk-8u231-linux-x64.tar.gz </span><br><span class="line">[root@autoweb ~]# mv  jdk1.8.0_231  /usr/java   #注意这里的位置，不要多一个“/”</span><br><span class="line"><span class="meta">#</span><span class="bash">配置环境变量</span></span><br><span class="line">[root@autoweb ~]# vim  /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">在最后一行添加以下内容</span></span><br><span class="line">export JAVA_HOME=/usr/java</span><br><span class="line">export JRE_HOME=/usr/java/jre</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar</span><br><span class="line"><span class="meta">#</span><span class="bash">使环境变量生效</span></span><br><span class="line">[root@autoweb ~]# source  /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">验证环境变量</span></span><br><span class="line">[root@autoweb ~]# java -version</span><br><span class="line">java version "1.8.0_231"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br></pre></td></tr></table></figure><p><strong>部署tomcat，将jenkins的包放进tomcat里</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# tar zxf  apache-tomcat-7.0.54.tar.gz </span><br><span class="line">[root@autoweb ~]# mv  apache-tomcat-7.0.54  /usr/tomcat7</span><br><span class="line">[root@autoweb ~]# cd  /usr/tomcat7/webapps/</span><br><span class="line">[root@autoweb webapps]# rm  -rf  *</span><br><span class="line">[root@autoweb webapps]# cp  /root/jenkins.war .</span><br><span class="line"><span class="meta">#</span><span class="bash">修改tomcat的字符集</span></span><br><span class="line">[root@autoweb webapps]# vim  /usr/tomcat7/conf/server.xml</span><br><span class="line"><span class="meta">#</span><span class="bash">在72行左右追加</span></span><br><span class="line">    &lt;Connector port="8080" protocol="HTTP/1.1"</span><br><span class="line">               connectionTimeout="20000"</span><br><span class="line">               redirectPort="8443" URIEncoding="UTF-8" /&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">修改启动脚本，添加jenkins的家目录，这个很重要</span></span><br><span class="line">[root@autoweb webapps]# cd  /usr/tomcat7/bin/</span><br><span class="line">[root@autoweb bin]# vim  catalina.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">export CATALINA_OPTS="-DJENKINS_HOME=/data/jenkins"</span><br><span class="line">export JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Dhudson.ClassicPluginStrategy.noBytecodeTransformer=true"</span><br><span class="line"><span class="meta">#</span><span class="bash">启动tomcat</span></span><br><span class="line">[root@autoweb bin]# ./catalina.sh  start</span><br><span class="line">[root@autoweb bin]# netstat  -anput | grep  8080</span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      6266/java</span><br></pre></td></tr></table></figure><p><strong>浏览器访问：192.168.1.30:8080/jenkins开始配置安装jenkins</strong><br><img src="https://img-blog.csdnimg.cn/2020030914231982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>根据提示查看密码并输入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb bin]# cat /data/jenkins/secrets/initialAdminPassword</span><br><span class="line">7ea904846c9c4cfbb19d3e31d22f889f</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200309142333841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>左边是自动安装， 右边是自定义安装，如果不是这个画面则说明网络很卡或者没有网，网速可以的就选择左边的</p><p>由于网络问题，下载插件会非常慢，这里我就不下载，回到上一步，断网之后再点继续，跳过插件安装</p><p>断网之后，它会等待网络连接，过程有点慢，但是比自动下载插件快多了<br><img src="https://img-blog.csdnimg.cn/20200309142345426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>在创建用户名密码的时候就可以联网了</strong><br><img src="https://img-blog.csdnimg.cn/20200309142359556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>然后一路默认就行</strong><br><img src="https://img-blog.csdnimg.cn/20200309142414900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>因为没有安装，所以就导入插件</strong></p><p><strong>插件存放目录：/data/jenkins/plugins</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将原来的插件目录删除</span></span><br><span class="line">[root@autoweb jenkins]# rm  -rf  plugins/</span><br><span class="line"><span class="meta">#</span><span class="bash">导入下载好的插件，并解压</span></span><br><span class="line">[root@autoweb jenkins]# tar zxf  plugins.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">重新运行jenkins，让它自动识别新导入的插件</span></span><br><span class="line">[root@autoweb bin]# ./catalina.sh  stop</span><br><span class="line">[root@autoweb bin]# ./catalina.sh  start</span><br></pre></td></tr></table></figure><p><strong>使用浏览器重新访问</strong><br><img src="https://img-blog.csdnimg.cn/20200309142444333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>因为很多插件需要翻墙才可以继续下载，Jenkins还提供了代理的设置</p><p>设置插件的国内下载地址</p><p>在Jenkins插件管理-高级设置界面，定位到页面最底部中的【升级站点】模块，将对应URL输入框中的url的https修改为http，即<code>http://updates.jenkins.io/update-center.json</code>，然后点击【提交】保存修改项<br><img src="https://img-blog.csdnimg.cn/20200309142504389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>往下拉，找到插件管理</strong><br><img src="https://img-blog.csdnimg.cn/2020030914251417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>点击高级</strong><br><img src="https://img-blog.csdnimg.cn/20200309142536478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>还需要安装三个插件</strong><br><img src="https://img-blog.csdnimg.cn/20200309142547273.png" alt="在这里插入图片描述"></p><p>因为在我导入的插件里就有这三个，所以不需要安装，如果选择推荐安装的可以搜索并安装这三个插件</p><p>点击可选插件，搜索GitLab就能找到，然后直接安装即可（搜索的时候注意大小写区分）<br><img src="https://img-blog.csdnimg.cn/20200309142558951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>jenkis安装完成以后，再去安装gitlab</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# yum -y install curl policycoreutils openssh-server openssh-clients postfix git</span><br><span class="line">[root@autoweb ~]# systemctl  enable  sshd</span><br><span class="line">[root@autoweb ~]# systemctl  start  sshd</span><br><span class="line">[root@autoweb ~]# systemctl  enable  postfix</span><br><span class="line">[root@autoweb ~]# systemctl  start  postfix</span><br></pre></td></tr></table></figure><p><strong>安装gitlab-ce</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><p><strong>因为网络问题，就不使用这种方式，国内的用户，使用清华大学的镜像进行安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编写yum源</span></span><br><span class="line">[root@autoweb ~]# vim  /etc/yum.repos.d/gitlab-ce.repo</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br><span class="line"><span class="meta">#</span><span class="bash">将gitlab源加入yum</span></span><br><span class="line">[root@autoweb ~]# yum  makecache  </span><br><span class="line"><span class="meta">#</span><span class="bash">下载安装gitlab，这个软件包有点大，需要点时间</span></span><br><span class="line">[root@autoweb ~]# yum -y install gitlab-ce</span><br></pre></td></tr></table></figure><p><strong>修改端口防止端口冲突，默认是80端口，unicorn默认是8080 也是tomcat的端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# vim  /etc/gitlab/gitlab.rb</span><br><span class="line"><span class="meta">#</span><span class="bash">在29行左右的地方进行修改和追加</span></span><br><span class="line">external_url 'http://192.168.1.30:90'</span><br><span class="line">unicorn['listen'] = '127.0.0.1'</span><br><span class="line">unicorn['port'] = 3000</span><br></pre></td></tr></table></figure><p><strong>启动gitlab，这个过程可能会有点慢</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# gitlab-ctl  reconfigure</span><br></pre></td></tr></table></figure><p><strong>浏览器访问：192.168.1.30:90</strong></p><p><strong>设置密码</strong><img src="https://img-blog.csdnimg.cn/20200309142634544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>登录gitlab</strong></p><p><strong>默认用户名是root</strong><br><img src="https://img-blog.csdnimg.cn/20200309142647340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142655818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>jenkins：工具集成平台</strong></p><p><strong>gitlab：软件托管平台</strong></p><p>部署这两个服务的联动，需要经过ssh验证</p><p>首先我们需要在gitlab上绑定jenkins服务器的ssh公钥，因为是在同一台服务器上，所以就自己给自己绑定，这里我们使用的是root用户的公私钥，切记生产环境是不允许随便用root的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# ssh-keygen  -t  rsa  #一路回车即可</span><br><span class="line"><span class="meta">#</span><span class="bash">复制公钥</span></span><br><span class="line">[root@autoweb ~]# cat /root/.ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0PGtK/uFWejdLYfEqEGiimWrpndlkMZMNyvMisdCvWYU2E2UKxpr/h/QCZQpgpe7uAPZpivnsu3XZ4pE4qe7WG4iKEqF6oVmJL9JjmNh86vOUDGttOU3aZJnLp95yoYczBUSObNsSAzkHIMR2u0Zk5nFW2Roe2FHNUyj0e2qM/Zm5+M5EVgpHd9UG5A4Z/Loid/got6Xaufoen1hSFY+S18QPuheN1auaTfnyA0wwf+rlWjqwCLJeUBl0PgOgNNyZ27++U6QBUPNwgC3SVdhbJMCFE9/H2+0aMnjVqnakfJmt95UI/QOJAmnrusps/XPbqdnxZ5u89i97QxuogAgL root@autoweb</span><br></pre></td></tr></table></figure><p><strong>在gitlab上导入公钥</strong><br><img src="https://img-blog.csdnimg.cn/20200309142708109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142719400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142728515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>新建一个代码仓库</strong><br><img src="https://img-blog.csdnimg.cn/202003091427420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142754838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>输入一个仓库的名字 权限选择公共的（public）然后直接点击创建</strong><br><img src="https://img-blog.csdnimg.cn/20200309142807140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>点击新建一个new.file</strong><br><img src="https://img-blog.csdnimg.cn/20200309142827983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>写入代码，起一个名字然后保存</strong><br><img src="https://img-blog.csdnimg.cn/20200309142839741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>将项目克隆到本地测试是否可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# git clone git@192.168.1.30:root/test.git</span><br><span class="line">[root@autoweb ~]# cd  test/</span><br><span class="line">[root@autoweb test]# ls</span><br><span class="line">index.html</span><br><span class="line">[root@autoweb test]# cat index.html </span><br><span class="line">print: "hello world!!!"</span><br></pre></td></tr></table></figure><p><strong>测试没有问题</strong></p><p><strong>打开jenkins，新建任务</strong><br><img src="https://img-blog.csdnimg.cn/20200309142857302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142908127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>地址粘贴进去后没有报错则没错</strong><br><img src="https://img-blog.csdnimg.cn/20200309142919551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>下面的这个插件很重要，就是他实现自动化更新的webhook插件，安装过了就会有这条，然后点击这条下面出来的这些东西保持默认就行。同时注意复制</p><p>这个里面写的是jenkins构建时候会执行的shell脚本，这个是最重要的，就是他实现了下端kubernetes自动更新容器的操作<br><img src="https://img-blog.csdnimg.cn/2020030914293511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142949794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">backupcode="/data/backcode/$JOB_NAME/$BUILD_NUMBER"</span><br><span class="line">mkdir -p $backupcode</span><br><span class="line">chmod 644 "$JENKINS_HOME"/workspace/"$JOB_NAME"/*</span><br><span class="line">rsync -acP   "$JENKINS_HOME"/workspace/"$JOB_NAME"/*  $backupcode</span><br><span class="line">echo From  192.168.1.70:5000/nginx:v1 &gt; "$JENKINS_HOME"/workspace/Dockerfile</span><br><span class="line">echo COPY ./"$JOB_NAME"/* /usr/share/nginx/html/ &gt;&gt; "$JENKINS_HOME"/workspace/Dockerfile</span><br><span class="line">docker rmi 192.168.1.70:5000/nginx:v1</span><br><span class="line">docker build -t 192.168.1.70:5000/nginx:v1 /"$JENKINS_HOME"/workspace/.</span><br><span class="line">docker push 192.168.1.70:5000/nginx:v1</span><br><span class="line">ssh root@192.168.1.70 kubectl delete deployment nginx</span><br><span class="line">ssh root@192.168.1.70 kubectl apply -f /root/nginx.yaml</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200309143004990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>复制地址去gitlab上绑定webhook</strong></p><p><strong>保存，登录gitlab，点击下图这个设置</strong><br><img src="https://img-blog.csdnimg.cn/20200309143020105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>将复制的地址粘贴</strong><br><img src="https://img-blog.csdnimg.cn/202003091430335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>往下拉，去掉ssh验证，添加webhook</strong><br><img src="https://img-blog.csdnimg.cn/20200309143053938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>出现报错，提示本地连接不了，因为gitlab默认设置不允许想自己发送web hook</strong><br><img src="https://img-blog.csdnimg.cn/20200309143112809.png" alt="在这里插入图片描述"></p><p><strong>解决办法</strong><br><img src="https://img-blog.csdnimg.cn/20200309143131772.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020030914315363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309143207963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>保存之后重试，成功的如下图所示</strong><br><img src="https://img-blog.csdnimg.cn/20200309143223828.png" alt="在这里插入图片描述"></p><p><strong>测试jenkins与gitlab连通</strong><br><img src="https://img-blog.csdnimg.cn/20200309143253322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200309143303304.png" alt="在这里插入图片描述"></p><p><strong>403报错的，解决办法</strong></p><p><strong>回到Jenkins开启匿名访问权限</strong><br><img src="https://img-blog.csdnimg.cn/20200309143323817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>点击全局安全配置</strong><br><img src="https://img-blog.csdnimg.cn/2020030914333892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309143349741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>保存之后再点击系统设置</strong><br><img src="https://img-blog.csdnimg.cn/20200309143358389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>去掉勾选</strong><br><img src="https://img-blog.csdnimg.cn/20200309143411543.png" alt="在这里插入图片描述"></p><p><strong>保存之后，回到gitlab上再次测试</strong></p><p><strong>出现蓝条说明jenkins已经连通gitlab</strong><br><img src="https://img-blog.csdnimg.cn/20200309143424955.png" alt="在这里插入图片描述"></p><p>jenkins和gitlab 都已经互相的ssh通过了，然后我们最后需要做的一个ssh是关于jenkins</p><p>这里是从autoweb向master节点做免密登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# ssh-copy-id  root@192.168.1.70</span><br></pre></td></tr></table></figure><p><strong>环境全部部署完毕！！！开始测试</strong></p><p><strong>立即构建</strong><br><img src="https://img-blog.csdnimg.cn/20200309143445621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309143456318.png" alt="在这里插入图片描述"></p><p><strong>构建完成之后查看网页的变化</strong><br><img src="https://img-blog.csdnimg.cn/20200309143505725.png" alt="在这里插入图片描述"></p><p><strong>回到Gitlab更新代码测试</strong><br><img src="https://img-blog.csdnimg.cn/2020030914352913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>通过web hook这个插件会自动识别代码的更新，然后自动构建保证实时同步，持续集成</strong><br><img src="https://img-blog.csdnimg.cn/20200309143548150.png" alt="在这里插入图片描述"><br><strong>再次查看网页的变化</strong><br><img src="https://img-blog.csdnimg.cn/20200309143558243.png" alt="在这里插入图片描述"></p><p><strong>构建的历史版本的存放目录：/data/backcode/test</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb test]# pwd</span><br><span class="line">/data/backcode/test</span><br><span class="line">[root@autoweb test]# ls</span><br><span class="line">1  2  3  4  5</span><br><span class="line"><span class="meta">#</span><span class="bash">还有一个关键的目录，这个目录下是将新代码构建成镜像的关键，他和上个目录实时同步</span></span><br><span class="line">[root@autoweb workspace]# pwd</span><br><span class="line">/data/jenkins/workspace</span><br><span class="line">[root@autoweb workspace]# ls</span><br><span class="line">Dockerfile  test</span><br></pre></td></tr></table></figure><p><strong>构建的历史版本的存放目录：/data/backcode/test</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb test]# pwd</span><br><span class="line">/data/backcode/test</span><br><span class="line">[root@autoweb test]# ls</span><br><span class="line">1  2  3  4  5</span><br><span class="line"><span class="meta">#</span><span class="bash">还有一个关键的目录，这个目录下是将新代码构建成镜像的关键，他和上个目录实时同步</span></span><br><span class="line">[root@autoweb workspace]# pwd</span><br><span class="line">/data/jenkins/workspace</span><br><span class="line">[root@autoweb workspace]# ls</span><br><span class="line">Dockerfile  test</span><br></pre></td></tr></table></figure><p>测试完成</p><p>关于 kubernetes 还有好几种集群管理方法，我们这次用的 deployment模板 就是其中之一， 其他的还有pod 模板 和 rc 模板， 这些都是功能很强大的集群调度模板。 还有更多功能待开发</p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Python的认识与安装</title>
    <link href="https://gilbert2.gitee.io/maisy/Python%E7%9A%84%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%AE%89%E8%A3%85.html"/>
    <id>https://gilbert2.gitee.io/maisy/Python%E7%9A%84%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%AE%89%E8%A3%85.html</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2020-03-10T12:41:07.527Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a><strong>初识Python</strong></h4><p><strong>人生苦短，我用Python</strong></p><p><strong>Python的由来：</strong></p><blockquote><p><strong>1989年圣诞节期间，在阿姆斯特丹，Guido为了打发圣诞节的无趣，决心开发一</strong><br><strong>个新的脚本解释程序，作为ABC语言的一种继承。</strong><br><strong>Python是一种跨平台的计算机程序设计语言。是一种面向对象的动态类型语言，</strong><br><strong>最初被设计用于编写自动化脚本，随着版本的不断更新和语言新功能的添加，越</strong><br><strong>多被用于独立的、大型项目的开发</strong></p></blockquote><p><strong>Python的应用领域</strong></p><blockquote><p><strong>web全栈    算法工程师</strong></p><p><strong>人工只能    游戏开发</strong></p><p><strong>机器学习    信息安全</strong></p><p><strong>网络爬虫    自动化测试</strong></p><p><strong>数据分析    自动化运维</strong></p></blockquote><p><strong>Python语言特点</strong></p><blockquote><p><strong>简单易学</strong></p><p><strong>语法优美</strong></p><p><strong>丰富强大的库</strong></p><p><strong>开发效率高</strong></p><p><strong>应用领域广泛</strong></p></blockquote><h4 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h4><p><strong>1、windows系统</strong></p><p><strong>下载地址：</strong></p><p><code>https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe</code></p><p><strong>如果感觉下载太慢，这里附上网盘<a href="https://pan.baidu.com/s/1GjbLM8RbJ_rbp0nQ2uzduA" target="_blank" rel="noopener">连接</a></strong><br><strong>提取码：tp9n</strong></p><p><strong>也可以去python<a href="https://www.python.org" target="_blank" rel="noopener">官网</a>下载想要的版本</strong></p><p><strong>注意事项：</strong></p><blockquote><ul><li>默认安装没有勾选“自动添加python的环境变量”</li><li>不要把python抽象安装到含有中文的目录中</li></ul></blockquote><p><strong>双击安装，勾选两个选项，选择第二个自定义安装</strong><br><img src="https://img-blog.csdnimg.cn/20200309144708638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>默认就行，直接Next</strong><br><img src="https://img-blog.csdnimg.cn/20200309144720422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>自定义目录禁止中文目录安装，选择目录之后，直接Install</strong><br><img src="https://img-blog.csdnimg.cn/2020030914473232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>检查python是否安装成功:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;python</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.2</span> (tags/v3<span class="number">.8</span><span class="number">.2</span>:<span class="number">7</span>b3ab59, Feb <span class="number">25</span> <span class="number">2020</span>, <span class="number">23</span>:<span class="number">03</span>:<span class="number">10</span>) [MSC v<span class="number">.1916</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">'hello python.'</span>)</span><br><span class="line">hello python.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exit()</span><br><span class="line"></span><br><span class="line">C:\Users\Admin&gt;</span><br></pre></td></tr></table></figure><p><strong>退出python的两种方法</strong></p><blockquote><p>ctrl+z 回车</p><p>exit()</p></blockquote><p><strong>Python目录介绍</strong></p><blockquote><p><strong>Python二进制文件的启动目录</strong>：<code>F:\Python</code></p><p><strong>Python库的安装命令端</strong>：<code>F:\Python\Scripts</code></p></blockquote><p><strong>2、linux系统</strong></p><p>Linux环境自带了Python 2.x版本，但是如果要更新到3.x的版本，可以在<a href="https://www.python.org" target="_blank" rel="noopener">Python的官方网站</a>下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以CentOS为例）</p><p><strong>1）安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure><p>这一步可能会出现以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">/var/run/yum.pid 已被锁定，PID 为 15320 的另一个程序正在运行。</span><br><span class="line">Another app is currently holding the yum lock; waiting for it to exit...</span><br><span class="line">  另一个应用程序是：PackageKit</span><br><span class="line">    内存：120 M RSS （546 MB VSZ）</span><br><span class="line">    已启动： Fri Dec 27 15:48:54 2019 - 09:04之前</span><br><span class="line">    状态  ：睡眠中，进程ID：15320</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# rm -rf /var/run/yum.pid</span><br></pre></td></tr></table></figure><p><strong>2）下载python源代码并解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# wget  https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz</span><br><span class="line">[root@python ~]# tar zxf Python-3.8.1.tgz</span><br></pre></td></tr></table></figure><p><strong>3）设置全局变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# export LANG=zh_CN.UTF-8</span><br><span class="line">[root@python ~]# export LANGUAGE=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>否则可能会出现以下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">generate-posix-vars  failed</span><br><span class="line">make[1]: *** [pybuilldddir.txt] 错误 1</span><br><span class="line">make[1]: 离开目录"/root/Python-3.8.1"</span><br><span class="line">make: *** [profile-opt] 错误2</span><br></pre></td></tr></table></figure><p><strong>4）编译安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# cd Python-3.8.1</span><br><span class="line">[root@python ~]# ./configure --prefix=/usr/local/python381 --enable-optimizations</span><br><span class="line">[root@python ~]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>5）修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# vim .bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash">添加</span></span><br><span class="line">export PATH=$PATH:/usr/local/python381/bin</span><br></pre></td></tr></table></figure><p><strong>6）激活环境变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# source .bash_profile</span><br></pre></td></tr></table></figure><p><strong>7）运行Python程序</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看Python版本信息</span></span><br><span class="line">[root@python ~]# python3 --version</span><br><span class="line"><span class="meta">#</span><span class="bash">进入交互环境</span></span><br><span class="line">[root@python ~]# python3</span><br></pre></td></tr></table></figure><p>检查Python的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span>  sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.version_info)</span><br><span class="line">sys.version_info(major<span class="number">-3</span>, minor=<span class="number">8</span> micro=<span class="number">1</span> releaselevel=<span class="string">'final'</span>, serial=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.version)</span><br><span class="line"><span class="number">3.8</span><span class="number">.1</span> (default, Mar <span class="number">9</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">21</span>:<span class="number">51</span>)</span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-.9</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gilbert2.gitee.io/maisy/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Helm自定义模板以及私有库部署</title>
    <link href="https://gilbert2.gitee.io/maisy/Helm%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E4%BB%A5%E5%8F%8A%E7%A7%81%E6%9C%89%E5%BA%93%E9%83%A8%E7%BD%B2.html"/>
    <id>https://gilbert2.gitee.io/maisy/Helm%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E4%BB%A5%E5%8F%8A%E7%A7%81%E6%9C%89%E5%BA%93%E9%83%A8%E7%BD%B2.html</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-04T12:15:12.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Helm自定义模板以及私有库部署"><a href="#Helm自定义模板以及私有库部署" class="headerlink" title="Helm自定义模板以及私有库部署"></a><strong>Helm自定义模板以及私有库部署</strong></h3><hr><p><strong>开发自己的chart</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm create mychart</span><br><span class="line">Creating mychart</span><br><span class="line">[root@master ~]# tree  -C  mychart/</span><br><span class="line">mychart/</span><br><span class="line">├── charts</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── templates</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── service.yaml</span><br><span class="line">│   └── tests</span><br><span class="line">│       └── test-connection.yaml</span><br><span class="line">└── values.yaml</span><br><span class="line">[root@master mychart]# pwd</span><br><span class="line">/root/mychart</span><br><span class="line">[root@master mychart]# vim  values.yaml</span><br><span class="line">replicaCount: 1</span><br><span class="line"></span><br><span class="line">image:</span><br><span class="line">  repository: nginx</span><br><span class="line">  tag: stable</span><br><span class="line">  pullPolicy: IfNotPresent  </span><br><span class="line">----------  #这些都都是默认信息</span><br></pre></td></tr></table></figure><p>因为这是我们自己开发的，所以有可能会出现错误，一般我们在部署之前都会进行调试</p><p><strong>调试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  --dry-run   --debug  mychart</span><br></pre></td></tr></table></figure><p>修改values.yaml文件，模拟一些错误来查看效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  --dry-run   --debug  mychart</span><br><span class="line">): error converting YAML to JSON: yaml: line 12: could not find expected ':'</span><br><span class="line"><span class="meta">#</span><span class="bash">会告诉你第12行少了个：但是这个12行不是特别准确，只是一个大概的方向</span></span><br></pre></td></tr></table></figure><p><strong>安装chart</strong></p><p>四种方法</p><blockquote><ul><li>通过仓库安装</li><li>将chart下载下来，通过tar包安装</li><li>通过chart本地目录安装（将tar包解压得到的目录）</li><li>通过URL安装</li></ul></blockquote><p>1、通过仓库安装（以redis为例）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  stable/redis  -n redis</span><br></pre></td></tr></table></figure><p>2、将chart下载下来，通过tar包安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  fetch stable/redis</span><br><span class="line">[root@master ~]# helm install redis-1.1.15.tgz</span><br></pre></td></tr></table></figure><p>3、通过chart本地目录安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# tar zxf redis-1.1.15.tgz</span><br><span class="line">[root@master ~]# tree -C  redis</span><br><span class="line">redis</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── README.md</span><br><span class="line">├── templates</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── networkpolicy.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── pvc.yaml</span><br><span class="line">│   ├── secrets.yaml</span><br><span class="line">│   └── svc.yaml</span><br><span class="line">└── values.yaml</span><br><span class="line">[root@master ~]# helm  install  redis</span><br></pre></td></tr></table></figure><p>4、通过URL安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  http://xxx/charts/xxx.tgz  -n  name</span><br></pre></td></tr></table></figure><p>使用本地目录安装刚刚自定义的mychart：</p><p>要求：</p><blockquote><p>副本Pod数量为3个</p><p>service类型为NodePort</p><p>映射的端口为31033</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# cd mychart/</span><br><span class="line">[root@master mychart]# vim  values.yaml</span><br><span class="line">replicaCount: 3</span><br><span class="line"></span><br><span class="line">service:</span><br><span class="line">  type: NodePort</span><br><span class="line">  port: 80</span><br><span class="line">  nodePort: 31033</span><br><span class="line">[root@master mychart]# helm  install  -n  test  ../mychart/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master mychart]# kubectl  get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">test-mychart-657bfc65b8-5j8qn   1/1     Running   0          30s</span><br><span class="line">test-mychart-657bfc65b8-bgt2s   1/1     Running   0          30s</span><br><span class="line">test-mychart-657bfc65b8-v2sph   1/1     Running   0          30s</span><br><span class="line">[root@master mychart]# kubectl  get deployments.</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">test-mychart   3/3     3            3           46s</span><br><span class="line">[root@master mychart]# kubectl  get  svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        61d</span><br><span class="line">test-mychart   NodePort    10.104.53.170   &lt;none&gt;        80:30393/TCP   50s</span><br><span class="line"><span class="meta">#</span><span class="bash">可以看到这里的端口与我们指定的并不一致</span></span><br></pre></td></tr></table></figure><p>因为这些yaml文件都是引用template模板，template模板目录下的service.yaml里面没有nodePort字段，只需要在service.yaml文件里添加就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">实例的更新</span></span><br><span class="line">[root@master templates]# pwd</span><br><span class="line">/root/mychart/templates</span><br><span class="line">[root@master templates]# vim  service.yam</span><br><span class="line">spec:</span><br><span class="line">  type: &#123;&#123; .Values.service.type &#125;&#125;</span><br><span class="line">  ports:</span><br><span class="line">    - port: &#123;&#123; .Values.service.port &#125;&#125;</span><br><span class="line">      targetPort: http</span><br><span class="line">      protocol: TCP</span><br><span class="line">      name: http</span><br><span class="line">      nodePort: &#123;&#123;  .Values.service.nodePort&#125;&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">再更新以下，进行验证</span></span><br><span class="line">[root@master ~]# helm  upgrade  test mychart/ -f mychart/values.yaml</span><br><span class="line">[root@master ~]# kubectl  get svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        61d</span><br><span class="line">test-mychart   NodePort    10.104.53.170   &lt;none&gt;        80:31033/TCP   10m</span><br><span class="line"><span class="meta">#</span><span class="bash">端口已经改变了</span></span><br></pre></td></tr></table></figure><p>一般在企业都是使用自己的私有镜像，那么就需要搭建私有仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  /usr/lib/systemd/system/docker.service </span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@master ~]# systemctl  daemon-reload </span><br><span class="line">[root@master ~]# systemctl  restart  docke</span><br><span class="line"><span class="meta">#</span><span class="bash">node01、node02也加入私有仓库</span></span><br><span class="line">[root@node01 ~]# vim  /usr/lib/systemd/system/docker.service </span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@node01 ~]# systemctl  daemon-reload </span><br><span class="line">[root@node01 ~]# systemctl  restart  docke</span><br><span class="line">[root@node02 ~]# vim  /usr/lib/systemd/system/docker.service </span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@node02 ~]# systemctl  daemon-reload </span><br><span class="line">[root@node02 ~]# systemctl  restart  docke</span><br></pre></td></tr></table></figure><p>导入私有镜像，并上传到私有仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker load  &lt;  httpd-v1.tar  &amp;&amp;  docker load  &lt;  httpd-v2.tar  &amp;&amp;  docker  load  &lt;  httpd-v3.tar</span><br><span class="line">[root@master ~]# docker tag   httpd:v1  192.168.1.70:5000/httpd:v1</span><br><span class="line">[root@master ~]# docker  push  192.168.1.70:5000/httpd:v1</span><br><span class="line">[root@master ~]# docker  push  192.168.1.70:5000/httpd:v1 </span><br><span class="line">[root@master ~]# docker  tag   httpd:v2  192.168.1.70:5000/httpd:v2</span><br><span class="line">[root@master ~]# docker  tag   httpd:v3  192.168.1.70:5000/httpd:v3</span><br><span class="line">[root@master ~]# docker push  192.168.1.70:5000/httpd:v2</span><br><span class="line">[root@master ~]# docker push  192.168.1.70:5000/httpd:v3</span><br></pre></td></tr></table></figure><p>node01、node02拉去镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# docker  pull  192.168.1.70:5000/httpd:v1</span><br><span class="line">[root@node01 ~]# docker  pull  192.168.1.70:5000/httpd:v2</span><br><span class="line">[root@node01 ~]# docker  pull  192.168.1.70:5000/httpd:v3</span><br><span class="line">[root@node02 ~]# docker  pull  192.168.1.70:5000/httpd:v1</span><br><span class="line">[root@node02 ~]# docker  pull  192.168.1.70:5000/httpd:v2</span><br><span class="line">[root@node02 ~]# docker  pull  192.168.1.70:5000/httpd:v3</span><br></pre></td></tr></table></figure><p>练习：</p><p>使用mychart部署一个实例，名为bdqn，使用私有镜像v1版本</p><p>完成之后，将实例做一个升级，将镜像改为v2版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改yaml文件，运行实例</span></span><br><span class="line">[root@master ~]# vim  mychart/values.yaml</span><br><span class="line">image:</span><br><span class="line">  repository: 192.168.1.70:5000/httpd</span><br><span class="line">  tag: v1</span><br><span class="line">  pullPolicy: IfNotPresent</span><br><span class="line">[root@master ~]# helm  install  -n  bdqn  mychart/</span><br><span class="line">[root@master ~]# kubectl  get  deployments. -o wide</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                       SELECTOR</span><br><span class="line">bdqn-mychart   1/1     1            1           8s    mychart      192.168.1.70:5000/httpd:v1   app.kubernetes.io/instance=bdqn,app.kubernetes.io/name=mychart</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">bdqn-mychart-574ffc5496-bd8vf   1/1     Running   0          22s</span><br><span class="line"><span class="meta">#</span><span class="bash">实例升级，通过yaml文件的方式</span></span><br><span class="line">[root@master ~]# vim  mychart/values.yaml</span><br><span class="line">image:</span><br><span class="line">  repository: 192.168.1.70:5000/httpd</span><br><span class="line">  tag: v2</span><br><span class="line">[root@master ~]# helm upgrade  bdqn  mychart/  -f  mychart/values.yaml</span><br><span class="line">[root@master ~]# kubectl  get deployments.  -o  wide</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES                       SELECTOR</span><br><span class="line">bdqn-mychart   1/1     1            1           2m54s   mychart      192.168.1.70:5000/httpd:v2   app.kubernetes.io/instance=bdqn,app.kubernetes.io/name=mychart</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">bdqn-mychart-85dcbbcb8f-8h47q   1/1     Running   0          5m28s</span><br><span class="line"><span class="meta">#</span><span class="bash">还可以通过命令的方式</span></span><br><span class="line">[root@master ~]# helm upgrade bdqn mychart/ --set imageTAG=v2</span><br><span class="line">//这种方法更新完成后，查看deployment的时候，镜像显示是没有更新的</span><br><span class="line"><span class="meta">#</span><span class="bash">还可以通过edit的方式进行更改</span></span><br><span class="line">[root@master ~]# kubectl edit  deployments. bdqn-mychart</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: 192.168.1.70:5000/httpd:v3</span><br><span class="line">[root@master ~]# kubectl  get deployments. -o wide</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                       SELECTOR</span><br><span class="line">bdqn-mychart   1/1     1            1           28m   mychart      192.168.1.70:5000/httpd:v3   app.kubernetes.io/instance=bdqn,app.kubernetes.io/name=mychar</span><br></pre></td></tr></table></figure><p><strong>创建自己的Repo仓库</strong></p><p>我们自己创建的chart包，如果公司内其他的同事也需要用，我们可以cp一份给他，但是效率太低，所以就可以创建一个repo仓库，解决这个需求</p><p>1、在node01上运行一个httpd的容器（作为私有仓库）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# mkdir /var/www</span><br><span class="line">[root@node01 ~]# docker run  -d -p  8080:80  -v  /var/www/:/usr/local/apache2/htdocs  httpd:latest</span><br><span class="line">[root@node01 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">03e5e3ef5c95        httpd:latest           "httpd-foreground"       13 seconds ago      Up 12 seconds       0.0.0.0:8080-&gt;80/tcp   kind_roentgen</span><br></pre></td></tr></table></figure><p>2、master节点上，使用helm  package将mychart目录打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  package mychart/</span><br><span class="line">Successfully packaged chart and saved it to: /root/mychart-0.1.0.tgz</span><br><span class="line">[root@master ~]# ls</span><br><span class="line">mychart-0.1.0.tgz</span><br></pre></td></tr></table></figure><p>3、执行helm repo index生成仓库的index文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  myrepo</span><br><span class="line">[root@master ~]# mv  mychart-0.1.0.tgz myrepo/</span><br><span class="line">[root@master ~]# ls   myrepo/</span><br><span class="line">mychart-0.1.0.tgz</span><br><span class="line">[root@master ~]# helm  repo  index  myrepo/  --url  http://192.168.1.50:8080/charts  #第一步运行的容器的IP+端口</span><br><span class="line">[root@master ~]# ls  myrepo/</span><br><span class="line">index.yaml  mychart-0.1.0.tgz</span><br><span class="line">[root@master ~]# cat myrepo/index.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">entries:</span><br><span class="line">  mychart:</span><br><span class="line">  - apiVersion: v1</span><br><span class="line">    appVersion: "1.0"</span><br><span class="line">    created: "2020-03-04T11:08:33.079034645+08:00"</span><br><span class="line">    description: A Helm chart for Kubernetes</span><br><span class="line">    digest: f2a297c4b377ae7f208848bef8823eeb74ebb7270d8bf07f58270678d0784056</span><br><span class="line">    name: mychart</span><br><span class="line">    urls:</span><br><span class="line">    - http://192.168.1.50:8080/charts/mychart-0.1.0.tgz</span><br><span class="line">    version: 0.1.0</span><br><span class="line">generated: "2020-03-04T11:08:33.07808906+08:00"</span><br></pre></td></tr></table></figure><p>4、将生成的tar包和index.yaml上传到node01的/var/www/charts目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">因为node01上没有sharts目录，所以需要创建</span></span><br><span class="line">[root@node01 ~]# mkdir  /var/www/chart</span><br><span class="line">[root@master ~]# cd  myrepo/</span><br><span class="line">[root@master myrepo]# scp  index.yaml mychart-0.1.0.tgz   node01:/var/www/charts</span><br><span class="line">index.yaml                                                  100%  400     0.4KB/s   00:00    </span><br><span class="line">mychart-0.1.0.tgz                                           100% 2861     2.8KB/s   00:00</span><br><span class="line"><span class="meta">#</span><span class="bash">在node01上进行验证</span></span><br><span class="line">[root@node01 ~]# ls /var/www/charts</span><br><span class="line">index.yaml  mychart-0.1.0.tgz</span><br></pre></td></tr></table></figure><p>5、添加新的repo仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master myrepo]# helm  repo  add  myrepo  http://192.168.1.50:8080/charts</span><br><span class="line">"myrepo" has been added to your repositories</span><br><span class="line">[root@master myrepo]# helm  repo  list</span><br><span class="line">NAME  URL                                                   </span><br><span class="line">stablehttps://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line">local http://127.0.0.1:8879/charts  #这个是不能跨主机的只能在本地使用        </span><br><span class="line">myrepohttp://192.168.1.50:8080/charts  #这个可以跨主机</span><br></pre></td></tr></table></figure><p>至此，已经可以正常供内网环境使用这个charts包的私有仓库了</p><p>6、验证，我们就可以直接使用新的repo仓库部署实例了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master myrepo]# helm  search mychart</span><br><span class="line">NAME          CHART VERSIONAPP VERSIONDESCRIPTION                </span><br><span class="line">local/mychart 0.1.0        1.0        A Helm chart for Kubernetes</span><br><span class="line">myrepo/mychart0.1.0        1.0        A Helm chart for Kubernetes</span><br><span class="line">[root@master myrepo]# helm  install myrepo/mychart  -n test</span><br><span class="line">[root@master ~]# helm  list</span><br><span class="line">NAMEREVISIONUPDATED                 STATUS  CHART        APP VERSIONNAMESPACE</span><br><span class="line">test1       Wed Mar  4 11:23:25 2020DEPLOYEDmychart-0.1.01.0</span><br></pre></td></tr></table></figure><p>7、如果以后仓库中新添加了chart包，需要用helm repo update命令更新本地的index文件</p><p>练习：</p><p>新创建一个bdqn的chart包，然后将chart包上传到上述repo源中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建新的chart</span></span><br><span class="line">[root@master ~]# helm  create  bdqn</span><br><span class="line">Creating bdqn</span><br><span class="line"><span class="meta">#</span><span class="bash">将这个chart目录打包</span></span><br><span class="line">[root@master ~]# helm  package bdqn/</span><br><span class="line">Successfully packaged chart and saved it to: /root/bdqn-0.1.0.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash">移动到myrepo下</span></span><br><span class="line">[root@master ~]# mv bdqn-0.1.0.tgz  myrepo/</span><br><span class="line">[root@master ~]# ls  myrepo/</span><br><span class="line">bdqn-0.1.0.tgz  index.yaml  mychart-0.1.0.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash">更新index文件</span></span><br><span class="line">[root@master ~]# helm  repo  index  myrepo/  --url  http://192.168.1.50:8080/charts</span><br><span class="line">[root@master myrepo]# scp  bdqn-0.1.0.tgz   index.yaml  node01:/var/www/charts</span><br><span class="line">bdqn-0.1.0.tgz                                              100% 2826     2.8KB/s   00:00    </span><br><span class="line">index.yaml                                                  100%  720     0.7KB/s   00:00</span><br><span class="line"><span class="meta">#</span><span class="bash">更新repo仓库</span></span><br><span class="line">[root@master myrepo]# helm  repo  update</span><br><span class="line">Hang tight while we grab the latest from your chart repositories...</span><br><span class="line">...Skip local chart repository</span><br><span class="line">...Successfully got an update from the "myrepo" chart repository</span><br><span class="line">...Successfully got an update from the "stable" chart repository</span><br><span class="line">Update Complete.</span><br><span class="line"><span class="meta">#</span><span class="bash">搜索验证</span></span><br><span class="line">[root@master myrepo]# helm  search  bdqn</span><br><span class="line">NAME       CHART VERSIONAPP VERSIONDESCRIPTION                </span><br><span class="line">local/bdqn 0.1.0        1.0        A Helm chart for Kubernetes</span><br><span class="line">myrepo/bdqn0.1.0        1.0        A Helm chart for Kubernetes</span><br></pre></td></tr></table></figure><p>使用url部署这个bdqn实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  http://192.168.1.50:8080/charts/bdqn-0.1.0.tgz  -n  t1</span><br><span class="line">[root@master ~]# helm  list</span><br><span class="line">NAMEREVISIONUPDATED                 STATUS  CHART        APP VERSIONNAMESPACE </span><br><span class="line">t1  1       Wed Mar  4 11:52:50 2020DEPLOYEDbdqn-0.1.0   1.0        default  </span><br><span class="line">test1       Wed Mar  4 11:23:25 2020DEPLOYEDmychart-0.1.01.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Helm应用以及服务升级与回滚</title>
    <link href="https://gilbert2.gitee.io/maisy/Helm%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E6%BB%9A.html"/>
    <id>https://gilbert2.gitee.io/maisy/Helm%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E6%BB%9A.html</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-04T12:15:12.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Helm应用以及服务升级与回滚"><a href="#Helm应用以及服务升级与回滚" class="headerlink" title="Helm应用以及服务升级与回滚"></a>Helm应用以及服务升级与回滚</h3><p>helm：包管理工具</p><p>官方提提供的仓库：<a href="https://hub.helm.sh/" target="_blank" rel="noopener">https://hub.helm.sh/</a></p><p><strong>Charts</strong>：是一个Helm的程序包，它包含了运行一个kubernetes应用程序所需要的镜像、依赖关系和资源定义等</p><p><strong>Release</strong>：应用程序运行charts后，得到的一个实例</p><p>部署一个实例：</p><p>helm install + charts -n release名称</p><p><strong>根据以一个包运行一个实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  stable/redis -n  redis --dry-run</span><br><span class="line">--dry-run：用来测试有没有问题，如果没有问题就可以运行</span><br><span class="line">[root@master ~]# helm  install  stable/redis -n  redis</span><br><span class="line"><span class="meta">#</span><span class="bash">这里是运行不成功的，因为他需要镜像，PV等准备工作</span></span><br></pre></td></tr></table></figure><p>运行之后会有三部分描述</p><blockquote><p>1、关于这个Release的描述</p><p>2、关于这个Release资源的描述</p><p>3、怎么使用这个Release</p></blockquote><p>根据提示可以获得redis的密码，等等一些信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get secret --namespace default redis-redis -o jsonpath="&#123;.data.redis-password&#125;" | base64 --decode</span><br><span class="line">rTmeGF2rcY</span><br></pre></td></tr></table></figure><p>删除实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  delete  redis  --purge</span><br></pre></td></tr></table></figure><p>查询chart包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm search mysql</span><br></pre></td></tr></table></figure><p>运行一个实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  stable/mysql -n mysql</span><br></pre></td></tr></table></figure><p>我们运行过的实例都会生成一个charts包存放在这个缓存目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master archive]# pwd</span><br><span class="line">/root/.helm/cache/archive</span><br><span class="line">[root@master archive]# ls</span><br><span class="line">mysql-0.3.5.tgz  redis-1.1.15.tgz</span><br></pre></td></tr></table></figure><p>Charts包解压目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master archive]# tar zxf mysql-0.3.5.tgz</span><br><span class="line">[root@master archive]# tree  -C  mysql</span><br><span class="line">mysql</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── README.md</span><br><span class="line">├── templates</span><br><span class="line">│   ├── configmap.yaml</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── pvc.yaml</span><br><span class="line">│   ├── secrets.yaml</span><br><span class="line">│   └── svc.yaml</span><br><span class="line">└── values.yaml</span><br></pre></td></tr></table></figure><p><strong>Chart.yaml</strong>：这个chart包的概要信息</p><p>​    name和version这两个是必填项，其他可选</p><p><strong>README.md</strong>：是这个chart包的一个使用帮助文档</p><p><strong>templates</strong>：chart包内各种资源对象模板</p><p><strong>values.yaml</strong>：是这个chart包的默认的值，可以被template内的yaml文件使用</p><p>我们在部署之前还可以提前查看这个包会有什么东西</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  inspect values  stable/prometheus</span><br></pre></td></tr></table></figure><p>除了部署实例后会生成chart包，还可以下载chart包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  fetch stable/prometheus</span><br></pre></td></tr></table></figure><p><strong>Helm部署安装一个Mysql服务</strong></p><p>部署NFS服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  /data</span><br><span class="line">[root@master ~]# vim  /etc/exports</span><br><span class="line">/data *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure><p>创建PV：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">nfs-pv1.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysqlpv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">8Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data/mysqlpv</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span> <span class="string">-f</span>  <span class="string">nfs-pv1.yml</span> </span><br><span class="line"><span class="string">persistentvolume/mysqlpv</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pv</span></span><br><span class="line"><span class="string">NAME</span>      <span class="string">CAPACITY</span>   <span class="string">ACCESS</span> <span class="string">MODES</span>   <span class="string">RECLAIM</span> <span class="string">POLICY</span>   <span class="string">STATUS</span>      <span class="string">CLAIM</span>   <span class="string">STORAGECLASS</span>   <span class="string">REASON</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">mysqlpv</span>   <span class="string">8Gi</span>        <span class="string">RWO</span>            <span class="string">Recycle</span>          <span class="string">Available</span>                                   <span class="string">16s</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">mkdir</span>  <span class="string">/data/mysqlpv</span></span><br></pre></td></tr></table></figure><p>部署mysql实例（镜像提前准备好）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  stable/mysql  -n  bdqn-mysql  --set  mysqlRootPassword=123.com   #创建实例，并设置密码</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                               READY   STATUS     RESTARTS   AGE</span><br><span class="line">bdqn-mysql-mysql-7b89c7b99-kg4wf   0/1     Init:0/1   0          17s  #正在初始化</span><br><span class="line">[root@master ~]# kubectl  get pvc</span><br><span class="line">NAME               STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">bdqn-mysql-mysql   Bound    mysqlpv   8Gi        RWO                           48s</span><br><span class="line"><span class="meta">#</span><span class="bash">还需要一个小镜像</span></span><br><span class="line">docker pull  busybox:1.25.0</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">bdqn-mysql-mysql-7b89c7b99-kg4wf   1/1     Running   0          2m10s</span><br><span class="line">[root@master ~]# kubectl  get deployments.</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">bdqn-mysql-mysql   1/1     1            1           2m13s</span><br></pre></td></tr></table></figure><p>查看密码是否设置成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get secret --namespace default bdqn-mysql-mysql -o jsonpath="&#123;.data.mysql-root-password&#125;" | base64 --decode; echo</span><br><span class="line">123.com</span><br></pre></td></tr></table></figure><p>验证数据有没有问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec  -it  bdqn-mysql-mysql-7b89c7b99-kg4wf -- mysql  -u root -p123.com</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show  databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>在部署mysql的时候，如何开启storageclass，以及如何使用？</strong></p><p>首先需要部署storageclass（存储类），让他可以自动创建PV</p><blockquote><p>1、需要基于NFS环境</p><p>2、RBAC权限</p><p>3、nfs-deployment.</p><p>4、storageclass</p></blockquote><p>helm在创建实例的时候是基于templates模板里的内容创建的，而模板内需要的信息则是在values.yaml文件里，我们则需要修改values.yaml文件里的内容就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master mysql]# vim  values.yaml  </span><br><span class="line">找到storageClass，去掉注释即可</span><br><span class="line">  storageClass: "test-nfs"  #storageclass的名称</span><br><span class="line">  accessMode: ReadWriteOnce  </span><br><span class="line">  size: 8Gi</span><br></pre></td></tr></table></figure><p>然后直接部署实例，在部署实例的时候 -f 指定这个values.yaml这个文件即可，它会根据实例的PVC自动创建PV</p><p><strong>如果想将sservice资源对象的类型更改为NodePort，又应该怎么做</strong></p><p>同样只需要修改values.yaml文件就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将类型给位NodePort即可，还可以自己指定端口</span></span><br><span class="line">  type: NodePort</span><br><span class="line">  port: 3306</span><br></pre></td></tr></table></figure><p>在创建实例的时候只需要指定以下这个文件就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master mysql]# helm  install  stable/mysql  -n  bdqn-mysql  --set  mysqlRootPassword=123.com  -f  values.yaml</span><br><span class="line">[root@master mysql]# kubectl  get svc</span><br><span class="line">NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">bdqn-mysql-mysql   NodePort    10.104.45.139   &lt;none&gt;        3306:30165/TCP   13m</span><br><span class="line">kubernetes         ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP          60d</span><br></pre></td></tr></table></figure><p><strong>服务的升级：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master mysql]#  helm  upgrade --set imageTag=5.7.15  bdqn-mysql stable/mysql -f values.yaml</span><br><span class="line">[root@master mysql]# kubectl  get deployments. -o wide</span><br><span class="line">NAME        READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">zhb-mysql   1/1     1            1           9m22s   zhb-mysql    mysql:5.7.15   app=zhb-mysql</span><br></pre></td></tr></table></figure><p><strong>回滚</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看有哪些版本</span></span><br><span class="line">[root@master mysql]# helm  history  zhb</span><br><span class="line">REVISIONUPDATED                 STATUS    CHART      DESCRIPTION     </span><br><span class="line">1       Mon Mar  2 16:33:26 2020SUPERSEDEDmysql-0.3.5Install complete</span><br><span class="line">2       Mon Mar  2 16:37:04 2020DEPLOYED  mysql-0.3.5Upgrade complete</span><br><span class="line">回滚到1版本</span><br><span class="line">[root@master mysql]# helm  rollback  zhb  1</span><br><span class="line">Rollback was a success.</span><br><span class="line">[root@master mysql]# kubectl  get deployments. -o wide</span><br><span class="line">NAME        READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">zhb-mysql   1/1     1            1           13m   zhb-mysql    mysql:5.7.14   app=zhb-mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>HPA</title>
    <link href="https://gilbert2.gitee.io/maisy/HPA.html"/>
    <id>https://gilbert2.gitee.io/maisy/HPA.html</id>
    <published>2020-02-28T16:00:00.000Z</published>
    <updated>2020-02-29T12:11:53.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HPA"><a href="#HPA" class="headerlink" title="HPA"></a>HPA</h3><hr><p>HPA的全称为Horizontal Pod Autoscaling，它可以根据当前pod资源的使用率（如CPU、磁盘、内存等），进行副本数的动态的扩容与缩容，以便减轻各个pod的压力。当pod负载达到一定的阈值后，会根据扩缩容的策略生成更多新的pod来分担压力，当pod的使用比较空闲时，在稳定空闲一段时间后，还会自动减少pod的副本数量</p><p>前提条件：系统应该能够获取当前Pod的资源使用情况（意思是可以执行 kubectl  top  pod命令，并且能够得到反馈信息）</p><p>heapster：这个组件之前是集成在k8s集群的，不过在1.12版本之后就被移除了。如果还想使用此功能，应该部署metricServer这个k8s集群资源使用情况的聚合器</p><p>要是想实现自动扩容缩容的功能，还需要部署heapster服务，而这个服务集成在Prometheus的MetricServer服务中，也就是说需要部署Prometheus服务，但是我们也可以直接部署heapster服务</p><p><strong>实现Pod的扩容与缩容示例</strong></p><p>因为heapster集成在MetricServer服务中，所以首先部署这个服务</p><p>1、首先安装MerticServer服务，从Github上克隆项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# git clone https://github.com/kubernetes-incubator/metrics-server.git</span><br></pre></td></tr></table></figure><p>2、修改yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  metrics-server/deploy/kubernetes/metrics-server-deployment.yaml  </span><br><span class="line">        image: k8s.gcr.io/metrics-server-amd64:v0.3.1   #更换镜像版本  </span><br><span class="line">//在44行添加  </span><br><span class="line">        command:  </span><br><span class="line">          - /metrics-server  </span><br><span class="line">          - --kubelet-insecure-tls  </span><br><span class="line">          - --kubelet-preferred-address-types=InternalIP</span><br></pre></td></tr></table></figure><p>3、下载metrics-server镜像k8s.gcr.io/metrics-server-amd64:v0.3.1（因为国内无法访问k8s.gcr.io，所以采用以下办法）</p><p><strong>pull-google-container</strong> <strong>工具脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  pull-google.sh  </span><br><span class="line">image=$1  </span><br><span class="line">echo $1  </span><br><span class="line">img=`echo $image | sed 's/k8s\.gcr\.io/anjia0532\/google-containers/g;s/gcr\.io/anjia0532/g;s/\//\./g;s/ /\n/g;s/_/-/g;s/anjia0532\./anjia0532\//g' | uniq | awk '&#123;print ""$1""&#125;'`  </span><br><span class="line">echo "docker pull $img"  </span><br><span class="line">docker pull $img  </span><br><span class="line">echo  "docker tag $img $image"  </span><br><span class="line">docker tag $img $image  </span><br><span class="line">[root@master ~]# chmod  +x  pull-google.sh  &amp;&amp;  cp  pull-google.sh   /usr/local/bin/pull-google-container  </span><br><span class="line">[root@master ~]# pull-google-container k8s.gcr.io/metrics-server-amd64:v0.3.1</span><br></pre></td></tr></table></figure><p>4、将镜像打包发给k8s各个节点 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker save  &gt;  metrics-server-amd64.tar  k8s.gcr.io/metrics-server-amd64:v0.3.1   </span><br><span class="line">[root@master ~]# scp  metrics-server-amd64.tar  node01:/root  </span><br><span class="line">[root@master ~]# scp  metrics-server-amd64.tar  node02:/root  </span><br><span class="line">[root@node01 ~]# docker load &lt; metrics-server-amd64.tar  </span><br><span class="line">[root@node02 ~]# docker load &lt; metrics-server-amd64.tar</span><br></pre></td></tr></table></figure><p>5、运行yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  apply  -f  metrics-server/deploy/kubernetes/  </span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created  </span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created  </span><br><span class="line">rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created  </span><br><span class="line">apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created  </span><br><span class="line">serviceaccount/metrics-server created  </span><br><span class="line">deployment.apps/metrics-server created  </span><br><span class="line">service/metrics-server created  </span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:metrics-server created  </span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created  </span><br><span class="line">[root@master ~]# kubectl  get pod -n kube-system  </span><br><span class="line">metrics-server-849dcc6bb4-hr5xp   1/1     Running   0          13s</span><br></pre></td></tr></table></figure><p>6、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl top node   </span><br><span class="line">error: metrics not available yet  #这里等一会就行  </span><br><span class="line">[root@master ~]# kubectl  top  pod  -n  kube-system metrics-server-849dcc6bb4-hr5xp   </span><br><span class="line">NAME                              CPU(cores)   MEMORY(bytes)     </span><br><span class="line">metrics-server-849dcc6bb4-hr5xp   1m           13Mi              </span><br><span class="line">[root@master ~]# kubectl  top  node  </span><br><span class="line">NAME     CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%     </span><br><span class="line">master   56m          2%     1145Mi          66%         </span><br><span class="line">node01   12m          0%     478Mi           27%         </span><br><span class="line">node02   11m          0%     452Mi           26%</span><br></pre></td></tr></table></figure><p>这里，我们使用一个测试镜像，这个镜像基于php-apache制作的docker镜像，包含了一些可以运行cpu密集计算任务的代码（模拟压力测试）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  run  php-apache  --image=mirrorgooglecontainers/hpa-example:latest  --requests=cpu=200m  --expose  --port=80</span><br><span class="line">[root@master ~]# kubectl  get deployments.</span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   1/1     1            1           33s</span><br><span class="line">[root@master ~]# kubectl  get  pod</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">php-apache-794cdd478f-l9kxn   1/1     Running   0          6m27s</span><br><span class="line">[root@master ~]# kubectl  top  pod  php-apache-794cdd478f-l9kxn </span><br><span class="line">NAME                          CPU(cores)   MEMORY(bytes)   </span><br><span class="line">php-apache-794cdd478f-l9kxn   0m           9Mi</span><br></pre></td></tr></table></figure><p>创建HPA控制器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl autoscale deployment php-apache --cpu-percent=50  --min=1  --max=10</span><br><span class="line">horizontalpodautoscaler.autoscaling/php-apache autoscaled</span><br><span class="line">[root@master ~]# kubectl  get  hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         10        1          2m1s</span><br><span class="line">限制cpu使用率不能超过50%，最少有一个Pod，最多有10个</span><br></pre></td></tr></table></figure><p>实时监控Pod的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod -w</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">php-apache-794cdd478f-l9kxn   1/1     Running   0          40m</span><br></pre></td></tr></table></figure><p>创建一个应用，用来不停的访问我们刚刚创建的php-apache的svc资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  run  -i  --tty  load-generator  --image=busybox  /bin/sh</span><br></pre></td></tr></table></figure><p>进入Pod内，执行此命令用来模拟访问php-apache的svc资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">对Pod进行死循环请求</span></span><br><span class="line">/ #  while true; do wget -q -O- http://php-apache.default.svc.cluster.local; done</span><br></pre></td></tr></table></figure><p>运行一段时间后查看pod的数量变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NAME                             READY   STATUS              RESTARTS   AGE</span><br><span class="line">load-generator-7d549cd44-xm98c   1/1     Running             1          25m</span><br><span class="line">php-apache-867f97c8cb-4r6sk      1/1     Running             0          19m</span><br><span class="line">php-apache-867f97c8cb-4rcpk      1/1     Running             0          13m</span><br><span class="line">php-apache-867f97c8cb-5pbxf      1/1     Running             0          16m</span><br><span class="line">php-apache-867f97c8cb-8htth      1/1     Running             0          13m</span><br><span class="line">php-apache-867f97c8cb-d94h9      0/1     ContainerCreating   0          13m</span><br><span class="line">php-apache-867f97c8cb-drh52      1/1     Running             0          18m</span><br><span class="line">php-apache-867f97c8cb-f67bs      0/1     ContainerCreating   0          17m</span><br><span class="line">php-apache-867f97c8cb-nxc2r      1/1     Running             0          19m</span><br><span class="line">php-apache-867f97c8cb-vw74k      1/1     Running             0          39m</span><br><span class="line">php-apache-867f97c8cb-wb6l5      0/1     ContainerCreating   0          15m</span><br></pre></td></tr></table></figure><p>当停止死循环请求后，也并不会立即减少pod数量，会等一段时间后减少pod数量，防止流量再次激增。</p><p>至此，pod副本数量的自动扩缩容就实现了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get hpa -w</span><br><span class="line">NAME         REFERENCE               TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   106%/50%   1         10        8          50m</span><br><span class="line">php-apache   Deployment/php-apache   102%/50%   1         10        8          50m</span><br><span class="line">php-apache   Deployment/php-apache   93%/50%    1         10        8          51m</span><br><span class="line">php-apache   Deployment/php-apache   87%/50%    1         10        8          51m</span><br><span class="line">php-apache   Deployment/php-apache   82%/50%    1         10        8          51m</span><br><span class="line">php-apache   Deployment/php-apache   77%/50%    1         10        8          51m</span><br><span class="line">php-apache   Deployment/php-apache   68%/50%    1         10        8          52m</span><br><span class="line">php-apache   Deployment/php-apache   61%/50%    1         10        8          52m</span><br></pre></td></tr></table></figure><h3 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h3><hr><p>以下只是yaml文件中的一段，并不是整个yaml文件</p><h4 id="基于Pod"><a href="#基于Pod" class="headerlink" title="基于Pod"></a>基于Pod</h4><p>kubernetes对资源的限制实际上是通过cgroup来控制的，cgroup是容器的一组用来控制内核如何运行进程的相关属性集合，针对内存、cpu和各种设备都有对应的cgroup</p><p>默认情况下，Pod运行没有cpu和内存的限额，这意味着系统中的任何Pod将能够想执行该Pod所在的节点一样，消耗足够多的cpu和内存，一般会针对某些应用的pod资源进行资源限制，这个资源限制通过resources的requeste和limits来实现</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">cgroup-pod.yaml</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span>  <span class="string">Always</span></span><br><span class="line">    <span class="attr">image:</span>  <span class="string">xxx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">containerPort:</span>  <span class="number">80</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span>  <span class="string">"4"</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">2Gi</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span>  <span class="string">260m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">260Mi</span></span><br></pre></td></tr></table></figure><p>requests：要分配的资源，limits为最高请求的资源值。可以简单的理解为初始值和最大值</p><h3 id="基于名称空间"><a href="#基于名称空间" class="headerlink" title="基于名称空间"></a>基于名称空间</h3><hr><p>1）计算资源配额</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">compute-resources.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ResourceQuota</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">compute-resources</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hard:</span></span><br><span class="line">    <span class="attr">pods:</span> <span class="string">"20"</span></span><br><span class="line">    <span class="attr">requests.cppu:</span>  <span class="string">"20"</span></span><br><span class="line">    <span class="attr">requests.memory:</span>  <span class="string">100Gi</span></span><br><span class="line">    <span class="attr">limits.cpu:</span> <span class="string">"40"</span></span><br><span class="line">    <span class="attr">limits.memory:</span>  <span class="string">200Gi</span></span><br></pre></td></tr></table></figure><p>2）配置对象数量配额限制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">object-counts.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ResourceQuota</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">object-counts</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hard:</span> </span><br><span class="line">    <span class="attr">configmaps:</span> <span class="string">"10"</span></span><br><span class="line">    <span class="attr">persistentvolumeclaims:</span> <span class="string">"4"</span></span><br><span class="line">    <span class="attr">replicationcontrollers:</span> <span class="string">"20"</span></span><br><span class="line">    <span class="attr">secrets:</span>  <span class="string">"10"</span></span><br><span class="line">    <span class="attr">service.loadbalancers:</span>  <span class="string">"2"</span></span><br></pre></td></tr></table></figure><p>3）配置CPU和内存的LimitRange</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim limitRange.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: LimiRange</span><br><span class="line">metadata:</span><br><span class="line">  name: mem-limit-range</span><br><span class="line">spec:</span><br><span class="line">  limits:</span><br><span class="line">  - default:</span><br><span class="line">      memory: 50Gi</span><br><span class="line">      cpu:  5</span><br><span class="line">    defaultRequest:</span><br><span class="line">      memory: 1Gi</span><br><span class="line">      cpu:  1</span><br><span class="line">    type: Container</span><br></pre></td></tr></table></figure><p>default即limit的值</p><p>defaultRequest即request的值</p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Heldm工具部署</title>
    <link href="https://gilbert2.gitee.io/maisy/Helm%E5%B7%A5%E5%85%B7%E9%83%A8%E7%BD%B2.html"/>
    <id>https://gilbert2.gitee.io/maisy/Helm%E5%B7%A5%E5%85%B7%E9%83%A8%E7%BD%B2.html</id>
    <published>2020-02-28T16:00:00.000Z</published>
    <updated>2020-02-29T12:11:53.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Helm"><a href="#Helm" class="headerlink" title="Helm"></a>Helm</h3><hr><p>在Kubernetes中部署容器云的应用也是一项有挑战性的工作，Helm就是为了简化在Kubernetes中安装部署容器云应用的一个客户端工具。通过helm能够帮助开发者定义、安装和升级Kubernetes中的容器云应用，同时，也可以通过helm进行容器云应用的分享。在Kubeapps Hub中提供了包括Redis、MySQL和Jenkins等常见的应用，通过helm可以使用一条命令就能够将其部署安装在自己的Kubernetes集群中</p><p>helm的整体架构如下图所示，Helm架构由Helm客户端、Tiller服务器端和Chart仓库所组成；Tiller部署在Kubernetes中，Helm客户端从Chart仓库中获取Chart安装包，并将其安装部署到Kubernetes集群中<br><img src="https://img-blog.csdnimg.cn/20200229200637295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Helm是管理Kubernetes包的工具，Helm能提供下面的能力：</p><blockquote><ul><li>创建新的charts</li><li>将charts打包成tgz文件</li><li>与chart仓库交互</li><li>安装和卸载Kubernetes的应用</li><li>管理使用Helm安装的charts的生命周期</li></ul></blockquote><p>在Helm中，有三个需要了解的重要概念：</p><blockquote><ul><li>chart：是创建Kubernetes应用实例的信息集合；</li><li>config：创建发布对象的chart的配置信息</li><li>release：chart的运行实例，包含特定的config</li></ul></blockquote><p><strong>helm组件</strong></p><hr><p>在Helm中有两个主要的组件，既Helm客户端和Tiller服务器：</p><p><strong>Helm</strong>客户端：这是一个供终端用户使用的命令行工具，客户端负责如下的工作：</p><blockquote><p>本地chart开发</p><p>管理仓库</p><p>与Tiller服务器交互</p><p>​        发送需要被安装的charts，请求关于发布版本的信息，求更新或者卸载已安装的发布版本</p></blockquote><p><strong>Tiller</strong>服务器：Tiller服务部署在Kubernetes集群中，Helm客户端通过与Tiller服务器进行交互，并最终与Kubernetes API服务器进行交互。 Tiller服务器负责如下的工作：</p><blockquote><ul><li>监听来自于Helm客户端的请求</li><li>组合chart和配置来构建一个发布</li><li>在Kubernetes中安装，并跟踪后续的发布</li><li>通过与Kubernetes交互，更新或者char</li></ul></blockquote><p>客户端负责管理chart，服务器发展管理发布</p><p><strong>Helm技术实现</strong></p><hr><p>Helm客户端是使用Go语言编写的，它通过gRPC协议与Tiller服务器交互。</p><p>Tiller服务器也是使用Go语言编写的，它使用Kubernetes客户端类库（当前是哦那个REST+JSON）与Kubernetes进行通讯。</p><p>Tiller服务器通过Kubernetes的ConfigMap存储信息，因此本身没有用于存储数据库</p><h3 id="helm安装部署"><a href="#helm安装部署" class="headerlink" title="helm安装部署"></a>helm安装部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从GitHub上下载helm</span></span><br><span class="line">[root@master ~]# wget https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">解压，获取helm的命令</span></span><br><span class="line">[root@master ~]# tar -zxvf  helm-v2.14.3-linux-amd64.tar.gz</span><br><span class="line">[root@master ~]# mv  linux-amd64/helm   /usr/local/bin/</span><br><span class="line">[root@master ~]# chmod  +x  /usr/local/bin/helm </span><br><span class="line"><span class="meta">#</span><span class="bash">确认命令可用</span></span><br><span class="line">[root@master ~]# helm  help</span><br><span class="line"><span class="meta">#</span><span class="bash">设置tab键自动补全</span></span><br><span class="line">[root@master ~]# source  &lt;(helm completion bash)</span><br></pre></td></tr></table></figure><p><strong>安装Tiller服务</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建授权用户，并授予权限</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">tiller-rbac.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">tiller-rbac.yaml</span> </span><br><span class="line"><span class="string">serviceaccount/tiller</span> <span class="string">created</span></span><br><span class="line"><span class="string">clusterrolebinding.rbac.authorization.k8s.io/tiller</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p>初始化，生成一个包的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  init  --service-account=tiller</span><br></pre></td></tr></table></figure><p>查看pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod -n kube-system</span><br><span class="line">tiller-deploy-8557598fbc-5cfv6   0/1     ImagePullBackOff   0          4m6s</span><br><span class="line">//这个镜像是下载不下来的，因为默认是从谷歌下载的</span><br><span class="line"><span class="meta">#</span><span class="bash">修改yaml文件，将镜像改为阿里云的</span></span><br><span class="line">[root@master ~]# kubectl  edit  pod  -n  kube-system  tiller-deploy-8557598fbc-5cfv6</span><br><span class="line">//修改spec字段的image</span><br><span class="line">image: registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.14.3</span><br><span class="line">保存退出，它会自动下载镜像</span><br><span class="line">[root@master ~]# kubectl  get pod  -n  kube-system  |  grep  tiller</span><br><span class="line">tiller-deploy-8557598fbc-5cfv6   1/1     Running   0          13m</span><br></pre></td></tr></table></figure><p>查看helm仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  repo list</span><br><span class="line">NAME  URL                                             </span><br><span class="line">stablehttps://kubernetes-charts.storage.googleapis.com</span><br><span class="line">local http://127.0.0.1:8879/charts</span><br></pre></td></tr></table></figure><p>添加阿里云的仓库源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line">"stable" has been added to your repositories</span><br><span class="line">[root@master ~]# helm  repo list</span><br><span class="line">NAME  URL                                                   </span><br><span class="line">stablehttps://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line">local http://127.0.0.1:8879/charts</span><br></pre></td></tr></table></figure><p>查看版本信息，必须保证可以看到client和server，才可以正常使用helm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  version</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:"v2.14.3", GitCommit:"0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085", GitTreeState:"clean"&#125;</span><br><span class="line">Server: &amp;version.Version&#123;SemVer:"v2.14.3", GitCommit:"0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085", GitTreeState:"clean"&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s监控</title>
    <link href="https://gilbert2.gitee.io/maisy/k8%E7%9B%91%E6%8E%A7.html"/>
    <id>https://gilbert2.gitee.io/maisy/k8%E7%9B%91%E6%8E%A7.html</id>
    <published>2020-02-27T16:00:00.000Z</published>
    <updated>2020-02-28T07:02:46.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、k8s的UI访问界面-dashboard"><a href="#一、k8s的UI访问界面-dashboard" class="headerlink" title="一、k8s的UI访问界面-dashboard"></a>一、k8s的UI访问界面-dashboard</h3><blockquote><p>General-purpose web UI for Kubernetes clusters</p><p>用于Kubernetes集群的通用web UI</p></blockquote><p>在dashbord中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它当作监控k8s集群的软件</p><p>dashboard能够直观的看到rc、deployment、pod、services等k8s组件的运行情况和日志信息。</p><p>1、从Github搜索dasgboard，下载yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  dashboard</span><br><span class="line">[root@master ~]# cd dashboard/</span><br><span class="line">[root@master dashboard]# wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml</span><br><span class="line">[root@master dashboard]# ls</span><br><span class="line">recommended.yaml</span><br><span class="line">[root@node01 ~]# docker  pull  kubernetesui/dashboard:v2.0.0-rc5</span><br><span class="line">[root@node02 ~]# docker  pull  kubernetesui/dashboard:v2.0.0-rc5</span><br></pre></td></tr></table></figure><p>2、运行yaml文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">修改service类型类NodePort</span><br><span class="line"><span class="meta">#</span><span class="bash">在40行的spec字段修改</span></span><br><span class="line">[root@master dashboard]# vim  recommended.yaml</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">[root@master dashboard]# kubectl  apply  -f  recommended.yaml </span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# kubectl  get  pod  -n  kubernetes-dashboard </span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-7f5767668b-f7nh6   1/1     Running   0          9m32s</span><br><span class="line">kubernetes-dashboard-57b4bcc994-2rj9k        1/1     Running   0          9m32s</span><br><span class="line">[root@master dashboard]# kubectl  get svc -n kubernetes-dashboard </span><br><span class="line">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.111.237.119   &lt;none&gt;        8000/TCP        16m</span><br><span class="line">kubernetes-dashboard        NodePort    10.107.77.172    &lt;none&gt;        443:30361/TCP   16m</span><br><span class="line">[root@master dashboard]# kubectl  get deployments. -n  kubernetes-dashboard </span><br><span class="line">NAME                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">dashboard-metrics-scraper   1/1     1            1           11m  #将收集到的数据制作成图表的形式</span><br><span class="line">kubernetes-dashboard        1/1     1            1           11m</span><br></pre></td></tr></table></figure><p>3、通过浏览器访问：<a href="https://192.168.1.70:30361" target="_blank" rel="noopener">https://192.168.1.70:30361</a><br><img src="https://img-blog.csdnimg.cn/20200228143349194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>两种登录方式：</p><blockquote><p>kubeconfig：配置文件</p><p>Token：令牌</p></blockquote><p><strong>基于Token的方法登录dashboard</strong></p><p>1、创建一个dashboaed的管理用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# kubectl create  serviceaccount dashboard-admin -n kube-system </span><br><span class="line">serviceaccount/dashboard-admin created</span><br></pre></td></tr></table></figure><p>2、将这个用户绑定为集群管理用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br></pre></td></tr></table></figure><p>3、获取Token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">得到Token的名称</span></span><br><span class="line">[root@master dashboard]# kubectl  get secrets  -n kube-system | grep dashboard-admin</span><br><span class="line">dashboard-admin-token-mwht2                      kubernetes.io/service-account-token   3      5m30s</span><br><span class="line"><span class="meta">#</span><span class="bash">查看上述得到的secret资源的详细信息，会得到Token</span></span><br><span class="line">[root@master dashboard]# kubectl  get secrets -n kube-system  dashboard-admin-token-mwht2 </span><br><span class="line">NAME                          TYPE                                  DATA   AGE</span><br><span class="line">dashboard-admin-token-mwht2   kubernetes.io/service-account-token   3      7m19s</span><br><span class="line">//这个类型不是Opaque，说明不是隐藏的，我们可以看到他的详细信息</span><br><span class="line"><span class="meta">#</span><span class="bash">获取详细信息，得到Token</span></span><br><span class="line">[root@master dashboard]# kubectl  describe secrets -n kube-system  dashboard-admin-token-mwht2</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tbXdodDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNjliODE4YjYtOTA3Zi00NTBmLWI3NjgtMTc2ODIyM2Y1OTIyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.WCcVrx6oXs0k7-0hQOOik30ZPJl0sNeQE987PHv_Jm9ZpLQ4P9VIQdN49uRvNsd7DF4Ozgu5enWFvNsiaCDmYHauK2LAoHbDBURE9wGx8VlMaaquZ1B_ur4lOluP6Ha3wdZB64fEdtrg-6-DjIS7SC2Kqr2Bcl8NeRdtABh3cufgJ2EQoU40-FUy-0ahegYixIrrQ-DXgZeGrXP79RzHmBXaSwbRwTqWXwNf0e25on_gCiiMC-MVmbZ0MXhNNv-jc8uD2obaEUTdOCLg__f482Zy7xLEMjBv9eVn0P5u7c8r45VfDs08zK4Leh5GI4KIgcuxt37TCtfmEz5XEoTLnA</span><br></pre></td></tr></table></figure><p>4、在浏览器上使用Token登录</p><p>PS：如果是使用的是旧版本的dashboard，使用谷歌浏览器登录，可能不成功，需要换成其他的浏览器，比如火狐<br><img src="https://img-blog.csdnimg.cn/20200228143431657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228143451277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>//如果没有显示，就说明serviceaccount，没有绑定账号，就说明没有权限，就什么都看不到</p><p>这里我们可以创建资源，有三种方式<br><img src="https://img-blog.csdnimg.cn/20200228143508996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>从表单创建默认的是Deployment资源对象<br><img src="https://img-blog.csdnimg.cn/20200228143521696.png" alt="在这里插入图片描述"></p><p>还有一些扩容缩容、更新，删除的操作</p><p><strong>除了基于Token的方法登录dashboard，还有基于kuberconfig配置文件的登录方式</strong></p><p>1、获取Tonke</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">得到Token的名称</span></span><br><span class="line">[root@master dashboard]# kubectl  get secrets  -n kube-system | grep dashboard-admin</span><br><span class="line">dashboard-admin-token-mwht2                      kubernetes.io/service-account-token   3      5m30s</span><br><span class="line"><span class="meta">#</span><span class="bash">查看上述得到的secret资源的详细信息，会得到Token</span></span><br><span class="line">[root@master dashboard]# kubectl  get secrets -n kube-system  dashboard-admin-token-mwht2 </span><br><span class="line">NAME                          TYPE                                  DATA   AGE</span><br><span class="line">dashboard-admin-token-mwht2   kubernetes.io/service-account-token   3      7m19s</span><br></pre></td></tr></table></figure><p>2、生成kubeconfig配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置一个环境变量代表获取Token</span></span><br><span class="line">[root@master dashboard]# DASH_TOKEN=$(kubectl  get  secrets -n kube-system dashboard-admin-token-mwht2 -o  jsonpath=&#123;.data.token&#125; | base64 -d)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将k8s集群的配置信息写入kubeconfig配置文件中</span></span><br><span class="line">[root@master dashboard]# kubectl  config  set-cluster kubernetes  --server=192.168.1.70:6443  --kubeconfig=/root/.dashboard-admin.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将Token写入配置文件里</span></span><br><span class="line">[root@master dashboard]# kubectl  config  set-credentials  dashboard-admin  --token=$DASH_TOKEN  --kubeconfig=/root/.dashboard-admin.conf</span><br><span class="line">[root@master dashboard]# kubectl config set-context dashboard-admin@kubernetes --cluster=kubernetes --user=dashboard-admin --kubeconfig=/root/.dashboard-admin.conf</span><br><span class="line">[root@master dashboard]# kubectl config use-context dashboard-admin@kubernetes --kubeconfig=/root/.dashboard-admin.conf</span><br></pre></td></tr></table></figure><p>3、将生成的/root/.dashboard-admin.config的配置文件，导出并保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# sz  /root/.dashboard-admin.conf</span><br></pre></td></tr></table></figure><p>4、从浏览器选择kubeconfig的登录方式，然后导入配置文件即可<br><img src="https://img-blog.csdnimg.cn/20200228143540197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="二、weave-scope监控k8s集群Scope"><a href="#二、weave-scope监控k8s集群Scope" class="headerlink" title="二、weave-scope监控k8s集群Scope"></a>二、weave-scope监控k8s集群Scope</h3><p>Weave Scope是Weaveworks开发的监控工具。Weave Scope在Kubernetes集群中生成进程，容器和主机的映射，以帮助实时了解Docker容器。还可基于图形UI管理容器并在容器上运行诊断命令</p><p>1、在Github上直接搜索scope，找到yaml文件并下载下来<br><img src="https://img-blog.csdnimg.cn/20200228143556719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2、往下拉找到kubernetes，点击<br><img src="https://img-blog.csdnimg.cn/20200228143616545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3、将这个yaml文件下载下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# wget https://cloud.weave.works/k8s/scope.yaml</span><br></pre></td></tr></table></figure><p>4、修改yaml，修改service的端口类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  scope.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash">在212行的spec字段中添加</span></span><br><span class="line">      type: NodePort</span><br><span class="line"><span class="meta">#</span><span class="bash">保存并退出，运行yaml文件</span></span><br><span class="line">root@master ~]# kubectl  apply  -f  scope.yaml </span><br><span class="line">namespace/weave created</span><br><span class="line">serviceaccount/weave-scope created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/weave-scope created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/weave-scope created</span><br><span class="line">deployment.apps/weave-scope-app created</span><br><span class="line">service/weave-scope-app created</span><br><span class="line">deployment.apps/weave-scope-cluster-agent created</span><br><span class="line">daemonset.apps/weave-scope-agent created</span><br><span class="line">[root@master ~]# kubectl  get deployments. -n weave </span><br><span class="line">NAME                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">weave-scope-app             1/1     1            1           26m  #展示信息</span><br><span class="line">weave-scope-cluster-agent   1/1     1            1           26m  #收集信息</span><br><span class="line">[root@master ~]# kubectl  get pod  -n  weave </span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">weave-scope-agent-jv4g8                      1/1     Running   0          21s</span><br><span class="line">weave-scope-agent-kw7x9                      1/1     Running   0          21s</span><br><span class="line">weave-scope-agent-vnqks                      1/1     Running   0          21s</span><br><span class="line">weave-scope-app-78cff98cbc-nx6p5             1/1     Running   0          21s</span><br><span class="line">weave-scope-cluster-agent-7cc889fbbf-tnrhv   1/1     Running   0          21s</span><br></pre></td></tr></table></figure><p>5、查看端口，使用浏览器访问：192.168.1.70:30366</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get svc  -n  weave </span><br><span class="line">NAME              TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">weave-scope-app   NodePort   10.110.46.45   &lt;none&gt;        80:30366/TCP   41s</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200228143639816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在scope的web界面中，可以查看很多的东西，pod、node节点等详细信息，包括打开容器的终端，查看其日志信息等等……</p><h3 id="三、Prometheus"><a href="#三、Prometheus" class="headerlink" title="三、Prometheus"></a>三、Prometheus</h3><p>Prometheus可以原生地监测Kubernetes，Prometheus Operator简化了Kubernetes上的Prometheus设置，并允许使用Prometheus适配器提供自定义指标API。 Prometheus提供强大的查询语言和内置仪表板，用于查询和可视化数据</p><blockquote><p>PS：在这里部署的prometheus，并不是Prometheus官网提供的，而是使用的coreOS提供的Prometheus项目</p></blockquote><p><strong>Prometheus各个组件的作用：</strong></p><blockquote><p><strong>MetricsServer</strong>：是k8s集群资源使用情况的聚合器，收集数据给k8s集群内使用，如kubectl，hpa，scheduler等</p><p><strong>Prometheus Operator</strong>：是一个系统检测和警报工具箱，用来存储监控数据</p><p><strong>Prometheus node-exporter</strong>：收集k8s集群内资源的数据，指定告警规则</p><p><strong>Prometheus</strong>：收集apiServer，scheduler，contorller-manager，kubelet组件的数据，通过http协议传输</p><p><strong>Grnfana</strong>：可视化数据统计和监控平台</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200228143703917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228143716114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1、克隆Prometheus的项目地址到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  prometheus</span><br><span class="line">[root@master ~]# cd  prometheus/</span><br><span class="line">[root@master prometheus]# git  clone  https://github.com/coreos/kube-prometheus.git</span><br><span class="line">[root@master prometheus]# ls</span><br><span class="line">kube-prometheus</span><br></pre></td></tr></table></figure><p>2、修改grafana-service.yaml文件，使用NodePort的暴露方式，暴露的端口为31001</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master prometheus]# cd  kube-prometheus/manifests/</span><br><span class="line">[root@master manifests]# vim  grafana-service.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash">在spec字段下添加</span></span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 3000</span><br><span class="line">    targetPort: http</span><br><span class="line">    nodePort: 31001</span><br></pre></td></tr></table></figure><p>3、修改prometheus-service.yaml文件，使用NodePort的暴露方式，暴露的端口为31002</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]# vim  prometheus-service.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash">在spec字段下添加</span></span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9090</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 31002</span><br></pre></td></tr></table></figure><p>4、修改alertmanager-service.yaml（配置告警模板）文件，使用NodePort的暴露方式，暴露的端口为31003</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]# vim  alertmanager-service.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash">在spec字段下添加</span></span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9093</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 31003</span><br></pre></td></tr></table></figure><p>5、将这个目录中的yaml，全部运行，是运行以上yaml文件的基础环境配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]# cd  setup/   #如果想要运行上面的yaml，首先要运行基础环境的设置</span><br><span class="line">[root@master setup]# cd  ..</span><br><span class="line">[root@master manifests]# pwd</span><br><span class="line">/root/prometheus/kube-prometheus/manifests</span><br><span class="line">[root@master manifests]# kubectl  apply  -f  setup/</span><br></pre></td></tr></table></figure><p>6、运行主yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]# cd  ..</span><br><span class="line">[root@master kube-prometheus]# pwd</span><br><span class="line">/root/prometheus/kube-prometheus</span><br><span class="line">[root@master kube-prometheus]# kubectl  apply  -f  manifests/</span><br></pre></td></tr></table></figure><p>7、浏览器访问：192.168.1.70:31001<br><img src="https://img-blog.csdnimg.cn/2020022814373886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>//根据提示修改密码，然后保存登录<br><img src="https://img-blog.csdnimg.cn/20200228143754903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228143805782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228143913188.png" alt="在这里插入图片描述"></p><p>//将这三个导入一下</p><p>浏览器访问grafan官网：<a href="https://grafana.com/导入监控模板" target="_blank" rel="noopener">https://grafana.com/导入监控模板</a><br><img src="https://img-blog.csdnimg.cn/20200228143943712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>搜索prometheus，选择相应的模板<br><img src="https://img-blog.csdnimg.cn/20200228144006585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>复制ID号<br><img src="https://img-blog.csdnimg.cn/20200228144029692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>回到grafan，导入模板<br><img src="https://img-blog.csdnimg.cn/20200228144045253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228144059783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228144116795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>部署成功以后，就可运行一条命令，查看资源使用情况（MetricsServer必须部署成功）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  top  node </span><br><span class="line">NAME     CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">master   182m         9%     1380Mi          80%       </span><br><span class="line">node01   383m         19%    1402Mi          81%       </span><br><span class="line">node02   396m         19%    1406Mi          81%</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>dashboard：</p><p>可以查看集群中应用的运行状态，也能够修改、创建k8s集群中的个各种资源</p><blockquote><p>用于Kubernetes集群的通用web UI，在dasgboard中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它仿作监控k8s集群的软件。dashboard能够直观的看到rc、deployment、pod、service等k8s组件与逆行的情况和日志信息</p></blockquote><p>weave-scope：</p><p>可以查看集群中应用的运行状态，也能够修改、创建k8s集群中的个各种资源</p><blockquote><p>Weave Scope是Weaveworks开发的监控工具。Weave Scope在Kubernetes集群中生成进程，容器和主机的映射，以帮助实时了解Docker容器。还可基于图形UI管理容器并在容器上运行诊断命令</p></blockquote><p>Prometheus：</p><p>Prometheus是一个开源系统监控和报警工具。</p><p>Prometheus服务可以直接通过目标拉取数据，或者间接地通过中间网关拉取数据。它在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中，PromQL和其他API可视化展示收集的数据在K8s中，关于集群的资源有metrics度量值的概念，有各种不同的exporter可以通过api接口对外提供各种度量值的及时数据，prometheus在与k8s融合工作的过程中就是通过与这些提供metric值的exporter进行交互，获取数据，整合数据，展示数据，触发告警的过程</p><blockquote><p>Prometheus可以原生地监测Kubernetes，Prometheus Operator简化了Kubernetes上的Prometheus设置，并允许使用Prometheus适配器提供自定义指标API。 Prometheus提供强大的查询语言和内置仪表板，用于查询和可视化数据</p></blockquote>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Ingress实现虚拟主机和Https代理访问</title>
    <link href="https://gilbert2.gitee.io/maisy/Ingress%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA.html"/>
    <id>https://gilbert2.gitee.io/maisy/Ingress%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA.html</id>
    <published>2020-02-25T16:00:00.000Z</published>
    <updated>2020-02-28T07:01:19.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ingress实现虚拟主机和Https代理访问"><a href="#Ingress实现虚拟主机和Https代理访问" class="headerlink" title="Ingress实现虚拟主机和Https代理访问"></a>Ingress实现虚拟主机和Https代理访问</h2><p>虚拟主机，也叫“网站空间”，就是把一台运行在互联网上的物理服务器划分成多个“虚拟”服务器。虚拟主机技术极大的促进了网络技术的应用和普及。同时虚拟主机的租用服务也成了网络时代的一种新型经济形式</p><p>1、首先确定要运行Ingress-nginx-controller服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod -n ingress-nginx </span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-controller-5954d475b6-ktpf9   1/1     Running   1          43h</span><br></pre></td></tr></table></figure><p>2、将Ingress-nginx-controller暴露为一个service资源对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get svc -n ingress-nginx </span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.97.246   &lt;none&gt;        80:32007/TCP,443:30741/TCP   43h</span><br></pre></td></tr></table></figure><p>3、创建一个Deployment资源和一个Service资源，并相互关联</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">deploy1.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deploy1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span>  <span class="string">nginx1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx1</span></span><br><span class="line">        <span class="attr">image:</span>  <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">svc-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span>  <span class="string">nginx1</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">deploy1.yaml</span> </span><br><span class="line"><span class="string">deployment.extensions/deploy1</span> <span class="string">created</span></span><br><span class="line"><span class="string">service/svc-1</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get  pod </span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">deploy1-7df6778547-v6ww9   1/1     Running   0          2m33s</span><br><span class="line">deploy1-7df6778547-vkvwf   1/1     Running   0          2m33s</span><br><span class="line">[root@master ~]# kubectl  get svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        52d</span><br><span class="line">svc-1          ClusterIP   10.109.213.247   &lt;none&gt;        80/TCP         3m17s</span><br></pre></td></tr></table></figure><p>4、创建另外“一对”服务（delpoy2.yaml和svc-2）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  deploy2.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app:  nginx2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx2</span><br><span class="line">        image:  nginx   #这里没有更换镜像，使用相同的nginx镜像</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-2</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app:  nginx2</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">[root@master ~]# kubectl  apply  -f  deploy2.yaml </span><br><span class="line">deployment.extensions/deploy2 created</span><br><span class="line">service/svc-2 created</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">deploy2-7b6786d8bf-6xnjs   1/1     Running   0          19s</span><br><span class="line">deploy2-7b6786d8bf-dvjqt   1/1     Running   0          19s</span><br><span class="line">[root@master ~]# kubectl  get svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        52d</span><br><span class="line">svc-2          ClusterIP   10.106.67.155    &lt;none&gt;        80/TCP         24s</span><br></pre></td></tr></table></figure><p>4、创建Ingress规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www1.bdqn.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span>  <span class="string">svc-1</span></span><br><span class="line">            <span class="attr">servicePort:</span>  <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www2.bdqn.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span>  <span class="string">svc-2</span></span><br><span class="line">            <span class="attr">servicePort:</span>  <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">ingress.yaml</span> </span><br><span class="line"><span class="string">ingress.extensions/ingress-1</span> <span class="string">created</span></span><br><span class="line"><span class="string">ingress.extensions/ingress-2</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  describe  ingresses.  ingress-1</span><br><span class="line">Rules:</span><br><span class="line">  Host           Path  Backends</span><br><span class="line">  ----           ----  --------</span><br><span class="line">  www1.bdqn.com  </span><br><span class="line">                 /   svc-1:80 (10.244.1.4:80,10.244.2.4:80)</span><br><span class="line">[root@master ~]# kubectl  describe  ingresses.  ingress-1</span><br><span class="line">Rules:</span><br><span class="line">  Host           Path  Backends</span><br><span class="line">  ----           ----  --------</span><br><span class="line">  www2.bdqn.com  </span><br><span class="line">                 /   svc-2:80 (10.244.1.5:80,10.244.2.5:80)</span><br><span class="line">[root@master ~]# kubectl  get svc -n ingress-nginx </span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.97.246   &lt;none&gt;        80:32007/TCP,443:30741/TCP   43h</span><br></pre></td></tr></table></figure><p>5、由于实验环境限制（这个域名是假的），所以自己用来模拟一个域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在windows上添加域名解析：C:\Windows\System32\drivers\etc</span><br><span class="line">192.168.1.70  www1.bdqn.com</span><br><span class="line">192.168.1.70  www2.bdqn.com</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200226151905178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226151922114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Ingress资源实现https代理访问"><a href="#Ingress资源实现https代理访问" class="headerlink" title="Ingress资源实现https代理访问"></a>Ingress资源实现https代理访问</h3><p>在上面的操作中，实现了使用ingress-nginx为后端所有pod提供一个统一的入口，那么，有一个非常严肃的问题需要考虑，就是如何为我们的pod配置CA证书来实现HTTPS访问？在pod中直接配置CA么？那需要进行多少重复性的操作？而且，pod是随时可能被kubelet杀死再创建的。当然这些问题有很多解决方法，比如直接将CA配置到镜像中，但是这样又需要很多个CA证书。</p><p>这里有更简便的一种方法，就拿上面的情况来说，后端有多个pod，pod与service进行关联，service又被ingress规则发现并动态写入到ingress-nginx-controller容器中，然后又为ingress-nginx-controller创建了一个Service映射到群集节点上的端口，来供client来访问。</p><p>在上面的一系列流程中，关键的点就在于Ingress规则，我们只需要在Ingress的yaml文件中，为域名配置CA证书即可，只要可以通过HTTPS访问到域名，至于这个域名是怎么关联到后端提供服务的pod，这就是属于k8s群集内部的通信了，即便是使用http来通信，也无伤大雅</p><p>1、生成一个证书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  https</span><br><span class="line">[root@master ~]# cd  https</span><br><span class="line">[root@master https]# openssl  req  -x509  -sha256  -nodes  -days  365  -newkey  rsa:2048  -keyout  tls.key  -out  tls.crt  -subj  "/CN=testsvc  /0=testsvc"</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">......................................................................................+++</span><br><span class="line">............+++</span><br><span class="line">writing new private key to 'tls.key'</span><br><span class="line">-----</span><br><span class="line">Subject Attribute 0 has no known NID, skipped</span><br><span class="line">[root@master https]# ls</span><br><span class="line">tls.crt  tls.key</span><br></pre></td></tr></table></figure><p>2、创建secret资源，保存证书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master https]# kubectl create secret tls tls-secret --key=tls.key --cert tls.crt</span><br><span class="line">secret/tls-secret created</span><br></pre></td></tr></table></figure><p>3、创建一个Deployment资源对象，用来模拟web服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@master https]# vim  deploy3.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy3</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app:  nginx3</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx3</span><br><span class="line">        image:  nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-3</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app:  nginx3</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">[root@master https]# kubectl  apply  -f  deploy3.yaml</span><br><span class="line">deployment.extensions/deploy3 created</span><br><span class="line">service/svc-3 created</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master https]# kubectl  get pod</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">deploy3-5c545fcc5f-4n9bw   1/1     Running   0          17s</span><br><span class="line">deploy3-5c545fcc5f-7b4g2   1/1     Running   0          17s</span><br><span class="line">[root@master https]# kubectl  get  svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        52d</span><br><span class="line">svc-3          ClusterIP   10.97.212.56     &lt;none&gt;        80/TCP         22m</span><br><span class="line">[root@master https]# curl -I  10.97.212.56</span><br><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p>4、创建对应的Ingress规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">https]#</span> <span class="string">vim</span>  <span class="string">ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-3</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span>  <span class="comment">#引用CA证书</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">www3.bdqn.com</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">tls-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span>  <span class="string">www3.bdqn.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span>  <span class="string">svc-3</span></span><br><span class="line">            <span class="attr">servicePort:</span>  <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">https]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">ingress.yaml</span> </span><br><span class="line"><span class="string">ingress.extensions/ingress-3</span> <span class="string">created</span></span><br><span class="line"><span class="string">//同样，添加域名解析</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span>  <span class="string">www3.bdqn.com</span></span><br></pre></td></tr></table></figure><p>5、查找对应service-NodePort的443端口映射的端口，直接用浏览器访问即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master https]# kubectl  get svc -n ingress-nginx </span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.97.246   &lt;none&gt;        80:32007/TCP,443:30741/TCP   44h</span><br></pre></td></tr></table></figure><p>通过浏览器访问：<a href="https://www3.bdqn.com:30741" target="_blank" rel="noopener">https://www3.bdqn.com:30741</a><br><img src="https://img-blog.csdnimg.cn/20200226151954779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226152032715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Ingress原理及配置</title>
    <link href="https://gilbert2.gitee.io/maisy/Ingress.html"/>
    <id>https://gilbert2.gitee.io/maisy/Ingress.html</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2020-02-24T06:19:01.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p>在Kubernetes中，服务和Pod的IP地址仅可以在集群网络内部使用，对于集群外的应用是不可见的。为了使外部的应用能够访问集群内的服务，在Kubernetes中目前提供了以下几种方案：</p><blockquote><p>NodePort</p><p>LoadBalancer</p><p>Ingress</p></blockquote><p>NodePort：简单的来说就是通过Service资源对象，为后端的Pod提供一个统一的访问入口，然后将Service的统一访问接口映射到集群节点上，最终实现client通过映射到集群节点上的端口访问到后端Pod提供的服务</p><p>但是，这种方法有个弊端，就是当新生成一个pod服务就需要创建对应的service将其映射到节点端口，当运行的pod过多时，我们节点暴露给client端的端口也会随之增加，这样我们整个k8s群集的危险系数就会增加，因为我们在搭建群集之处，官方明确指出，必须关闭firewalld防火墙及清空iptables规则，现在我们又暴露了那么多端口给client，安全系数可想而知</p><p>Ingress就解决了这个弊端：</p><p>简单的理解：原先暴露的service，现在给定一个统一的访问入口</p><p><strong>Ingress资源对象的组成：</strong></p><blockquote><p><strong>Ingress-nginx-controller：</strong></p><p>将新加入的Ingress转化为反向代理服务器的配置文件，并使之生效（动态的感知k8s集群内Ingress资源的变化，通过lua脚本实现）</p><p><strong>Ingress：</strong></p><p>将反向代理服务器抽象成一个Ingress对象，每添加一个新的服务，只需要写一个新的Ingress的yaml文件即可，或修改已经存在的Ingress规则的yaml</p></blockquote><p>在k8s集群前边部署一个反向代理服务器，这个服务器代理着k8s集群内部的service资源</p><p><strong>Ingress-nginx可以解决什么问题：</strong></p><blockquote><p>动态的配置服务</p><p>​    如果按照传统方式, 当新增加一个服务时, 我们可能需要在流量入口加一个反向代理指向我们新的k8s服务. 而如果用了Ingress-nginx, 只需要配置好这个服务, 当服务启动时, 会自动注册到Ingress的中, 不需要而外的操作</p><p>减少不必要的端口暴露</p><p>​    配置过k8s的都清楚, 第一步是要关闭防火墙的, 主要原因是k8s的很多服务会以NodePort方式映射出去, 这样就相当于给宿主机打了很多孔, 既不安全也不优雅. 而Ingress可以避免这个问题, 除了Ingress自身服务可能需要映射出去, 其他服务都不要用NodePort方式</p></blockquote><p><strong>Ingress-nginx工作原理：</strong></p><blockquote><p>1）Ingress controller通过和kubernetes api交互，动态的去感知集群中Ingress规则变化，<br>2）然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段nginx配置，<br>3）再写到nginx-ingress-controller的pod里，这个Ingress controller的pod里运行着一个Nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，<br>4）然后reload一下使配置生效。以此达到域名分别配置和动态更新的问题</p></blockquote><p><strong>基于Nginx的Ingress  controller根据不同的开发公司，又分为两种：</strong></p><blockquote><p>k8s社区版的：Ingress-nginx</p><p>nginx公司自己开发的：nginx-ingress</p></blockquote><h4 id="Ingress-nginx配置实例："><a href="#Ingress-nginx配置实例：" class="headerlink" title="Ingress-nginx配置实例："></a><strong>Ingress-nginx配置实例：</strong></h4><p>1）创建一个web服务，用deployment资源，用httpd奖项，然后创建一个service资源与之关联</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">deploy_1.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bdqn-ns</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">bdqn-ns</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpd-deploy</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span>  <span class="string">bdqn-ns</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">image:</span>  <span class="string">httpd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpd-svc</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span>  <span class="string">bdqn-ns</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">httpd-port</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span>   </span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31033</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">deploy_1.yaml</span> </span><br><span class="line"><span class="string">namespace/bdqn-ns</span> <span class="string">created</span></span><br><span class="line"><span class="string">deployment.extensions/httpd-deploy</span> <span class="string">created</span></span><br><span class="line"><span class="string">service/httpd-svc</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get svc  -n bdqn-ns </span><br><span class="line">NAME        TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">httpd-svc   NodePort   10.97.86.190   &lt;none&gt;        80:31033/TCP   3m31s</span><br><span class="line">[root@master ~]# kubectl  get pod  -n bdqn-ns </span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd-deploy-966699d76-25wkn   1/1     Running   0          3m33s</span><br><span class="line">httpd-deploy-966699d76-6cdwf   1/1     Running   0          3m34s</span><br><span class="line">[root@master ~]# kubectl  get deployments. -n bdqn-ns </span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-deploy   2/2     2            2           3m37s</span><br><span class="line">[root@master ~]# kubectl  describe svc  -n bdqn-ns</span><br><span class="line">Selector:                 app=bdqn-ns</span><br><span class="line">Type:                     NodePort</span><br><span class="line">IP:                       10.97.86.190</span><br><span class="line">Port:                     httpd-port  80/TCP</span><br><span class="line">TargetPort:               80/TCP</span><br><span class="line">NodePort:                 httpd-port  31033/TCP</span><br><span class="line">Endpoints:                10.244.1.2:80,10.244.2.2:80</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br></pre></td></tr></table></figure><p>2）创建一个web服务，用deployment资源，用tomcat镜像，然后创建一个service资源与之关联</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">deploy_2.yaml</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-deploy</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span>  <span class="string">bdqn-tomcat</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">        <span class="attr">image:</span>  <span class="string">tomcat:8.5.45</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-svc</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span>  <span class="string">bdqn-tomcat</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat-port</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span>   </span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32033</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">deploy_2.yaml</span> </span><br><span class="line"><span class="string">deployment.extensions/tomcat-deploy</span> <span class="string">created</span></span><br><span class="line"><span class="string">service/tomcat-svc</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get deployments. -n bdqn-ns </span><br><span class="line">NAME            READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-deploy    2/2     2            2           9m58s</span><br><span class="line">tomcat-deploy   2/2     2            2           58s</span><br><span class="line">[root@master ~]# kubectl  get pod -n bdqn-ns </span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd-deploy-966699d76-25wkn     1/1     Running   0          10m</span><br><span class="line">httpd-deploy-966699d76-6cdwf     1/1     Running   0          10m</span><br><span class="line">tomcat-deploy-759dc8c885-9wgqw   1/1     Running   0          70s</span><br><span class="line">tomcat-deploy-759dc8c885-9xmhj   1/1     Running   0          70s</span><br><span class="line">[root@master ~]# kubectl  get svc -n bdqn-ns </span><br><span class="line">NAME         TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">httpd-svc    NodePort   10.97.86.190   &lt;none&gt;        80:31033/TCP     10m</span><br><span class="line">tomcat-svc   NodePort   10.98.122.36   &lt;none&gt;        8080:32033/TCP   75s</span><br></pre></td></tr></table></figure><p>3）创建Ingress -nginx-controller</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml</span><br><span class="line">//将yaml文件下载下来</span><br><span class="line">在yaml文件中添加：hostNetwork: true</span><br><span class="line">    spec:    //在212行的spec字段下添加</span><br><span class="line">      hostNetwork:  true   //添加这行就行</span><br><span class="line">      # wait up to five minutes for the drain of connections</span><br><span class="line">[root@master ~]# kubectl  apply  -f  mandatory.yaml</span><br><span class="line">[root@master ~]# kubectl  get pod -n  ingress-nginx </span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-controller-5954d475b6-xtzbc   1/1     Running   0          16m</span><br></pre></td></tr></table></figure><p><strong>hostNetwork: true</strong></p><blockquote><p>在deployment资源中，如果添加了此字段，意味着Pod中运行的应用可以直接使用node节点的端口，这样node节点主机所在网络的其他主机，就可以通过访问该端口访问此应用。（类似于docker映射到宿主机的端口）</p></blockquote><p>4）创建Ingress资源：（定义Ingress规则）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bdqn-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span>  <span class="string">/</span> <span class="comment">#这个千万不要写错，不然后面无法访问</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">ingress.bdqn.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span>  <span class="string">httpd-svc</span></span><br><span class="line">          <span class="attr">servicePort:</span>  <span class="number">80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/tomcat</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span>  <span class="string">tomcat-svc</span></span><br><span class="line">          <span class="attr">servicePort:</span>  <span class="number">8080</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">ingress.yaml</span> </span><br><span class="line"><span class="string">ingress.extensions/bdqn-ingress</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">describe</span>  <span class="string">ingresses.</span> <span class="string">-n</span> <span class="string">bdqn-ns</span>  <span class="string">bdqn-ingress</span></span><br><span class="line"><span class="attr">Rules:</span></span><br><span class="line">  <span class="string">Host</span>              <span class="string">Path</span>  <span class="string">Backends</span></span><br><span class="line">  <span class="string">----</span>              <span class="string">----</span>  <span class="string">--------</span></span><br><span class="line">  <span class="string">ingress.bdqn.com</span>  </span><br><span class="line">                    <span class="string">/</span>         <span class="string">httpd-svc:80</span> <span class="string">(10.244.1.5:80,10.244.2.4:80)</span></span><br><span class="line">                    <span class="string">/tomcat</span>   <span class="string">httpd-tomcat:8080</span> <span class="string">(10.244.1.4:8080,10.244.2.5:8080)</span></span><br><span class="line"><span class="string">//如果没有这个信息说明Ingress创建的有问题</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec  -it  -n  ingress-nginx  nginx-ingress-controller-5954d475b6-wkqr2  sh</span><br><span class="line">/etc/nginx $ cat  nginx.conf</span><br><span class="line">//没创建Ingress之前这些值都是空的，这就是动态的感知，然后写入配置文件</span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">set $namespace      "bdqn-ns";</span><br><span class="line">set $ingress_name   "bdqn-ingress";</span><br><span class="line">set $service_name   "httpd-svc";</span><br><span class="line">set $service_port   "80";</span><br><span class="line">set $location_path  "/";</span><br><span class="line">location ~* "^/tomcat" &#123;</span><br><span class="line"></span><br><span class="line">set $namespace      "bdqn-ns";</span><br><span class="line">set $ingress_name   "bdqn-ingress";</span><br><span class="line">set $service_name   "tomcat-svc";</span><br><span class="line">set $service_port   "8080";</span><br><span class="line">set $location_path  "/tomcat";</span><br></pre></td></tr></table></figure><p>因为域名是自定义的，所以要配置域名解析，修改windows的host文件，将IP与域名绑定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//查看Ingress-controller运行在哪个节点，IP 是 ingress-controller  Pod运行所在的节点</span><br><span class="line">[root@master ~]# kubectl get pod -n  ingress-nginx -o wide</span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE   IP             NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-ingress-controller-5954d475b6-wkqr2   1/1     Running   1          44h   192.168.1.50   node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">//找到host文件，进行修改</span><br><span class="line">C:\Windows\System32\drivers\etc</span><br><span class="line">192.168.1.50  ingress.bdqn.com</span><br></pre></td></tr></table></figure><p>现在已经达到了我们想要的功能，现在可以通过ingress.bdqn.com访问httpd服务，通过ingress.bdqn.com/tomcat访问tomcat服务<br><img src="https://img-blog.csdnimg.cn/20200224140327586.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200224140345625.png" alt="在这里插入图片描述"></p><p>在上面的访问测试中，虽然访问到了对应的服务，但是有一个弊端，就是在做DNS解析的时候，只能指定Ingress-nginx容器所在的节点IP。而指定k8s集群内部的其他节点IP（包括master）都是不可以访问到的，如果这个节点一旦宕机，Ingress-nginx容器被转移到其他节点上运行（不考虑节点标签的问题，其实保持Ingress-nginx的yaml文件中默认的标签的话，那么每个节点都是有那个标签的）。随之还要我们手动去更改DNS解析的IP（要更改为Ingress-nginx容器所在节点的IP，通过命令“kubectl get pod -n ingress-nginx -o wide”可以查看到其所在节点），很是麻烦</p><p>所以就要为ingress资源对象创建一个Service（NodePort），这样在配置DNS解析的时候，就可以通过Ingress.bdqn.com  所有node节点，包括master节点的IP来配置，很方便</p><p>5）创建service资源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/provider/baremetal/service-nodeport.yaml</span><br><span class="line">[root@master ~]# kubectl  apply  -f  service-nodeport.yaml</span><br><span class="line">[root@master ~]# kubectl  get svc -n ingress-nginx </span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.167.12   &lt;none&gt;        80:32756/TCP,443:30501/TCP   2m7s</span><br></pre></td></tr></table></figure><p><strong>Service-Nodeport</strong></p><blockquote><p>因为Ingress-nginx-controller运行在了集群内的其中一个节点，为了保证即使这个节点宕机，我们对应的域名仍然能够正常的访问服务，所以我们将Ingress-nginx-controller也暴露为一个service资源</p></blockquote><p>至此，这个域名就可以和集群中任意节点的 32756/30501端口进行绑定了<br><img src="https://img-blog.csdnimg.cn/20200224140157984.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200224140212599.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>ConfigMap、Secret</title>
    <link href="https://gilbert2.gitee.io/maisy/ConfigMap%E3%80%81Secret.html"/>
    <id>https://gilbert2.gitee.io/maisy/ConfigMap%E3%80%81Secret.html</id>
    <published>2020-02-16T16:00:00.000Z</published>
    <updated>2020-02-17T07:16:38.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ConfigMap、Secret"><a href="#ConfigMap、Secret" class="headerlink" title="ConfigMap、Secret"></a>ConfigMap、Secret</h2><p>为什么有这两个东西：</p><p>我们在kubernetes上部署应用的时候，经常会需要传一些配置给我们的应用，比如数据库地址啊，用户名密码啊之类的。我们要做到这个，有好多种方案，比如：</p><blockquote><ul><li>我们可以直接在打包镜像的时候写在应用配置文件里面，但是这种方式的坏处显而易见而且非常明显。</li><li>我们可以在配置文件里面通过env环境变量传入，但是这样的话我们要修改env就必须去修改yaml文件，而且需要重启所有的container才行。</li><li>我们可以在应用启动的时候去数据库或者某个特定的地方拿，没问题！但是第一，实现起来麻烦；第二，如果配置的地方变了怎么办？</li></ul></blockquote><p>当然还有别的方案，但是各种方案都有各自的问题。</p><p>而且，还有一个问题就是，如果说我的一个配置，是要多个应用一起使用的，以上除了第三种方案，都没办法进行配置的共享，就是说我如果要改配置的话，那得一个一个手动改。假如我们有100个应用，就得改100份配置，以此类推……</p><p>kubernetes对这个问题提供了一个很好的解决方案，就是用<code>ConfigMap</code>和<code>Secret</code></p><p><strong>应用场景：</strong></p><blockquote><p>镜像往往是一个应用的基础，还有很多需要自定义的参数或配置，例如资源的消耗、日志的位置级别等等，这些配置可能会有很多，因此不能放入镜像中，Kubernetes中提供了Configmap来实现向容器中提供配置文件或环境变量来实现不同配置，从而实现了镜像配置与镜像本身解耦，使容器应用做到不依赖于环境配置</p></blockquote><p><strong>Secret资源对象：</strong></p><blockquote><p>可以保存轻量的敏感信息，比如数据库的用户名和密码或者认证秘钥等。它保存的数据是以秘文的方式存放的</p></blockquote><p><strong>configMap资源对象：</strong></p><blockquote><p>和Secret一样，拥有大多数共同的特性，但是区别是，configMap保存的是一些不太重要的信息，它保存的数据是以明文的方式存放的。</p><p>当我们创建上述两种资源对象时，其实就是将这两种资源对象存储的信息写入了k8s群集中的etcd数据中心</p></blockquote><p><strong>Secret与ConfigMap的异同：</strong></p><p>相同之处：</p><blockquote><p>都是用来保存轻量级信息的，可以供其他资源对象（Deployment、RC、RS和Pod）进行挂载使用</p><p>这两种资源对象的创建方法（4种）及引用方法（2种）都是一样的，都是以键值对的方式进行存储的</p></blockquote><p>不同之处：</p><blockquote><p>Secret是用来保存敏感信息的，而configMap是用来保存一些不太重要的数据的，具体表现在当我们执行“kubectl describe ….”命令时，Secret这种类型的资源对象时查看不到其具体的信息的，而configMap是可以查看到其保存的具体内容的</p></blockquote><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret:"></a>Secret:</h3><p>Secret：用于保存一些敏感信息，比如数据库的用户名密码或者密钥。这些数据是比较少量的，将这些信息放在 <code>secret</code>中比放在 <code>pod</code> 的定义或者 docker 镜像中来说更加安全和灵活</p><p>用户可以创建自己的secret，系统也会有自己的secret</p><p><strong>内置 secret</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get secrets  -n  kube-system</span><br></pre></td></tr></table></figure><p>Secret有三种类型：</p><blockquote><p><strong><code>Opaque</code>：base64编码格式的Secret，用来存储密码、密钥等；但数据也通过base64 –decode解码得到原始数据，所有加密性很弱</strong></p><p><strong><code>kubernetes.io/dockerconfigjson</code>：用来存储私有docker registry的认证信息</strong></p><p><strong><code>kubernetes.io/service-account-token</code>： 用于被serviceaccount引用，serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod目录/run/secrets/ kubernetes.io/serviceaccount中</strong></p></blockquote><p>举例：保存数据库的用户名和密码</p><p>用户名：root</p><p>密码：123.com</p><p>有四种方法：</p><p><strong>1、通过- -from-literal（文字的）：</strong></p><p>也就是说需要保存什么，直接写出来就行</p><p>注意：每一个–from-literal只能保存一条信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  create  secret generic  mysecret1  --from-literal=username=root  --from-literal=password=123.com</span><br></pre></td></tr></table></figure><p>generic：通用的、一般的加密方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get secrets </span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-x9ptl   kubernetes.io/service-account-token   3      42d</span><br><span class="line">mysecret1             Opaque（不透明的）                      2      2m13s</span><br></pre></td></tr></table></figure><p>Opaque（不透明的）：也就是说你看不到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  describe  secrets</span><br><span class="line">Type:  Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password:  7 bytes</span><br><span class="line">username:  4 bytes</span><br><span class="line">//这里看不到真正的值是什么</span><br></pre></td></tr></table></figure><p><strong>2、- -from-file（文件）：</strong></p><p>同样，每一个只能保存一条信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# echo  root  &gt;  username</span><br><span class="line">[root@master ~]# echo  123.com  &gt;  password</span><br><span class="line">[root@master ~]# kubectl create secret generic mysecret2  --from-file=username  --from-file=password </span><br><span class="line">[root@master ~]# kubectl  get  secrets </span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-x9ptl   kubernetes.io/service-account-token   3      42d</span><br><span class="line">mysecret1             Opaque                                2      28m</span><br><span class="line">mysecret2             Opaque                                2      28s</span><br></pre></td></tr></table></figure><p>既然是通过文件创建的，那么把文件删除，这个secret是否还在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# rm  -rf  username  password </span><br><span class="line">[root@master ~]# kubectl  get  secrets </span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-x9ptl   kubernetes.io/service-account-token   3      42d</span><br><span class="line">mysecret1             Opaque                                2      29m</span><br><span class="line">mysecret2             Opaque                                2      92s</span><br><span class="line">//它确实还会存在</span><br></pre></td></tr></table></figure><p><strong>3、通过- -from-env-file：</strong></p><p>这种方法可以把用户名和密码写在一个文件里面，这样就比前两种方便</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  env.txt</span><br><span class="line">username=root</span><br><span class="line">password=123.com</span><br><span class="line">[root@master ~]# kubectl  create  secret generic mysecret3  --from-env-file=env.txt</span><br><span class="line">[root@master ~]# kubectl  get secrets </span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-x9ptl   kubernetes.io/service-account-token   3      42d</span><br><span class="line">mysecret1             Opaque                                2      34m</span><br><span class="line">mysecret2             Opaque                                2      6m27s</span><br><span class="line">mysecret3             Opaque                                2      16s</span><br><span class="line">[root@master ~]# kubectl  describe secrets</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password:  7 bytes</span><br><span class="line">username:  4 bytes</span><br></pre></td></tr></table></figure><p><strong>4、通过yaml配置文件</strong></p><p>先看一下yaml怎么写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">secrets</span>  <span class="string">mysecret1</span>  <span class="string">-o</span>  <span class="string">yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIzLmNvbQ==</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">cm9vdA==</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">"2020-02-14T02:01:34Z"</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysecret1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">"13766"</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/secrets/mysecret1</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">ffce8c7a-2dfc-4958-9e3b-0fcb50d00cca</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br></pre></td></tr></table></figure><p>可以看到数据是被加密后写入yaml文件里的，所以我们写的时候不能直接写数据，而是要加密一下</p><p>把保存的数据加密：</p><p>通过base64方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# echo  root  |  base64</span><br><span class="line">cm9vdAo=</span><br><span class="line">[root@master ~]# echo  123.com  |  base64</span><br><span class="line">MTIzLmNvbQo=</span><br></pre></td></tr></table></figure><p>创建secret资源对象：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">secret4.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysecret4</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">cm9vdAo=</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIzLmNvbQo=</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">secret4.yaml</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">secrets</span> </span><br><span class="line"><span class="string">NAME</span>                  <span class="string">TYPE</span>                                  <span class="string">DATA</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">default-token-x9ptl</span>   <span class="string">kubernetes.io/service-account-token</span>   <span class="number">3</span>      <span class="string">42d</span></span><br><span class="line"><span class="string">mysecret1</span>             <span class="string">Opaque</span>                                <span class="number">2</span>      <span class="string">42m</span></span><br><span class="line"><span class="string">mysecret2</span>             <span class="string">Opaque</span>                                <span class="number">2</span>      <span class="string">14m</span></span><br><span class="line"><span class="string">mysecret3</span>             <span class="string">Opaque</span>                                <span class="number">2</span>      <span class="string">8m</span></span><br><span class="line"><span class="string">mysecret4</span>             <span class="string">Opaque</span>                                <span class="number">2</span>      <span class="string">18s</span></span><br></pre></td></tr></table></figure><p>这种方法虽然说我们看不到真正的数据是什么，但是这种方式也是不安全的，每一次编码后的数据是一样的，是由规律的，同样它是可以被解码的</p><p>解码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# echo  -n  cm9vdAo  |  base64  --decode</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p><strong>如何来使用Secret资源：</strong></p><blockquote><p>Secret 可以作为数据卷被挂载，或作为环境变量 暴露出来以供 pod 中的容器使用。它们也可以被系统的其他部分使用，而不直接暴露在 pod 内</p></blockquote><p>两种方法：</p><p><strong>1、以Volume挂载的方式</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//创建Pod来引用secret</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line">    <span class="attr">image:</span>  <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-test</span></span><br><span class="line">      <span class="attr">mountPath:</span>  <span class="string">"/etc/secret-test"</span></span><br><span class="line">      <span class="attr">readOnly:</span>  <span class="literal">true</span>  <span class="string">//是否只读，也就是说对于/etc/secret-test只有只读的权限，不能修改</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-test</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">mysecret1</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">pod.yaml</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pod</span></span><br><span class="line"><span class="string">NAME</span>    <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">mypod</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">2m4s</span></span><br></pre></td></tr></table></figure><p>进入容器查看是否有我们保存的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec  -it  mypod  /bin/sh</span><br><span class="line">/ # cd  /etc/secret-test</span><br><span class="line">/etc/secret-test # cat username</span><br><span class="line">root</span><br><span class="line">/etc/secret-test # cat  password</span><br><span class="line">123.com</span><br><span class="line">/etc/secret-test # echo  admin  &gt;  username</span><br><span class="line">/bin/sh: can't create username: Read-only file system</span><br><span class="line">//这个文件也是不能修改的，因为是只读文件</span><br></pre></td></tr></table></figure><p>还可以自定义存放数据的文件名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//在volumes字段下追加items字段：</span><br><span class="line">  volumes:</span><br><span class="line">  - name: secret-test </span><br><span class="line">    secret:</span><br><span class="line">      secretName: mysecret1</span><br><span class="line">      items:</span><br><span class="line">      - key:  username</span><br><span class="line">        path: my-group/my-username</span><br><span class="line">      - key:  password</span><br><span class="line">        path: my-group/my-password</span><br><span class="line">[root@master ~]# kubectl  apply  -f  pod.yaml </span><br><span class="line">pod/mypod created</span><br><span class="line">[root@master ~]# kubectl  exec  -it  mypod  /bin/sh</span><br><span class="line">/ # cd  /etc/secret-test/</span><br><span class="line">/etc/secret-test # ls</span><br><span class="line">my-group</span><br><span class="line">/etc/secret-test # cd  my-group/</span><br><span class="line">/etc/secret-test/..2020_02_17_01_40_09.035305611/my-group # ls</span><br><span class="line">my-username     my-password</span><br><span class="line">/etc/secret-test/..2020_02_17_01_40_09.035305611/my-group # cat my-username </span><br><span class="line">root</span><br><span class="line">/etc/secret-test/..2020_02_17_01_40_09.035305611/my-group # cat  my-password </span><br><span class="line">123.com</span><br></pre></td></tr></table></figure><p><strong>2、以环境变量的方式</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">cp</span>  <span class="string">pod.yaml</span>   <span class="string">pod-env.yaml</span> </span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">pod-env.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypod2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_USERNAME</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">          <span class="attr">secretKeyRef:</span>  <span class="string">//翻译过来就是机密键引用，提取mysecret2里面的数据到SECRET_USERNAME</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mysecret2</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_PASSWORD</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">          <span class="attr">secretKeyRef:</span> <span class="string">//与上面同理</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mysecret2</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">pod-env.yaml</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pod</span></span><br><span class="line"><span class="string">NAME</span>     <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">mypod</span>    <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">18m</span></span><br><span class="line"><span class="string">mypod2</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">79s</span></span><br></pre></td></tr></table></figure><p>同样，进入pod查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl exec  -it  mypod2  /bin/sh</span><br><span class="line">/ # echo $SECRET_USERNAME</span><br><span class="line">root</span><br><span class="line">/ # echo  $SECRET_PASSWORD</span><br><span class="line">123.com</span><br></pre></td></tr></table></figure><p>如果现在将secret资源内保存的数据进行更新，使用此数据的应用内，数据是否也会更新</p><p>更新mysecret1的数据：把password—–&gt;123.com—-&gt;admin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# echo  admin  |  base64</span><br><span class="line">YWRtaW4K</span><br><span class="line">[root@master ~]# kubectl get secrets zhbsecret2 -o yaml</span><br><span class="line">//可以通过edit命令直接修改：</span><br><span class="line">[root@master ~]# kubectl edit  secrets  zhbsecret2</span><br><span class="line">data:</span><br><span class="line">  username: cm9vdAo=</span><br><span class="line">  password: YWRtaW4K  //更改</span><br><span class="line">[root@master ~]# kubectl  exec  -it  mypod  /bin/sh</span><br><span class="line">/ # cd  /etc/secret-test/my-group/</span><br><span class="line">/etc/secret-test/..2020_02_17_01_57_25.223684048/my-group # cat my-password </span><br><span class="line">admin</span><br><span class="line">//可以看到已经跟着改变了</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>​    <strong>这里引用数据是以volumes挂载使用数据的方式，才会实时更新</strong></p></blockquote><p>那么，以环境变量的方式引用的数据，是否会实时更新？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  edit  secrets  mysecret4</span><br><span class="line">data:</span><br><span class="line">  username: cm9vdAo=</span><br><span class="line">  password: YWRtaW4K</span><br><span class="line">[root@master ~]# kubectl  exec  -it  mypod2  /bin/sh</span><br><span class="line">/ # echo  $SECRET_PASSWORD</span><br><span class="line">123.com</span><br><span class="line">//没有变化</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>​    <strong>如果引用secret数据的应用，要求会随着secret资源对象内保存的数据的更新而实时更新，那么应该使用volumes挂载的方式引用资源。因为用环境变量的方式引用不会实时更新数据</strong></p></blockquote><h3 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap:"></a>ConfigMap:</h3><blockquote><p>和Secret资源类似，不同之处在于，secret资源保存的是敏感信息，而configmap保存的方式是以明文的方式存放的数据</p></blockquote><p><strong>什么是ConfigMap：</strong></p><blockquote><p>ConfigMap对像是一系列配置的集合，k8s会将这一集合注入到对应的Pod对像中，并为容器成功启动使用。注入的方式一般有两种，一种是挂载存储卷，一种是传递变量。ConfigMap被引用之前必须存在，属于名称空间级别，不能跨名称空间使用，内容明文显示。ConfigMap内容修改后，对应的pod必须重启或者重新加载配置</p></blockquote><p><strong>创建ConfigMap的4种方式：</strong></p><p>username：adam</p><p>age：18</p><p>和secretc创建的方式一模一样</p><p><strong>1、通过- -from-literal（文字的）：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  create  configmap  myconfigmap1  --from-literal=username=adam  --from-literal=age=18</span><br><span class="line">configmap/myconfigmap1 created</span><br><span class="line">[root@master ~]# kubectl get configmaps </span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">myconfigmap1   2      32s</span><br><span class="line">[root@master ~]# kubectl describe configmaps</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">age:</span><br><span class="line">----</span><br><span class="line">18</span><br><span class="line">username:</span><br><span class="line">----</span><br><span class="line">adam</span><br></pre></td></tr></table></figure><p><strong>2、- -from-file（文件）：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# touch  adam  &gt;  username</span><br><span class="line">[root@master ~]# touch  18  &gt;  age</span><br><span class="line">[root@master ~]# kubectl  create  configmap  myconfigmap2  --from-file=username  --from-file=age </span><br><span class="line">configmap/myconfigmap2 created</span><br><span class="line">[root@master ~]# kubectl  get configmaps </span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">myconfigmap1   2      4m23s</span><br><span class="line">myconfigmap2   2      63s</span><br></pre></td></tr></table></figure><p><strong>3、通过- -from-env-file：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  env.txt</span><br><span class="line">username&#x3D;adam</span><br><span class="line">age&#x3D;18</span><br><span class="line">[root@master ~]# kubectl  create  configmap  myconfigmap3  --from-env-file&#x3D;env.txt </span><br><span class="line">configmap&#x2F;myconfigmap3 created</span><br><span class="line">[root@master ~]# kubectl  get configmaps </span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">myconfigmap1   2      16m</span><br><span class="line">myconfigmap2   2      5m18s</span><br><span class="line">myconfigmap3   2      8m56s</span><br></pre></td></tr></table></figure><p><strong>4、通过yaml配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">configmap.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myconfigmap4</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">adam</span></span><br><span class="line">  <span class="attr">age:</span>  <span class="string">"18"</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">configmap.yaml</span> </span><br><span class="line"><span class="string">configmap/myconfigmap4</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">configmaps</span> </span><br><span class="line"><span class="string">NAME</span>           <span class="string">DATA</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">myconfigmap1</span>   <span class="number">2</span>      <span class="string">16m</span></span><br><span class="line"><span class="string">myconfigmap2</span>   <span class="number">2</span>      <span class="string">5m18s</span></span><br><span class="line"><span class="string">myconfigmap3</span>   <span class="number">2</span>      <span class="string">8m56s</span></span><br><span class="line"><span class="string">myconfigmap4</span>   <span class="number">2</span>      <span class="string">4m8s</span></span><br></pre></td></tr></table></figure><h4 id="使用configmap："><a href="#使用configmap：" class="headerlink" title="使用configmap："></a>使用configmap：</h4><p>和secret一样，有两种方法</p><p><strong>第一种方法是：</strong></p><p>以volumes挂载的方式引用资源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">v-pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod1</span></span><br><span class="line">    <span class="attr">image:</span>  <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bin/sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cmp-test</span></span><br><span class="line">      <span class="attr">mountPath:</span>  <span class="string">"/etc/cmp-test"</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cmp-test</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myconfigmap1</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">v-pod.yaml</span> </span><br><span class="line"><span class="string">pod/pod1</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p><strong>第二种方式：</strong></p><p>以环境变量的方式引用资源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">e-pod.yaml</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod2</span></span><br><span class="line">    <span class="attr">image:</span>  <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bin/sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONFIGMAP_NAME</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">          <span class="attr">configMapKeyRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">myconfigmap2</span></span><br><span class="line">            <span class="attr">key:</span>  <span class="string">username</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONFIGMAP_AGE</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">          <span class="attr">configMapKeyRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">myconfigmap2</span></span><br><span class="line">            <span class="attr">key:</span>  <span class="string">age</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">e-pod.yaml</span> </span><br><span class="line"><span class="string">pod/pod2</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>   <span class="string">get</span>  <span class="string">pod</span></span><br><span class="line"><span class="string">NAME</span>      <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">pod1</span>      <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">5m34s</span></span><br><span class="line"><span class="string">pod2</span>      <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">48s</span></span><br></pre></td></tr></table></figure><p>如果现在将confgimap资源内保存的数据进行更新，使用此数据的应用内，数据是否也会更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  edit  configmaps  myconfigmap1</span><br><span class="line">data:</span><br><span class="line">  age: "18"</span><br><span class="line">  username: root</span><br><span class="line">[root@master ~]# kubectl  exec  -it  pod1  /bin/sh</span><br><span class="line">/ # cd  /etc/cmp-test/</span><br><span class="line">/etc/cmp-test # cat username </span><br><span class="line">root</span><br><span class="line">//这里会跟着更新，如果操作过快，它会反应不过来，你就话看不到改变，稍微等一下就行了</span><br></pre></td></tr></table></figure><p>那么，以环境变量的方式引用的数据，是否会实时更新？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec  -it  pod2  /bin/sh</span><br><span class="line">/ # echo  $CONFIGMAP_AGE</span><br><span class="line">18</span><br><span class="line">/ # echo  $CONFIGMAP_NAME</span><br><span class="line">adam</span><br><span class="line">/ # exit</span><br><span class="line">[root@master ~]# kubectl  edit  configmaps  myconfigmap2</span><br><span class="line">data:</span><br><span class="line">  age: |</span><br><span class="line">    18</span><br><span class="line">  username: |</span><br><span class="line">    root</span><br><span class="line">[root@master ~]# kubectl  describe  configmaps  myconfigmap2</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">age:</span><br><span class="line">----</span><br><span class="line">18</span><br><span class="line"></span><br><span class="line">username:</span><br><span class="line">----</span><br><span class="line">root</span><br><span class="line">[root@master ~]# kubectl  exec  -it  pod2  /bin/sh</span><br><span class="line">/ # echo  $CONFIGMAP_NAME</span><br><span class="line">adam</span><br><span class="line">//和secret一样，是不会更新的</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h4 id="Secret："><a href="#Secret：" class="headerlink" title="Secret："></a>Secret：</h4><p>用于存放一些敏感信息，比如数据库的用户名密码、密钥等，以密文的方式保存</p><p>创建Secret资源对象的四种方式：</p><blockquote><ul><li>–from-literal（文字的）：需要保存什么内容直接写出来，一次只能保存一条</li><li>–from-file（文件）：把需要保存的内容写到文件里面，通过–from-file指定这个文件。一次只能保存一条</li><li>–from-env-file（环境变量）：把想要保存的内容都写入一个文件里面，通过–from-env-file指定</li><li>通过yaml配置文件：在data字段写入要保存的内容，注意是以密文的格式写入（使用base64的方式加密就行）</li></ul></blockquote><p>引用Secret资源的两种方法：</p><blockquote><ul><li>Volumes挂载的方式：</li><li>环境变量的方式：</li></ul></blockquote><h4 id="ConfigMap："><a href="#ConfigMap：" class="headerlink" title="ConfigMap："></a>ConfigMap：</h4><p>和Secret一样，拥有大多数共同的特性，但是区别是，configMap保存的是一些不太重要的信息，它保存的数据是以明文的方式存放的，使用describe来查看是，能看到真正的信息</p><p>创建ConfigMap资源对象的四种方式和引用ConfigMap的两种方式一摸一样</p><blockquote><p>–from-literal（文字的）</p><p>–from-file（文件）</p><p>–from-env-file（环境变量）</p><p>通过yaml配置文件</p><p>Volumes挂载的方式：</p><p>环境变量的方式：</p></blockquote><hr><p><strong>如果引用secret、CongigMap数据的应用，要求会随着secret、ConfigMap资源对象内保存的数据的更新而实时更新，那么应该使用volumes挂载的方式引用资源。因为用环境变量的方式引用不会实时更新数据</strong></p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>StatefulSet</title>
    <link href="https://gilbert2.gitee.io/maisy/StatefulSet.html"/>
    <id>https://gilbert2.gitee.io/maisy/StatefulSet.html</id>
    <published>2020-02-11T16:00:00.000Z</published>
    <updated>2020-02-14T03:25:48.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h2><p>RC、RS、Deployment、DS（DaemonSet）这些Pod控制器都是面向无状态的服务，它们所管理的Pod的IP、名字、启停顺序等都是随机的</p><p>这些Pod控制器都有一个相同点    </p><blockquote><p>​    <strong>template（模板）：根据模板创建出来的Pod，它们的状态都是一摸一样的（除了名称、IP、域名之外）</strong></p><p>​    <strong>可以理解为：任何一个Pod都可以被删除，然后用新生成的Pod进行替换</strong></p></blockquote><p><strong>StatefulSet：</strong></p><p>顾名思义：有状态的集合，管理所有有状态的服务，比如MySQL、MongoDB集群等</p><p>它之前的名字是：PetSet</p><p>Pet：宠物</p><p>把之前按无状态的服务比喻为牛、羊等牲畜。把有状态的服务比喻为：宠物</p><p>StatefulSet本质上是Deployment的一种变体，在v1.9版本中已成为<strong>GA</strong>版本，它为了解决有状态服务的问题，它所管理的Pod拥有固定的Pod名称，启停顺序，在StatefulSet中，Pod名字称为网络标识(hostname)，还必须要用到共享存储</p><blockquote><p><strong>有状态的服务：后端生成的每一个Pod都具有自己的唯一性，不可随意被删除</strong></p><p><strong>需要记录前一次或者多次通信中的相关事件，以作为下一次通信的分类标准。比如：mysql等数据库服务。（Pod的名称不能随意变化，数据持久化的目录也是不一样的，每一个Pod都有自己独有的数据持久化存储目录）</strong></p></blockquote><p>一个小实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">statefulset.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">headless-svc</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">headless-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">headless-pod</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">statefulset-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">headless-svc</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">headless-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">headless-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myhttpd</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">statefulset.yaml</span> </span><br><span class="line"><span class="string">service/headless-svc</span> <span class="string">created</span></span><br><span class="line"><span class="string">statefulset.apps/statefulset-test</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">svc</span></span><br><span class="line"><span class="string">NAME</span>           <span class="string">TYPE</span>        <span class="string">CLUSTER-IP</span>   <span class="string">EXTERNAL-IP</span>   <span class="string">PORT(S)</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">headless-svc</span>   <span class="string">ClusterIP</span>   <span class="string">None</span>         <span class="string">&lt;none&gt;</span>        <span class="number">80</span><span class="string">/TCP</span>    <span class="string">4m</span></span><br></pre></td></tr></table></figure><p>Deployment控制的pod的名称由来：</p><p>​    Deployment+RS+随机字符串（Pod的名称），没有顺序的额，可以被随意替代</p><p>StategulSet的三个组成部分：</p><p>1、headless-svc：无头服务。因为没有IP地址，所以它不具备负载均衡的功能了</p><p>作用：为后端的每一个Pod去命名</p><p>因为statefulset要求Pod的名称是有顺序的，每一个Pod都不能被随意取代，也就是说即使Pod重建之后，名称依然不变</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">statefulset-test-0   1/1     Running   0          23m</span><br><span class="line">statefulset-test-1   1/1     Running   0          22m</span><br><span class="line">statefulset-test-2   1/1     Running   0          22m</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  delete  pod  statefulset-test-0</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                 READY   STATUS              RESTARTS   AGE</span><br><span class="line">statefulset-test-0   0/1     ContainerCreating   0          6s</span><br><span class="line">statefulset-test-1   1/1     Running             0          25m</span><br><span class="line">statefulset-test-2   1/1     Running             0          25m</span><br><span class="line">//Pod重建之后名称没有发生变化</span><br></pre></td></tr></table></figure><p>2、statefulset：定义具体的应用</p><p>3、volumeClaimTeplates：自动创建PVC，为后端的Pod提供专有的存储</p><p>存储卷申请模板，创建PVC，指定pvc名称大小，将自动创建pvc，且pvc必须由存储类供应</p><blockquote><p><strong>为什么需要 headless service 无头服务？</strong><br>在用Deployment时，每一个Pod名称是没有顺序的，是随机字符串，因此是Pod名称是无序的，但是在statefulset中要求必须是有序 ，每一个pod不能被随意取代，pod重建后pod名称还是一样的。而pod IP是变化的，所以是以Pod名称来识别。pod名称是pod唯一性的标识符，必须持久稳定有效。这时候要用到无头服务，它可以给每个Pod一个唯一的名称 。<br><strong>为什么需要volumeClaimTemplate？</strong><br>对于有状态的副本集都会用到持久存储，对于分布式系统来讲，它的最大特点是数据是不一样的，所以各个节点不能使用同一存储卷，每个节点有自已的专用存储，但是如果在Deployment中的Pod template里定义的存储卷，是所有副本集共用一个存储卷，数据是相同的，因为是基于模板来的 ，而statefulset中每个Pod都要自已的专有存储卷，所以statefulset的存储卷就不能再用Pod模板来创建了，于是statefulSet使用volumeClaimTemplate，称为卷申请模板，它会为每个Pod生成不同的pvc，并绑定pv， 从而实现各pod有专用存储。这就是为什么要用volumeClaimTemplate的原因</p></blockquote><p>每一个pod—&gt;对应一个pvc—-&gt;每一个pvc对应一个pv</p><p>​    storageclass：自动创建PV</p><p>​    需要解决：自动创建PVC—–&gt;volumeClaimTeplates</p><p>一、创建StorageClass资源对象</p><p>​    1、基于NFS服务，创建NFS服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# showmount  -e</span><br><span class="line">Export list for master:</span><br><span class="line">/nfsdata *</span><br></pre></td></tr></table></figure><p>​    2、创建rbac权限</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">rbac-rolebind.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["persistentvolumes"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"delete"</span><span class="string">]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["persistentvolumeclaims"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">["storage.k8s.io"]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["storageclasses"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["events"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["watch",</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["services",</span> <span class="string">"endpoints"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["get","create","list",</span> <span class="string">"watch"</span><span class="string">,"update"]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">["extensions"]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["podsecuritypolicies"]</span></span><br><span class="line">      <span class="attr">resourceNames:</span> <span class="string">["nfs-provisioner"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["use"]</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span>  <span class="string">default</span>   <span class="string">//这个字段必须要写，不然会报错</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span>  <span class="string">rbac-rolebind.yaml</span> </span><br><span class="line"><span class="string">serviceaccount/nfs-provisioner</span> <span class="string">unchanged</span></span><br><span class="line"><span class="string">clusterrole.rbac.authorization.k8s.io/nfs-provisioner-runner</span> <span class="string">unchanged</span></span><br><span class="line"><span class="string">clusterrolebinding.rbac.authorization.k8s.io/run-nfs-provisioner</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p>​    3、创建Deployment资源对象，用Pod代替真正的NFS服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">nfs-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">nfs-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">bdqn</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfsdata</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfsdata</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span> <span class="string">nfs-deployment.yaml</span> </span><br><span class="line"><span class="string">deployment.extensions/nfs-client-provisioner</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pod</span></span><br><span class="line"><span class="string">NAME</span>                                     <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">nfs-client-provisioner-f6cb6688b-5zn8d</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">7s</span></span><br></pre></td></tr></table></figure><p>​    4、创建storaclass</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">test-storageclass.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sc-nfs</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">bdqn</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">test-storageclass.yaml</span> </span><br><span class="line"><span class="string">storageclass.storage.k8s.io/sc-nfs</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">sc</span></span><br><span class="line"><span class="string">NAME</span>     <span class="string">PROVISIONER</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">sc-nfs</span>   <span class="string">bdqn</span>          <span class="string">10s</span></span><br></pre></td></tr></table></figure><p>二、解决自动创建PVC</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">statefulset.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">headless-svc</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">headless-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">headless-pod</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">statefulset-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">headless-svc</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">headless-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">headless-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">myhttpd</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/mnt</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span>  <span class="string">//自动的创建PVC</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">annotations:</span>   <span class="string">//这是指定storageclass</span></span><br><span class="line">        <span class="attr">volume.beta.kubernetes.io/storage-class:</span> <span class="string">sc-nfs</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">100Mi</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">statefulset.yaml</span> </span><br><span class="line"><span class="string">service/headless-svc</span> <span class="string">created</span></span><br><span class="line"><span class="string">statefulset.apps/statefulset-test</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pod</span></span><br><span class="line"><span class="string">NAME</span>                                     <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">nfs-client-provisioner-f6cb6688b-5zn8d</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">13m</span></span><br><span class="line"><span class="string">statefulset-test-0</span>                       <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">23s</span></span><br><span class="line"><span class="string">statefulset-test-1</span>                       <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">16s</span></span><br><span class="line"><span class="string">statefulset-test-2</span>                       <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">9s</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>​    如果生成的Pod，第一个出现了问题，后面的都不会生成</p><p>根据volumeClaimTemplates自动创建的PVC：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pvc</span><br><span class="line">NAME                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">test-statefulset-test-0   Bound    pvc-3a105a9d-5892-4080-a993-20fd2540cd3e   100Mi      RWO            sc-nfs         46m</span><br><span class="line">test-statefulset-test-1   Bound    pvc-123bf53d-a72b-4bfa-a901-bb98efcda056   100Mi      RWO            sc-nfs         45m</span><br><span class="line">test-statefulset-test-2   Bound    pvc-8529c668-5b38-4024-93af-b18fa238b0ba   100Mi      RWO            sc-nfs         45m</span><br></pre></td></tr></table></figure><blockquote><p>如果集群中没有StorageClass的动态供应PVC的机制，也可以提前手动创建多个PV、PVC，手动创建的PVC名称必须符合之后创建的StatefulSet命名规则：<strong>(volumeClaimTemplates.name)-(pod_name)</strong></p></blockquote><blockquote><p>Statefulset名称为statefulset-test  </p><p>三个Pod副本: statefulset-test-0，statefulset-test-1，statefulset-test-2</p><p>volumeClaimTemplates名称为：test</p><p>那么自动创建出来的PVC名称为test-statefulset-test-[0-2]，为每个Pod创建一个PVC</p></blockquote><p><strong>规律总结：</strong></p><blockquote><ul><li>匹配Pod name(网络标识)的模式为：<strong>$(statefulset名称)-$(序号)</strong>，比如上面的示例：statefulset-test-0，statefulset-test-1，statefulset-test-2。</li><li>StatefulSet为每个Pod副本创建了一个DNS域名，这个域名的格式为： <strong>$(podname).(headless server name)</strong>，也就意味着服务间是通过Pod域名来通信而非Pod IP，因为当Pod所在Node发生故障时，Pod会被飘移到其它Node上，Pod IP会发生变化，但是Pod域名不会有变化。</li><li>StatefulSet使用Headless服务来控制Pod的域名，这个域名的FQDN为：<strong>$(service name).$(namespace).svc.cluster.local</strong>，其中，“cluster.local”指的是集群的域名。</li><li>根据volumeClaimTemplates，为每个Pod创建一个pvc，pvc的命名规则匹配模式：<strong>(volumeClaimTemplates.name)-(pod_name)</strong>，比如上面的volumeMounts.name=test， Pod name=statefulset-test-[0-2]，因此创建出来的PVC是test-statefulset-test-0，test-statefulset-test-1，test-statefulset-test-2</li><li>删除Pod不会删除其pvc，手动删除pvc将自动释放pv。<br>关于Cluster Domain、headless service名称、StatefulSet 名称如何影响StatefulSet的Pod的</li></ul></blockquote><p><strong>StatefulSet的启停顺序：</strong></p><blockquote><ul><li>有序部署：部署StatefulSet时，如果有多个Pod副本，它们会被顺序地创建（从0到N-1）并且，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态。</li><li>有序删除：当Pod被删除时，它们被终止的顺序是从N-1到0。</li><li>有序扩展：当对Pod执行扩展操作时，与部署一样，它前面的Pod必须都处于Running和Ready状态</li></ul></blockquote><p><strong>StatefulSet Pod管理策略</strong>：</p><blockquote><p>在v1.7以后，通过允许修改Pod排序策略，同时通过.spec.podManagementPolicy字段确保其身份的唯一性。</p><ul><li>OrderedReady：上述的启停顺序，默认设置。</li><li>Parallel：告诉StatefulSet控制器并行启动或终止所有Pod，并且在启动或终止另一个Pod之前不等待前一个Pod变为Running and Ready或完全终止</li></ul></blockquote><p><strong>StatefulSet使用场景</strong>：</p><blockquote><ul><li>稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC来实现</li><li>稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service（即没有Cluster IP的Service）来实现</li><li>有序部署，有序扩展，即Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0到N-1，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态），基于init containers来实现</li><li>有序收缩，有序删除（即从N-1到0）</li></ul></blockquote><p><strong>更新策略：</strong></p><blockquote><p>在Kubernetes 1.7及更高版本中，通过.spec.updateStrategy字段允许配置或禁用Pod、labels、source request/limits、annotations自动滚动更新功能。</p><p><strong>OnDelete：</strong>通过.spec.updateStrategy.type 字段设置为OnDelete，StatefulSet控制器不会自动更新StatefulSet中的Pod。用户必须手动删除Pod，以使控制器创建新的Pod。</p><p><strong>RollingUpdate：</strong>通过.spec.updateStrategy.type 字段设置为RollingUpdate，实现了Pod的自动滚动更新，如果.spec.updateStrategy未指定，则此为默认策略。<br>StatefulSet控制器将删除并重新创建StatefulSet中的每个Pod。它将以Pod终止（从最大序数到最小序数）的顺序进行，一次更新每个Pod。在更新下一个Pod之前，必须等待这个Pod Running and Ready。</p><p><strong>Partitions：</strong>通过指定 .spec.updateStrategy.rollingUpdate.partition 来对 RollingUpdate 更新策略进行分区，如果指定了分区，则当 StatefulSet 的 .spec.template 更新时，具有大于或等于分区序数的所有 Pod 将被更新。</p><p>具有小于分区的序数的所有 Pod 将不会被更新，即使删除它们也将被重新创建。如果 StatefulSet 的 .spec.updateStrategy.rollingUpdate.partition 大于其 .spec.replicas，则其 .spec.template 的更新将不会传播到 Pod。在大多数情况下，不需要使用分区</p></blockquote><p><strong>StatefulSet注意事项：</strong></p><blockquote><ol><li>还在beta状态，需要kubernetes v1.5版本以上才支持</li><li>所有Pod的Volume必须使用PersistentVolume或者是管理员事先创建好</li><li>为了保证数据安全，删除StatefulSet时不会删除Volume</li><li>StatefulSet需要一个Headless Service来定义DNS domain，需要在StatefulSet之前创建好</li><li>目前StatefulSet还没有feature complete，比如更新操作还需要手动patch</li></ol></blockquote><p><strong>更多可以参考：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/</a></strong></p><p>进入容器，验证持久化是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nfs-client-provisioner-f6cb6688b-5zn8d   1/1     Running   0          30m</span><br><span class="line">statefulset-test-0                       1/1     Running   0          17m</span><br><span class="line">statefulset-test-1                       1/1     Running   0          16m</span><br><span class="line">statefulset-test-2                       1/1     Running   0          16m</span><br><span class="line">[root@master ~]# kubectl exec  -it  statefulset-test-0  /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span>  /mnt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> touch  testfile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exit</span></span></span><br><span class="line">[root@master ~]# ls  /nfsdata/default-test-statefulset-test-0-pvc-3a105a9d-5892-4080-a993-20fd2540cd3e/</span><br><span class="line">testfile</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><p>Deployment、RC、RS、DS：</p><blockquote><p>这些Pod控制器都是面向无状态的服务，他们管理的Pod的IP、名字、启停顺序等都是随机的</p><p>这些根据模板创建出来的Pod，特们的状态都是一摸一样的（除了名称、IP、域名之外）</p><p>任何一个Pod都可以被删除，然后用因生成的Pod进项替换</p></blockquote><p>StatefulSet：</p><blockquote><p>顾名思义：有状态的集合，管理所有的有状态服务，比如MySQL集群等</p><p>后端生成的每一个Pod都具有自己的唯一性，不可被随意删除</p><p>需要记录前一次或者多次通信中的相关事件，以作为下一次通信的分类标准</p><p>Pod的名称不能随意变化，数据持久化的目录也是不一样的，每一个Pod又都自己独有的数据持久化存储目录</p></blockquote><p>扩容、缩容：在此过程中，Pod的生成或删除操作也是有顺序性的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pod</span>  <span class="string">-n</span> <span class="string">zhb</span></span><br><span class="line"><span class="string">NAME</span>                                     <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">nfs-client-provisioner-f6cb6688b-x2zls</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">1</span>          <span class="string">42h</span></span><br><span class="line"><span class="string">statefulset-test-0</span>                       <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">1</span>          <span class="string">42h</span></span><br><span class="line"><span class="string">statefulset-test-1</span>                       <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">1</span>          <span class="string">42h</span></span><br><span class="line"><span class="string">statefulset-test-2</span>                       <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">1</span>          <span class="string">42h</span></span><br><span class="line"><span class="string">statefulset-test-3</span>                       <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">76s</span></span><br><span class="line"><span class="string">statefulset-test-4</span>                       <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">66s</span></span><br></pre></td></tr></table></figure><p>升级操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl explain sts.spec.updateStrategy.rollingUpdate.partition</span><br></pre></td></tr></table></figure><p>partition：如果partition后面的值等于N，N+的都会更新，默认值为0（所有都会更新）</p><p>如果N等于2，那么它会从statefulset-test-2开始更新，以此类推</p><p>statefulset-test-0<br>statefulset-test-1<br>statefulset-test-2<br>statefulset-test-3<br>statefulset-test-4</p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s的存储类</title>
    <link href="https://gilbert2.gitee.io/maisy/k8s%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB.html"/>
    <id>https://gilbert2.gitee.io/maisy/k8s%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB.html</id>
    <published>2020-02-10T16:00:00.000Z</published>
    <updated>2020-02-12T07:04:51.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s存储类"><a href="#k8s存储类" class="headerlink" title="k8s存储类"></a>k8s存储类</h1><p>如果，k8s集群中，有很多类似的PV，PVC在去向PV申请空间的时候，不仅会考虑名称以及访问控制模式，还会考虑你申请空间的大小，会分配给你最合适大小的PV</p><p>运行一个web服务，采用Deployment资源，基于nginx镜像。数据持久化目录为nginx服务的主访问目录：/usr/share/nginx/html</p><p>创建一个PVC，与上述资源进行关联</p><p>​    先创建两个PV：web-pv1（1G），web-pv2（2G）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">web1.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web-pv1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span>  <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span>  <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfsdata/web1</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">mkdir</span> <span class="string">/nfsdata/web1</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">web1.yaml</span> </span><br><span class="line"><span class="string">persistentvolume/web-pv1</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pv</span></span><br><span class="line"><span class="string">NAME</span>      <span class="string">CAPACITY</span>   <span class="string">ACCESS</span> <span class="string">MODES</span>   <span class="string">RECLAIM</span> <span class="string">POLICY</span>   <span class="string">STATUS</span>      <span class="string">CLAIM</span>   <span class="string">STORAGECLASS</span>   <span class="string">REASON</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">web-pv1</span>   <span class="string">1Gi</span>        <span class="string">RWO</span>            <span class="string">Recycle</span>          <span class="string">Available</span>           <span class="string">nfs</span>                     <span class="string">6s</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">web2.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web-pv2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span>  <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span>  <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfsdata/web2</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pv</span></span><br><span class="line"><span class="string">NAME</span>      <span class="string">CAPACITY</span>   <span class="string">ACCESS</span> <span class="string">MODES</span>   <span class="string">RECLAIM</span> <span class="string">POLICY</span>   <span class="string">STATUS</span>      <span class="string">CLAIM</span>   <span class="string">STORAGECLASS</span>   <span class="string">REASON</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">web-pv1</span>   <span class="string">1Gi</span>        <span class="string">RWO</span>            <span class="string">Recycle</span>          <span class="string">Available</span>           <span class="string">nfs</span>                     <span class="string">97s</span></span><br><span class="line"><span class="string">web-pv2</span>   <span class="string">2Gi</span>        <span class="string">RWO</span>            <span class="string">Recycle</span>          <span class="string">Available</span>           <span class="string">nfs</span>                     <span class="string">6s</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">mkdir</span>  <span class="string">/nfsdata/web2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">web.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span>  <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span>  <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-web</span></span><br><span class="line">          <span class="attr">mountPath:</span>  <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-web</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span>  <span class="string">web-pvc</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim web-pvc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: web-pvc</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage:  1Gi</span><br><span class="line">  storageClassName: nfs</span><br><span class="line">[root@master ~]# kubectl  apply -f web-pvc.yaml</span><br><span class="line">[root@master ~]# kubectl  get pvc</span><br><span class="line">NAME      STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">web-pvc   Bound    web-pv1   1Gi        RWO            nfs            6s</span><br><span class="line">[root@master ~]# kubectl  get pv</span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM             STORAGECLASS   REASON   AGE</span><br><span class="line">web-pv1   1Gi        RWO            Recycle          Bound       default&#x2F;web-pvc   nfs                     9m8s</span><br><span class="line">web-pv2   2Gi        RWO            Recycle          Available                     nfs                     7m37s</span><br><span class="line">[root@master ~]# kubectl  apply  -f web.yaml</span><br><span class="line">[root@master ~]# kubectl  get pod -o wide</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE    IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">test-web-67989b6d78-2b774   1&#x2F;1     Running   0          2m1s   10.244.2.5   node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>如果名称和访问模式都一样，它会考虑空间大小进行分配，分配比较接近的PV进行关联</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec -it test-web-67989b6d78-2b774 /bin/bash</span><br><span class="line">root@test-web-67989b6d78-2b774:/# cd  /usr/share/nginx/html/</span><br><span class="line">root@test-web-67989b6d78-2b774:/usr/share/nginx/html# echo 12345 &gt; index.html</span><br><span class="line">root@test-web-67989b6d78-2b774:/usr/share/nginx/html# exit</span><br><span class="line">exit</span><br><span class="line">command terminated with exit code 127</span><br><span class="line">[root@master ~]# curl  10.244.2.5</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><p>很多的服务，很多的资源对象</p><p>​    如果要去创建服务，做数据持久化，需要预先知道可用PV有哪些？</p><p>​    如果为了这个服务去提前创建PV，那么我们还需要知道，这个服务大概需要多大的空间？</p><p><strong>Storage Class（存储类）：它可以动态的自动的创建所需要的 PV</strong></p><p>PV是运维人员来创建的，开发操作PVC，可是大规模集群中可能会有很多PV，如果这些PV都需要运维手动来处理这也是一件很繁琐的事情，所以就有了动态供给概念，也就是Dynamic Provisioning。而我们上面的创建的PV都是静态供给方式，也就是Static Provisioning。而动态供给的关键就是StorageClass，它的作用就是创建PV模板。</p><p>创建StorageClass里面需要定义PV属性比如存储类型、大小等；另外创建这种PV需要用到存储插件。最终效果是，用户提交PVC，里面指定存储类型，如果符合我们定义的StorageClass，则会为其自动创建PV并进行绑定</p><blockquote><p><strong>存储类（Storage class）是k8s资源类型的一种，它是有管理员为管理PV更加方便创建的一个逻辑组，可以按照存储系统的性能高低，或者综合服务质量，备份策略等分类。不过k8s本身不知道类别到底是什么，它这是作为一个描述</strong></p></blockquote><p><strong>Provisioner（供给方、提供者）：</strong></p><blockquote><p><strong>及提供了存储资源的存储系统。k8s内建有多重供给方，这些供给方的名字都以“kubernetes.io”为前缀。并且还可以自定义</strong></p></blockquote><p><strong>Parmeters（参数）：</strong></p><blockquote><p><strong>存储类使用参数描述要关联到的存储卷，注意不同的供给方参数也不同</strong></p></blockquote><p><strong>ReclaimPolicy：</strong></p><blockquote><p><strong>PV的回收策略，可用值有Delete(默认)和Retain</strong></p></blockquote><p>基于StorageClass的动态存储供应整体过程如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200211223953249.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><strong>1）集群管理员预先创建存储类（StorageClass）；</strong></p><p><strong>2）用户创建使用存储类的持久化存储声明(PVC：PersistentVolumeClaim)；</strong></p><p><strong>3）存储持久化声明通知系统，它需要一个持久化存储(PV: PersistentVolume)；</strong></p><p><strong>4）系统读取存储类的信息；</strong></p><p><strong>5）系统基于存储类的信息，在后台自动创建PVC需要的PV；</strong></p><p><strong>6）用户创建一个使用PVC的Pod；</strong></p><p><strong>7）Pod中的应用通过PVC进行数据的持久化；</strong></p><p><strong>8）而PVC使用PV进行数据的最终持久化处理。</strong></p></blockquote><p><strong>更多可以参考：<a href="https://www.kubernetes.org.cn/4078.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/4078.html</a></strong></p><p>1）确定基于NFS服务来做的sc，NFS服务需要开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# showmount -e</span><br><span class="line">Export list for master:</span><br><span class="line">/nfsdata *</span><br></pre></td></tr></table></figure><p>2）需要RBAC权限</p><p>RBAC：</p><blockquote><p><strong>rbac是k8s的API安全策略，是基于用户的访问权限</strong></p><p><strong>规定了谁可以有什么样的权限</strong></p><p><strong>为了给SC资源操作k8s集群的权限</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">rbac-rolebind.yaml</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bdqn-test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">bdqn-test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner-runner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">bdqn-test</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["persistentvolumes"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"delete"</span><span class="string">]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["persistentvolumeclaims"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">["storage.k8s.io"]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["storageclasses"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["events"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["watch",</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["services",</span> <span class="string">"endpoints"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["get","create","list",</span> <span class="string">"watch"</span><span class="string">,"update"]</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> <span class="string">["extensions"]</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">["podsecuritypolicies"]</span></span><br><span class="line">      <span class="attr">resourceNames:</span> <span class="string">["nfs-provisioner"]</span></span><br><span class="line">      <span class="attr">verbs:</span> <span class="string">["use"]</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">bdqn-test</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">rbac-rilebind.yaml</span> </span><br><span class="line"><span class="string">namespace/bdqn-test</span> <span class="string">created</span></span><br><span class="line"><span class="string">serviceaccount/nfs-provisioner</span> <span class="string">created</span></span><br><span class="line"><span class="string">clusterrole.rbac.authorization.k8s.io/nfs-provisioner-runner</span> <span class="string">created</span></span><br><span class="line"><span class="string">clusterrolebinding.rbac.authorization.k8s.io/run-nfs-provisioner</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p>3）nfs-deployment.</p><blockquote><p><strong>作用：其实它是NFS的客户端，但是它通过K8S的内置的NFS驱动挂载远端的NFS服务器到本地目录；然后将自身作为storage provider，关联storage class</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">nfs-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">bdqn-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">nfs-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span>  <span class="string">//提供者的名称</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">bdqn-test</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span>   <span class="string">//nfs服务器地址</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfsdata</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfsdata</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">nfs-deployment.yaml</span> </span><br><span class="line"><span class="string">deployment.extensions/nfs-client-provisioner</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p>4）创建storageclass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim test-storageclass.yaml</span><br><span class="line">apiVersion: storage.k8s.io&#x2F;v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: sc-nfs</span><br><span class="line">  namespace: bdqn-test  &#x2F;&#x2F;属于哪个名称空间</span><br><span class="line">provisioner: bdqn-test  &#x2F;&#x2F;供给着，和nfs-deployment的名称要一样：value: bdqn-test</span><br><span class="line">reclaimPolicy: Retain</span><br><span class="line">[root@master ~]# kubectl apply  -f  test-storageclass.yaml </span><br><span class="line">storageclass.storage.k8s.io&#x2F;sc-nfs created</span><br></pre></td></tr></table></figure><p>provisioner: bdqn-test //通过preovisioner字段关联到上述Deployment</p><p>5）创建PVC</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">test-pvc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-claim</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">bdqn-test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">sc-nfs</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">20Mi</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span> <span class="string">test-pvc.yaml</span> </span><br><span class="line"><span class="string">persistentvolumeclaim/test-claim</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pvc</span> <span class="string">-n</span> <span class="string">bdqn-test</span> </span><br><span class="line"><span class="string">NAME</span>         <span class="string">STATUS</span>   <span class="string">VOLUME</span>                                     <span class="string">CAPACITY</span>   <span class="string">ACCESS</span> <span class="string">MODES</span>   <span class="string">STORAGECLASS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">test-claim</span>   <span class="string">Bound</span>    <span class="string">pvc-0c606810-9f93-441b-bc6b-391d7813dcab</span>   <span class="string">20Mi</span>       <span class="string">RWX</span>            <span class="string">sc-nfs</span>         <span class="string">2m15s</span></span><br></pre></td></tr></table></figure><p>它会为我们自动生成一个pv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ls  /nfsdata/</span><br><span class="line">bdqn-test-test-claim-pvc-0c606810-9f93-441b-bc6b-391d7813dcab</span><br><span class="line">[root@master ~]# kubectl  get pv</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                  STORAGECLASS   REASON   AGE</span><br><span class="line">pvc-0c606810-9f93-441b-bc6b-391d7813dcab   20Mi       RWX            Delete           Bound       bdqn-test/test-claim   sc-nfs                  4m24s</span><br></pre></td></tr></table></figure><p>6）创建Pod测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim test-pod.yaml</span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: test-pod</span><br><span class="line">  namespace: bdqn-test</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: test-pod</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">      - /bin/sh</span><br><span class="line">      - -c</span><br><span class="line">      - sleep 30000</span><br><span class="line">    volumeMounts:</span><br><span class="line">      - name: nfs-pvc</span><br><span class="line">        mountPath: /test</span><br><span class="line">  restartPolicy: OnFailure</span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-pvc</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: test-claim</span><br><span class="line">[root@master ~]# kubectl  apply  -f  test-pod.yaml </span><br><span class="line">pod/test-pod created</span><br><span class="line">[root@master ~]# kubectl  get pod -n  bdqn-test </span><br><span class="line">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">nfs-client-provisioner-57f49c99c7-lhd8n   1/1     Running   0          27m</span><br><span class="line">test-pod                                  1/1     Running   0          32s</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec -it test-pod -n bdqn-test /bin/sh</span><br><span class="line">/ # cd  /test</span><br><span class="line">/test # touch test-file</span><br><span class="line">/test # echo 123456 &gt; test-file </span><br><span class="line">/test # exit</span><br><span class="line">[root@master ~]# cat /nfsdata/bdqn-test-test-claim-pvc-0c606810-9f93-441b-bc6b-391d7813dcab/test-file </span><br><span class="line">123456</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec  -it  -n bdqn-test  nfs-client-provisioner-57f49c99c7-lhd8n /bin/sh</span><br><span class="line">/ # ls /</span><br><span class="line">persistentvolumes </span><br><span class="line">/ # cd  /persistentvolumes/</span><br><span class="line">/persistentvolumes # ls</span><br><span class="line">bdqn-test-test-claim-pvc-0c606810-9f93-441b-bc6b-391d7813dcab</span><br><span class="line"><span class="meta">#</span><span class="bash">这个目录和/nfsdata下面的目录一样</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s数据持久化</title>
    <link href="https://gilbert2.gitee.io/maisy/k8s%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96.html"/>
    <id>https://gilbert2.gitee.io/maisy/k8s%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96.html</id>
    <published>2020-02-10T08:53:18.320Z</published>
    <updated>2020-02-14T03:50:17.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s数据持久化"><a href="#k8s数据持久化" class="headerlink" title="k8s数据持久化"></a>k8s数据持久化</h1><p>Docker容器是有生命周期的，因此数据卷可以实现数据持久化</p><p>数据卷主要解决的问题：</p><ul><li>数据持久性：当我们写入数据时，文件都是暂时性的存在，当容器崩溃后，host就会将这个容器杀死，然后重新从镜像创建容器，数据就会丢失</li><li>数据共享：在同一个Pod中运行容器，会存在共享文件的需求</li></ul><h4 id="Volume："><a href="#Volume：" class="headerlink" title="Volume："></a>Volume：</h4><p><strong>emptyDir（空目录）：</strong>使用情况比较少，一般只做临时使用，类似Docker数据 持久化的：docker manager volume，该数据卷初始分配时，是一个空目录，同一个Pod中的容器可以对该目录有执行读写操作，并且共享数据</p><blockquote><p>​    <strong>使用场景：在同一个Pod里，不同的容器，共享数据卷</strong></p><p>​    <strong>如果容器被删除，数据仍然存在，如果Pod被删除，数据也会被删除</strong></p></blockquote><p><strong>使用实例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">emptyDir.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">producer-consumer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span>  <span class="string">busybox</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span>  <span class="string">/producer_dir</span>  <span class="string">//容器内的路径</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">shared-volume</span>  <span class="string">//指定本地的目录名</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span>  <span class="string">"hello k8s"</span> <span class="string">&gt;</span> <span class="string">/producer_dir/hello;</span>  <span class="string">sleep</span> <span class="number">30000</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span>  <span class="string">busybox</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span>  <span class="string">/consumer_dir</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">shared-volume</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span> <span class="string">/consumer_dir/hello;</span>  <span class="string">sleep</span> <span class="number">30000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-volume</span>  <span class="string">//这里的名字必须与上面的Pod的mountPath的name相对应</span></span><br><span class="line">    <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span>   <span class="string">//定义数据持久化类型，即表示空目录</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>   <span class="string">-f</span>  <span class="string">emptyDir.yaml</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span>  <span class="string">pod</span></span><br><span class="line"><span class="string">NAME</span>                <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span>  </span><br><span class="line"><span class="string">producer-consumer</span>   <span class="number">2</span><span class="string">/2</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">14s</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">logs</span>  <span class="string">producer-consumer</span>  <span class="string">consumer</span> </span><br><span class="line"><span class="string">hello</span>  <span class="string">k8s</span></span><br></pre></td></tr></table></figure><p><strong>使用inspect查看挂载的目录在哪（查看Mount字段）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get  pod -o wide</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE   IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">producer-consumer   2/2     Running   0          69s   10.244.1.2   node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">//可以看到容器运行在node01上，在node01上找到这个容器并查看并查看详细信息</span><br><span class="line">[root@node01 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE</span><br><span class="line">f117beb235cf        busybox</span><br><span class="line">13c7a18109a1        busybox</span><br><span class="line">[root@node01 ~]# docker inspect 13c7a18109a1</span><br><span class="line">        "Mounts": [</span><br><span class="line">            &#123;</span><br><span class="line">                "Type": "bind",</span><br><span class="line">                "Source": "/var/lib/kubelet/pods/5225f542-0859-4a6a-8d99-1f23b9781807/volumes/kubernetes.io~empty-dir/shared-volume",</span><br><span class="line">                "Destination": "/producer_dir", //容器内的挂载目录</span><br><span class="line">                "Mode": "",</span><br><span class="line">                "RW": true,</span><br><span class="line">                "Propagation": "rprivate"</span><br><span class="line">//再查看另一个容器</span><br><span class="line">[root@node01 ~]# docker inspect f117beb235cf</span><br><span class="line">        "Mounts": [</span><br><span class="line">            &#123;</span><br><span class="line">                "Type": "bind",</span><br><span class="line">                "Source": "/var/lib/kubelet/pods/5225f542-0859-4a6a-8d99-1f23b9781807/volumes/kubernetes.io~empty-dir/shared-volume",</span><br><span class="line">                "Destination": "/consumer_dir",  //容器内的挂载目录</span><br><span class="line">                "Mode": "",</span><br><span class="line">                "RW": true,</span><br><span class="line">                "Propagation": "rprivate"</span><br><span class="line">//可以看到两个容器使用的同一个挂载目录</span><br><span class="line">[root@node01 ~]# cd  /var/lib/kubelet/pods/5225f542-0859-4a6a-8d99-1f23b9781807/volumes/kubernetes.io~empty-dir/shared-volume</span><br><span class="line">[root@node01 shared-volume]# ls</span><br><span class="line">hello</span><br><span class="line">[root@node01 shared-volume]# cat hello </span><br><span class="line">hello  k8s</span><br></pre></td></tr></table></figure><p><strong>将容器删除，验证目录是否存在</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# docker rm  -f  13c7a18109a1 </span><br><span class="line">13c7a18109a1</span><br><span class="line">[root@node01 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE</span><br><span class="line">a809717b1aa5        busybox</span><br><span class="line">f117beb235cf        busybox</span><br><span class="line">//它会重新生成一个新的容器，来达到我们用户所期望的状态，所以这个目录还是存在的</span><br></pre></td></tr></table></figure><p><strong>删除Pod</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  delete  pod producer-consumer</span><br><span class="line">[root@master ~]# ls  /var/lib/kubelet/pods/5225f542-0859-4a6a-8d99-1f23b9781807/volumes/kubernetes.io~empty-dir/shared-volume</span><br><span class="line">ls: 无法访问/var/lib/kubelet/pods/5225f542-0859-4a6a-8d99-1f23b9781807/volumes/kubernetes.io~empty-dir/shared-volume: 没有那个文件或目录</span><br><span class="line">//Pod删除后数据也会被删除</span><br></pre></td></tr></table></figure><p><strong>hostPath Volume（使用场景也比较少）：</strong>类似Docker数据持久化的：bind mount</p><p>将Pod所在节点的文件系统上某一个文件或目录挂载进容器内</p><blockquote><p>​    <strong>如果Pod被删除，数据会保留，相比较emptyDir会好一点，不过，一旦host崩溃，hostPath也无法访问</strong></p><p><strong>docker或者k8s集群本身的存储会采用hostPath这种方式</strong></p></blockquote><p><strong>k8s集群中会有很多pod，如果都是用hostPath Volume的话管理起来很不方便，所以就用到了PV</strong></p><p><strong>Persistent Volume | PV（持久卷）提前做好的，数据持久化的数据存放目录</strong></p><blockquote><p><strong>是集群中的一块存储空间，由集群管理员管理或者由Storage class（存储类）自动管理，PV和pod、deployment、Service一样，都是一个资源对象</strong></p><p><strong>PersistentVolume（PV）是集群中已由管理员配置的一段网络存储。 集群中的资源就像一个节点是一个集群资源。 PV是诸如卷之类的卷插件，但是具有独立于使用PV的任何单个pod的生命周期。 该API对象捕获存储的实现细节，即NFS，iSCSI或云提供商特定的存储系统</strong></p></blockquote><p><strong>Psesistent Volume Claim | PVC（持久卷使用声明|申请）</strong></p><blockquote><p><strong>PVC代表用户使用存储的请求，应用申请PV持久化空间的一个申请、声明。K8s集群可能会有多个PV，你需要不停的为不同的应用创建多个PV</strong></p><p><strong>它类似于pod。Pod消耗节点资源，PVC消耗存储资源。 pod可以请求特定级别的资源（CPU和内存）。 权限要求可以请求特定的大小和访问模式</strong></p></blockquote><p>更多可以参考：<a href="https://www.kubernetes.org.cn/pvpvcstorageclass" target="_blank" rel="noopener">https://www.kubernetes.org.cn/pvpvcstorageclass</a></p><p><strong>基于NFS服务来做的PV</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# yum  -y  install  nfs-utils (需要节点全部下载，会报挂载类型错误)</span><br><span class="line">[root@master ~]# yum  -y  install  rpcbind</span><br><span class="line">[root@master ~]# mkdir  &#x2F;nfsdata</span><br><span class="line">[root@master ~]# vim  &#x2F;etc&#x2F;exports</span><br><span class="line">&#x2F;nfsdata  *(rw,sync,no_root_squash)</span><br><span class="line">[root@master ~]# systemctl  start  rpcbind</span><br><span class="line">[root@master ~]# systemctl  start  nfs-server</span><br><span class="line">[root@master ~]# showmount  -e</span><br><span class="line">Export list for master:</span><br><span class="line">&#x2F;nfsdata *</span><br></pre></td></tr></table></figure><p>1.创建PV（实际的存储目录）  2.创建PVC  3.创建pod</p><p><strong>创建PV资源对象：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">nfs-pv.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span> <span class="string">//PV容量的大小</span></span><br><span class="line">    <span class="attr">storage:</span>  <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span> <span class="string">//PV支持的访问模式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span>  <span class="string">Recycle</span> <span class="string">//PV的存储空间的回收策略是什么</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfsdata/pv1</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">nfs-pv.yaml</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pv</span></span><br><span class="line"><span class="string">NAME</span>      <span class="string">CAPACITY</span>   <span class="string">ACCESS</span> <span class="string">MODES</span>   <span class="string">RECLAIM</span> <span class="string">POLICY</span>   <span class="string">STATUS</span>      <span class="string">CLAIM</span>   <span class="string">STORAGECLASS</span>   <span class="string">REASON</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">test-pv</span>   <span class="string">1Gi</span>        <span class="string">RWO</span>            <span class="string">Recycle</span>          <span class="string">Available</span>           <span class="string">nfs</span>                     <span class="string">9m30s</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>accessModes: （PV支持的访问模式）</strong></p><p>​    <strong>-  ReadWriteOnce：能以读-写的方式mount到单个节点</strong></p><p>​    <strong>-  ReadWriteMany：能以读-写的方式mount到多个节点</strong></p><p>​    <strong>-  ReadOnlyMany：能以只读的方式mount到多个节点</strong></p></blockquote><blockquote><p><strong>persistentVolumeReclaimPolicy：（PV的存储空间的回收策略是什么）</strong></p><p>​    <strong>Recycle：自动清除数据</strong></p><p>​    <strong>Retain：需要管理员手动回收</strong></p><p>​    <strong>Delete：云存储专用。直接删除数据</strong></p></blockquote><blockquote><p><strong>PV和PVC相互的关联：通过的是storageClassName &amp;&amp; accessModes</strong></p></blockquote><p><strong>创建PVC</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">nfs-pvc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span>    <span class="string">//访问模式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span>  </span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span>  <span class="string">1Gi</span>   <span class="string">//申请的容量大小</span></span><br><span class="line">  <span class="attr">storageClassName:</span>  <span class="string">nfs</span>    <span class="string">//向哪个PV申请</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">nfs-pvc.yaml</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pvc</span></span><br><span class="line"><span class="string">NAME</span>       <span class="string">STATUS</span>   <span class="string">VOLUME</span>    <span class="string">CAPACITY</span>   <span class="string">ACCESS</span> <span class="string">MODES</span>   <span class="string">STORAGECLASS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">test-pvc</span>   <span class="string">Bound</span>    <span class="string">test-pv</span>   <span class="string">1Gi</span>        <span class="string">RWO</span>            <span class="string">nfs</span>            <span class="string">14s</span></span><br></pre></td></tr></table></figure><h4 id="PV的应用："><a href="#PV的应用：" class="headerlink" title="PV的应用："></a><strong>PV的应用：</strong></h4><p><strong>创建一个Pod资源：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">pod.yaml</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod1</span></span><br><span class="line">    <span class="attr">image:</span>  <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span>  <span class="string">"/mydata"</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mydata</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">mydata</span></span><br><span class="line">      <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">        <span class="attr">claimName:</span>  <span class="string">test-pvc</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">pod.yaml</span></span><br></pre></td></tr></table></figure><p>之前创建PV的时候指定的挂载目录是/nfsdata/pv1，我们并没有创建pv1这个目录，所以这个pod是运行不成功的。</p><p>以下是排错方法：</p><blockquote><ol><li><strong>kubectl  describe</strong></li><li><strong>kubectl  logs</strong></li><li><strong>/var/log/messages</strong></li><li><strong>查看该节点的kubelet的日志</strong></li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//使用kubectl describe</span><br><span class="line">[root@master ~]# kubectl  describe  pod  test-pod</span><br><span class="line">mount.nfs: mounting 192.168.1.70:/nfsdata/pv1 failed, reason given by server: No such file or directory  //提示没有文件或目录</span><br></pre></td></tr></table></figure><p>创建目录，再查看pod状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  /nfsdata/pv1</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE   IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">test-pod   1/1     Running   0          12m   10.244.1.3   node01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>验证是否应用成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec  test-pod  touch /mydata/hello</span><br><span class="line">[root@master ~]# ls  /nfsdata/pv1/</span><br><span class="line">hello</span><br><span class="line">[root@master ~]# echo  123  &gt;  /nfsdata/pv1/hello </span><br><span class="line">[root@master ~]# kubectl  exec  test-pod  cat /mydata/hello</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>删除Pod，验证回收策略（Recycle）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  delete  pod  test-pod</span><br><span class="line">[root@master ~]# kubectl  delete  pvc test-pvc</span><br><span class="line">[root@master ~]# kubectl  get pv</span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">test-pv   1Gi        RWO            Recycle          Available           nfs                     42h</span><br><span class="line">[root@master ~]# ls  &#x2F;nfsdata&#x2F;pv1&#x2F;</span><br><span class="line">[root@master ~]#</span><br><span class="line">&#x2F;&#x2F;验证成功，数据已经回收</span><br></pre></td></tr></table></figure><p>通常情况下不会设置为自动删除，不然就和emptyDir就差不多了</p><p>删除pv，修改回收策略：</p><p>之前是先创建PV—&gt;PVC—&gt;Pod，现在调整一下，先创建PV—&gt;—Pod—&gt;PVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  nfs-pv.yaml </span><br><span class="line">  persistentVolumeReclaimPolicy:  Retain</span><br><span class="line">[root@master ~]# kubectl  apply  -f  nfs-pv.yaml </span><br><span class="line">[root@master ~]# kubectl  get pv</span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">test-pv   1Gi        RWO            Retain           Available           nfs                     7s</span><br><span class="line">[root@master ~]# kubectl  apply  -f  pod.yaml </span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">test-pod   0&#x2F;1     Pending   0          5s  &#x2F;&#x2F;Pending正在被调度</span><br><span class="line">[root@master ~]# kubectl  describe  pod test-pod</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason            Age                From               Message</span><br><span class="line">  ----     ------            ----               ----               -------</span><br><span class="line">  Warning  FailedScheduling  41s (x2 over 41s)  default-scheduler  persistentvolumeclaim &quot;test-pvc&quot; not found</span><br><span class="line">&#x2F;&#x2F;没有发现对应的pvc</span><br><span class="line"></span><br><span class="line">创建pvc</span><br><span class="line">[root@master ~]# kubectl  apply  -f  nfs-pvc.yaml</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">test-pod   1&#x2F;1     Running   0          114s</span><br></pre></td></tr></table></figure><p>验证Retain（管理员手动删除）回收策略：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec test-pod  touch  /mydata/k8s</span><br><span class="line">[root@master ~]# ls  /nfsdata/pv1/</span><br><span class="line">k8s</span><br><span class="line">[root@master ~]# kubectl  delete  pod test-pod </span><br><span class="line">[root@master ~]# kubectl  delete  pvc test-pvc</span><br><span class="line">[root@master ~]# ls  /nfsdata/pv1/</span><br><span class="line">k8s</span><br><span class="line">//可以看到并没有回收</span><br><span class="line">[root@master ~]# kubectl get pv</span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">test-pv   1Gi        RWO            Retain           Available           nfs                     6s</span><br></pre></td></tr></table></figure><p><strong>mysql对数据持久化的应用：</strong></p><p>//这里就不再创建PV，PVC了，用之前的就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  apply  -f  nfs-pvc.yaml </span><br><span class="line">[root@master ~]# kubectl  get pvc</span><br><span class="line">NAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">test-pvc   Bound    test-pv   1Gi        RWO            nfs            7s</span><br></pre></td></tr></table></figure><p>创建Deploment资源对象，mysql容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">mysql.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span>  <span class="string">//基于等值的标签</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mysql:5.6</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="number">123.</span><span class="string">com</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-storage</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-storage</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">test-pvc</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">deployments.</span></span><br><span class="line"><span class="string">NAME</span>         <span class="string">READY</span>   <span class="string">UP-TO-DATE</span>   <span class="string">AVAILABLE</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">test-mysql</span>   <span class="number">1</span><span class="string">/1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="string">61s</span></span><br></pre></td></tr></table></figure><p>进入容器创建数据，验证是否应用PV：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod -o wide</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE   IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">test-mysql-569f8df4db-fnnxc   1/1     Running   0          32m   10.244.1.5   node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[root@master ~]# kubectl  exec  -it  test-mysql-569f8df4db-fnnxc  --  mysql -u root -p123.com</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database yun33;  //创建数据库</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use yun33;  //选择使用数据路</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create table my_id( id int(4));  创建表</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert my_id values(9527);  //在表中插入数据</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from my_id;  //查看表中所有数据</span></span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 9527 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">[root@master ~]# ls /nfsdata/pv1/</span><br><span class="line">auto.cnf  ibdata1  ib_logfile0  ib_logfile1  k8s  mysql  performance_schema  yun33</span><br></pre></td></tr></table></figure><p>关闭node01节点，模拟节点宕机：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">nodes</span> </span><br><span class="line"><span class="string">NAME</span>     <span class="string">STATUS</span>     <span class="string">ROLES</span>    <span class="string">AGE</span>   <span class="string">VERSION</span></span><br><span class="line"><span class="string">master</span>   <span class="string">Ready</span>      <span class="string">master</span>   <span class="string">36d</span>   <span class="string">v1.15.0</span></span><br><span class="line"><span class="string">node01</span>   <span class="string">NotReady</span>   <span class="string">&lt;none&gt;</span>   <span class="string">36d</span>   <span class="string">v1.15.0</span></span><br><span class="line"><span class="string">node02</span>   <span class="string">Ready</span>      <span class="string">&lt;none&gt;</span>   <span class="string">36d</span>   <span class="string">v1.15.0</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pod</span> <span class="string">-o</span> <span class="string">wide</span> <span class="string">-w</span></span><br><span class="line"><span class="string">NAME</span>                          <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span>   <span class="string">IP</span>           <span class="string">NODE</span>     <span class="string">NOMINATED</span> <span class="string">NODE</span>   <span class="string">READINESS</span> <span class="string">GATES</span></span><br><span class="line"><span class="string">test-mysql-569f8df4db-fnnxc</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">36m</span>   <span class="number">10.244</span><span class="number">.1</span><span class="number">.5</span>   <span class="string">node01</span>   <span class="string">&lt;none&gt;</span>           <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="string">test-mysql-569f8df4db-fnnxc</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Terminating</span>   <span class="number">0</span>          <span class="string">38m</span>   <span class="number">10.244</span><span class="number">.1</span><span class="number">.5</span>   <span class="string">node01</span>   <span class="string">&lt;none&gt;</span>           <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="string">test-mysql-569f8df4db-2m5rd</span>   <span class="number">0</span><span class="string">/1</span>     <span class="string">Pending</span>       <span class="number">0</span>          <span class="string">0s</span>    <span class="string">&lt;none&gt;</span>       <span class="string">&lt;none&gt;</span>   <span class="string">&lt;none&gt;</span>           <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="string">test-mysql-569f8df4db-2m5rd</span>   <span class="number">0</span><span class="string">/1</span>     <span class="string">Pending</span>       <span class="number">0</span>          <span class="string">0s</span>    <span class="string">&lt;none&gt;</span>       <span class="string">node02</span>   <span class="string">&lt;none&gt;</span>           <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="string">test-mysql-569f8df4db-2m5rd</span>   <span class="number">0</span><span class="string">/1</span>     <span class="string">ContainerCreating</span>   <span class="number">0</span>          <span class="string">0s</span>    <span class="string">&lt;none&gt;</span>       <span class="string">node02</span>   <span class="string">&lt;none&gt;</span>           <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="string">test-mysql-569f8df4db-2m5rd</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>             <span class="number">0</span>          <span class="string">2s</span>    <span class="number">10.244</span><span class="number">.2</span><span class="number">.4</span>   <span class="string">node02</span>   <span class="string">&lt;none&gt;</span>           <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pod</span> <span class="string">-o</span> <span class="string">wide</span> </span><br><span class="line"><span class="string">NAME</span>                          <span class="string">READY</span>   <span class="string">STATUS</span>        <span class="string">RESTARTS</span>   <span class="string">AGE</span>   <span class="string">IP</span>           <span class="string">NODE</span>     <span class="string">NOMINATED</span> <span class="string">NODE</span>   <span class="string">READINESS</span> <span class="string">GATES</span></span><br><span class="line"><span class="string">test-mysql-569f8df4db-2m5rd</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>       <span class="number">0</span>          <span class="string">20s</span>   <span class="number">10.244</span><span class="number">.2</span><span class="number">.4</span>   <span class="string">node02</span>   <span class="string">&lt;none&gt;</span>           <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="string">test-mysql-569f8df4db-fnnxc</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Terminating</span>   <span class="number">0</span>          <span class="string">38m</span>   <span class="number">10.244</span><span class="number">.1</span><span class="number">.5</span>   <span class="string">node01</span>   <span class="string">&lt;none&gt;</span>           <span class="string">&lt;none&gt;</span></span><br></pre></td></tr></table></figure><p>验证：在node02上新生成的pod，它内部是否有我们创建的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec -it test-mysql-569f8df4db-2m5rd  -- mysql -u root -p123.com</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| yun33              |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use yun33;</span></span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show tables;</span></span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_yun33 |</span><br><span class="line">+-----------------+</span><br><span class="line">| my_id           |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select *  from my_id;</span></span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 9527 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line">[root@master ~]# ls  /nfsdata/pv1/</span><br><span class="line">auto.cnf  ibdata1  ib_logfile0  ib_logfile1  k8s  mysql  performance_schema  yun33</span><br></pre></td></tr></table></figure><p><strong>Pod不断的重启：</strong></p><blockquote><p>​    <strong>1.swap，没有关闭。导致集群运行不正常</strong></p><p>​    <strong>2.内存不足，运行服务也会重启</strong></p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>负责把PVC绑定到PV的是一个持久化存储卷控制循环，这个控制器也是kube-manager-controller的一部分运行在master上。而真正把目录挂载到容器上的操作是在POD所在主机上发生的，所以通过kubelet来完成。而且创建PV以及PVC的绑定是在POD被调度到某一节点之后进行的，完成这些操作，POD就可以运行了。下面梳理一下挂载一个PV的过程：</p><blockquote><ol><li><strong>用户提交一个包含PVC的POD</strong></li><li><strong>调度器把根据各种调度算法把该POD分配到某个节点，比如node01</strong></li><li><strong>Node01上的kubelet等待Volume Manager准备存储设备</strong></li><li><strong>PV控制器调用存储插件创建PV并与PVC进行绑定</strong></li><li><strong>Attach/Detach Controller或Volume Manager通过存储插件实现设备的attach。（这一步是针对块设备存储）</strong></li><li><strong>Volume Manager等待存储设备变为可用后，挂载该设备到<code>/var/lib/kubelet/pods//volumes/kubernetes.io~/</code>目录上</strong></li><li><strong>Kubelet被告知卷已经准备好，开始启动POD，通过映射方式挂载到容器中</strong></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://gilbert2.gitee.io/maisy/tags/k8s/"/>
    
  </entry>
  
</feed>
