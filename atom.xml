<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maisyの博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pdxblog.top/"/>
  <updated>2020-07-01T10:13:30.145Z</updated>
  <id>https://pdxblog.top/</id>
  
  <author>
    <name>Maisy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Varnish4.0缓存代理配置</title>
    <link href="https://pdxblog.top/Varnish4.0%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.html"/>
    <id>https://pdxblog.top/Varnish4.0%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.html</id>
    <published>2020-06-30T16:00:00.000Z</published>
    <updated>2020-07-01T10:13:30.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Varnish4-0缓存代理配置"><a class="header-anchor" href="#Varnish4-0缓存代理配置">¶</a>Varnish4.0缓存代理配置</h3><h4 id="一、Varnish原理"><a class="header-anchor" href="#一、Varnish原理">¶</a>一、Varnish原理</h4><h5 id="1、Varnish简介"><a class="header-anchor" href="#1、Varnish简介">¶</a>1、Varnish简介</h5><blockquote><p>varnish 缓存是 web 应用加速器，同时也作为 http 反向缓存代理。你可以安装 varnish 在任何http 的前端，同时配置它缓存内容。与传统的 squid 相比，varnish 具有性能更高、速度更快、管理更加方便等诸多优点。有一部分企业已经在生产环境中使用其作为旧版本的 squid的替代方案，以在相同的服务器成本下提供更好的缓存效果，Varnish 更是作为 CDN 缓存服务器的可选服务之一</p></blockquote><p>根据官网的介绍，Varnish 的主要特性如下：<a href="https://www.varnish-cache.org/" target="_blank" rel="noopener">https://www.varnish-cache.org/</a></p><ul><li>缓存位置：</li></ul><blockquote><p>可以使用内存也可以使用磁盘。如果要使用磁盘的话推荐 SSD 做 RAID1</p></blockquote><ul><li>日志存储：</li></ul><blockquote><p>日志也存储在内存中。存储策略：固定大小，循环使用支持虚拟内存的使用</p><p>有精确的时间管理机制，即缓存的时间属性控制</p></blockquote><ul><li>状态引擎架构：</li></ul><blockquote><p>在不同的引擎上完成对不同的缓存和代理数据进行处理。可以通过特定的配置语言设计不同的控制语句，以决定数据在不同位置以不同方式缓存，在特定的地方对经过的报文进行特定规则的处理</p></blockquote><ul><li>缓存管理：</li></ul><blockquote><p>以二叉堆格式管理缓存数据，做到数据的及时清理</p></blockquote><h5 id="2、Varnish-与-与-Squid-的对比"><a class="header-anchor" href="#2、Varnish-与-与-Squid-的对比">¶</a>2、Varnish 与 与 Squid  的对比</h5><p>相同点：</p><blockquote><p>都是一个反向代理服务器</p><p>都是开源软件</p></blockquote><h6 id="Varnish-的优势："><a class="header-anchor" href="#Varnish-的优势：">¶</a>Varnish  的优势：</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Varnish 的稳定性很高，两者在完成相同负荷的工作时，Squid 服务器发生故障的几率要高于 Varnish，因为使用 Squid 要经常重启</span><br><span class="line"></span><br><span class="line">Varnish 访问速度更快，因为采用了“Visual Page Cache”技术，所有缓存数据都直接从内存读取，而 squid 是从硬盘读取，因而 Varnish 在访问速度方面会更快</span><br><span class="line"></span><br><span class="line">Varnish 可以支持更多的并发连接，因为 Varnish 的 TCP 连接释放要比 Squid 快，因而在高并发连接情况下可以支持更多 TCP 连接</span><br><span class="line"></span><br><span class="line">Varnish 可以通过管理端口，使用正则表达式批量的清除部分缓存，而 Squid 是做不到的；</span><br><span class="line">squid 属于是单进程使用单核 CPU，但 Varnish 是通过 fork 形式打开多进程来做处理，所以可以合理的使用所有核来处理相应的请求</span><br></pre></td></tr></table></figure><h6 id="Varnish-的劣势："><a class="header-anchor" href="#Varnish-的劣势：">¶</a>Varnish  的劣势：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">varnish 进程一旦 Crash 或者重启，缓存数据都会从内存中完全释放，此时所有请求都会发送到后端服务器，在高并发情况下，会给后端服务器造成很大压力</span><br><span class="line"></span><br><span class="line">在 varnish 使用中如果单个 url 的请求通过 HA&#x2F;F5 等负载均衡，则每次请求落在不同的varnish 服务器中，造成请求都会被穿透到后端；而且同样的请求在多台服务器上缓存，也会造成 varnish 的缓存的资源浪费，造成性能下降</span><br></pre></td></tr></table></figure><h6 id="Varnish-劣势的解决方案"><a class="header-anchor" href="#Varnish-劣势的解决方案">¶</a>Varnish  劣势的解决方案</h6><p>针对劣势一：</p><blockquote><p>在访问量很大的情况下推荐使用 varnish 的内存缓存方式启动，而且后面需要跟多台 squid/nginx 服务器。主要为了防止前面的 varnish 服 务、服务器被重启的情况下，大量请求穿透 varnish，这样 squid/nginx 可以就担当第二层 CACHE，而且也弥补了 varnish 缓存在内存中重启都会释放的问题</p></blockquote><p>针对劣势二：</p><blockquote><p>可以在负载均衡上做 url 哈希，让单个 url 请求固定请求到一台 varnish 服务器上</p></blockquote><h5 id="3、使用-varnish-作为-web-代理缓存的原理"><a class="header-anchor" href="#3、使用-varnish-作为-web-代理缓存的原理">¶</a>3、使用 varnish  作为 web  代理缓存的原理</h5><blockquote><p>varnish 是一个 http 反向代理的缓存。它从客户端接收请求然后尝试从缓存中获取数据来响应客户端的请求，如果 varnish 不能从缓存中获得数据来响应客户端，它将转发请求到后端（backend servers）,获取响应同时存储，最后交付给客户端</p><p>如果 varnish 已经缓存了某个响应，它比你传统的后端服务器的响应要快很多，所以你需要尽可能是更多的请求直接从 varnish 的缓存中获取响应</p><p>varnish 决定是缓存内容或者是从后端服务器获取响应。后端服务器能通过 http 响应头中的Cache-Control 来同步 varnish 缓存内容。在某些条件下 varnish 将不缓存内容，最常见的是使用 cookie。当一个被标记有 cookie 的客户端 web 请求，varnish 默认是不缓存。这些众多的varnish 功能特点都是可以通过写 vcl 来改变的</p></blockquote><h5 id="4、-简单架构"><a class="header-anchor" href="#4、-简单架构">¶</a>4、 简单架构</h5><p>Varnish 分为 management 进程和 child 进程</p><h6 id="Management-进程："><a class="header-anchor" href="#Management-进程：">¶</a>Management 进程：</h6><blockquote><p>对子进程进行管理，同时对 VCL 配置进行编译，并应用到不同的状态引擎</p></blockquote><h6 id="Child-进程："><a class="header-anchor" href="#Child-进程：">¶</a>Child 进程：</h6><blockquote><p>生成线程池，负责对用户请求进行处理，并通过 hash 查找返回用户结果</p></blockquote><h5 id="5、varnish-主要配置部分"><a class="header-anchor" href="#5、varnish-主要配置部分">¶</a>5、varnish  主要配置部分</h5><p>varnish 配置主要分为：</p><ul><li>后端配置</li><li>ACL 配置</li><li>probes 配置</li><li>directors 配置</li><li>核心子程序配置</li></ul><p>其中后端配置是必要的，在多台服务器中还会用到 directors 配置，核心子程序配置</p><h6 id="后端配置："><a class="header-anchor" href="#后端配置：">¶</a>后端配置：</h6><blockquote><p>即给 varnish 添加反代服务器节点，最少配置一个</p></blockquote><h6 id="ACL-配置："><a class="header-anchor" href="#ACL-配置：">¶</a>ACL 配置：</h6><blockquote><p>即给 varnish 添加访问控制列表，可以指定这些列表访问或禁止访问</p></blockquote><h6 id="probes-配置："><a class="header-anchor" href="#probes-配置：">¶</a>probes 配置：</h6><blockquote><p>即给 varnish 添加探测后端服务器是否正常的规则，方便切换或禁止对应后端服务器</p></blockquote><h6 id="directors-配置："><a class="header-anchor" href="#directors-配置：">¶</a>directors 配置：</h6><blockquote><p>即给 varnish 添加负载均衡模式管理多个后端服务器</p></blockquote><h6 id="核心子程序配置："><a class="header-anchor" href="#核心子程序配置：">¶</a>核心子程序配置：</h6><blockquote><p>即给 varnish 添加后端服务器切换，请求缓存，访问控制，错误处理等规则</p></blockquote><h5 id="6、VCL-中内置-预设变量：-变量-也叫-object-）"><a class="header-anchor" href="#6、VCL-中内置-预设变量：-变量-也叫-object-）">¶</a>6、VCL  中内置 预设变量： 变量( 也叫 object ）</h5><p><img data-src="https://img-blog.csdnimg.cn/20200701180737851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>req：</p><blockquote><p>The request object，请求到达时可用的变量(客户端发送的请求对象)</p></blockquote><p>bereq：</p><blockquote><p>The backend request object，向后端主机请求时可用的变量</p></blockquote><p>beresp：</p><blockquote><p>The backend response object，从后端主机获取内容时可用的变量(后端响应请求对象)</p></blockquote><p>resp：</p><blockquote><p>The HTTP response object，对客户端响应时可用的变量(返回给客户端的响应对象)</p></blockquote><p>obj：</p><blockquote><p>存储在内存中时对象属性相关的可用的变量(高速缓存对象，缓存后端响应请求内容)</p></blockquote><p>预设变量是系统固定的，请求进入对应的 vcl 子程序后便生成，这些变量可以方便子程序提取，当然也可以自定义一些全局变量</p><p>当前时间：</p><h6 id="now-作用：返回当前时间戳"><a class="header-anchor" href="#now-作用：返回当前时间戳">¶</a>now 作用：返回当前时间戳</h6><h6 id="客户端：（客户端基本信息）"><a class="header-anchor" href="#客户端：（客户端基本信息）">¶</a>客户端：（客户端基本信息）</h6><p>注：原 client.port 已经弃用，如果要取客户端请求端口号使用std.port(client.ip)， importstd;才可以使用 std</p><blockquote><p>client.ip：返回客户端 IP 地址</p><p>client.identity：用于装载客户端标识码</p></blockquote><h6 id="服务器：（服务器基本信息）"><a class="header-anchor" href="#服务器：（服务器基本信息）">¶</a>服务器：（服务器基本信息）</h6><p>注：原 server.port 已经弃用，如果要取服务器端口号使用std.port(server.ip)，需要 import std;才可以使用 std</p><blockquote><p>server.hostname：服务器主机名</p><p>server.identity：服务器身份标识</p><p>server.ip：返回服务器端 IP 地址</p></blockquote><h6 id="req-（客户端发送的请求对象）"><a class="header-anchor" href="#req-（客户端发送的请求对象）">¶</a>req :（客户端发送的请求对象）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">req：整个 HTTP 请求数据结构</span><br><span class="line"></span><br><span class="line">req.backend_hint：指定请求后端节点，设置后 bereq.backend 才能获取后端节点配置数据</span><br><span class="line"></span><br><span class="line">req.can_gzip：客户端是否接受 GZIP 传输编码</span><br><span class="line"></span><br><span class="line">req.hash_always_miss：是否强制不命中高速缓存，如果设置为 true，则高速缓存不会命中，一直会从后端获取新数据</span><br><span class="line"></span><br><span class="line">req.hash_ignore_busy：忽略缓存中忙碌的对象，多台缓存时可以避免死锁</span><br><span class="line"></span><br><span class="line">req.http：对应请求 HTTP 的 header</span><br><span class="line"></span><br><span class="line">req.method：请求类型（如 GET , POST）</span><br><span class="line"></span><br><span class="line">req.proto：客户端使用的 HTTP 协议版本</span><br><span class="line"></span><br><span class="line">req.restarts：重新启动次数。默认最大值是 4</span><br><span class="line"></span><br><span class="line">req.ttl：缓存有剩余时间</span><br><span class="line"></span><br><span class="line">req.url：请求的 URL</span><br><span class="line"></span><br><span class="line">req.xid：唯一 ID</span><br></pre></td></tr></table></figure><h6 id="bereq：（发送到后端的请求对象，基于-req-对象）"><a class="header-anchor" href="#bereq：（发送到后端的请求对象，基于-req-对象）">¶</a>bereq：（发送到后端的请求对象，基于 req 对象）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bereq：（发送到后端的请求对象，基于 req 对象）</span><br><span class="line"></span><br><span class="line">bereq：整个后端请求后数据结构</span><br><span class="line"></span><br><span class="line">bereq.backend：所请求后端节点配置</span><br><span class="line"></span><br><span class="line">bereq.between_bytes_timeout：从后端每接收一个字节之间的等待时间（秒）</span><br><span class="line">bereq.connect_timeout：连接后端等待时间（秒），最大等待时间</span><br><span class="line"></span><br><span class="line">bereq.first_byte_timeout：等待后端第一个字节时间（秒），最大等待时间</span><br><span class="line"></span><br><span class="line">bereq.http：对应发送到后端 HTTP 的 header 信息</span><br><span class="line"></span><br><span class="line">bereq.method：发送到后端的请求类型（如：GET , POST）</span><br><span class="line"></span><br><span class="line">bereq.proto：发送到后端的请求的 HTTP 版本</span><br><span class="line"></span><br><span class="line">bereq.retries：相同请求重试计数</span><br><span class="line"></span><br><span class="line">bereq.uncacheable：无缓存这个请求</span><br><span class="line"></span><br><span class="line">bereq.url：发送到后端请求的 URL</span><br><span class="line"></span><br><span class="line">bereq.xid：请求唯一 ID</span><br></pre></td></tr></table></figure><h6 id="beresp：（后端响应请求对象）"><a class="header-anchor" href="#beresp：（后端响应请求对象）">¶</a>beresp：（后端响应请求对象）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">beresp：整个后端响应 HTTP 数据结构</span><br><span class="line"></span><br><span class="line">beresp.backend.ip：后端响应的 IP</span><br><span class="line"></span><br><span class="line">beresp.backend.name：响应后端配置节点的 name</span><br><span class="line"></span><br><span class="line">beresp.do_gunzip：默认为 false 。缓存前解压该对象</span><br><span class="line"></span><br><span class="line">beresp.do_gzip：默认为 false 。缓存前压缩该对象</span><br><span class="line"></span><br><span class="line">beresp.grace：设置当前对象缓存过期后可额外宽限时间，用于特殊请求加大缓存时间，当并发量巨大时，不易设置过大否则会堵塞缓存，一般可设置 1m 左右，当 beresp.ttl&#x3D;0s 时该值无效</span><br><span class="line"></span><br><span class="line">beresp.http：对应的 HTTP 请求 header</span><br><span class="line"></span><br><span class="line">beresp.keep：对象缓存后带保持时间</span><br><span class="line"></span><br><span class="line">beresp.proto：响应的 HTTP 版本</span><br><span class="line"></span><br><span class="line">beresp.reason：由服务器返回的 HTTP 状态信息</span><br><span class="line"></span><br><span class="line">beresp.status：由服务器返回的状态码</span><br><span class="line"></span><br><span class="line">beresp.storage_hint：指定保存的特定存储器</span><br><span class="line"></span><br><span class="line">beresp.ttl：该对象缓存的剩余时间，指定统一缓存剩余时间。</span><br><span class="line"></span><br><span class="line">beresp.uncacheable：继承 bereq.uncacheable，是否不缓存</span><br></pre></td></tr></table></figure><h6 id="OBJ-：（高速缓存对象，缓存后端响应请求内容）"><a class="header-anchor" href="#OBJ-：（高速缓存对象，缓存后端响应请求内容）">¶</a>OBJ ：（高速缓存对象，缓存后端响应请求内容）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">obj.grace：该对象额外宽限时间</span><br><span class="line"></span><br><span class="line">obj.hits：缓存命中次数，计数器从 1 开始，当对象缓存该值为 1，一般可以用于判断是否有缓存，当前该值大于 0 时则为有缓存</span><br><span class="line"></span><br><span class="line">obj.http：对应 HTTP 的 header</span><br><span class="line"></span><br><span class="line">obj.proto：HTTP 版本</span><br><span class="line"></span><br><span class="line">obj.reason：服务器返回的 HTTP 状态信息</span><br><span class="line"></span><br><span class="line">obj.status：服务器返回的状态码</span><br><span class="line"></span><br><span class="line">obj.ttl：该对象缓存剩余时间（秒）</span><br><span class="line"></span><br><span class="line">obj.uncacheable：不缓存对象</span><br></pre></td></tr></table></figure><h6 id="resp-（返回给客户端的响应对象）"><a class="header-anchor" href="#resp-（返回给客户端的响应对象）">¶</a>resp :（返回给客户端的响应对象）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resp：整个响应 HTTP 数据结构</span><br><span class="line"></span><br><span class="line">resp.http：对应 HTTP 的 header</span><br><span class="line"></span><br><span class="line">resp.proto：编辑响应的 HTTP 协议版本</span><br><span class="line"></span><br><span class="line">resp.reason：将要返回的 HTTP 状态信息</span><br><span class="line"></span><br><span class="line">resq.status：将要返回的 HTTP 状态码</span><br></pre></td></tr></table></figure><h6 id="存储-："><a class="header-anchor" href="#存储-：">¶</a>存储 ：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">storage.&lt;name&gt;.free_space：存储可用空间（字节数）</span><br><span class="line"></span><br><span class="line">storage.&lt;name&gt;.used_space：存储已经使用空间（字节数）</span><br><span class="line"></span><br><span class="line">storage.&lt;name&gt;.happy：存储健康状态</span><br></pre></td></tr></table></figure><h5 id="7、特定功能性语句"><a class="header-anchor" href="#7、特定功能性语句">¶</a>7、特定功能性语句</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">ban(expression)：清除指定对象缓存</span><br><span class="line"></span><br><span class="line">call(subroutine)：调用子程序，如：call(name)</span><br><span class="line"></span><br><span class="line">hash_data(input)：生成 hash 键，用于制定 hash 键值生成结构，只能在 vcl_hash 子程序中使用。调用 hash_data(input) 后，即这个 hash 为当前页面的缓存 hash 键值，无需其它获取或操作，如：</span><br><span class="line">sub vcl_hash&#123;</span><br><span class="line">hash_data(client.ip);</span><br><span class="line">return(lookup);</span><br><span class="line">&#125;</span><br><span class="line">注意：return(lookup); 是默认返回值，所以可以不写</span><br><span class="line"></span><br><span class="line">new()：创建一个 vcl 对象，只能在 vcl_init 子程序中使用</span><br><span class="line"></span><br><span class="line">return()：结束当前子程序，并指定继续下一步动作，如：return (ok); 每个子程序可指定的动作均有不同</span><br><span class="line"></span><br><span class="line">rollback()：恢复 HTTP 头到原来状态，已经弃用，使用 std.rollback() 代替</span><br><span class="line"></span><br><span class="line">synthetic(STRING)：合成器，用于自定义一个响应内容，比如当请求出错时，可以返回自定义 404 内容，而不只是默认头信息，只能在 vcl_synth 与 vcl_backend_error 子程序中使用，如：</span><br><span class="line">sub vcl_synth &#123;</span><br><span class="line">//自定义内容</span><br><span class="line">synthetic (&#123;"</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span><br><span class="line">&lt;html lang="zh-cn"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="ContentType"content="text/html;charset=utf-8"/&gt;</span><br><span class="line">&lt;title&gt;error&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Error&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;这只是一个测试自定义响应异常内容&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">"&#125;);</span><br><span class="line">//只交付自定义内容</span><br><span class="line">return(deliver);</span><br><span class="line">regsub(str, regex, sub)：使用正则替换第一次出现的字符串，第一个参数为待处理字符串，第二个参数为正则表达式，第三个为替换为字符串</span><br><span class="line"></span><br><span class="line">regsuball(str, regex, sub)：使用正则替换所有匹配字符串。参数与 regsuball 相同</span><br><span class="line">具体变量详见：</span><br><span class="line">https://www.varnish-cache.org/docs/4.0/reference/vcl.html#reference-vcl</span><br></pre></td></tr></table></figure><h5 id="8、return语句"><a class="header-anchor" href="#8、return语句">¶</a>8、return语句</h5><p>return 语句是终止子程序并返回动作，所有动作都根据不同的 vcl 子程序限定来选用</p><p><a href="https://www.varnish-cache.org/docs/4.0/users-guide/vcl-built-in-subs.html" target="_blank" rel="noopener">https://www.varnish-cache.org/docs/4.0/users-guide/vcl-built-in-subs.html</a><br>语法：return(action);</p><p>常用的动作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">abandon 放弃处理，并生成一个错误</span><br><span class="line"></span><br><span class="line">deliver 交付处理</span><br><span class="line"></span><br><span class="line">fetch 从后端取出响应对象</span><br><span class="line"></span><br><span class="line">hash 哈希缓存处理</span><br><span class="line"></span><br><span class="line">lookup 查找缓存对象</span><br><span class="line"></span><br><span class="line">ok 继续执行</span><br><span class="line"></span><br><span class="line">pass 进入 pass 非缓存模式</span><br><span class="line"></span><br><span class="line">pipe 进入 pipe 非缓存模式</span><br><span class="line"></span><br><span class="line">purge 清除缓存对象，构建响应</span><br><span class="line"></span><br><span class="line">restart 重新开始</span><br><span class="line"></span><br><span class="line">retry 重试后端处理</span><br><span class="line"></span><br><span class="line">synth(status code,reason) 合成返回客户端状态信息</span><br></pre></td></tr></table></figure><h5 id="9、varnish-中内置子程序"><a class="header-anchor" href="#9、varnish-中内置子程序">¶</a>9、varnish  中内置子程序</h5><p>注：varnish 内置子程序均有自己限定的返回动作 return （动作）; 不同的动作将调用对应下一个子程序</p><h6 id="vcl-recv-子程序"><a class="header-anchor" href="#vcl-recv-子程序">¶</a>vcl_recv  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开始处理请求，通过 return (动作); 选择 varnish 处理模式，默认进入 hash 缓存模式（即return(hash);），缓存时间为配置项 default_ttl（默认为 120 秒）过期保持时间 default_grace（默认为 10 秒）。该子程序一般用于模式选择，请求对象缓存及信息修改，后端节点修改，终止请求等操作</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>synth(status code,reason); 定义响应内容</p><p>pass 进入 pass 模式，并进入 vcl_pass 子程序</p><p>pipe 进入 pipe 模式，并进入 vcl_pipe 子程序</p><p>hash 进入 hash 缓存模式，并进入 vcl_hash 子程序，默认返回值</p><p>purge 清除缓存等数据，子程序先从 vcl_hash 再到 vcl_purge</p></blockquote><h6 id="vcl-pipe-子程序"><a class="header-anchor" href="#vcl-pipe-子程序">¶</a>vcl_pipe  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipe 模式处理，该模式主要用于直接取后端响应内容返回客户端，可定义响应内容返回客户端。该子程序一般用于需要及时且不作处理的后端信息，取出后端响应内容后直接交付到客户端不进入 vcl_deliver 子程序处理</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，bereq，req，storage</p><p>写：client，bereq，req</p></blockquote><p>返回值：</p><blockquote><p>synth(status code,reason); 定义响应内容</p><p>pipe 继续 pipe 模式，进入后端 vcl_backend_fetch 子程序，默认返回值</p></blockquote><h6 id="vcl-pass-子程序"><a class="header-anchor" href="#vcl-pass-子程序">¶</a>vcl_pass  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass 模式处理，该模式类似 hash 缓存模式，仅不做缓存处理</span><br></pre></td></tr></table></figure><blockquote><p>可操作对象：（部分或全部值）<br>读：client，server，req，storage</p><p>写：client，req</p><p>返回值：</p></blockquote><blockquote><p>synth(status code,reason); 定义响应内容</p><p>fetch 继续 pass 模式，进入后端 vcl_backend_fetch 子程序，默认返回值</p></blockquote><h6 id="vcl-hit-子程序"><a class="header-anchor" href="#vcl-hit-子程序">¶</a>vcl_hit  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash 缓存模式时，存在 hash 缓存时调用，用于缓存处理，可放弃或修改缓存</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，obj，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>restart 重启请求</p><p>deliver 交付缓存内容，进入 vcl_deliver 子程序处理，默认返回值</p><p>synth(status code,reason); 定义响应内容</p></blockquote><h6 id="vcl-miss-子程序"><a class="header-anchor" href="#vcl-miss-子程序">¶</a>vcl_miss  子程序</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash 缓存模式时，不存在 hash 缓存时调用，用于判断性的选择进入后端取响应内容，可以修改为 pass 模式</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>restart 重启请求</p><p>synth(status code,reason); 定义响应内容</p><p>pass 切换到 pass 模式，进入 vcl_pass 子程序</p><p>fetch 正常取后端内容再缓存，进入 vcl_backend_fetch 子程序，默认返回值</p></blockquote><h6 id="vcl-hash-子程序"><a class="header-anchor" href="#vcl-hash-子程序">¶</a>vcl_hash  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash缓存模式，生成hash值作为缓存查找键名提取缓存内容，主要用于缓存hash键值处理，可使用 hash_data(string) 指定键值组成结构，可在同一个页面通过 IP 或 cookie 生成不同的缓存键值</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>lookup 查找缓存对象，存在缓存进入 vcl_hit 子程序，不存在缓存进入 vcl_miss 子程序，当使用了 purge 清理模式时会进入 vcl_purge 子程序，默认返回值</p></blockquote><h6 id="vcl-purge-子程序"><a class="header-anchor" href="#vcl-purge-子程序">¶</a>vcl_purge  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">清理模式，当查找到对应的缓存时清除并调用，用于请求方法清除缓存，并报告</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>synth(status code,reason); 定义响应内容</p><p>restart 重启请求</p></blockquote><h6 id="vcl-deliver-子程序"><a class="header-anchor" href="#vcl-deliver-子程序">¶</a>vcl_deliver  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端交付子程序，在 vcl_backend_response 子程序后调用（非 pipe 模式），或 vcl_hit 子程序后调用，可用于追加响应头信息，cookie 等内容</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，resp，obj，storage</p><p>写：client，req，resp</p></blockquote><p>返回值：</p><blockquote><p>deliver 正常交付后端或缓存响应内容，默认返回值</p><p>restart 重启请求</p></blockquote><h6 id="vcl-backend-fetch-子程序"><a class="header-anchor" href="#vcl-backend-fetch-子程序">¶</a>vcl_backend_fetch  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送后端请求之前调用，可用于改变请求地址或其它信息，或放弃请求</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server，bereq，storage</p><p>写：bereq</p></blockquote><p>返回值：</p><blockquote><p>fetch 正常发送请求到到后端取出响应内容，进入 vcl_backend_response 子程序，默认返回值</p><p>abandon 放弃后端请求，并生成一个错误，进入 vcl_backend_error 子程序</p></blockquote><h6 id="vcl-backend-response-子程序"><a class="header-anchor" href="#vcl-backend-response-子程序">¶</a>vcl_backend_response  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后端响应后调用，可用于修改缓存时间及缓存相关信息</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server，bereq，beresp，storage</p><p>写：bereq，beresp</p></blockquote><p>返回值：</p><blockquote><p>deliver 正常交付后端响应内容，进入 vcl_deliver 子程序，默认返回值</p><p>abandon 放弃后端请求，并生成一个错误，进入 vcl_backend_error 子程序</p><p>retry 重试后端请求，重试计数器加 1，当超过配置中 max_retries 值时会报错并进入vcl_backend_error 子程序</p></blockquote><h6 id="vcl-backend-error-子程序"><a class="header-anchor" href="#vcl-backend-error-子程序">¶</a>vcl_backend_error  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后端处理失败调用，异常页面展示效果处理，可自定义错误响应内容，或修改 beresp.status与 beresp.http.Location 重定向等</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server，bereq，beresp，storage</p><p>写：bereq，beresp</p></blockquote><p>返回值：</p><blockquote><p>deliver 只交付 sysnthetic(string) 自定义内容，默认返回后端异常标准错误内容</p><p>retry 重试后端请求，重试计数器加 1，当超过配置中 max_retries 值时会报错并进入vcl_backend_error 子程序</p></blockquote><h6 id="vcl-synth-子程序"><a class="header-anchor" href="#vcl-synth-子程序">¶</a>vcl_synth  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义响应内容。可以通过 synthetic（）和返回值 synth 调用，这里可以自定义异常显示内容，也可以修改 resp.status 与 resp.http.Location 重定向</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，resp，storage</p><p>写：req，resp</p></blockquote><p>返回值：</p><blockquote><p>deliver 只交付 sysnthetic(string) 自定义内容，默认返回 sysnth 异常指定状态码与错误内容</p><p>restart 重启请求</p></blockquote><h6 id="vcl-init-子程序"><a class="header-anchor" href="#vcl-init-子程序">¶</a>vcl_init  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加载 vcl 时最先调用，用于初始化 VMODs，该子程序不参与请求处理，仅在 vcl 加载时调用一次</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server</p><p>写：无</p></blockquote><p>返回值：</p><blockquote><p>ok 正常返回，进入 vcl_recv 子程序，默认返回值</p></blockquote><h6 id="vcl-fini-子程序"><a class="header-anchor" href="#vcl-fini-子程序">¶</a>vcl_fini 子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">卸载当前 vcl 配置时调用，用于清理 VMODs，该子程序不参与请求处理，仅在 vcl 正常丢弃后调用</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server</p><p>写：无</p></blockquote><p>返回值：</p><blockquote><p>ok 正常返回，本次 vcl 将释放，默认返回值</p></blockquote><p>varnish 子程序调用流程图，通过大部分子程序的 return 返回值进入下一步行动：<br><img data-src="https://img-blog.csdnimg.cn/2020070118081672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h5 id="10、优雅模式（Garce-mode）"><a class="header-anchor" href="#10、优雅模式（Garce-mode）">¶</a>10、优雅模式（Garce mode）</h5><p>Varnish 中的请求合并</p><p>当几个客户端请求同一个页面的时候，varnish 只发送一个请求到后端服务器，然后让其他几个请求挂起并等待返回结果；获得结果后，其它请求再复制后端的结果发送给客户端；但如果同时有数以千计的请求，那么这个等待队列将变得庞大，这将导致 2 类潜在问题：</p><p>惊群问题(thundering herd problem)，即突然释放大量的线程去复制后端返回的结果，将导致负载急速上升；没有用户喜欢等待；</p><p>故为了解决这类问题，可以配置 varnish 在缓存对象因超时失效后再保留一段时间，以给那些等待的请求返回过去的文件内容(stale content)，配置案例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (! req.backend.healthy) &#123;</span><br><span class="line"><span class="built_in">set</span> req.grace = 5m;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">set</span> req.grace = 15s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_fetch &#123;</span><br><span class="line"><span class="built_in">set</span> beresp.grace = 30m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置表示 varnish 将会将失效的缓存对象再多保留 30 分钟，此值等于最大的 req.grace值即可</p><p>而根据后端主机的健康状况，varnish 可向前端请求分别提供 5 分钟内或 15 秒内的过期内容</p><h4 id="二、安装varnish"><a class="header-anchor" href="#二、安装varnish">¶</a>二、安装varnish</h4><h5 id="1、安装依赖关系的软件包"><a class="header-anchor" href="#1、安装依赖关系的软件包">¶</a>1、安装依赖关系的软件包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@varnish ~]<span class="comment"># yum -y install autoconf automake libedit-devel libtool ncurses-devel pcre-devel pkgconfig python-docutils python-sphinx</span></span><br></pre></td></tr></table></figure><h5 id="2、安装-varnish"><a class="header-anchor" href="#2、安装-varnish">¶</a>2、安装 varnish</h5><p><a href="https://pan.baidu.com/s/1-wvFjYjz2W4c7H5XQgKyOQ" target="_blank" rel="noopener">安装包</a></p><p>提取码：h71d</p><p>varnish 的官方网址为 <a href="http://varnish-cache.org" target="_blank" rel="noopener">http://varnish-cache.org</a>，可以在这里下载最新版本的软件</p><p>注意：Varnish 网站有时会被墙</p><p>解压，进入解压目录编译安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh ~]<span class="comment"># tar zxf varnish-4.0.3.tar.gz </span></span><br><span class="line">[root@varinsh ~]<span class="comment"># cd varnish-4.0.3/</span></span><br><span class="line">[root@varinsh varnish-4.0.3]<span class="comment"># export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig</span></span><br><span class="line">[root@varinsh varnish-4.0.3]<span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line"><span class="comment"># 不指定安装路径，默认是安装在/usr/local 目录下</span></span><br></pre></td></tr></table></figure><p>注：</p><blockquote><p>./autogen.sh<br>如果从 Git 库下载的安装包时才需要运行，用于生成 configure 编译文件</p></blockquote><p>复制 vcl 文件（在编译安装目录下），如果安装目录里没有 default.vcl 文件</p><p>复制到安装目录的/usr/local/var/varnish/目录下（当然并无必需要求在哪个目录，因为正式启动时还得指定这个文件的目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh varnish-4.0.3]<span class="comment"># cp etc/example.vcl /usr/local/var/varnish/default.vcl</span></span><br></pre></td></tr></table></figure><h4 id="三、varnish-实例解析"><a class="header-anchor" href="#三、varnish-实例解析">¶</a>三、varnish  实例解析</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">varnish 配置基本上是编辑 VCL(Varnish Configuration Language) 文件,varnish 有一套自定义VCL 语法，启动时，会将配置文件编译为 C 语言，再执行</span><br><span class="line"></span><br><span class="line">varnish 4.0 开始，每个 VCL 文件必须在开始行声明它的版本“vcl 4.0;”</span><br><span class="line"></span><br><span class="line">块（子程序）由大括号分隔，语句用分号结束。所有的关键字及预设子程序名都是全小写。注释：支持 // 或 # 多行时还可以使用 /* .. */</span><br></pre></td></tr></table></figure><h5 id="1、后端服务器地址池配置及后端服务器健康检查"><a class="header-anchor" href="#1、后端服务器地址池配置及后端服务器健康检查">¶</a>1、后端服务器地址池配置及后端服务器健康检查</h5><p>varnish 有&quot;后端&quot;或者&quot;源&quot;服务器的概念。backend server 提供给 varnish 加速的内容。实际上就是给 varnish 添加可供访问的 web 服务器，如果有多台 web 服务器时，可添加多个 backend块</p><h6 id="1）后端服务器定义"><a class="header-anchor" href="#1）后端服务器定义">¶</a>1）后端服务器定义</h6><p>命令：backend。这个定义为最基本的反向入口定义，用于 varnish 连接对应的服务器，如果没有定义或定义错误则用户无法访问正常页面</p><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backend name&#123;</span><br><span class="line">.attribute = <span class="string">"value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>backend 是定义后端关键字，name 是当前后端节点的别名，多个后端节点时，name 名不能重复，否则覆盖。花括号里面定义当前节点相关的属性（键=值）。除默认节点外其它节点定义后必需有调用，否则 varnish 无法启动。后端是否正常可以通过 std.healthy(backend)判断</p></blockquote><p>支持运算符：</p><blockquote><p>= （赋值运算）</p><p>== （相等比较）</p><p>~ （匹配，可以使用正则表达式，或访问控制列表）</p><p>!~ （不匹配，可以使用正则表达式，或访问控制列表）</p><p>！ （非）</p><p>&amp;&amp; （逻辑与）</p><p>|| （逻辑或）</p></blockquote><p>属性列表：</p><p>.host=“<a href="http://xxx.xxx.xxx.xxx" target="_blank" rel="noopener">xxx.xxx.xxx.xxx</a>”;</p><blockquote><p>要转向主机（即后端主机）的 IP 或域名，必填键/值对</p></blockquote><p>.port=“8080”;</p><blockquote><p>主机连接端口号或协议名（HTTP 等），默认 80</p></blockquote><p>.host_header=’’;</p><blockquote><p>请示主机头追加内容</p></blockquote><p>.connect_timeout=1s;</p><blockquote><p>连接后端的超时时间</p></blockquote><p>.first_byte_timeout=5s;</p><blockquote><p>等待从后端返回的第一个字节时间</p></blockquote><p>.between_bytes_timeout=2s;</p><blockquote><p>每接收一个字节之间等待时间</p></blockquote><p>.probe=probe_name;</p><blockquote><p>监控后端主机的状态,指定外部监控 name 或者内部直接添加</p></blockquote><p>.max_connections=200;</p><blockquote><p>设置最大并发连接数，超过这个数后连接就会失败</p></blockquote><p>例：（下面两个例子结果是一样的，但第二个例子中更适用于集群，可以方便批量修改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">backend web&#123;</span><br><span class="line">.host=<span class="string">"192.168.31.83"</span>;</span><br><span class="line">.port=<span class="string">"80"</span>;</span><br><span class="line">.probe=&#123; <span class="comment"># 直接追加监控块.probe 是一个的参数</span></span><br><span class="line">.url=<span class="string">"/"</span>;</span><br><span class="line">.timeout=2s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line">probe web_probe&#123; <span class="comment"># 监控必需定义在前面，否则后端调用找不到监控块。</span></span><br><span class="line">.url=<span class="string">"/"</span>;</span><br><span class="line">.timeout=2s;</span><br><span class="line">&#125;</span><br><span class="line">backend web&#123;</span><br><span class="line">.host=<span class="string">"192.168.31.83"</span>;</span><br><span class="line">.port=<span class="string">"80"</span>;</span><br><span class="line">.probe=web_probe; //调用外部共用监控块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2）监视器的定义"><a class="header-anchor" href="#2）监视器的定义">¶</a>2）监视器的定义</h6><p>命令：probe 。监控可以循环访问指定的地址，通过响应时间判定服务器是否空闲或正常。这类命令非常适用于集群中某些节点服务器崩溃或负载过重，而禁止访问这台节点服务器。</p><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">probe name&#123;</span><br><span class="line">.attribute = <span class="string">"value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>probe 是定义监控关键字，name 是当前监控点的别名，多个监控节点时，name 名不能重复，否则覆盖。花括号里面定义当前节点相关的属性（键=值）。没有必填属性，因为默认值就可以正常执行操作</p></blockquote><p>属性列表：</p><p>.url=&quot;/&quot;;</p><blockquote><p>指定监控入口 URL 地址，默认为&quot;/&quot;</p></blockquote><p>.request=&quot;&quot;;</p><blockquote><p>指定监控请求入口地址，比 .url 优先级高</p></blockquote><p>.expected_response=“200”;</p><blockquote><p>请求响应代码，默认是 200</p></blockquote><p>.timeout=2s;</p><blockquote><p>请求超时时间</p></blockquote><p>.interval=5s;</p><blockquote><p>每次轮询请求间隔时间,默认为 5s</p></blockquote><p>.initial=-1;</p><blockquote><p>初始启动时以.window 轮询次数中几次良好后续才能使用这个后端服务器节点，默认为 -1 ，则轮询完 .window 所有次数良好判定为正常</p></blockquote><p>.window=8;</p><blockquote><p>指定多少轮询次数，用于判定服务器正常，默认是 8</p></blockquote><p>.threshold=3;</p><blockquote><p>必须多少次轮询正常才算该后端节点服务器正常,默认是 3</p></blockquote><p>例：创建健康监测，定义健康检查名称为 backend_healthcheck</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">probe backend_healthcheck &#123;</span><br><span class="line">.url = <span class="string">"/"</span>;</span><br><span class="line">.timeout = 1s;</span><br><span class="line">.interval = 5s;</span><br><span class="line">.window = 5;</span><br><span class="line">.threshold = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中 varnish 将每 5s 检测后端，超时设为 1s。每个检测将会发送 get /的请求。如果 5 个检测中大于 3 个是成功，varnish 就认为后端是健康的，反之，后端就有问题了</p><h6 id="3）集群负载均衡-directors："><a class="header-anchor" href="#3）集群负载均衡-directors：">¶</a>3）集群负载均衡 directors：</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">varnish 可以定义多个后端，也可以将几个后端放在一个后端集群里面已达到负载均衡的目的</span><br><span class="line"></span><br><span class="line">你也可以将几个后端组成一组后端。这个组被叫做 Directors。可以提高性能和弹性</span><br></pre></td></tr></table></figure><p>directors 是 varnish 负载均衡模块，使用前必需引入 directors 模块，directors 模块主要包含：</p><p>round_robin，random，hash，fallback 负载均衡模式</p><blockquote><p>round_robin : 循环依次逐个选择后端服务器</p><p>random ： 随机选择后端服务器，可设置每个后端权重增加随机率</p><p>hash : 通过散列随机选择对应的后端服务器且保持选择对应关系，下次则直接找对应的后端服务器</p><p>Fallback：后备</p></blockquote><p>注意：</p><blockquote><p>random，hash 有权重值设置，用于提高随机率。每个后端最好都配置监控器（后端服务器正常监测）以便 directors 自动屏蔽不正常后端而不进入均衡列中。</p></blockquote><p>这些操作需要你载入 VMOD（varnish module），然后在 vcl_init 中调用这个 VMOD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import directors; <span class="comment"># load the directors</span></span><br><span class="line">backend web1 &#123;</span><br><span class="line">.host = <span class="string">"192.168.0.10"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend web2 &#123;</span><br><span class="line">.host = <span class="string">"192.168.0.11"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化处理</span></span><br><span class="line">sub vcl_init &#123; <span class="comment"># 调用 vcl_init 初始化子程序创建后端主机组，即 directors</span></span><br><span class="line">new web_cluster = directors.round_robin(); <span class="comment"># 使用 new 关键字创建 drector 对象,使用 round_robin 算法</span></span><br><span class="line">web_cluster.add_backend(web1); <span class="comment"># 添加后端服务器节点</span></span><br><span class="line">web_cluster.add_backend(web2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始处理请求</span></span><br><span class="line">sub vcl_recv &#123; <span class="comment"># 调用 vcl_recv 子程序，用于接收和处理请求</span></span><br><span class="line"><span class="built_in">set</span> req.backend_hint = web_cluster.backend(); <span class="comment"># 选取后端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>set 命令是设置变量</p><p>unset 命令是删除变量</p><p>web_cluster.add_backend( backend , real ); 添加后端服务器节点，backend 为后端配置别名，real 为权重值，随机率计算公式：100 * (当前权重 / 总权重)</p><p>req.backend_hint 是 varnish 的预定义变量，作用是指定请求后端节点</p><p>vcl 对象需要使用 new 关键字创建，所有可创建对象都是内定的，使用前必需 import，所有new 操作只能在 vcl_init 子程序中</p></blockquote><p>扩展：varnish  将不同的 url  发送到不同的后端 server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import directors; <span class="comment"># load the directors</span></span><br><span class="line">backend web1 &#123;</span><br><span class="line">.host = <span class="string">"192.168.0.10"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend web2 &#123;</span><br><span class="line">.host = <span class="string">"192.168.0.11"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend img1 &#123;</span><br><span class="line">.host = <span class="string">"img1.lnmmp.com"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend img2 &#123;</span><br><span class="line">.host = <span class="string">"img2.lnmmp.com"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化处理</span></span><br><span class="line">sub vcl_init &#123; <span class="comment"># 调用 vcl_init 初始化子程序创建后端主机组，即 directors</span></span><br><span class="line">new web_cluster = directors.round_robin(); <span class="comment"># 使用 new 关键字创建 drector 对象,使用 round_robin 算法</span></span><br><span class="line">web_cluster.add_backend(web1); <span class="comment"># 添加后端服务器节点</span></span><br><span class="line">web_cluster.add_backend(web2);</span><br><span class="line">new img_cluster = directors.random();</span><br><span class="line">img_cluster.add_backend(img1,2); <span class="comment"># 添加后端服务器节点，并且设置权重值</span></span><br><span class="line">img_cluster.add_backend(img2,5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据不同的访问域名，分发至不同的后端主机组</span></span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (req.http.host ~ <span class="string">"(?i)^(www.)?benet.com$"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> req.http.host = <span class="string">"www.benet.com"</span>;</span><br><span class="line"><span class="built_in">set</span> req.backend_hint = web_cluster.backend(); <span class="comment"># 选取后端</span></span><br><span class="line">&#125; elsif (req.http.host ~ <span class="string">"(?i)^images.benet.com$"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> req.backend_hint = img_cluster.backend();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：中的 i 就是忽略大小写的意思。(?i)表示开启忽略大小写，而(?-i)表示关闭忽略大小写</p><h6 id="4）访问控制列表（ACL）"><a class="header-anchor" href="#4）访问控制列表（ACL）">¶</a>4）访问控制列表（ACL）</h6><p>创建一个地址列表，用于后面的判断，可以是域名或 IP 集合。这个可以用于指定某些地址请求入口，防止恶意请求等</p><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acl purgers &#123;</span><br><span class="line"><span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="string">"localhost"</span>;</span><br><span class="line">“192.168.134.0/24”</span><br><span class="line">!<span class="string">"192.168.134.1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：acl 是访问列表关键字（必需小写），name 是该列表的别名用于调用，花括号内部是地址集</p><p>注意：如果列表中包含了无法解析的主机地址，它会匹配任何地址</p><p>如果不想让它匹配可以在前添加一个 ! 符号，如上面 !“192.168.134.1”;</p><p>使用 ACL 只需要用 匹配运算符 ~ 或 !~ 如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123; <span class="comment"># PURGE 请求的处理</span></span><br><span class="line"><span class="keyword">if</span> (client.ip ~ purgers) &#123;</span><br><span class="line"><span class="built_in">return</span>(purge);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">return</span>(synth(403, <span class="string">"Access denied."</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5）缓存规则配置"><a class="header-anchor" href="#5）缓存规则配置">¶</a>5）缓存规则配置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="comment"># PURGE 请求的处理</span></span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!client.ip ~ purgers) &#123;</span><br><span class="line"><span class="built_in">return</span> (synth(405, <span class="string">"Not Allowed."</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> (purge);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> req.backend_hint = web.backend();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 php、asp 等动态内容访问请求直接发给后端服务器，不缓存。</span></span><br><span class="line"><span class="keyword">if</span> (req.url ~ <span class="string">"\.(php|asp|aspx|jsp|do|ashx|shtml)($|\?)"</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> (pass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 将非 GET 和 HEAD 访问请求直接发给后端服务器，不缓存。例如 POST 请求。</span></span><br><span class="line"><span class="keyword">if</span> (req.method != <span class="string">"GET"</span> &amp;&amp; req.method != <span class="string">"HEAD"</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> (pass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果 varnish 看到 header 中有'Authorization'头，它将 pass 请求。</span></span><br><span class="line"><span class="keyword">if</span> (req.http.Authorization) &#123;</span><br><span class="line"><span class="built_in">return</span> (pass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 带 cookie 首部的 GET 请求也缓存</span></span><br><span class="line"><span class="keyword">if</span> (req.url ~ <span class="string">"\.(css|js|html|htm|bmp|png|gif|jpg|jpeg|ico|gz|tgz|bz2|tbz|zip|rar|mp3|mp4|ogg|swf|flv)($|\?)"</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> req.http.cookie;</span><br><span class="line"><span class="built_in">return</span> (<span class="built_in">hash</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：默认情况，varnish 不缓存从后端响应的 http 头中带有 Set-Cookie 的对象。如果客户<br>端发送的请求带有 Cookie header，varnish 将忽略缓存，直接将请求传递到后端</p><p>为发往后端主机的请求添加 X-Forward-For 首部,首次访问增加 X-Forwarded-For 头信息,方<br>便后端程序获取客户端 ip，而不是 varnish 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.restarts == 0) &#123;</span><br><span class="line"><span class="keyword">if</span> (req.http.x-forwarded-for) &#123; <span class="comment"># 如果设置过此 header 则要再次附加上用逗号隔开</span></span><br><span class="line"><span class="built_in">set</span> req.http.X-Forwarded-For = req.http.X-Forwarded-For + <span class="string">", "</span> + client.ip;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment"># 如果只有一层代理的话,就无需设置了</span></span><br><span class="line"><span class="built_in">set</span> req.http.X-Forwarded-For = client.ip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明： X-Forwarded-For 是用来识别通过 HTTP 代理或负载均衡方式连接到 Web 服务器的客户<br>端最原始的 IP 地址的 HTTP 请求头字段</p><p>子程序：</p><p>子程序是一种类似 C 的函数，但是程序没有调用参数，子程序以 sub 关键字定义。在 VCL里子程序是用于管理程序</p><p>注意：所有 VCL 内置的程序都是以 vcl_ 开头，并已经预置好，在 VCL 文件中只要声明对应的内置子程序，都会在对应的流程中调用</p><h4 id="三、varnish-完整配置实例"><a class="header-anchor" href="#三、varnish-完整配置实例">¶</a>三、varnish  完整配置实例</h4><h5 id="1、拓扑环境"><a class="header-anchor" href="#1、拓扑环境">¶</a>1、拓扑环境</h5><table><thead><tr><th><strong>varnish</strong></th><th><strong>192.168.1.20</strong></th></tr></thead><tbody><tr><td><strong>web01</strong></td><td><strong>192.168.1.30</strong></td></tr><tr><td><strong>web02</strong></td><td><strong>192.168.1.40</strong></td></tr></tbody></table><p>配置 web01、web02 做为后端服务器（过程略）</p><p>确保 varnish 服务器能正常访问 web01、web02</p><p>Varnish 缓存代理服务器配置：</p><h5 id="2、vcl文件配置内容"><a class="header-anchor" href="#2、vcl文件配置内容">¶</a>2、vcl文件配置内容</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh ~]<span class="comment"># cat /usr/local/var/varnish/default.vcl </span></span><br><span class="line">vcl 4.0;</span><br><span class="line">import directors;</span><br><span class="line">import std;</span><br><span class="line">probe  backend_healthcheck &#123;</span><br><span class="line">        .url = <span class="string">"/"</span>;</span><br><span class="line">        .timeout = 1s;</span><br><span class="line">        .interval = 5s;</span><br><span class="line">        .window = 5;</span><br><span class="line">        .threshold = 3;</span><br><span class="line">&#125;</span><br><span class="line">backend web1 &#123;</span><br><span class="line">    .host = <span class="string">"192.168.1.30"</span>;</span><br><span class="line">    .port = <span class="string">"80"</span>;</span><br><span class="line">    .probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend web2 &#123;</span><br><span class="line">    .host = <span class="string">"192.168.1.40"</span>;</span><br><span class="line">    .port = <span class="string">"80"</span>;</span><br><span class="line">    .probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">acl purgers &#123;</span><br><span class="line">        <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        <span class="string">"localhost"</span>;</span><br><span class="line">        <span class="string">"192.168.1.0/24"</span>;</span><br><span class="line">        !<span class="string">"192.168.1.40"</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_init &#123;  </span><br><span class="line">        new web_cluster = directors.round_robin();  </span><br><span class="line">        web_cluster.add_backend(web1);  </span><br><span class="line">        web_cluster.add_backend(web2);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line">        <span class="built_in">set</span> req.backend_hint = web_cluster.backend();</span><br><span class="line">        <span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (!client.ip ~ purgers) &#123;   </span><br><span class="line">                        <span class="built_in">return</span> (synth(405, <span class="string">"Not Allowed."</span>));   </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">return</span> (purge);</span><br><span class="line"> &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.method != <span class="string">"GET"</span> &amp;&amp; </span><br><span class="line">                req.method != <span class="string">"HEAD"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"PUT"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"POST"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"TRACE"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"OPTIONS"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"PATCH"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"DELETE"</span>) &#123;</span><br><span class="line">                        <span class="built_in">return</span> (pipe);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.method != <span class="string">"GET"</span> &amp;&amp; req.method != <span class="string">"HEAD"</span>)&#123;</span><br><span class="line">                <span class="built_in">return</span> (pass);  </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.url ~ <span class="string">"\.(php|asp|aspx|jsp|do|ashx|shtml)($|\?)"</span>)&#123;</span><br><span class="line">                <span class="built_in">return</span> (pass);   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.http.Authorization) &#123;</span><br><span class="line">                <span class="built_in">return</span> (pass);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.http.Accept-Encoding) &#123;</span><br><span class="line">                <span class="keyword">if</span>  (req.url  ~ <span class="string">"\.(bmp|png|gif|jpg|jpeg|ico|gz|tgz|bz2|tbz|zip|rar|mp3|mp4|ogg|swf|flv)$"</span></span><br><span class="line">)&#123;</span><br><span class="line">                        <span class="built_in">unset</span> req.http.Accept-Encoding; </span><br><span class="line">                &#125; elseif (req.http.Accept-Encoding ~ <span class="string">"gzip"</span>) &#123;</span><br><span class="line">                        <span class="built_in">set</span> req.http.Accept-Encoding = <span class="string">"gzip"</span>; </span><br><span class="line">                &#125; elseif (req.http.Accept-Encoding ~ <span class="string">"deflate"</span>) &#123;</span><br><span class="line">                        <span class="built_in">set</span> req.http.Accept-Encoding = <span class="string">"deflate"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">unset</span> req.http.Accept-Encoding; </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">if</span>  (req.url  ~ <span class="string">"\.(css|js|html|htm|bmp|png|gif|jpg|jpeg|ico|gz|tgz|bz2|tbz|zip|rar|mp3|mp4|ogg|sw f|flv)($|\?)"</span>) &#123;</span><br><span class="line">                <span class="built_in">unset</span> req.http.cookie; </span><br><span class="line">                <span class="built_in">return</span> (<span class="built_in">hash</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.restarts == 0) &#123; </span><br><span class="line">                <span class="keyword">if</span> (req.http.X-Forwarded-For) &#123; </span><br><span class="line">                        <span class="built_in">set</span> req.http.X-Forwarded-For = req.http.X-Forwarded-For + <span class="string">", "</span> + client.ip;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">set</span> req.http.X-Forwarded-For = client.ip;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (<span class="built_in">hash</span>);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_hash &#123;</span><br><span class="line">        hash_data(req.url); </span><br><span class="line">        <span class="keyword">if</span> (req.http.host) &#123;</span><br><span class="line">        hash_data(req.http.host); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        hash_data(server.ip); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (lookup);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_hit &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123; </span><br><span class="line">        <span class="built_in">return</span> (synth(200, <span class="string">"Purged."</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (deliver);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_miss &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> (synth(404, <span class="string">"Purged."</span>)); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (fetch);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_deliver &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hits &gt; 0) &#123;</span><br><span class="line">        <span class="built_in">set</span> resp.http.X-Cache = <span class="string">"HIT"</span>; </span><br><span class="line">        <span class="built_in">set</span> resp.http.X-Cache-Hits = obj.hits; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">set</span> resp.http.X-Cache = <span class="string">"MISS"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">unset</span> resp.http.X-Powered-By; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.Server; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.X-Drupal-Cache; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.Via; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.Link; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.X-Varnish; </span><br><span class="line">        <span class="built_in">set</span> resp.http.xx_restarts_count = req.restarts; </span><br><span class="line">        <span class="built_in">set</span> resp.http.xx_Age = resp.http.Age; </span><br><span class="line">        <span class="built_in">set</span> resp.http.hit_count = obj.hits; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.Age;</span><br><span class="line">        <span class="built_in">return</span> (deliver);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_pass &#123;</span><br><span class="line">        <span class="built_in">return</span> (fetch); </span><br><span class="line">&#125;</span><br><span class="line">sub vcl_backend_response &#123;</span><br><span class="line">        <span class="built_in">set</span> beresp.grace = 5m; </span><br><span class="line">        <span class="keyword">if</span> (beresp.status == 499 || beresp.status == 404 || beresp.status == 502) &#123;</span><br><span class="line">                <span class="built_in">set</span> beresp.uncacheable = <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bereq.url ~ <span class="string">"\.(php|jsp)(\?|$)"</span>) &#123;</span><br><span class="line">                <span class="built_in">set</span> beresp.uncacheable = <span class="literal">true</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bereq.url ~ <span class="string">"\.(css|js|html|htm|bmp|png|gif|jpg|jpeg|ico)($|\?)"</span>) &#123;</span><br><span class="line">                <span class="built_in">set</span> beresp.ttl = 15m; </span><br><span class="line">                <span class="built_in">unset</span> beresp.http.Set-Cookie;</span><br><span class="line">                &#125; elseif (bereq.url ~ <span class="string">"\.(gz|tgz|bz2|tbz|zip|rar|mp3|mp4|ogg|swf|flv)($|\?)"</span>) &#123;</span><br><span class="line">                        <span class="built_in">set</span> beresp.ttl = 30m; </span><br><span class="line">                        <span class="built_in">unset</span> beresp.http.Set-Cookie;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">set</span> beresp.ttl = 10m; </span><br><span class="line">                        <span class="built_in">unset</span> beresp.http.Set-Cookie;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (deliver);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_purge &#123;</span><br><span class="line">        <span class="built_in">return</span> (synth(200,<span class="string">"success"</span>));</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_backend_error &#123;</span><br><span class="line">        <span class="keyword">if</span> (beresp.status == 500 ||</span><br><span class="line">                beresp.status == 501 ||</span><br><span class="line">                beresp.status == 502 ||</span><br><span class="line">                beresp.status == 503 ||</span><br><span class="line">                beresp.status == 504) &#123;</span><br><span class="line">                <span class="built_in">return</span> (retry); </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_fini &#123;</span><br><span class="line">        <span class="built_in">return</span> (ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、启动varnish"><a class="header-anchor" href="#3、启动varnish">¶</a>3、启动varnish</h5><p>当启动 varnish 时有两个重要的参数你必须设置: 一个是处理 http 请求的 tcp 监听端口,另一个是处理真实请求的后端 server</p><p>注：如果你使用操作系统自带的包管理工具安装的 varnish,你将在下面的文件找到启动参数:Red Hat, Centos: /etc/sysconfig/varnish</p><h6 id="1）’-a’"><a class="header-anchor" href="#1）’-a’">¶</a>1）’-a’</h6><p>‘-a’ 参数定义了 varnish 监听在哪个地址,并用该地址处理 http 请求，你可能想设置这个参数在众所周知的 http 80 端口</p><p>例子:</p><blockquote><p>-a :80<br>-a localhost:80<br>-a 192.168.1.100:8080<br>-a ‘[fe80::1]:80’<br>-a ‘0.0.0.0:8080,[::]:8081’</p></blockquote><p>如果你的 webserver 和 varnish 运行在同一台机器,你必须换一个监听地址</p><h6 id="2）’-f’"><a class="header-anchor" href="#2）’-f’">¶</a>2）’-f’</h6><blockquote><p>-f 添加 vcl 文件,-b 定义后端 serve</p><p>varnish 需要知道从哪里找到这个需要缓存的 http server.你可以用-b 参数指定,或者帮把它放在 vcl 文件中,然后使用-f 参数指定</p><p>在启动的时候使用-b 是一个快捷的方式.</p><p>-b 192.168.1.2:80</p><p>注意:如果你指定的是 name,这个 name 必须能解析成一个 IPv4 或者 IPv6 的地址如果你使用-f 参数,你启动的时候可以在-f 指定 vcl 文件</p><p>默认的 varnish 使用 100M 的内存来缓存对象,如果你想缓存更多,可以使用-s 参数</p></blockquote><p>注：Varnish 拥有大量的有用的命令行参数，建议查看其帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh ~]<span class="comment"># /usr/local/sbin/varnishd -h</span></span><br></pre></td></tr></table></figure><p>启动 varnish</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh ~]<span class="comment"># varnishd -f /usr/local/var/varnish/default.vcl -s malloc,200M -a 0.0.0.0:80[root@varinsh ~]# netstat -anput | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      13968/varnishd</span><br></pre></td></tr></table></figure><h6 id="3）访问"><a class="header-anchor" href="#3）访问">¶</a>3）访问</h6><p>现在，varnish 已经启动和运行，你可以通过 varnish 访问您的 Web 应用程序</p><p>第一次访问<br><img data-src="https://img-blog.csdnimg.cn/20200701180906611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>第二次访问<br><img data-src="https://img-blog.csdnimg.cn/20200701180924925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h6 id="4）清除缓存再次访问"><a class="header-anchor" href="#4）清除缓存再次访问">¶</a>4）清除缓存再次访问</h6><p><img data-src="https://img-blog.csdnimg.cn/20200701181019348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Nginx优化与防盗链+单机部署LNMP</title>
    <link href="https://pdxblog.top/Nginx%E4%BC%98%E5%8C%96%E4%B8%8E%E9%98%B2%E7%9B%97%E9%93%BE+%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2LNMP.html"/>
    <id>https://pdxblog.top/Nginx%E4%BC%98%E5%8C%96%E4%B8%8E%E9%98%B2%E7%9B%97%E9%93%BE+%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2LNMP.html</id>
    <published>2020-06-12T16:00:00.000Z</published>
    <updated>2020-06-13T03:39:56.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx优化与防盗链-单机部署LNMP"><a class="header-anchor" href="#Nginx优化与防盗链-单机部署LNMP">¶</a>Nginx优化与防盗链+单机部署LNMP</h3><p>Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Nginx，它的发音为“engine X”，是一个高性能的 HTTP 和反向代理服务器，同时也是一个 IMAP/POP3/SMTP 代理服务器．Nginx 是由俄罗斯人 Igor Sysoev 为俄罗斯访问量第二的 <a href="http://Rambler.ru" target="_blank" rel="noopener">Rambler.ru</a> 站点开发</p><p>Nginx 以事件驱动（epoll）的方式编写，所以有非常好的性能，同时也是一个非常高效的反<br>向代理、负载平衡。但是 Nginx 并不支持 cgi 方式运行，原因是可以减少因此带来的一些程<br>序上的漏洞。所以必须使用 FastCGI 方式来执行 PHP 程序</p><p>由于 Nginx 本身的一些优点，轻量，开源，易用，越来越多的公司使用 nginx 作为自己公司<br>的 web 应用服务器，本文详细介绍 nginx 源码安装的同时并对 nginx 进行优化配置</p><h4 id="一、Nginx的优化"><a class="header-anchor" href="#一、Nginx的优化">¶</a>一、Nginx的优化</h4><h5 id="1、编译安装前的优化"><a class="header-anchor" href="#1、编译安装前的优化">¶</a>1、编译安装前的优化</h5><p>编译前的优化主要是用来修改程序名等等，目的更改源码隐藏软件名称和版本号</p><h6 id="（1）安装-zlib-devel、pcre-devel-等依赖包"><a class="header-anchor" href="#（1）安装-zlib-devel、pcre-devel-等依赖包">¶</a>（1）安装 zlib-devel、pcre-devel 等依赖包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install gcc gcc-c++ make libtool zlib zlib-devel pcre pcre-devel openssl openssl-devel</span></span><br></pre></td></tr></table></figure><h6 id="（2）下载Nginx源码包"><a class="header-anchor" href="#（2）下载Nginx源码包">¶</a>（2）下载Nginx源码包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># wget http://nginx.org/download/nginx-1.10.2.tar.gz</span></span><br></pre></td></tr></table></figure><h6 id="（3）解压源码包"><a class="header-anchor" href="#（3）解压源码包">¶</a>（3）解压源码包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tar zxf nginx-1.10.2.tar.gz </span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd nginx-1.10.2/</span></span><br></pre></td></tr></table></figure><h6 id="（4）隐藏软件名称和版本号"><a class="header-anchor" href="#（4）隐藏软件名称和版本号">¶</a>（4）隐藏软件名称和版本号</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># vim src/core/nginx.h</span></span><br><span class="line"><span class="comment"># 此行修改的是你想要的版本</span></span><br><span class="line"><span class="comment">#define NGINX_VERSION      "1.10.2"  # 第13行</span></span><br><span class="line"><span class="comment"># 此行修改的是你想修改的软件名称</span></span><br><span class="line"><span class="comment">#define NGINX_VER          "nginx/" NGINX_VERSION  # 第14行</span></span><br></pre></td></tr></table></figure><p>修改上面的信息，即可更改 nginx 显示版本。例如：(curl –I 可看到，请求头和响应头显示)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define NGINX_VERSION      "7.0"</span></span><br><span class="line"><span class="comment">#define NGINX_VER          "IIS/" NGINX_VERSION</span></span><br></pre></td></tr></table></figure><p>修改 HTTP 头信息中的 connection 字段，防止回显具体版本号</p><p>拓展：</p><blockquote><p>通用 http 头 ，通用头包含请求和响应消息都支持的头，通用头包含 Cache-Control、<br>Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via。对通用头的扩展要求通讯双方都支持此扩展，如果存在不支持的通用头，一般将会作为实体头处理。那么也就是说有部分设备，或者是软件，能获取到 connection，部分不能，要隐藏就要彻底！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># vim src/http/ngx_http_header_filter_module.c</span></span><br><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">static char ngx_http_server_string[] = <span class="string">"Server: nginx"</span> CRLF; <span class="comment"># 第49行</span></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line">static char ngx_http_server_string[] = <span class="string">"Server: IIS"</span> CRLF;</span><br></pre></td></tr></table></figure><p>定义了 http 错误码的返回：</p><p>有时候我们页面程序出现错误，Nginx 会代我们返回相应的错误代码，回显的时候，会带上<br>nginx 和版本号，我们把他隐藏起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># vim src/http/ngx_http_special_response.c</span></span><br><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">static u_char ngx_http_error_tail[] =</span><br><span class="line"><span class="string">"&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;"</span> CRLF <span class="comment"># 第29行</span></span><br><span class="line"><span class="string">"&lt;/body&gt;"</span> CRLF</span><br><span class="line"><span class="string">"&lt;/html&gt;"</span> CRLF</span><br><span class="line">;</span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line">static u_char ngx_http_error_tail[] =</span><br><span class="line"><span class="string">"&lt;hr&gt;&lt;center&gt;IIS&lt;/center&gt;"</span> CRLF</span><br><span class="line"><span class="string">"&lt;/body&gt;"</span> CRLF</span><br><span class="line"><span class="string">"&lt;/html&gt;"</span> CRLF</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h5 id="2、安装nginx"><a class="header-anchor" href="#2、安装nginx">¶</a>2、安装nginx</h5><h6 id="（1）添加-nginx-组"><a class="header-anchor" href="#（1）添加-nginx-组">¶</a>（1）添加 nginx 组</h6><p>创建nginx运行账户nginx并加入到nginx 组，不允许 www 用户直接登录系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># groupadd nginx</span></span><br><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># useradd -g nginx nginx -s /sbin/nologin</span></span><br></pre></td></tr></table></figure><h6 id="（2）编译安装"><a class="header-anchor" href="#（2）编译安装">¶</a>（2）编译安装</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># ./configure --prefix=/usr/local/nginx1.10 \</span></span><br><span class="line">&gt;  --with-http_dav_module --with-http_stub_status_module \</span><br><span class="line">&gt;  --with-http_addition_module --with-http_sub_module \</span><br><span class="line">&gt;  --with-http_flv_module --with-http_mp4_module --with-pcre \</span><br><span class="line">&gt;  --with-http_ssl_module --with-http_gzip_static_module \</span><br><span class="line">&gt;  --user=nginx --group=nginx</span><br><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>相关选项说明：</p><p>–with-http_dav_module</p><blockquote><p>增加 PUT,DELETE,MKCOL：创建集合，COPY 和 MOVE 方法</p></blockquote><p>–with-http_stub_status_module</p><blockquote><p>获取 Nginx 的状态统计信息</p></blockquote><p>–with-http_addition_module</p><blockquote><p>作为一个输出过滤器，支持不完全缓冲，分部分相应请求</p></blockquote><p>–with-http_sub_module</p><blockquote><p>允许一些其他文本替换 Nginx 相应中的一些文本</p></blockquote><p>–with-http_flv_module</p><blockquote><p>提供支持 flv 视频文件支持</p></blockquote><p>–with-http_mp4_module</p><blockquote><p>提供支持 mp4 视频文件支持，提供伪流媒体服务端支持</p></blockquote><p>–with-http_ssl_module</p><blockquote><p>启用 ngx_http_ssl_module如果 pcre 是通过编译安装的话，例如</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf /usr/<span class="built_in">local</span>/src/pcre-8.36.tar.gz -C /usr/<span class="built_in">local</span>/src/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/pcre-8.36</span><br><span class="line"> ./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><blockquote><p>则–with-pcre=/usr/local/src/pcre-8.36</p><p>需要注意，这里指的是源码,用<code>./configure --help | grep pcre</code> 查看帮助</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># ln -s /usr/local/nginx1.10/sbin/nginx /usr/local/sbin/</span></span><br><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx1.10/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx1.10/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><h6 id="（3）启动-nginx"><a class="header-anchor" href="#（3）启动-nginx">¶</a>（3）启动 nginx</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># nginx</span></span><br><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># netstat -anpt | grep nginx</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      8303/nginx: master</span><br></pre></td></tr></table></figure><h6 id="（4）测试是否隐藏了版本和软件名"><a class="header-anchor" href="#（4）测试是否隐藏了版本和软件名">¶</a>（4）测试是否隐藏了版本和软件名</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># curl -I 127.0.0.1</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: IIS/7.0</span><br><span class="line">Date: Fri, 12 Jun 2020 01:08:48 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Fri, 12 Jun 2020 00:59:55 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"5ee2d38b-264"</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h5 id="3、nginx配置项优化"><a class="header-anchor" href="#3、nginx配置项优化">¶</a>3、nginx配置项优化</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root       8303      1  0 09:07 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nginx      8304   8303  0 09:07 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure><p>在这里我们还可以看到在查看的时候，work 进程是 nginx 程序用户，但是 master 进程还是<br>root，其中，master 是监控进程，也叫主进程，work 是工作进程，部分还有 cache 相关进程，关系如图：<br><img data-src="https://img-blog.csdnimg.cn/20200613112819353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>可以直接理解为 master 是管理员，work 进程才是为用户提供服务的！</p><h6 id="（1）Nginx-运行-工作置-进程个数"><a class="header-anchor" href="#（1）Nginx-运行-工作置-进程个数">¶</a>（1）Nginx  运行 工作置 进程个数</h6><p>一般我们设置 CPU 的核心或者核心数 x2</p><p>如果不了解 cpu 的核数，可以 top 命令之后按 1 也可以看出来，也可以查看/proc/cpuinfo 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># grep ^processor /proc/cpuinfo | wc -l</span></span><br><span class="line">1</span><br><span class="line">[root@nginx ~]<span class="comment"># vim /usr/local/nginx1.10/conf/nginx.conf</span></span><br><span class="line">worker_processes  2;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br><span class="line">[root@nginx ~]<span class="comment"># ps -aux | grep nginx | grep -v grep</span></span><br><span class="line">root       8303  0.0  0.1  46028  1920 ?        Ss   09:07   0:00 nginx: master process nginx</span><br><span class="line">nginx     10242  0.0  0.2  48540  2072 ?        S    09:14   0:00 nginx: worker process</span><br><span class="line">nginx     10243  0.0  0.2  48540  2072 ?        S    09:14   0:00 nginx: worker process</span><br></pre></td></tr></table></figure><h6 id="（2）Nginx-运行-CPU-亲和力"><a class="header-anchor" href="#（2）Nginx-运行-CPU-亲和力">¶</a>（2）Nginx 运行 CPU 亲和力</h6><p>比如 4 核配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000</span><br></pre></td></tr></table></figure><p>比如 8 核配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 8;</span><br><span class="line">worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;</span><br></pre></td></tr></table></figure><p>worker_processes 最多开启 8 个，8 个以上性能提升不会再提升了，而且稳定性变得更低，<br>所以 8 个进程够用了</p><h6 id="（3）Nginx-最多可以打开文件数"><a class="header-anchor" href="#（3）Nginx-最多可以打开文件数">¶</a>（3）Nginx 最多可以打开文件数</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_rlimit_nofile 65535;</span><br></pre></td></tr></table></figure><p>这个指令是指当一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数<br>（ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不是那么均匀，所以最好与 ulimit -n的值保持一致</p><p>注：</p><p>文件资源限制的配置可以在<code>/etc/security/limits.conf</code> 设置，针对 root/user 等各个用户或者*代表所有用户来设置。</p><p>用户重新登录生效（ulimit -n）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /etc/security/limits.conf</span></span><br><span class="line">*               soft    nofile          65535</span><br><span class="line">*               hard    nofile          65535</span><br><span class="line">[root@nginx ~]<span class="comment"># ulimit -n</span></span><br><span class="line">65535</span><br></pre></td></tr></table></figure><h6 id="（4）Nginx-事件处理模型"><a class="header-anchor" href="#（4）Nginx-事件处理模型">¶</a>（4）Nginx  事件处理模型</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">    multi_accept on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx 采用 epoll 事件模型，处理效率高</p><p><code>work_connections</code> 是单个 worker 进程允许客户端最大连接数，这个数值一般根据服务器性<br>能和内存来制定，实际最大值就是 worker 进程数乘以 work_connections实际我们填入一个 65535，足够了，这些都算并发值，一个网站的并发达到这么大的数量，也算一个大站了！</p><p><code>multi_accept</code> 告诉 nginx 收到一个新连接通知后接受尽可能多的连接</p><h6 id="（5）开启高效传输模式"><a class="header-anchor" href="#（5）开启高效传输模式">¶</a>（5）开启高效传输模式</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    ......</span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br></pre></td></tr></table></figure><p>Include mime.types;</p><blockquote><p>媒体类型, include 只是一个在当前文件中包含另一个文件内容的指令</p></blockquote><p>default_type application/octet-stream;</p><blockquote><p>默认媒体类型足够</p></blockquote><p>sendfile on；</p><blockquote><p>开启高效文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来<br>输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载</p><p>注意：如果图片显示不正常把这个改成 off。</p></blockquote><p>tcp_nopush on；</p><blockquote><p>必须在 sendfile 开启模式才有效，防止网路阻塞，积极的减少网络报文段的数量（告诉 nginx 在一个数据包里发送所有头文件，而不一个接一个的发送。）</p></blockquote><h6 id="（6）连接超时时间"><a class="header-anchor" href="#（6）连接超时时间">¶</a>（6）连接超时时间</h6><p>主要目的是保护服务器资源，CPU，内存，控制连接数，因为建立连接也是需要消耗资源的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">keepalive_timeout  65;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">client_header_buffer_size 4k;</span><br><span class="line">open_file_cache max=102400 inactive=20s;</span><br><span class="line">open_file_cache_valid 30s;</span><br><span class="line">open_file_cache_min_uses 1;</span><br><span class="line">client_header_timeout 15;</span><br><span class="line">client_body_timeout 15;</span><br><span class="line">reset_timedout_connection on;</span><br><span class="line">send_timeout 15;</span><br><span class="line">server_tokens off;</span><br><span class="line">client_max_body_size 10m;</span><br></pre></td></tr></table></figure><p>keepalived_timeout</p><blockquote><p>客户端连接保持会话超时时间，超过这个时间，服务器断开这个链接</p></blockquote><p>tcp_nodelay;</p><blockquote><p>也是防止网络阻塞，不过要包涵在 keepalived 参数才有效</p></blockquote><p>client_header_buffer_size 4k;</p><blockquote><p>客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过 1k，不过由于一般系统分页都要大于 1k，所以这里设置为分页大小。分页大小可以用命令 getconf PAGESIZE 取得</p></blockquote><p>open_file_cache max=102400 inactive=20s;</p><blockquote><p>这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件<br>数一致，inactive 是指经过多长时间文件没被请求后删除缓存</p></blockquote><p>open_file_cache_valid 30s;</p><blockquote><p>这个是指多长时间检查一次缓存的有效信息</p></blockquote><p>open_file_cache_min_uses 1;</p><blockquote><p>open_file_cache 指令中的 inactive 参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在 inactive 时间内一次没被使用，它将被移除</p></blockquote><p>client_header_timeout</p><blockquote><p>设置请求头的超时时间。我们也可以把这个设置低些，如果超过这个时间没有发送任何数据，nginx 将返回 request time out 的错误</p></blockquote><p>client_body_timeout</p><blockquote><p>设置请求体的超时时间。我们也可以把这个设置低些，超过这个时间没有发送任何数据，和上面一样的错误提示</p></blockquote><p>reset_timeout_connection</p><blockquote><p>告诉 nginx 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间</p></blockquote><p>send_timeout</p><blockquote><p>响应客户端超时时间，这个超时时间仅限于两个活动之间的时间，如果超过这个时间，客户端没有任何活动，nginx 关闭连接</p></blockquote><p>server_tokens</p><blockquote><p>并不会让 nginx 执行的速度更快，但它可以关闭在错误页面中的 nginx 版本数字，这样对于安全性是有好处的</p></blockquote><p>client_max_body_size</p><blockquote><p>上传文件大小限制</p></blockquote><h6 id="（7）fastcgi-调优"><a class="header-anchor" href="#（7）fastcgi-调优">¶</a>（7）fastcgi 调优</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接上个位置继续写</span></span><br><span class="line">    fastcgi_connect_timeout 600;</span><br><span class="line">    fastcgi_send_timeout 600;</span><br><span class="line">    fastcgi_read_timeout 600;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line">    fastcgi_temp_path /usr/<span class="built_in">local</span>/nginx1.10/nginx_tmp;</span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    fastcgi_cache_path /usr/<span class="built_in">local</span>/nginx1.10/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:128m inactive=1d max_size=10g;</span><br></pre></td></tr></table></figure><blockquote><p>Cache： 写入缓存区</p><p>Buffer： 读取缓存区</p><p>Fastcgi 是静态服务和动态服务的一个接口</p></blockquote><p>fastcgi_connect_timeout 600;</p><blockquote><p>指定连接到后端 FastCGI 的超时时间</p></blockquote><p>fastcgi_send_timeout 600;</p><blockquote><p>向 FastCGI 传送请求的超时时间</p></blockquote><p>fastcgi_read_timeout 600;</p><blockquote><p>指定接收 FastCGI 应答的超时时间</p></blockquote><p>fastcgi_buffer_size 64k;</p><blockquote><p>指定读取 FastCGI 应答第一部分需要用多大的缓冲区，默认的缓冲区大小为 fastcgi_buffers 指令中的每块大小，可以将这个值设置更小</p></blockquote><p>fastcgi_buffers 4 64k;</p><blockquote><p>指定本地需要用多少和多大的缓冲区来缓冲 FastCGI 的应答请求，如果<br>一个 php 脚本所产生的页面大小为 256KB，那么会分配 4 个 64KB 的缓冲区来缓存，如果页面大小大于 256KB，那么大于 256KB 的部分会缓存到 fastcgi_temp_path 指定的路径中，但是这并不是好方法，因为内存中的数据处理速度要快于磁盘。一般这个值应该为站点中 php脚本所产生的页面大小的中间值，如果站点大部分脚本所产生的页面大小为 256KB，那么可以把这个值设置为“8 32K”、“4 64k”等</p></blockquote><p>fastcgi_busy_buffers_size 128k;</p><blockquote><p>建议设置为 fastcgi_buffers 的两倍，繁忙时候的 buffer</p></blockquote><p>fastcgi_temp_file_write_size 128k;</p><blockquote><p>在写入 fastcgi_temp_path 时将用多大的数据块，默认值是 fastcgi_buffers 的两倍，该数值设置小时若负载上来时可能报 502 Bad Gateway</p></blockquote><p>fastcgi_temp_path</p><blockquote><p>缓存临时目录</p></blockquote><p>fastcgi_intercept_errors on;</p><blockquote><p>这个指令指定是否传递 4xx 和 5xx 错误信息到客户端，或者允许nginx 使用 error_page 处理错误信息</p><p>注：静态文件不存在会返回 404 页面，但是 php 页面则返回空白页！！</p></blockquote><p>fastcgi_cache_path /usr/local/nginx1.10/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:128minactive=1d max_size=10g;</p><blockquote><p>fastcgi_cache 缓存目录，可以设置目录层级，比如 1:2 会生成<br>16*256 个子目录，cache_fastcgi 是这个缓存空间的名字，cache 是用多少内存（这样热门的<br>内容 nginx 直接放内存，提高访问速度），inactive 表示默认失效时间，如果缓存数据在失效<br>时间内没有被访问,将被删除，max_size 表示最多用多少硬盘空间</p></blockquote><p>fastcgi_cache cache_fastcgi;</p><blockquote><p>表示开启 FastCGI 缓存并为其指定一个名称。开启缓存非常有用，可以有效降低 CPU 的负载，并且防止 502 的错误放生。cache_fastcgi 为 proxy_cache_path指令创建的缓存区名称</p></blockquote><p>fastcgi_cache_valid 200 302 1h;</p><blockquote><p>用来指定应答代码的缓存时间，实例中的值表示将 200 和302 应答缓存一小时，要和 fastcgi_cache 配合使用</p></blockquote><p>fastcgi_cache_valid 301 1d;</p><blockquote><p>将 301 应答缓存一天</p></blockquote><p>fastcgi_cache_valid any 1m;</p><blockquote><p>将其他应答缓存为 1 分钟</p></blockquote><p>fastcgi_cache_min_uses 1;</p><blockquote><p>该指令用于设置经过多少次请求的相同 URL 将被缓存。fastcgi_cache_key http://$host$request_uri; #该指令用来设置web缓存的Key值,nginx根据Key值 md5 哈希存储.一般根据$host(域名)、$request_uri(请求的路径)等变量组合成proxy_cache_key</p></blockquote><p>fastcgi_pass</p><blockquote><p>指定 FastCGI 服务器监听端口与地址，可以是本机或者其它</p></blockquote><p>总结：</p><blockquote><p>nginx 的缓存功能有：proxy_cache / fastcgi_cache</p><p>proxy_cache的作用是缓存后端服务器的内容，可能是任何内容，包括静态的和动态</p><p>fastcgi_cache的作用是缓存 fastcgi 生成的内容，很多情况是 php 生成的动态的内容</p><p>proxy_cache 缓存减少了 nginx 与后端通信的次数，节省了传输时间和后端宽带</p><p>fastcgi_cache缓存减少了nginx与php的通信的次数，更减轻了php和数据库(mysql)的压力</p></blockquote><h6 id="（8）gzip调优"><a class="header-anchor" href="#（8）gzip调优">¶</a>（8）gzip调优</h6><p>使用 gzip 压缩功能，可能为我们节约带宽，加快传输速度，有更好的体验，也为我们节约<br>成本，所以说这是一个重点</p><p>Nginx 启用压缩功能需要你来 ngx_http_gzip_module 模块，apache 使用的是 mod_deflate一般我们需要压缩的内容有：文本，js，html，css，对于图片，视频，flash 什么的不压缩，同时也要注意，我们使用 gzip 的功能是需要消耗 CPU 的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip  on;</span><br><span class="line">gzip_min_length 2k;</span><br><span class="line">gzip_buffers 4 32k;</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line">gzip_comp_level 6;    gzip_types  text/plain  text/css  text/javascript  application/json  application/javascript application/x-javascript application/xml;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_proxied any;</span><br></pre></td></tr></table></figure><p>gzip on;</p><blockquote><p>开启压缩功能</p></blockquote><p>gzip_min_length 1k;</p><blockquote><p>设置允许压缩的页面最小字节数，页面字节数从 header 头的Content-Length 中获取，默认值是 0，不管页面多大都进行压缩，建议设置成大于 1K，如果小与 1K 可能会越压越大</p></blockquote><p>gzip_buffers 4 32k;</p><blockquote><p>压缩缓冲区大小，表示申请4个单位为32K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储 gzip 压缩结果</p></blockquote><p>gzip_http_version 1.1;</p><blockquote><p>压缩版本，用于设置识别 HTTP 协议版本，默认是 1.1，目前大部分浏览器已经支持 GZIP 解压，使用默认即可</p></blockquote><p>gzip_comp_level 6;</p><blockquote><p>压缩比例，用来指定 GZIP 压缩比，1 压缩比最小，处理速度最快，9 压缩比最大，传输速度快，但是处理慢，也比较消耗 CPU 资源</p></blockquote><p>gzip_types text/css text/xml application/javascript;</p><blockquote><p>用来指定压缩的类型，‘text/html’类型总是会被压缩</p><p>默认值: gzip_types text/html (默认不对 js/css 文件进行压缩)</p><p>压缩类型，匹配 MIME 类型进行压缩</p><p>不能用通配符 text/*</p><p>(无论是否指定)text/html 默认已经压缩</p><p>设置哪压缩种文本文件可参考 conf/mime.types</p></blockquote><p>gzip_vary on;</p><blockquote><p>vary header 支持，改选项可以让前端的缓存服务器缓存经过 GZIP 压缩的页面，例如用 Squid 缓存经过 nginx 压缩的数据</p></blockquote><h6 id="（9）expires-缓存调优"><a class="header-anchor" href="#（9）expires-缓存调优">¶</a>（9）expires 缓存调优</h6><p>缓存，主要针对于图片，css，js 等元素更改机会比较少的情况下使用，特别是图片，占用<br>带宽大，我们完全可以设置图片在浏览器本地缓存 365d，css，js，html 可以缓存个 10 来天，这样用户第一次打开加载慢一点，第二次，就非常快了！缓存的时候，我们需要将需要缓存的拓展名列出来， Expires 缓存配置在 server 字段里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(ico|jpe?g|gif|png|bmp|swf|flv)$ &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">    <span class="comment">#log_not_found off;</span></span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(js|css)$ &#123;</span><br><span class="line">    expires 7d;</span><br><span class="line">    log_not_found off;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：log_not_found off;是否在 error_log 中记录不存在的错误。默认是</p><p>总结：</p><p>expire 功能优点：</p><ul><li>expires 可以降低网站购买的带宽，节约成本</li><li>同时提升用户访问体验</li><li>减轻服务的压力，节约服务器成本，是 web 服务非常重要的功能</li></ul><p>expire 功能缺点：</p><ul><li>被缓存的页面或数据更新了，用户看到的可能还是旧的内容，反而影响用户体验</li></ul><p>解决办法：</p><ul><li>第一个缩短缓存时间，例如：1 天，但不彻底，除非更新频率大于 1 天；</li><li>第二个对缓存的对象改名</li></ul><p>网站不希望被缓存的内容：</p><ul><li>网站流量统计工具</li><li>更新频繁的文件</li></ul><h6 id="（10）防盗链"><a class="header-anchor" href="#（10）防盗链">¶</a>（10）防盗链</h6><p>防止别人直接从你网站引用图片等链接，消耗了你的资源和网络流量，那么我们的解决办法<br>由几种：</p><ul><li>水印，品牌宣传，你的带宽，服务器足够</li><li>防火墙，直接控制，前提是你知道 IP 来源</li><li>防盗链策略 下面的方法是直接给予 404 的错误提示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;</span><br><span class="line">    valid_referers none blocked 192.168.1.20;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="comment">#return 302 http://192.168.1.20/img/nolink.jpg;</span></span><br><span class="line">        <span class="built_in">return</span> 404;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（11）内核参数优化"><a class="header-anchor" href="#（11）内核参数优化">¶</a>（11）内核参数优化</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /etc/sysctl.conf</span></span><br><span class="line">fs.file-max = 999999</span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 10240 87380 12582912</span><br><span class="line">net.ipv4.tcp_wmem = 10240 87380 12582912</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.somaxconn = 40960</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 30</span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class="line">[root@nginx ~]<span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure><p>fs.file-max = 999999</p><blockquote><p>这个参数表示进程（比如一个 worker 进程）可以同时打开的最大句柄数，这个参数直线限制最大并发连接数，需根据实际情况配置</p></blockquote><p>net.ipv4.tcp_max_tw_buckets = 6000</p><blockquote><p>这个参数表示操作系统允许 TIME_WAIT 套接字数量的最大值，如果超过这个数字，TIME_WAIT 套接字将立刻被清除并打印警告信息。该参数默认为 180000，过多的TIME_WAIT 套接字会使 Web 服务器变慢</p><p>注：主动关闭连接的服务端会产生 TIME_WAIT 状态的连接</p></blockquote><p>net.ipv4.ip_local_port_range = 1024 65000</p><blockquote><p>允许系统打开的端口范围</p></blockquote><p>net.ipv4.tcp_tw_recycle = 1</p><blockquote><p>启用 timewait 快速回收</p></blockquote><p>net.ipv4.tcp_tw_reuse = 1</p><blockquote><p>开启重用。允许将 TIME-WAIT sockets 重新用于新的 TCP 连接。这对于服务器来说很有意义，因为服务器上总会有大量 TIME-WAIT 状态的连接</p></blockquote><p>net.ipv4.tcp_keepalive_time = 30</p><blockquote><p>这个参数表示当 keepalive 启用时，TCP 发送 keepalive 消息的频度。默认是 2 小时，若将其设置的小一些，可以更快地清理无效的连接</p></blockquote><p>net.ipv4.tcp_syncookies = 1</p><blockquote><p>开启 SYN Cookies，当出现 SYN 等待队列溢出时，启用 cookies 来处理</p></blockquote><p>net.core.somaxconn = 40960</p><blockquote><p>web 应用中 listen 函数的 backlog 默认会给我们内核参数的net.core.somaxconn 限制到 128，而 nginx 定义的 NGX_LISTEN_BACKLOG 默认为 511，所以有必要调整这个值</p><p>注：</p><p>对于一个 TCP 连接，Server 与 Client 需要通过三次握手来建立网络连接.当三次手成后,我们可以看到端口的状态由 LISTEN 转变为 ESTABLISHED,接着这条链路上就可以开始传送数据了.每一个处于监听(Listen)状态的端口,都有自己的监听队列.监听队列的长度与如somaxconn 参数和使用该端口的程序中 listen()函数有关</p><p>somaxconn参数:定义了系统中每一个端口最大的监听队列的长度,这是个全局的参数,默认值为 128，对于一个经常处理新连接的高负载 web 服务环境来说，默认的 128 太小了。大多数环境这个值建议增加到 1024 或者更多。大的侦听队列对防止拒绝服务 DoS 攻击也会有所帮助</p></blockquote><p>net.core.netdev_max_backlog = 262144</p><blockquote><p>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</p></blockquote><p>net.ipv4.tcp_max_syn_backlog = 262144</p><blockquote><p>这个参数标示 TCP 三次握手建立阶段接受 SYN 请求队列的最大长度，默认为 1024，将其设置得大一些可以使出现 Nginx 繁忙来不及 accept 新连接的情况时，Linux 不至于丢失客户端发起的连接请求</p></blockquote><p>net.ipv4.tcp_rmem = 10240 87380 12582912</p><blockquote><p>这个参数定义了 TCP 接受缓存（用于 TCP 接受滑动窗口）的最小值、默认值、最大值</p></blockquote><p>net.ipv4.tcp_wmem = 10240 87380 12582912</p><blockquote><p>这个参数定义了 TCP 发送缓存（用于 TCP 发送滑动窗口）的最小值、默认值、最大值</p></blockquote><p>net.core.rmem_default = 6291456</p><blockquote><p>这个参数表示内核套接字接受缓存区默认的大小</p></blockquote><p>net.core.wmem_default = 6291456</p><blockquote><p>这个参数表示内核套接字发送缓存区默认的大小</p></blockquote><p>net.core.rmem_max = 12582912</p><blockquote><p>这个参数表示内核套接字接受缓存区的最大大小</p></blockquote><p>net.core.wmem_max = 12582912</p><blockquote><p>这个参数表示内核套接字发送缓存区的最大大小</p></blockquote><p>net.ipv4.tcp_syncookies = 1</p><blockquote><p>该参数与性能无关，用于解决 TCP 的 SYN 攻击</p></blockquote><h6 id="（12）关于系统连接数的优化："><a class="header-anchor" href="#（12）关于系统连接数的优化：">¶</a>（12）关于系统连接数的优化：</h6><p>linux 默认值 open files 为 1024】</p><p>说明 server 只允许同时打开 1024 个文件】</p><p>使用 ulimit -a 可以查看当前系统的所有限制值，使用 ulimit -n 可以查看当前的最大打开文<br>件数</p><p>新装的 linux 默认只有 1024 ，当作负载较大的服务器时，很容易遇到 error: too many openfiles。因此，需要将其改大</p><p>在/etc/security/limits.conf 最后增加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line">* soft noproc 65535</span><br><span class="line">* hard noproc 65535</span><br></pre></td></tr></table></figure><h4 id="二、部署LNMP"><a class="header-anchor" href="#二、部署LNMP">¶</a>二、部署LNMP</h4><p><a href="https://pan.baidu.com/s/1b6dvnukVS0BBnP4Y-aeBrg" target="_blank" rel="noopener">软件连接</a></p><p>提取码：vzsu</p><h5 id="1、安装php"><a class="header-anchor" href="#1、安装php">¶</a>1、安装php</h5><h6 id="（1）解决依赖关系"><a class="header-anchor" href="#（1）解决依赖关系">¶</a>（1）解决依赖关系</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install libxml2-devel libcurl-devel openssl-devel bzip2-devel</span></span><br></pre></td></tr></table></figure><p>安装libmcypt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx libmcrypt-2.5.7]<span class="comment"># ./configure --prefix=/usr/local/libmcrypt &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h6 id="（2）编译安装php"><a class="header-anchor" href="#（2）编译安装php">¶</a>（2）编译安装php</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tar zxf php-5.6.27.tar.gz </span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd php-5.6.27/</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># ./configure --prefix=/usr/local/php5.6  --with-mysql=mysqlnd \</span></span><br><span class="line">&gt;  --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-openssl --<span class="built_in">enable</span>-fpm \</span><br><span class="line">&gt;  --<span class="built_in">enable</span>-sockets --<span class="built_in">enable</span>-sysvshm --<span class="built_in">enable</span>-mbstring --with-freetype-dir --with-jpeg-dir \</span><br><span class="line">&gt;  --with-png-dir --with-zlib --with-libxml-dir=/usr --<span class="built_in">enable</span>-xml --with-mhash \</span><br><span class="line">&gt;  --with-mcrypt=/usr/<span class="built_in">local</span>/libmcrypt --with-config-file-path=/etc \</span><br><span class="line">&gt;  --with-config-file-scan-dir=/etc/php.d --with-bz2 --<span class="built_in">enable</span>-maintainer-zts</span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h6 id="（3）提供php配置文件"><a class="header-anchor" href="#（3）提供php配置文件">¶</a>（3）提供php配置文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx php-5.6.27]<span class="comment"># cp php.ini-production /etc/php.ini</span></span><br></pre></td></tr></table></figure><h6 id="（4）为-php-fpm-提供脚本"><a class="header-anchor" href="#（4）为-php-fpm-提供脚本">¶</a>（4）为 php-fpm 提供脚本</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx php-5.6.27]<span class="comment"># cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># chmod +x /etc/init.d/php-fpm </span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># chkconfig --add php-fpm</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># chkconfig php-fpm on</span></span><br></pre></td></tr></table></figure><h6 id="（5）提供-php-fpm-配置文件并编辑"><a class="header-anchor" href="#（5）提供-php-fpm-配置文件并编辑">¶</a>（5）提供 php-fpm 配置文件并编辑</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx php-5.6.27]<span class="comment"># cp /usr/local/php5.6/etc/php-fpm.conf.default /usr/local/php5.6/etc/php-fpm.conf</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># vim /usr/local/php5.6/etc/php-fpm.conf</span></span><br><span class="line"><span class="comment"># 修改内容如下</span></span><br><span class="line">pid = run/php-fpm.pid</span><br><span class="line">listen = 0.0.0.0:9000</span><br><span class="line">pm.max_children = 50</span><br><span class="line">pm.start_servers = 5</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 35</span><br></pre></td></tr></table></figure><p>启动php-fpm服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx php-5.6.27]<span class="comment"># service php-fpm start</span></span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># netstat -anpt | grep php-fpm</span></span><br><span class="line">tcp        0      0 0.0.0.0:9000            0.0.0.0:*               LISTEN      125567/php-fpm: mas</span><br><span class="line">[root@nginx ~]<span class="comment"># firewall-cmd --permanent --add-port=9000/tcp</span></span><br><span class="line">success</span><br><span class="line">[root@nginx ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">Success</span><br></pre></td></tr></table></figure><p>在 nginx.conf 文件的 server 中添加下面内容支持 php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/local/nginx1.10/conf/nginx.conf</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location ~ .*\.(php|php5)?$ &#123;</span><br><span class="line">            root html;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">            fastcgi_cache cache_fastcgi;</span><br><span class="line">            fastcgi_cache_valid 200 302 1h;</span><br><span class="line">            fastcgi_cache_valid 301 1d;</span><br><span class="line">            fastcgi_cache_valid any 1m;</span><br><span class="line">            fastcgi_cache_min_uses 1;</span><br><span class="line">            fastcgi_cache_use_stale error timeout invalid_header http_500;</span><br><span class="line">            fastcgi_cache_key http://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>重载 nginx 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>下面是 nginx.conf 的一个完整配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># cat /usr/local/nginx1.10/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">user  nginx nginx;</span><br><span class="line">worker_processes  2;</span><br><span class="line">worker_cpu_affinity 01 10;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">    multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line">    open_file_cache max=102400 inactive=20s;</span><br><span class="line">    open_file_cache_valid 30s;</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    client_header_timeout 15;</span><br><span class="line">    client_body_timeout 15;</span><br><span class="line">    reset_timedout_connection on;</span><br><span class="line">    send_timeout 15;</span><br><span class="line">    server_tokens off;</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    fastcgi_connect_timeout 600;</span><br><span class="line">    fastcgi_send_timeout 600;</span><br><span class="line">    fastcgi_read_timeout 600;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line">    fastcgi_temp_path /usr/<span class="built_in">local</span>/nginx1.10/nginx_tmp;</span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    fastcgi_cache_path /usr/<span class="built_in">local</span>/nginx1.10/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:128m inactive=1d max_size=10g;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_min_length 2k;</span><br><span class="line">    gzip_buffers 4 32k;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_types  text/plain  text/css  text/javascript  application/json  application/javascript application/x-javascript application/xml;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;</span><br><span class="line">    valid_referers none blocked 192.168.1.20;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line"><span class="comment">#return 302 http://192.168.1.20/img/nolink.jpg;</span></span><br><span class="line"><span class="built_in">return</span> 404;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">location ~* \.(ico|jpe?g|gif|png|bmp|swf|flv)$ &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">    <span class="comment">#log_not_found off;</span></span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(js|css)$ &#123;</span><br><span class="line">    expires 7d;</span><br><span class="line">    log_not_found off;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line">location ~ .*\.(php|php5)?$ &#123;</span><br><span class="line">    root html;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">     fastcgi_index index.php;</span><br><span class="line">    include fastcgi.conf;</span><br><span class="line">    fastcgi_cache cache_fastcgi;</span><br><span class="line">    fastcgi_cache_valid 200 302 1h;</span><br><span class="line">    fastcgi_cache_valid 301 1d;</span><br><span class="line">    fastcgi_cache_valid any 1m;</span><br><span class="line">    fastcgi_cache_min_uses 1;</span><br><span class="line">    fastcgi_cache_use_stale error timeout invalid_header http_500;</span><br><span class="line">    fastcgi_cache_key http://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、验证、压力测试"><a class="header-anchor" href="#三、验证、压力测试">¶</a>三、验证、压力测试</h4><h5 id="1、验证防盗链"><a class="header-anchor" href="#1、验证防盗链">¶</a>1、验证防盗链</h5><p>使用<code>httpd</code>做为一个测试站点，192.168.1.30，在测试页上做一个超链接，链接 nginx站点的一张图片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># vim /var/www/html/index.html</span></span><br><span class="line">&lt;a href=<span class="string">"http://192.168.1.20/11.gif"</span>&gt;lianjie&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>Nginx 站点的网页目录结如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tree /usr/local/nginx1.10/html/</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx1.10/html/</span><br><span class="line">├── 11.gif</span><br><span class="line">├── 50x.html</span><br><span class="line">├── img</span><br><span class="line">│   └── nolink.jpg</span><br><span class="line">├── index.html</span><br><span class="line">└── test.php</span><br></pre></td></tr></table></figure><p>在客户端浏览器中输入192.168.1.30<br><img data-src="https://img-blog.csdnimg.cn/20200613112914586.png" alt></p><p>点击页面链接<br><img data-src="https://img-blog.csdnimg.cn/20200613112942881.png" alt></p><p>将return的404关闭，指定跳转文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">return</span> 302 http://192.168.1.20/img/nolink.jpg;</span><br><span class="line">                <span class="comment">#return 404;</span></span><br></pre></td></tr></table></figure><p>11.gif图片<br><img data-src="https://img-blog.csdnimg.cn/20200613113001613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>nolink.jpg图片<br><img data-src="https://img-blog.csdnimg.cn/20200613113033135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>根据防盗链的设置，会跳转到nolink.jpg图片<br><img data-src="https://img-blog.csdnimg.cn/20200613113056145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt>配置已经生效</p><h5 id="2、验证gzip功能"><a class="header-anchor" href="#2、验证gzip功能">¶</a>2、验证gzip功能</h5><p><img data-src="https://img-blog.csdnimg.cn/20200613113159446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>用户访问test.php文件，在上图中content-encoding:gzip表明响应给用户的数据是压缩传输</p><h5 id="3、压力测试"><a class="header-anchor" href="#3、压力测试">¶</a>3、压力测试</h5><p>安装 httpd-tools 软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install httpd-tools</span></span><br><span class="line">[root@nginx ~]<span class="comment"># ab -c 500 -n 50000 http://192.168.1.20/index.html</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.20 (be patient)</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 15000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 25000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 35000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 45000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Finished 50000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        IIS</span><br><span class="line">Server Hostname:        192.168.1.20</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.html</span><br><span class="line">Document Length:        612 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      500</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   2.544 seconds</span><br><span class="line">Complete requests:      50000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      41800000 bytes</span><br><span class="line">HTML transferred:       30600000 bytes</span><br><span class="line">Requests per second:    19657.71 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       25.435 [ms] (mean)</span><br><span class="line">Time per request:       0.051 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          16048.68 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   10   3.9     10      20</span><br><span class="line">Processing:     9   16   4.0     15      29</span><br><span class="line">Waiting:        0    8   1.0      8      12</span><br><span class="line">Total:         15   25   1.5     25      36</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     25</span><br><span class="line">  66%     26</span><br><span class="line">  75%     26</span><br><span class="line">  80%     26</span><br><span class="line">  90%     27</span><br><span class="line">  95%     28</span><br><span class="line">  98%     29</span><br><span class="line">  99%     30</span><br><span class="line"> 100%     36 (longest request)</span><br></pre></td></tr></table></figure><p>第二次压力测试，比较两次的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ab -c 1000 -n 100000 http://192.168.1.20/index.html</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.20 (be patient)</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Completed 60000 requests</span><br><span class="line">Completed 70000 requests</span><br><span class="line">Completed 80000 requests</span><br><span class="line">Completed 90000 requests</span><br><span class="line">Completed 100000 requests</span><br><span class="line">Finished 100000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        IIS</span><br><span class="line">Server Hostname:        192.168.1.20</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.html</span><br><span class="line">Document Length:        612 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   5.633 seconds</span><br><span class="line">Complete requests:      100000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      83600000 bytes</span><br><span class="line">HTML transferred:       61200000 bytes</span><br><span class="line">Requests per second:    17753.07 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       56.328 [ms] (mean)</span><br><span class="line">Time per request:       0.056 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          14493.71 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   17   8.0     17      44</span><br><span class="line">Processing:     9   39   7.9     39      69</span><br><span class="line">Waiting:        0   24   5.4     24      48</span><br><span class="line">Total:         28   56   5.9     56     101</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     56</span><br><span class="line">  66%     58</span><br><span class="line">  75%     59</span><br><span class="line">  80%     60</span><br><span class="line">  90%     62</span><br><span class="line">  95%     64</span><br><span class="line">  98%     68</span><br><span class="line">  99%     75</span><br><span class="line"> 100%    101 (longest request)</span><br></pre></td></tr></table></figure><blockquote><p>第一次：Requests per second:    19657.71 [#/sec] (mean)</p><p>第二次：Requests per second:    17753.07 [#/sec] (mean)</p></blockquote><h5 id="5、xcache加速php"><a class="header-anchor" href="#5、xcache加速php">¶</a>5、xcache加速php</h5><h6 id="（1）安装-xcache"><a class="header-anchor" href="#（1）安装-xcache">¶</a>（1）安装 xcache</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># wget http://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz</span></span><br><span class="line">[root@nginx ~]<span class="comment"># tar zxf xcache-3.2.0.tar.gz </span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd xcache-3.2.0/</span></span><br><span class="line"><span class="comment"># 用 phpize 生成 configure 配置文件</span></span><br><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># /usr/local/php5.6/bin/phpize</span></span><br><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># ./configure  --enable-xcache  --enable-xcache-coverager --enable-xcache-optimizer --with-php-config=/usr/local/php5.6/bin/php-config</span></span><br><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>安装完成之后，出现下面的界面，记住以下路径，后面会用到</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing shared extensions:     /usr/local/php5.6/lib/php/extensions/no-debug-zts-20131226/</span><br></pre></td></tr></table></figure><h6 id="（2）创建-xcache-缓存文件"><a class="header-anchor" href="#（2）创建-xcache-缓存文件">¶</a>（2）创建 xcache 缓存文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># touch /tmp/xcache</span></span><br><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># chmod 777 /tmp/xcache</span></span><br></pre></td></tr></table></figure><h6 id="（3）拷贝xcache后台管理程序到网站根目录"><a class="header-anchor" href="#（3）拷贝xcache后台管理程序到网站根目录">¶</a>（3）拷贝xcache后台管理程序到网站根目录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># cp -r htdocs/ /usr/local/nginx1.10/html/xcache</span></span><br></pre></td></tr></table></figure><h6 id="（4）配置-php-支持-xcache"><a class="header-anchor" href="#（4）配置-php-支持-xcache">¶</a>（4）配置 php  支持 xcache</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /etc/php.ini</span></span><br><span class="line"><span class="comment"># 最后一样添加</span></span><br><span class="line">[xcache-common]</span><br><span class="line">extension = /usr/<span class="built_in">local</span>/php5.6/lib/php/extensions/no-debug-zts-20131226/xcache.so</span><br><span class="line"><span class="comment"># 注意目录</span></span><br><span class="line">[xcache.admin]</span><br><span class="line">xcache.admin.enable_auth = Off</span><br><span class="line">[xcache]</span><br><span class="line">xcache.shm_scheme =<span class="string">"mmap"</span></span><br><span class="line">xcache.size=60M</span><br><span class="line">xcache.count =1</span><br><span class="line">xcache.slots =8K</span><br><span class="line">xcache.ttl=0</span><br><span class="line">xcache.gc_interval =0</span><br><span class="line">xcache.var_size=64M</span><br><span class="line">xcache.var_count =1</span><br><span class="line">xcache.var_slots =8K</span><br><span class="line">xcache.var_ttl=0</span><br><span class="line">xcache.var_maxttl=0</span><br><span class="line">xcache.var_gc_interval =300</span><br><span class="line">xcache.test =Off</span><br><span class="line">xcache.readonly_protection = Off</span><br><span class="line">xcache.mmap_path =<span class="string">"/tmp/xcache"</span></span><br><span class="line">xcache.coredump_directory =<span class="string">""</span></span><br><span class="line">xcache.cacher =On</span><br><span class="line">xcache.stat=On</span><br><span class="line">xcache.optimizer =Off</span><br><span class="line">[xcache.coverager]</span><br><span class="line">xcache.coverager =On</span><br><span class="line">xcache.coveragedump_directory =<span class="string">""</span></span><br></pre></td></tr></table></figure><h5 id="6、测试"><a class="header-anchor" href="#6、测试">¶</a>6、测试</h5><p>重启php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># service php-fpm restart</span></span><br><span class="line">Gracefully shutting down php-fpm . <span class="keyword">done</span></span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>浏览器打开网站根目录下面的 xcache<br><img data-src="https://img-blog.csdnimg.cn/2020061311332680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>测试对 php 动态页面的压力测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ab -c 1000 -n 100000 http://192.168.1.20/test.php</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.20 (be patient)</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Completed 60000 requests</span><br><span class="line">Completed 70000 requests</span><br><span class="line">Completed 80000 requests</span><br><span class="line">Completed 90000 requests</span><br><span class="line">Completed 100000 requests</span><br><span class="line">Finished 100000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        IIS</span><br><span class="line">Server Hostname:        192.168.1.20</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /test.php</span><br><span class="line">Document Length:        84586 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   9.496 seconds</span><br><span class="line">Complete requests:      100000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      8476300000 bytes</span><br><span class="line">HTML transferred:       8458600000 bytes</span><br><span class="line">Requests per second:    10531.17 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       94.956 [ms] (mean)</span><br><span class="line">Time per request:       0.095 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          871732.00 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   14   7.4     13      58</span><br><span class="line">Processing:    13   81  12.3     81     146</span><br><span class="line">Waiting:        2   26   9.2     25      79</span><br><span class="line">Total:         35   95  11.7     93     165</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     93</span><br><span class="line">  66%     97</span><br><span class="line">  75%    100</span><br><span class="line">  80%    103</span><br><span class="line">  90%    110</span><br><span class="line">  95%    114</span><br><span class="line">  98%    124</span><br><span class="line">  99%    130</span><br><span class="line"> 100%    165 (longest request)</span><br><span class="line"> Requests per second:    10531.17 [<span class="comment">#/sec] (mean)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理缓存服务器构建</title>
    <link href="https://pdxblog.top/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%84%E5%BB%BA.html"/>
    <id>https://pdxblog.top/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%84%E5%BB%BA.html</id>
    <published>2020-06-10T16:00:00.000Z</published>
    <updated>2020-06-11T05:32:37.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx反向代理缓存服务器构建"><a class="header-anchor" href="#Nginx反向代理缓存服务器构建">¶</a>Nginx反向代理缓存服务器构建</h3><p>代理服务可简单的分为正向代理和反向代理:</p><p>正向代理:</p><p>用于代理内部网络对 Internet 的连接请求(如 VPN/NAT),客户端指定代理服务器,并将本来要直接发送给目标Web服务器的HTTP请求先发送到代理服务器上, 然后由代理服务 器去访问 Web 服务器, 并将 Web 服务器的 Response 回传给客户端</p><p>反向代理:</p><p>与正向代理相反,如果局域网向Internet提供资源,并让Internet上的其他用户可以 访问局域网内资源, 也可以设置一个代理服务器, 它提供的服务就是反向代理. 反向代理服 务器接受来自 Internet 的连接,然后将请求转发给内部网络上的服务器,并将 Response 回传给 Internet 上请求连接的客户端</p><h4 id="一、nginx-反向代理：Web-服务器的调度器"><a class="header-anchor" href="#一、nginx-反向代理：Web-服务器的调度器">¶</a>一、nginx 反向代理：Web 服务器的调度器</h4><h5 id="1、反向代理方式"><a class="header-anchor" href="#1、反向代理方式">¶</a>1、反向代理方式</h5><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受客户端的连接请求，然后将请 求转发给网络上的 web 服务器（可能是 apache、nginx、tomcat、iis 等），并将从 web 服务 器上得到的结果返回给请求连接的客户端，此时代理服务器对外就表现为一个服务器<br><img data-src="https://img-blog.csdnimg.cn/20200611131809239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>从上图可以看出：反向代理服务器代理网站 Web 服务器接收 Http 请求，对请求进行转发。 而且nginx作为反向代理服务器可以根据用户请求的内容把请求转发给后端不同的web服务 器，例如静动分离，再例如在 nginx 上创建多个虚拟主机，这样就成功的做到了在浏览器中 输入不同域名（url）的时候访问后端的不同 web 服务器或 web 群集</p><h5 id="2、反向代理的作用"><a class="header-anchor" href="#2、反向代理的作用">¶</a>2、反向代理的作用</h5><h6 id="（1）保护网站安全："><a class="header-anchor" href="#（1）保护网站安全：">¶</a>（1）保护网站安全：</h6><p>任何来自 Internet 的请求都必须先经过代理服务器<br><img data-src="https://img-blog.csdnimg.cn/20200611131834340.png" alt></p><h6 id="（2）通过配置缓存功能加速-Web-请求："><a class="header-anchor" href="#（2）通过配置缓存功能加速-Web-请求：">¶</a>（2）通过配置缓存功能加速 Web 请求：</h6><p>可以缓存真实 Web 服务器上的某些静态资源，减轻真 实 Web 服务器的负载压力<br><img data-src="https://img-blog.csdnimg.cn/20200611131847319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h6 id="（3）实现负载均衡："><a class="header-anchor" href="#（3）实现负载均衡：">¶</a>（3）实现负载均衡：</h6><p>充当负载均衡服务器均衡地分发请求，平衡集群中各个服务器的负载压力<br><img data-src="https://img-blog.csdnimg.cn/20200611131911282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="二、什么是-nginx："><a class="header-anchor" href="#二、什么是-nginx：">¶</a>二、什么是 nginx：</h4><h5 id="1、nginx简介"><a class="header-anchor" href="#1、nginx简介">¶</a>1、nginx简介</h5><blockquote><p>Nginx 是一款轻量级的网页服务器、反向代理器以及电子邮件代理服务器。因它的稳定性、 丰富的功能集、示例配置文件和低系统资源的消耗而闻名。Nginx（发音同 engine x），它是 由俄罗斯程序员 Igor Sysoev 所开发的。起初是供俄国大型的门户网站及搜索引擎 Rambler （俄语：Рамблер）使用。此软件 BSD-like 协议下发行，可以在 UNIX、GNU/Linux、 BSD、Mac OS X、Solaris，以及 Microsoft Windows 等操作系统中运行</p></blockquote><h5 id="2、Nginx-的应用现状："><a class="header-anchor" href="#2、Nginx-的应用现状：">¶</a>2、Nginx 的应用现状：</h5><blockquote><p>Nginx 已经在俄罗斯最大的门户网站── Rambler Media（<a href="http://www.rambler.ru" target="_blank" rel="noopener">www.rambler.ru</a>）上运行，同时俄 罗斯超过 20%的虚拟主机平台采用 Nginx 作为反向代理服务器</p><p>在国内，已经有 淘宝、新浪博客、新浪播客、网易新闻、六间房、<a href="http://56.com" target="_blank" rel="noopener">56.com</a>、Discuz!、水木 社区、豆瓣、YUPOO、海内、迅雷在线 等多家网站使用 Nginx 作为 Web 服务器或反向代 理服务器</p></blockquote><h5 id="3、Nginx-的核心特点："><a class="header-anchor" href="#3、Nginx-的核心特点：">¶</a>3、Nginx 的核心特点：</h5><h6 id="（1）跨平台："><a class="header-anchor" href="#（1）跨平台：">¶</a>（1）跨平台：</h6><p>Nginx 可以在大多数 OS 编译运行，而且也有 Windows 的版本</p><h6 id="（2）配置异常简单："><a class="header-anchor" href="#（2）配置异常简单：">¶</a>（2）配置异常简单：</h6><p>非常容易上手</p><h6 id="（3）非阻塞、高并发连接："><a class="header-anchor" href="#（3）非阻塞、高并发连接：">¶</a>（3）非阻塞、高并发连接：</h6><p>官方测试能够支撑 5 万并发连接，在实际生产环境中跑到 2～3 万并发连接数。（这得益于 Nginx 使用了最新的 epoll 模型）</p><p>注：</p><blockquote><p>对于一个 Web 服务器来说，首先看一个请求的基本过程：建立连接—接收数据—发送数据， 在系统底层看来 ：上述过程（建立连接—接收数据—发送数据）在系统底层就是读写事件。</p><p>如果采用阻塞调用的方式，当读写事件没有准备好时，那么就只能等待，当前线程被挂起，等事件准备好了，才能进行读写事件。</p><p>如果采用非阻塞调用的方式：事件马上返回，告诉你事件还没准备好呢，过会再来吧。过一 会，再来检查一下事件，直到事件准备好了为止，在这期间，你就可以先去做其它事情，然 后再来看看事件好了没。虽然不阻塞了，但你得不时地过来检查一下事件的状态，你可以做 更多的事情了，但带来的开销也是不小的。非阻塞调用指在不能立刻得到结果之前，该调用 不会阻塞当前线程</p></blockquote><h6 id="（4）事件驱动："><a class="header-anchor" href="#（4）事件驱动：">¶</a>（4）事件驱动：</h6><p>通信机制采用 epoll 模型，支持更大的并发连接</p><p>阻塞通过不断检查事件的状态来判断是否进行读写操作，这样带来的开销很大，因此就有 了异步非阻塞的事件处理机制。这 种机制让你可以同时监控多个事件，调用他们是非阻塞的， 但可以设置超时时间，在超时时间之内，如果有事件准备好了，就返回。这种机制解决了上 面阻塞调用与非阻塞调用的两个问题。</p><p>以 epoll 模型为例：</p><blockquote><p>当事件没有准备好时，就放入 epoll(队列)里面。如果有事件准备好了， 那么就去处理；当事件没有准备好时，才在 epoll 里面等着。这样，我们就可以并发处理大 量的并发了，当然，这里的并发请求，是指未处理完的请求。线程只有一个，所以同时能处 理的请求当然只有一个了，只是在请求之间进行不断地切换而已，切换也是因为异步事件未 准备好，而主动让出的。这里的切换是没有任何代价，你可以理解为循环处理多个准备好的 事件。</p><p>多线程方式相比，这种事件处理方式是有很大的优势的，不需要创建线程，每个请求占用的 内存也很少，没有上下文切换， 事件处理非常的轻量级，并发数再多也不会导致无谓的资 源浪费（上下文切换）。对于 apache 服务器，每个请求会独占一个工作线程，当并发数上到 几千时，就同时有几千的线程在处理请求了。这对操作系统来说，是个不小的挑战：因为线 程带来的内存占用非常大，线程的上下文切换带来的 cpu 开销很大，自然性能就上不 去， 从而导致在高并发场景下性能下降严重</p><p>总结：通过异步非阻塞的事件处理机制，Nginx 实现由进程循环处理多个准备好的事件，从 而实现高并发和轻量级</p></blockquote><h6 id="（5）Master-Worker-结构："><a class="header-anchor" href="#（5）Master-Worker-结构：">¶</a>（5）Master/Worker 结构：</h6><p>一个 master 进程，生成一个或多个 worker 进程<br><img data-src="https://img-blog.csdnimg.cn/2020061113202580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>注：</p><blockquote><p>Master-Worker 设计模式主要包含两个主要组件 Master 和 Worker，Master 维护着 Worker 队列，将请求下发到多个 Worker 并行执行，Worker 主要进行实际逻辑计算，并将结果返回 给 Maste</p><p>nginx 采用这种进程模型有什么好处？采用独立的进程，可以让互相之间不会影响，一个进 程退出后，其它进程还在工作，服务不会中断，Master 进程则很快重新启动新的 Worker进程。当然，Worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 Worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险</p></blockquote><h6 id="（6）内存消耗小："><a class="header-anchor" href="#（6）内存消耗小：">¶</a>（6）内存消耗小：</h6><p>处理大并发的请求内存消耗非常小。在 3 万并发连接下，开启的 10 个 Nginx 进程才消耗 150M 内存（15M*10=150M）</p><h6 id="（7）内置的健康检查功能："><a class="header-anchor" href="#（7）内置的健康检查功能：">¶</a>（7）内置的健康检查功能：</h6><p>如果 Nginx 代理的后端的某台 Web 服务器宕机了，不会影响 前端访问</p><h6 id="（8）节省带宽："><a class="header-anchor" href="#（8）节省带宽：">¶</a>（8）节省带宽：</h6><p>支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头</p><h6 id="（9）稳定性高："><a class="header-anchor" href="#（9）稳定性高：">¶</a>（9）稳定性高：</h6><p>用于反向代理，宕机的概率微乎其微</p><h4 id="三、Nginx-apache构筑-Web-服务器集群的负载均衡"><a class="header-anchor" href="#三、Nginx-apache构筑-Web-服务器集群的负载均衡">¶</a>三、Nginx+apache构筑 Web 服务器集群的负载均衡</h4><p>nginx 配置反向代理</p><p>配置 nginx 作为反向代理和负载均衡，同时利用其缓存功能，将静态页面在 nginx 缓存，以达到降低后端服务器连接数的目的并检查后端 web 服务器的健康状况<img data-src="https://img-blog.csdnimg.cn/20200611132221666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h5 id="1、安装nginx"><a class="header-anchor" href="#1、安装nginx">¶</a>1、安装nginx</h5><p>环境：</p><table><thead><tr><th><strong>OS</strong></th><th>centos7.5</th></tr></thead><tbody><tr><td><strong>nginx</strong></td><td><strong>192.168.1.20</strong></td></tr><tr><td><strong>apache1</strong></td><td><strong>192.168.1.30</strong></td></tr><tr><td><strong>apache2</strong></td><td><strong>192.168.1.40</strong></td></tr></tbody></table><h6 id="（1）安装-zlib-devel、pcre-devel-等依赖包"><a class="header-anchor" href="#（1）安装-zlib-devel、pcre-devel-等依赖包">¶</a>（1）安装 zlib-devel、pcre-devel 等依赖包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install gcc gcc-c++ make libtool zlib zlib-devel pcre pcre-devel opensll openssl-devel</span></span><br></pre></td></tr></table></figure><p>注：</p><blockquote><p>结合 proxy 和 upstream 模块实现后端 web 负载均衡</p><p>使用 proxy 模块实现静态文件缓存</p><p>结合 nginx 默认自带的 ngx_http_proxy_module 模块和ngx_http_upstream_module 模块实现后端服务器的健康检查，也可以使用第三方模块 nginx_upstream_check_module</p><p>使用 nginx-sticky-module 扩展模块实现 Cookie 会话黏贴（保持会话）</p><p>使用 ngx_cache_purge 实现更强大的缓存清除功能</p><p>上面提到的 2 个模块都属于第三方扩展模块，需要提前下好源码，然后编译时通过–add-moudle=src_path 一起安装</p></blockquote><h6 id="（2）安装nginx"><a class="header-anchor" href="#（2）安装nginx">¶</a>（2）安装nginx</h6><p>添加nginx组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># groupadd nginx</span></span><br></pre></td></tr></table></figure><p>创建nginx的运行账户nginx，加入到nginx组中，不允许nginx直接登录系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># useradd -g nginx nginx -s /sbin/nologin</span></span><br></pre></td></tr></table></figure><p>所需要的软件包</p><blockquote><p>nginx-1.14.0.tar.gz</p><p>ngx_cache_purge-2.3.tar.gz</p><p>nginx-sticky-module.zip</p></blockquote><p><a href="https://pan.baidu.com/s/1C4Wk8a2WCVjUTbnPmfxq_w" target="_blank" rel="noopener">软件链接</a></p><p>提取码：tfax</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tar zxf nginx-1.14.0.tar.gz -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># tar zxf ngx_cache_purge-2.3.tar.gz -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># unzip nginx-sticky-module.zip -d /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd /usr/src/nginx-1.14.0/</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># ./configure --prefix=/usr/local/nginx1.14 \</span></span><br><span class="line">&gt;  --user=nginx --group=nginx --with-http_stub_status_module \</span><br><span class="line">&gt;  --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module \</span><br><span class="line">&gt;  --http-client-body-temp-path=/var/tmp/nginx/client \</span><br><span class="line">&gt;  --http-proxy-temp-path=/var/tmp/nginx/proxy \</span><br><span class="line">&gt;  --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --with-http_flv_module \</span><br><span class="line">&gt;  --add-module=/usr/src/nginx-sticky-module \</span><br><span class="line">&gt;  --add-module=/usr/src/ngx_cache_purge-2.3</span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>注：nginx 的所有模块必须在编译的时候添加，不能再运行的时候动态加载</p><p>相关参数解释：</p><p>–with-http-stub-status-module：</p><blockquote><p>通过网页监控nginx的状态</p></blockquote><p>–with-http-realip-module：</p><blockquote><p>获取客户端的真实IP地址</p></blockquote><p>–with-http-ssl module：</p><blockquote><p>开启nginx的加密传输功能</p></blockquote><p>–with-httpgzipstaticmodule：</p><blockquote><p>开启压缩功能</p></blockquote><p>–http-client-body-temp-path=/var/tmp/nginx/client：</p><blockquote><p>客户端访问数据临吁存放路径</p></blockquote><p>–with-pcre：</p><blockquote><p>支持正则匹配表达式</p></blockquote><p>–add-module=/usr/src/ngx_cache_purge-2.3：</p><blockquote><p>添加nginx的第三方模块语法为—add-module=第三方模块路径</p></blockquote><p>–with-http flv module：</p><blockquote><p>支持flv视频流</p></blockquote><h5 id="2、优化-nginx-程序的执行路径"><a class="header-anchor" href="#2、优化-nginx-程序的执行路径">¶</a>2、优化 nginx 程序的执行路径</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># ln -s /usr/local/nginx1.14/sbin/nginx /usr/local/sbin/</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx1.14/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: [emerg] mkdir() <span class="string">"/var/tmp/nginx/client"</span> failed (2: No such file or directory)</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx1.14/conf/nginx.conf <span class="built_in">test</span> failed</span><br></pre></td></tr></table></figure><p>这里会报错，根据提示创建相应的目录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># mkdir -p /var/tmp/nginx/client</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># chown -R nginx:nginx /var/tmp/nginx/</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx1.14/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx1.14/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><h5 id="3、编写nginx服务脚本"><a class="header-anchor" href="#3、编写nginx服务脚本">¶</a>3、编写nginx服务脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># cat /etc/init.d/nginx </span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># chkconfig: 2345 99 20 </span></span><br><span class="line"><span class="comment"># description: Nginx Service Control Script </span></span><br><span class="line">PROG=<span class="string">"/usr/local/nginx1.14/sbin/nginx"</span></span><br><span class="line">PIDF=<span class="string">"/usr/local/nginx-1.14/logs/nginx.pid"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">   netstat -anplt |grep <span class="string">":80"</span> &amp;&gt; /dev/null &amp;&amp; pgrep <span class="string">"nginx"</span> &amp;&gt; /dev/null</span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"Nginx service already running."</span> </span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     <span class="variable">$PROG</span> -t &amp;&gt; /dev/null</span><br><span class="line">     <span class="keyword">if</span> [ $? -eq 0 ] ; <span class="keyword">then</span></span><br><span class="line">       <span class="variable">$PROG</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"Nginx service start success."</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     <span class="variable">$PROG</span> -t</span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   ;;</span><br><span class="line">  stop)</span><br><span class="line">   netstat -anplt |grep <span class="string">":80"</span> &amp;&gt; /dev/null &amp;&amp; pgrep <span class="string">"nginx"</span> &amp;&gt; /dev/nul</span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">kill</span> -s QUIT $(cat <span class="variable">$PIDF</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Nginx service stop success."</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Nginx service already stop"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   ;;</span><br><span class="line">  restart)</span><br><span class="line">    <span class="variable">$0</span> stop</span><br><span class="line">    <span class="variable">$0</span> start</span><br><span class="line">    ;;</span><br><span class="line">  status)</span><br><span class="line">   netstat -anplt |grep <span class="string">":80"</span> &amp;&gt; /dev/null &amp;&amp; pgrep <span class="string">"nginx"</span> &amp;&gt; /dev/null</span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"Nginx service is running."</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"Nginx is stop."</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">  ;;</span><br><span class="line">  reload)</span><br><span class="line">   netstat -anplt |grep <span class="string">":80"</span> &amp;&gt; /dev/null &amp;&amp; pgrep <span class="string">"nginx"</span> &amp;&gt; /dev/nul</span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$PROG</span> -t &amp;&gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ] ; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">kill</span> -s HUP $(cat <span class="variable">$PIDF</span>)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"reload Nginx config success."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="variable">$PROG</span> -t</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Nginx service is not run."</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart|reload&#125;"</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>测试脚本是否能用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># chmod +x /etc/init.d/nginx </span></span><br><span class="line">[root@nginx ~]<span class="comment"># chkconfig --add nginx</span></span><br><span class="line">[root@nginx ~]<span class="comment"># chkconfig nginx on</span></span><br><span class="line">[root@nginx ~]<span class="comment"># /etc/init.d/nginx start</span></span><br><span class="line">Nginx service start success.</span><br><span class="line">[root@nginx ~]<span class="comment"># netstat -anput | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6162/nginx: master</span><br></pre></td></tr></table></figure><p>注：如果你想在已安装好的 nginx 上添加第三方模块，依然需要重新编译，但为了不覆盖你原有的配置，请不要 make install，而是直接拷贝可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.14.0]<span class="comment">#./configure --add-module=……  #你的第三方模块</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.14.0]<span class="comment"># make 后不要 make install,改为手动拷贝，先备份</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.14.0]<span class="comment"># cp /usr/local/nginx-1.14/sbin/nginx /usr/local/nginx-1.14/sbin/nginx.bak</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.14.0]<span class="comment"># cp objs/nginx /usr/local/nginx-1.14/sbin/nginx</span></span><br></pre></td></tr></table></figure><h4 id="四、开启nginx网页界面认证"><a class="header-anchor" href="#四、开启nginx网页界面认证">¶</a>四、开启nginx网页界面认证</h4><h5 id="1、安装httpd-tools软件包"><a class="header-anchor" href="#1、安装httpd-tools软件包">¶</a>1、安装httpd-tools软件包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install httpd-tools</span></span><br></pre></td></tr></table></figure><h5 id="2、使用htppasswd命令生成账号密码"><a class="header-anchor" href="#2、使用htppasswd命令生成账号密码">¶</a>2、使用htppasswd命令生成账号密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># /usr/bin/htpasswd -c /usr/local/nginx1.14/nginx.passwd admin</span></span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user admin</span><br></pre></td></tr></table></figure><h5 id="3、添加配置文件："><a class="header-anchor" href="#3、添加配置文件：">¶</a>3、添加配置文件：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/local/nginx1.14/conf/nginx.conf</span></span><br><span class="line">        location /auth &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            auth_basic  <span class="string">"提示语句"</span>;</span><br><span class="line">            auth_basic_user_file  /usr/<span class="built_in">local</span>/nginx1.14/nginx.passwd;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="4、创建文件夹及网页"><a class="header-anchor" href="#4、创建文件夹及网页">¶</a>4、创建文件夹及网页</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># mkdir /usr/local/nginx1.14/auth</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cat /usr/local/nginx1.14/auth/index.html</span></span><br><span class="line">This is a <span class="built_in">test</span> file!</span><br></pre></td></tr></table></figure><h5 id="5、重载nginx，访问测试"><a class="header-anchor" href="#5、重载nginx，访问测试">¶</a>5、重载nginx，访问测试</h5><p>[root@nginx ~]# nginx -s  reload<br><img data-src="https://img-blog.csdnimg.cn/20200611132323290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>输入用户名密码就可以访问了</p><h4 id="五、配置-nginx-反向代理：反向代理-负载均衡-健康探测"><a class="header-anchor" href="#五、配置-nginx-反向代理：反向代理-负载均衡-健康探测">¶</a>五、配置 nginx 反向代理：反向代理+负载均衡+健康探测</h4><p>查看 nginx 加载的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/1.14.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx1.14 --user=nginx --group=nginx --with-http_stub_status_module --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client --http-proxy-temp-path=/var/tmp/nginx/proxy --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --with-http_flv_module --add-module=/usr/src/nginx-sticky-module --add-module=/usr/src/ngx_cache_purge-2.3</span><br></pre></td></tr></table></figure><p>nginx 的所有模块必须在编译的时候添加，不能再运行的时候动态加载</p><h5 id="1、nginx-sticky-module-模块："><a class="header-anchor" href="#1、nginx-sticky-module-模块：">¶</a>1、nginx-sticky-module 模块：</h5><blockquote><p>这个模块的作用是通过 cookie 黏贴的方式将来自同一个客户端（浏览器）的请求发送到同一个后端服务器上处理，这样一定程度上可以解决多个 backend servers 的 session 同步的问题 —— 因为不再需要同步，而 RR 轮询模式必须要运维人员自己考虑 session 同步的实现另外内置的 ip_hash 也可以实现根据客户端 IP 来分发请求，但它很容易造成负载不均衡的情况，而如果 nginx 前面有 CDN 网络或者来自同一局域网的访问，它接收的客户端 IP 是一样的，容易造成负载不均衡现象。nginx-sticky-module 的 cookie 过期时间，默认浏览器关闭就过期</p><p>这个模块并不合适不支持 Cookie 或手动禁用了 cookie 的浏览器，此时默认 sticky 就会切换成 RR。它不能与 ip_hash 同时使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">        server 192.168.31.141:80 weight=1;</span><br><span class="line">        server 192.168.31.250:80 weight=1;</span><br><span class="line">        sticky;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置起来超级简单，一般来说一个 sticky 指令就够了</p><p>相关信息可以查看<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng" target="_blank" rel="noopener">官方文档</a></p><h5 id="2、load-balance-其它调度方案："><a class="header-anchor" href="#2、load-balance-其它调度方案：">¶</a>2、load-balance 其它调度方案：</h5><p>这里顺带介绍一下 nginx 的负载均衡模块支持的其它调度算法：</p><p>轮询（默认）：</p><blockquote><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。Weight 指定轮询权值，Weight 值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下</p></blockquote><p>ip_hash ：</p><blockquote><p>每个请求按访问 IP 的 hash 结果分配，这样来自同一个 IP 的访客固定访问一个后端服务器，有效解决了动态网页存在的 session 共享问题。当然如果这个节点不可用了，会发到下个节点，而此时没有 session 同步的话就注销掉了</p></blockquote><p>least_conn ：</p><blockquote><p>请求被发送到当前活跃连接最少的 realserver 上。会考虑 weight 的值</p></blockquote><p>url_hash：</p><blockquote><p>此方法按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx 本身是不支持 url_hash 的，如果需要使用这种调度算法，必须安装 Nginx 的 hash 软件包 nginx_upstream_hash</p></blockquote><p>fair：</p><blockquote><p>这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx 本身是不支持 fair 的，如果需要使用这种调度算法，必须下载 Nginx 的upstream_fair 模块</p></blockquote><h5 id="3、负载均衡与健康检查："><a class="header-anchor" href="#3、负载均衡与健康检查：">¶</a>3、负载均衡与健康检查：</h5><p>严格来说，nginx 自带是没有针对负载均衡后端节点的健康检查的，但是可以通过默认自带的 ngx_http_proxy_module 模块和 ngx_http_upstream_module 模块中的相关指令来完成当后端节点出现故障时，自动切换到下一个节点来提供访问</p><p>修改配置文件：（vim /usr/local/nginx-1.14/conf/nginx.config）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http模块下添加</span></span><br><span class="line">upstream backend &#123;</span><br><span class="line">        server 192.168.1.30:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">        server 192.168.1.40:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">        sticky;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># location模块添加</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br><span class="line">[root@nginx ~]<span class="comment"># curl 127.0.0.1</span></span><br><span class="line">apache1</span><br><span class="line">[root@nginx ~]<span class="comment"># curl 127.0.0.1</span></span><br><span class="line">apache2</span><br><span class="line"><span class="comment"># 访问nginx服务器，nginx就代理了后端两台apache服务，并进行轮询</span></span><br></pre></td></tr></table></figure><p>weight ：</p><blockquote><p>轮询权值也是可以用在 ip_hash 的，默认值为 1</p></blockquote><p>max_fails ：</p><blockquote><p>允许请求失败的次数，默认为 1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误</p></blockquote><p>fail_timeout ：</p><blockquote><p>有两层含义，一是在 10s 时间内最多容许 2 次失败；二是在经历了 2 次 失败以后，10s 时间内不分配请求到这台服务器</p></blockquote><h5 id="4、nginx的proxy缓存的使用"><a class="header-anchor" href="#4、nginx的proxy缓存的使用">¶</a>4、nginx的proxy缓存的使用</h5><p>缓存也就是将 js、css、image 等静态文件从后端服务器缓存到 nginx 指定的缓存目录下，既可以减轻后端服务器负担，也可以加快访问速度，但这样缓存及时清理成为了一个问题，所以需要 ngx_cache_purge 这个模块来在过期时间未到之前，手动清理缓存</p><p>proxy 模块中常用的指令是 proxy_pass 和 proxy_cache</p><p>nginx 的 web 缓存功能的主要是由 proxy_cache、fastcgi_cache 指令集和相关指令集完成， proxy_cache 指令负责反向代理缓存后端服务器的静态内容，fastcgi_cache 主要用来处理 FastCGI 动态进程缓存</p><p>在配置文件中添加修改：注：在添加文件前请查看文件中是否有，如果没有再添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    proxy_buffering on;</span><br><span class="line">    proxy_temp_path /usr/<span class="built_in">local</span>/nginx1.14/proxy_temp;</span><br><span class="line">    proxy_cache_path /usr/<span class="built_in">local</span>/nginx1.14/proxy_cache levels=1:2 keys_zone=my-cache:100m inactive=600m max_size=2g;</span><br><span class="line">    </span><br><span class="line">        location ~/purge(/.*) &#123;</span><br><span class="line">            allow 127.0.0.1;</span><br><span class="line">            allow 192.168.1.0/24;</span><br><span class="line">            deny all;</span><br><span class="line">            proxy_cache_purge my-cache <span class="variable">$host</span><span class="variable">$1</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_504;</span><br><span class="line">            proxy_cache my-cache;</span><br><span class="line">            add_header Nginx-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">            proxy_cache_valid 200 304 301 302 8h;</span><br><span class="line">            proxy_cache_valid 404 1m;</span><br><span class="line">            proxy_cache_valid any 1d;</span><br><span class="line">            proxy_cache_key <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>相关选项说明：</p><p>proxy_buffering on：</p><blockquote><p>代理的时候，开启或关闭缓冲后端服务器的响应</p><p>当开启缓冲时，nginx 尽可能快地从被代理的服务器接收响应，再将它存入缓冲区中</p></blockquote><p>proxy_temp_path：</p><blockquote><p>缓存临时目录。后端的响应并不直接返回客户端，而是先写到一个临 时文件中，然后被 rename 一下当做缓存放在 proxy_cache_path 。0.8.9 版本以后允许 temp 和 cache 两个目录在不同文件系统上（分区），然而为了减少性能损失还是建议把它们设成 一个文件系统上</p></blockquote><p>proxy_cache_path：</p><blockquote><p>设置缓存目录，目录里的文件名是 cache_key 的 MD5 值。 levels=1:2 keys_zone=my-cache:50m 表示采用 2 级目录结构，第一层目录只有一个字符，是 由levels=1:2设置，总共二层目录，子目录名字由二个字符组成。Web缓存区名称为my-cache， 内存缓存空间大小为 100MB，这个缓冲 zone 可以被多次使用。文件系统上看到的缓存文件 名类似于 /usr/local/nginx1.14/proxy_cache/c/29/b7f54b2df7773722d382f4809d65029c 。 inactive=600 max_size=2g 表示 600 分钟没有被访问的内容自动清除，硬盘最大缓存空间为 2GB，超过这个大学将清除最近最少使用的数据</p></blockquote><p>proxy_cache：</p><blockquote><p>用前面定义的缓存区 my-cache</p></blockquote><p>proxy_cache_key：</p><blockquote><p>定义如何生成缓存的键，设置 web 缓存的 key 值，nginx 根据 key 值 md5 哈希存储缓存</p></blockquote><p>proxy_cache_valid：</p><blockquote><p>为不同的响应状态码设置不同的缓存时间，比如 200、302 等正常结果 可以缓存的时间长点，而 404、500 等缓存时间设置短一些，这个时间到了文件就会过期， 而不论是否刚被访问过</p></blockquote><p>add_header：</p><blockquote><p>指令来设置 response header, 语法: add_header name value;</p></blockquote><p>$upstream_cache_status：</p><blockquote><p>这个变量来显示缓存的状态，我们可以在配置中添加一个 http 头来显示这一状态</p></blockquote><p>$upstream_cache_status 包含以下几种状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MISS 未命中，请求被传送到后端</span><br><span class="line"></span><br><span class="line">HIT 缓存命中</span><br><span class="line"></span><br><span class="line">EXPIRED 缓存已经过期请求被传送到后端 </span><br><span class="line"></span><br><span class="line">UPDATING 正在更新缓存，将使用旧的应答 </span><br><span class="line"></span><br><span class="line">STALE 后端将得到过期的应答</span><br></pre></td></tr></table></figure><p>expires：</p><blockquote><p>在响应头里设置 Expires:或 Cache-Control:max-age，返回给客户端的浏览器缓存失 效时间</p></blockquote><h5 id="5、访问测试"><a class="header-anchor" href="#5、访问测试">¶</a>5、访问测试<img data-src="https://img-blog.csdnimg.cn/20200611132524563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></h5><p>查看这个文件，里面就有了缓存文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ll /usr/local/nginx1.14/proxy_cache/d/a0/</span></span><br><span class="line">总用量 4</span><br><span class="line">-rw-------. 1 nginx nginx 622 6月  11 11:22 d5bd6fad23957bb6e6023525d18aba0d</span><br></pre></td></tr></table></figure><p>如果在缓存时间之内需要更新被缓存的静态文件怎么办呢，这时候就需要手动来清除缓存了</p><p>浏览器访问 192.168.1.20/purge/来清除缓存</p><p>备注：</p><ul><li>purge 是 ngx_cache_pure 模块指令</li><li>index.html是要清除的缓存文件 URL 路径<br><img data-src="https://img-blog.csdnimg.cn/20200611132430847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></li></ul><p>缓存数据已经没有了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ll /usr/local/nginx1.14/proxy_cache/d/a0/</span></span><br><span class="line">总用量 0</span><br></pre></td></tr></table></figure><h4 id="六、开启gzip压缩输出，减少网络传输"><a class="header-anchor" href="#六、开启gzip压缩输出，减少网络传输">¶</a>六、开启gzip压缩输出，减少网络传输</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">     gzip_vary on;</span><br><span class="line">     client_max_body_size   10m;</span><br><span class="line">     client_body_buffer_size   128k;</span><br><span class="line">     proxy_connect_timeout   75;</span><br><span class="line">     proxy_send_timeout   75;</span><br><span class="line">     proxy_read_timeout   75;</span><br><span class="line">     proxy_buffer_size   4k;</span><br><span class="line">     proxy_buffers   4 32k;</span><br><span class="line">     proxy_busy_buffers_size   64k;</span><br><span class="line">     proxy_temp_file_write_size  64k;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>相关解释：</p><p>proxy_busy_buffers_size 64k：</p><blockquote><p>高负荷下缓冲大小（默认大小是 proxy_buffers 指令设置单块缓冲大小的 2 倍）</p></blockquote><p>proxy_temp_file_write_size 64k ：</p><blockquote><p>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小</p></blockquote><p>gzip on :</p><blockquote><p>开启 gzip 压缩输出，减少网络传输</p></blockquote><p>gzip_min_length 1k：</p><blockquote><p>置允许压缩的页面最小字节数，页面字节数从 header 头得 content-length 中进行获取。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大</p></blockquote><p>gzip_buffers 16 8k：</p><blockquote><p>设置系统获取几个单位的缓存用于存储 gzip 的压缩结果数据流。16 8k 代表以8k 为单位，按照原始数据大小以 8k 为单位的16倍申请内存。如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储 gzip 压缩结果</p></blockquote><p>gzip_http_version 1.1：</p><blockquote><p>用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户 就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并 期望也       启用 Gzip 压缩的话，由于末端通信是 http/1.1，故请设置为 1.1</p></blockquote><p>gzip_comp_level 6：</p><blockquote><p>gzip 压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理速度最 慢(传输快但比较消耗 cpu)</p></blockquote><p>gzip_types：</p><blockquote><p>匹配 mime 类型进行压缩，无论是否指定”text/html”类型总是会被压缩的。 默认值: gzip_types text/html (默认不对 js/css 文件进行压缩)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">压缩类型，匹配 MIME 类型进行压缩</span><br><span class="line"></span><br><span class="line">不能用通配符 text&#x2F;*</span><br><span class="line"></span><br><span class="line">(无论是否指定)text&#x2F;html 默认已经压缩 </span><br><span class="line"></span><br><span class="line">设置哪压缩种文本文件可参考 conf&#x2F;mime.types</span><br></pre></td></tr></table></figure><p>gzip_proxied any：</p><blockquote><p>Nginx 作为反向代理的时候启用，根据某些请求和应答来决定是否在对 代理请求的应答启用 gzip 压缩，是否压缩取决于请求头中的“Via”字段，指令中可以同时指 定多个不同的参数</p></blockquote><p>意义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">off – 关闭所有的代理结果数据的压缩</span><br><span class="line"></span><br><span class="line">expired – 启用压缩，如果 header 头中包含 “Expires” 头信息</span><br><span class="line"></span><br><span class="line">no-cache – 启用压缩，如果 header 头中包含 “Cache-Control:no-cache” 头信息</span><br><span class="line"></span><br><span class="line">no-store – 启用压缩，如果 header 头中包含 “Cache-Control:no-store” 头信息</span><br><span class="line"></span><br><span class="line">private – 启用压缩，如果 header 头中包含 “Cache-Control:private” 头信息</span><br><span class="line"></span><br><span class="line">no_last_modified – 启用压缩,如果 header 头中不包含 “Last-Modified” 头信息</span><br><span class="line"></span><br><span class="line">no_etag – 启用压缩 ,如果 header 头中不包含 “ETag” 头信息</span><br><span class="line"></span><br><span class="line">auth – 启用压缩 , 如果 header 头中包含 “Authorization” 头信息</span><br><span class="line"></span><br><span class="line">any – 无条件启用压缩</span><br></pre></td></tr></table></figure><p>gzip_vary on：</p><blockquote><p>和 http 头有关系，加个 vary 头，给代理服务器用的，有的浏览器支持压缩，</p><p>有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的 HTTP 头来判断，是否需要压缩</p></blockquote><p>将httpd服务的网页制造大点，访问测试：<br><img data-src="https://img-blog.csdnimg.cn/20200611132603607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="七、开启br压缩"><a class="header-anchor" href="#七、开启br压缩">¶</a>七、开启br压缩</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tar zxf ngx_brotli.tar.gz -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd /usr/src/nginx-1.14.0/</span></span><br></pre></td></tr></table></figure><h5 id="1、使用nginx-V查看编译时的信息"><a class="header-anchor" href="#1、使用nginx-V查看编译时的信息">¶</a>1、使用nginx -V查看编译时的信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/1.14.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx1.14 --user=nginx --group=nginx --with-http_stub_status_module --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client --http-proxy-temp-path=/var/tmp/nginx/proxy --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --with-http_flv_module --add-module=/usr/src/nginx-sticky-module --add-module=/usr/src/ngx_cache_purge-2.3</span><br></pre></td></tr></table></figure><h5 id="2、进行编译"><a class="header-anchor" href="#2、进行编译">¶</a>2、进行编译</h5><p>最后加上<code>--add-module=/usr/src/ngx_brotli</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># ./configure --prefix=/usr/local/nginx1.14 --user=nginx --group=nginx --with-http_stub_status_module --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client --http-proxy-temp-path=/var/tmp/nginx/proxy --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --with-http_flv_module --add-module=/usr/src/nginx-sticky-module --add-module=/usr/src/ngx_cache_purge-2.3 --add-module=/usr/src/ngx_brotli</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># make # 不要make install</span></span><br></pre></td></tr></table></figure><h5 id="3、将新的nginx命令文件替换旧的"><a class="header-anchor" href="#3、将新的nginx命令文件替换旧的">¶</a>3、将新的nginx命令文件替换旧的</h5><p>替换前先做个备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># mv /usr/local/nginx1.14/sbin/nginx /usr/local/nginx1.14/sbin/nginx.bak</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># cp objs/nginx /usr/local/nginx1.14/sbin/</span></span><br></pre></td></tr></table></figure><h5 id="4、重启nginx"><a class="header-anchor" href="#4、重启nginx">¶</a>4、重启nginx</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx -s stop</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx</span></span><br></pre></td></tr></table></figure><h5 id="5、添加配置文件内容"><a class="header-anchor" href="#5、添加配置文件内容">¶</a>5、添加配置文件内容</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/local/nginx1.14/conf/nginx.conf</span></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    brotli on;</span><br><span class="line">    brotli_types text/plain text/css text/xml application/xml application/json ;</span><br><span class="line">    brotli_static off; </span><br><span class="line">    brotli_comp_level 11;</span><br><span class="line">    brotli_buffers 16 8k;</span><br><span class="line">    brotli_window 512k;</span><br><span class="line">    brotli_min_length 20;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>相关参数解释：</p><p>brotli_static off;</p><blockquote><p>否允许查找预处理好的、以.br结尾的压缩 件,可inyon off always</p></blockquote><p>brotli_comp_level 11;</p><blockquote><p>压缩级别</p></blockquote><p>brotli_buffers 16 8k;</p><blockquote><p>读取缓冲区数量和大小</p></blockquote><p>brotli_window 512k;</p><blockquote><p>滑动窗口大小</p></blockquote><p>brotli_min_length 20;</p><blockquote><p>指定压缩数据的最小字节</p></blockquote><h5 id="6、访问测试"><a class="header-anchor" href="#6、访问测试">¶</a>6、访问测试</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># curl -I -H "Accept-Encoding: gzip, deflate,br" 127.0.0.1</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.14.0</span><br><span class="line">Date: Thu, 11 Jun 2020 04:01:16 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Set-Cookie: route=617ff1b025324ae95a8a4e10c70854c9; Path=/</span><br><span class="line">Last-Modified: Thu, 11 Jun 2020 03:46:40 GMT</span><br><span class="line">ETag: W/<span class="string">"1cb0-5a7c6cef388ea"</span></span><br><span class="line">Nginx-Cache: MISS</span><br><span class="line">Content-Encoding: br</span><br></pre></td></tr></table></figure><h4 id="八、nginx完整配置文件"><a class="header-anchor" href="#八、nginx完整配置文件">¶</a>八、nginx完整配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># cat /usr/local/nginx1.14/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">user  nginx nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">upstream backend &#123;</span><br><span class="line">        server 192.168.1.30:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">server 192.168.1.40:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">        sticky;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    proxy_buffering on;</span><br><span class="line">    proxy_temp_path /usr/<span class="built_in">local</span>/nginx1.14/proxy_temp;</span><br><span class="line">    proxy_cache_path /usr/<span class="built_in">local</span>/nginx1.14/proxy_cache levels=1:2 keys_zone=my-cache:100m inactive=600m max_size=2g;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    brotli on;</span><br><span class="line">    brotli_types text/plain text/css text/xml application/xml application/json ;</span><br><span class="line">    brotli_static off; </span><br><span class="line">    brotli_comp_level 11;</span><br><span class="line">    brotli_buffers 16 8k;</span><br><span class="line">    brotli_window 512k;</span><br><span class="line">    brotli_min_length 20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">     gzip_vary on;</span><br><span class="line">     client_max_body_size   10m;</span><br><span class="line">     client_body_buffer_size   128k;</span><br><span class="line">     proxy_connect_timeout   75;</span><br><span class="line">     proxy_send_timeout   75;</span><br><span class="line">     proxy_read_timeout   75;</span><br><span class="line">     proxy_buffer_size   4k;</span><br><span class="line">     proxy_buffers   4 32k;</span><br><span class="line">     proxy_busy_buffers_size   64k;</span><br><span class="line">     proxy_temp_file_write_size  64k;</span><br><span class="line">     <span class="comment">#proxy_buffering on;</span></span><br><span class="line">     <span class="comment">#proxy_temp_path /usr/local/nginx1.14/proxy_temp;</span></span><br><span class="line">     <span class="comment">#proxy_cache_path /usr/local/nginx1.14/proxy_cache levels=1:2 keys_zone=my-cache:100m inactive=600m max_size=2g;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">location ~/purge(/.*) &#123;</span><br><span class="line">    allow 127.0.0.1;</span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">    proxy_cache_purge my-cache <span class="variable">$host</span><span class="variable">$1</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">    proxy_pass http://backend;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_next_upstream error timeout invalid_header http_500 http_502 http_504;</span><br><span class="line">    proxy_cache my-cache;</span><br><span class="line">    add_header Nginx-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">    proxy_cache_valid 200 304 301 302 8h;</span><br><span class="line">    proxy_cache_valid 404 1m;</span><br><span class="line">    proxy_cache_valid any 1d;</span><br><span class="line">    proxy_cache_key <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /index.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /auth &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">    auth_basic  <span class="string">"提示语句"</span>;</span><br><span class="line">    auth_basic_user_file  /usr/<span class="built_in">local</span>/nginx1.14/nginx.passwd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="九、扩展知识"><a class="header-anchor" href="#九、扩展知识">¶</a>九、扩展知识</h4><p>nginx 修改版本等信息</p><h5 id="1、更改ngnix显示版本"><a class="header-anchor" href="#1、更改ngnix显示版本">¶</a>1、更改ngnix显示版本</h5><p>编译前编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/src/nginx-1.14.0/src/core/nginx.h</span></span><br><span class="line"><span class="comment">#define nginx_version</span></span><br><span class="line"><span class="comment">#define NGINX_VERSION</span></span><br><span class="line"><span class="comment">#define NGINX_VER</span></span><br><span class="line"><span class="comment">#define NGINX_VAR</span></span><br></pre></td></tr></table></figure><p>修改上面的信息，即可更改 nginx 显示版本</p><h5 id="2、自定义信息"><a class="header-anchor" href="#2、自定义信息">¶</a>2、自定义信息</h5><p>编译前编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/src/nginx-1.14.0/src/http/ngx_http_special_response.c</span></span><br><span class="line">static u_char ngx_http_error_full_tail[] =</span><br><span class="line">static u_char ngx_http_error_tail[] =</span><br><span class="line">[root@nginx ~]<span class="comment"># vim /usr/src/nginx-1.14.0/src/http/ngx_http_header_filter_module.c</span></span><br><span class="line">static char ngx_http_server_string[]=</span><br></pre></td></tr></table></figure><p>修改上面的信息为你自己的</p><h5 id="3、修改nginx版本名称"><a class="header-anchor" href="#3、修改nginx版本名称">¶</a>3、修改nginx版本名称</h5><p>编译完成后修改<code>/usr/local/nginx1.14/conf/</code>目录下面</p><p><code>fastcgi.conf</code>、<code>fastcgi.conf.default</code>、<code>fastcgi_params</code>、<code>fastcgi_params.default</code>这四个文件里面的版本名称</p><p>查看 nginx 版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># nginx -v</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache之FCGI模式部署LAMP</title>
    <link href="https://pdxblog.top/Apache%E4%B9%8BFCGI%E6%A8%A1%E5%BC%8F%E9%83%A8%E7%BD%B2LAMP.html"/>
    <id>https://pdxblog.top/Apache%E4%B9%8BFCGI%E6%A8%A1%E5%BC%8F%E9%83%A8%E7%BD%B2LAMP.html</id>
    <published>2020-06-09T16:00:00.000Z</published>
    <updated>2020-06-10T10:56:08.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FCGI模式编译安装-LAMP-xcache"><a class="header-anchor" href="#FCGI模式编译安装-LAMP-xcache">¶</a>FCGI模式编译安装 LAMP+xcache</h3><p>php 的工作模式：</p><blockquote><p>php 在 lamp 环境下共有三种工作模式：CGI 模式、apache 模块、FastCGI 模式。CGI 模式下 运行 PHP，性能不是很好。作为 apache 的模块方式运行，在以前编译安装 lamp 已 经介绍过了。FastCGI 的方式和 apache 模块的不同点在于：FastCGI 方式 PHP 是一处独立的 进程，所有 PHP 子进程都由 PHP 的一个叫作 php-fpm 的组件负责管理；而 apache 模块化方 式运行的 PHP，则是 apache 负责调用 PHP 完成工作。PHP 的 FastCGI 方式性能要比 apache 模块化方式强很多，今天我们以 FastCGI 方式编译安装 lamp</p></blockquote><p>FastCGI 工作机制：</p><blockquote><p>首先客户端发起请求，请求分为 2 种，一种是静态请求它可以直接由 Apache 直接响应返回； 另一种是动态的请求，如其中包含中 php 或者 Perl 这种脚本解释性语言，则由 Apache 服务 器通过 fastcgi 协议调用 php 服务器执行并返回给Apache由 Apache返回解释执行后的结果， 如果这个过程中涉及到对数据的操作，此时 php 服务器还会还会通过 mysql 协议调用 mysql 服务器<br><img data-src="https://img-blog.csdnimg.cn/20200610184252757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p></blockquote><p>编译环境及各软件版本：</p><table><thead><tr><th>Linux</th><th>Web服务器</th><th>PHP</th><th>Mysql数据库</th><th>xcache</th></tr></thead><tbody><tr><td><strong>Centos7.5</strong></td><td><strong>Httpd-2.4.23</strong></td><td><strong>php-5.6.27</strong></td><td><strong>Mysql5.7</strong></td><td><strong>xcache-3.1.0</strong></td></tr></tbody></table><p>本文用到的<a href="https://pan.baidu.com/s/1b6dvnukVS0BBnP4Y-aeBrg" target="_blank" rel="noopener">软件连接</a></p><p>提取码：vzsu</p><p>主机规划</p><p>至少 3 台主机，操作系统都是 centos7.5.网段在 192.168.1.0/24 网关 192.168.1.250</p><p>分配如下：</p><p>1台httpd服务器（192.168.1.70）</p><p>1台php服务器（192.168.1.50）</p><p>1台mysql服务器（192.168.1.40）</p><h4 id="一、编译安装-LAMP"><a class="header-anchor" href="#一、编译安装-LAMP">¶</a>一、编译安装 LAMP</h4><p>编译安装 apache(请参考前面 <a href="https://blog.csdn.net/weixin_45636702/article/details/106614543" target="_blank" rel="noopener">apache 的安装</a>）</p><p>MySQL直接使用脚本意一键安装</p><h5 id="FastCGI-方式安装-php"><a class="header-anchor" href="#FastCGI-方式安装-php">¶</a>FastCGI 方式安装 php</h5><h6 id="1、解决依赖关系"><a class="header-anchor" href="#1、解决依赖关系">¶</a>1、解决依赖关系</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># yum -y install libxml2-devel lzip2-devel libcurl-devel libmcrypt-devel openssl-devel bzip2-devel</span></span><br></pre></td></tr></table></figure><p>安装libmcrypt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># tar zxf libmcrypt-2.5.7.tar.gz </span></span><br><span class="line">[root@phpserver ~]<span class="comment"># cd libmcrypt-2.5.7/</span></span><br><span class="line">[root@phpserver libmcrypt-2.5.7]<span class="comment"># ./configure --prefix=/usr/local/libmcrypt &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h6 id="2、编译安装php"><a class="header-anchor" href="#2、编译安装php">¶</a>2、编译安装php</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># tar zxf php-5.6.27.tar.gz</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># cd  php-5.6.27/</span></span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># ./configure --prefix=/usr/local/php5.6 --with-mysql=mysqlnd \</span></span><br><span class="line">&gt;  --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-openssl --<span class="built_in">enable</span>-fpm \</span><br><span class="line">&gt;  --<span class="built_in">enable</span>-sockets --<span class="built_in">enable</span>-sysvshm --<span class="built_in">enable</span>-mbstring --with-freetype-dir --with-jpeg-dir \</span><br><span class="line">&gt;  --with-png-dir --with-zlib --with-libxml-dir=/usr --<span class="built_in">enable</span>-xml --with-mhash \</span><br><span class="line">&gt;  --with-mcrypt=/usr/<span class="built_in">local</span>/libmcrypt --with-config-file-path=/etc \</span><br><span class="line">&gt;  --with-config-file-scan-dir=/etc/php.d --with-bz2--<span class="built_in">enable</span>-maintainer-zts</span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>相关选项解释：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/php5.6：安装位置</span><br><span class="line"></span><br><span class="line">--with-mysql=mysqlnd：支持 mysql</span><br><span class="line"></span><br><span class="line">--with-pdo-mysql=mysqlnd：支持 pdo 模块</span><br><span class="line"></span><br><span class="line">--with-mysqli=mysqlnd：支持 mysqli 模块</span><br><span class="line"></span><br><span class="line">注：上面的三选项的作用：数据库与 php 不在一个服务器上，指定此种方式，安装数据库 连接驱动</span><br><span class="line"></span><br><span class="line">--with-openssl：支持 openssl 模块</span><br><span class="line"></span><br><span class="line">--enable-fpm：支持 fpm 模式</span><br><span class="line"></span><br><span class="line">--enable-sockets：启用 socket 支持</span><br><span class="line"></span><br><span class="line">--enable-sysvshm：启用系统共享内存支持</span><br><span class="line"></span><br><span class="line">--enable-mbstring：多字节字串、像我们的中文就是多字节字串</span><br><span class="line"></span><br><span class="line">--with-freetype-dir：支持 freetype、就要装 freetype-devel、跟字体相关的、字体解析工具</span><br><span class="line"></span><br><span class="line">--with-jpeg-dir</span><br><span class="line"></span><br><span class="line">--with-png-dir</span><br><span class="line"></span><br><span class="line">注：上面的二选项的作用：处理 jpeg、png 图片的、php 可以动态生成 jpeg 图片</span><br><span class="line"></span><br><span class="line">--with-zlib：是个压缩库、在互联网传输时用来压缩传输的</span><br><span class="line"></span><br><span class="line">--with-libxml-dir=/usr：这个 libxml 是用来解析 xml 的、指定/usr 下</span><br><span class="line"></span><br><span class="line">--enable-xml：支持 xml 的</span><br><span class="line"></span><br><span class="line">--with-mhash：支持 mhash</span><br><span class="line"></span><br><span class="line">--with-mcrypt=/usr/local/libmcrypt：libmcrypt-devel 这个程序包所指定的</span><br><span class="line"></span><br><span class="line">--with-config-file-path=/etc：指定配置文件的存放路径的</span><br><span class="line"></span><br><span class="line">--with-config-file-scan-dir=/etc/php.d：配置文件扫描路径</span><br><span class="line"></span><br><span class="line">--with-bz2：支持 BZip2</span><br><span class="line"></span><br><span class="line">为了支持 apache 的 worker 或 event 这两个 MPM，编译时使用了--enable-maintainer-zts 选项</span><br></pre></td></tr></table></figure><p>如果使用 PHP5.3 以上版本，为了链接 MySQL 数据库，可以指定 mysqlnd，这样在本机就不 需要先安装 MySQL 或 MySQL 开发包了。mysqlnd 从 php 5.3 开始可用，可以编译时绑定到它 （而不用和具体的 MySQL 客户端库绑定形成依赖），但从 PHP 5.4 开始它就是默认设置了</p><h6 id="3、提供php配置文件"><a class="header-anchor" href="#3、提供php配置文件">¶</a>3、提供php配置文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver php-5.6.27]<span class="comment"># cp php.ini-production /etc/php.ini</span></span><br></pre></td></tr></table></figure><h6 id="4、为php-fpm提供脚本"><a class="header-anchor" href="#4、为php-fpm提供脚本">¶</a>4、为php-fpm提供脚本</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver php-5.6.27]<span class="comment"># cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span></span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># chmod +x /etc/init.d/php-fpm </span></span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># chkconfig --add php-fpm</span></span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># chkconfig php-fpm on</span></span><br></pre></td></tr></table></figure><h6 id="5、提供php-fpm配置文件并编辑"><a class="header-anchor" href="#5、提供php-fpm配置文件并编辑">¶</a>5、提供php-fpm配置文件并编辑</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># cp /usr/local/php5.6/etc/php-fpm.conf.default /usr/local/php5.6/etc/php-fpm.conf</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># vim /usr/local/php5.6/etc/php-fpm.conf</span></span><br><span class="line">修改内容如下：</span><br><span class="line">pid = run/php-fpm.pid</span><br><span class="line">listen = 192.168.1.50:9000</span><br><span class="line">pm.max_children = 50</span><br><span class="line">pm.start_servers = 5</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 35</span><br></pre></td></tr></table></figure><p>启动php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># service php-fpm start</span></span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># netstat -anpt | grep php-fpm</span></span><br><span class="line">tcp        0      0 192.168.1.50:9000       0.0.0.0:*               LISTEN      114068/php-fpm: mas</span><br><span class="line">[root@phpserver ~]<span class="comment"># firewall-cmd --permanent --add-port=9000/tcp</span></span><br><span class="line">success</span><br><span class="line">[root@phpserver ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">Success</span><br></pre></td></tr></table></figure><p>在该主机上新建虚拟主机目录用于存放网页文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># mkdir -p /var/www/benet</span></span><br></pre></td></tr></table></figure><p>至此 php 安装配置完毕，下面配置 apache 通过 fastcgi 协议调用 php</p><h6 id="6、配置-apache-切换到-apache-主机上操作"><a class="header-anchor" href="#6、配置-apache-切换到-apache-主机上操作">¶</a>6、配置 apache(切换到 apache 主机上操作)</h6><p>在 Apache2.4 以后已经专门有一个模块针对 FastCGI 的实现，此模块为 mod_proxy_fcgi.so， 它其实是作为 mod_proxy.so 模块的扩充，因此，这两个模块都要加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line">去掉一下注释</span><br><span class="line">LoadModule proxy_module modules/mod_proxy.so</span><br><span class="line">LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so</span><br><span class="line">[root@apache ~]<span class="comment"># apachectl restart</span></span><br><span class="line">[root@apache ~]<span class="comment"># apachectl -M | grep proxy</span></span><br><span class="line"> proxy_module (shared)</span><br><span class="line"> proxy_fcgi_module (shared)</span><br></pre></td></tr></table></figure><p>建立一个目录作为虚拟主机的家目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># mkdir -p /var/www/benet</span></span><br></pre></td></tr></table></figure><p>编辑主配置文件 httpd.conf，开启虚拟主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line">启用 Include conf/extra/httpd-vhosts.conf</span><br><span class="line">Include conf/extra/httpd-vhosts.conf <span class="comment"># 去掉注释</span></span><br><span class="line">同时定位 AddType；添加下面两行：让 apache 能识别 php 格式的页面</span><br><span class="line">    AddType application/x-httpd-php .php</span><br><span class="line">    AddType application/x-httpd-php-source .phps</span><br><span class="line">并且定位至 DirectoryIndex：支持 php 格式的主页</span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">添加 index.php（最好添加在最前面）</span><br></pre></td></tr></table></figure><p>配置虚拟主机支持使用 fcgi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /usr/local/http-2.4.23/conf/extra/httpd-vhosts.conf</span></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line"> ServerAdmin webmaster@benet.com</span><br><span class="line"> DocumentRoot <span class="string">"/var/www/benet"</span></span><br><span class="line"> ServerName www.benet.com</span><br><span class="line"> ServerAlias benet.com</span><br><span class="line"> ErrorLog <span class="string">"logs/benet.com-error_log"</span></span><br><span class="line"> CustomLog <span class="string">"logs/benet.com-access_log"</span> common</span><br><span class="line"> ProxyRequests Off</span><br><span class="line">ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://192.168.1.50:9000/var/www/benet/<span class="variable">$1</span></span><br><span class="line"> <span class="comment">#&lt;LocationMatch "^(.*\.php(/.*)?)$"&gt;</span></span><br><span class="line"> <span class="comment"># ProxyPass fcgi://192.168.1.50:9000/var/www/benet</span></span><br><span class="line"> <span class="comment">#&lt;/LocationMatch&gt;</span></span><br><span class="line">&lt;Directory <span class="string">"/var/www/benet"</span>&gt;</span><br><span class="line"> Options FollowSymLinks</span><br><span class="line"> AllowOverride None</span><br><span class="line"> Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ProxyRequests off：关闭正向代理</span><br><span class="line"></span><br><span class="line">ProxyPassMatch：把以.php 结尾的文件请求发送到 php-fpm 进程，php-fpm 至少需要知道运 行的目录和 URI，所以这里直接在 fcgi://192.168.31.141:9000 后指明了这两个参数，其它的 参数的传递已经被 mod_proxy_fcgi.so 进行了封装，不需要手动指定</span><br><span class="line"></span><br><span class="line">特别注意的是，目录需要与中的 DocumentRoot 后的路径一致</span><br><span class="line"></span><br><span class="line">ProxyPassMatch</span><br><span class="line"></span><br><span class="line">只有满足特定正则模式的内容才会匹配并执行此规则，这里的模式是，^/(.*<span class="tag">\<span class="name">.</span></span>php(/.*)?)<span class="formula">$ 从网站（虚拟主机的根目录开始，匹配任何以 .php 结尾，或者在 .php 之后 紧跟一个 / 再跟别的内容的路径</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">^ (caret) 和 $</span> (dollar)标志要匹配的路径的开始和结束</span><br><span class="line"></span><br><span class="line">( )括号里的内容可以用 <span class="formula">$1 来表示，以方便后面引用它</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">fcgi:// 192.168.1.50:9000 通过 mod_proxy_fcgi 来转发的代理，使用 fastCGI 协议，转到 PHP-FPM 监听的端口</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">/path/to/your/documentroot/</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">非常重要！必须与虚拟主机的路径匹配，且必须是对应 php 文件在操作系统中的绝对路径。 否则会找不到文件</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">$</span>1 可以从原始请求扩展成整个请求路径的变量，这里指代前面( ) 里面匹配的那个路径（uri）</span><br></pre></td></tr></table></figure><p>补充：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache httpd 2.4 以前的版本中，要么把 PHP 作为 Apache 的模块运行，要么添加一个第 三方模块支持 PHP-FPM 实现</span><br></pre></td></tr></table></figure><h6 id="7、测试-LAMP-环境："><a class="header-anchor" href="#7、测试-LAMP-环境：">¶</a>7、测试 LAMP 环境：</h6><p>在 mysql 主机上创建用于 php 服务器连接的 mysql 账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to testuser@&#39;%&#39; identified by &#39;123&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>注意防火墙要允许 mysql 连接</p><p>在 php 服务器上的/var/www/benet 目录下创建.php 的测试页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># cat /var/www/benet/index.php </span></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">[root@phpserver ~]<span class="comment"># cat /var/www/benet/test1.php </span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$link</span>=mysql_connect(<span class="string">'192.168.1.40'</span>,<span class="string">'testuser'</span>,<span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$link</span>)<span class="built_in">echo</span> <span class="string">"connection success......"</span>;</span><br><span class="line">mysql_close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>测试访问php测试页<br><img data-src="https://img-blog.csdnimg.cn/20200610184525405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br><img data-src="https://img-blog.csdnimg.cn/20200610184606798.png" alt><br>看到上面两个测试页说明 apache、php、mysql 之间可以协同工作了</p><h4 id="二、压力测试"><a class="header-anchor" href="#二、压力测试">¶</a>二、压力测试</h4><p>网站性能压力测试是服务器网站性能调优过程中必不可缺少的一环。只有让服务器处在高压 情况下，才能真正体现出软件、硬件等各种设置不当所暴露出的问题</p><p>性能测试工具目前最常见的有以下几种：ab、http_load、webbench、siege。今天我们专门 来介绍 ab</p><p>ab 是 apache 自带的压力测试工具。ab 非常实用，它不仅可以对 apache 服务器进行网站访 问压力测试，也可以对或其它类型的服务器进行压力测试。比如 nginx、tomcat、IIS 等</p><p>下面我们开始介绍有关 ab 命令的使用：</p><ol><li>ab 的原理</li><li>ab 的安装</li><li>ab 参数说明</li><li>ab 性能指标</li><li>ab 实际使用</li><li>测试 nginx 性能</li></ol><h5 id="1）ab的原理"><a class="header-anchor" href="#1）ab的原理">¶</a>1）ab的原理</h5><p>ab 是 apachebench 命令的缩写</p><p>ab 的原理：</p><p>ab 命令会创建多个并发访问线程，模拟多个访问者同时对某一 URL 地址进行访 问。它的测试目标是基于 URL 的，因此，它既可以用来测试 apache 的负载压力，也可以测 试 nginx、lighthttp、tomcat、IIS 等其它 Web 服务器的压力</p><p>ab 命令对发出负载的计算机要求很低，它既不会占用很高 CPU，也不会占用很多内存。但 却会给目标服务器造成巨大的负载，其原理类似 CC 攻击。自己测试使用也需要注意，否则 一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机</p><h5 id="2）ab的安装"><a class="header-anchor" href="#2）ab的安装">¶</a>2）ab的安装</h5><p>ab 的安装非常简单，如果是源码安装 apache 的话，那就更简单了。apache 安装完毕后 ab 命令存放在 apache 安装目录的 bin 目录下。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;http-2.4.23&#x2F;bin&#x2F;ab</span><br></pre></td></tr></table></figure><p>如果 apache 是通过 yum 的 RPM 包方式安装的话，ab 命令默认存放在/usr/bin 目录下。如 下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ab</span><br></pre></td></tr></table></figure><p>注意：如果不想安装 apache 但是又想使用 ab 命令的话，我们可以直接安装 apache 的工具 包 httpd-tools。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br></pre></td></tr></table></figure><p>查看 ab 是否安装成功，可以切换到上述目录下，使用 ab –V 命令进行检测。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># /usr/local/http-2.4.23/bin/ab -V</span></span><br></pre></td></tr></table></figure><p>如果ab -V命令出错，可以export LD_LIBRARY_PATH=&quot;/usr/local/openssl/lib/&quot;，就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># export LD_LIBRARY_PATH="/usr/local/openssl/lib/"</span></span><br><span class="line">[root@apache ~]<span class="comment"># ab -V</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br></pre></td></tr></table></figure><h5 id="3）ab参数说明"><a class="header-anchor" href="#3）ab参数说明">¶</a>3）ab参数说明</h5><p>有关 ab 命令的使用，我们可以通过帮助命令进行查看。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ab --help</span></span><br></pre></td></tr></table></figure><p>下面我们对这些参数，进行相关说明。如下：</p><p>n：在测试会话中所执行的请求个数(即总请求数)</p><p>-c：一次产生的请求个数（即并发用户数）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ab -c 500 -n 10000 http://192.168.1.70/index.html</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.70 (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache</span><br><span class="line">Server Hostname:        192.168.1.70</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.html </span><br><span class="line">Document Length:        208 bytes </span><br><span class="line"></span><br><span class="line">Concurrency Level:      500 </span><br><span class="line">Time taken <span class="keyword">for</span> tests:   25.787 seconds </span><br><span class="line">Complete requests:      10000 </span><br><span class="line">Failed requests:        4 </span><br><span class="line">   (Connect: 0, Receive: 0, Length: 4, Exceptions: 0)</span><br><span class="line">Non-2xx responses:      10000</span><br><span class="line">Total transferred:      3720000 bytes <span class="comment">#</span></span><br><span class="line">HTML transferred:       2080000 bytes </span><br><span class="line">Requests per second:    387.80 [<span class="comment">#/sec] (mean) </span></span><br><span class="line">Time per request:       1289.329 [ms] (mean) </span><br><span class="line">Time per request:       2.579 [ms] (mean, across all concurrent requests) </span><br><span class="line">Transfer rate:          140.88 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1  31.7      0    3008</span><br><span class="line">Processing:     2  302 1687.9      9   25773</span><br><span class="line">Waiting:        2  294 1641.2      9   25773</span><br><span class="line">Total:          6  303 1689.6      9   25781</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      9</span><br><span class="line">  66%     10</span><br><span class="line">  75%     10</span><br><span class="line">  80%     10</span><br><span class="line">  90%     11</span><br><span class="line">  95%    939</span><br><span class="line">  98%   6460</span><br><span class="line">  99%  12908</span><br><span class="line"> 100%  25781 (longest request)</span><br></pre></td></tr></table></figure><p>Document Path:          /index.html ：</p><blockquote><p>请求的资源</p></blockquote><p>Document Length:        208 bytes ：</p><blockquote><p>响应数据的正文长度</p></blockquote><p>Concurrency Level:      500 ：</p><blockquote><p>并发个数（并发用户数）</p></blockquote><p>Time taken for tests:   25.787 seconds ：</p><blockquote><p>所有这些请求处理完成所花费的时间</p></blockquote><p>Complete requests:      10000 ：</p><blockquote><p>完成请求数</p></blockquote><p>Failed requests:        4 ：</p><blockquote><p>失败的请求数</p></blockquote><p>Total transferred:      3720000 bytes ：</p><blockquote><p>表示所有请求的响应数据长度总和，包括每个 HTTP响应数据的头信息和正文数据的长度。注意这里不包括 HTTP 请求数据的长度，仅仅为 web服务器流向用户 PC 的应用层数据总长度</p></blockquote><p>HTML transferred:       2080000 bytes ：</p><blockquote><p>表示所有请求的响应数据中正文数据的总和，也就是减去了 Total transferred 中 HTTP 响应数据中的头信息的长度</p></blockquote><p>Requests per second:    387.80 [：/sec] (mean) ：</p><blockquote><p>吞吐量-每秒请求数</p><p>计算公式：Complete requests/Time taken for tests</p></blockquote><p>Time per request:       1289.329 [ms] (mean) ：</p><blockquote><p>用户平均请求等待时间</p><p>计算公式：Timetoken for tests/（Complete requests/Concurrency Level）</p></blockquote><p>Time per request:       2.579 [ms] (mean, across all concurrent requests) ：</p><blockquote><p>服务器平均请求等待时间</p><p>计算公式：Time taken for tests/Complete requests</p></blockquote><p>Transfer rate:          140.88 [Kbytes/sec] received</p><blockquote><p>表示这些请求在单位时间内从服务器获取的数据长度</p><p>计算公式：Total trnasferred/ Time taken for tests，这个统计很好的说明服务器的处理能力达到极限时，其出口宽带的需求量。（即平均每秒网络上的流量）</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1  31.7      0    3008</span><br><span class="line">Processing:     2  302 1687.9      9   25773</span><br><span class="line">Waiting:        2  294 1641.2      9   25773</span><br><span class="line">Total:          6  303 1689.6      9   25781</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50<span class="comment">%      9</span></span><br><span class="line">  66<span class="comment">%     10</span></span><br><span class="line">  75<span class="comment">%     10</span></span><br><span class="line">  80<span class="comment">%     10</span></span><br><span class="line">  90<span class="comment">%     11</span></span><br><span class="line">  95<span class="comment">%    939</span></span><br><span class="line">  98<span class="comment">%   6460</span></span><br><span class="line">  99<span class="comment">%  12908</span></span><br><span class="line"> 100<span class="comment">%  25781 (longest request)</span></span><br></pre></td></tr></table></figure><p>这部分数据用于描述每个请求处理时间的分布情况，比如以上测试，80%的请求处理时间 都不超过 66ms，这个处理时间是指前面的 Time per request，即对于单个用户而言，平均 每个请求的处理时间</p><h5 id="4）ab-性能指标"><a class="header-anchor" href="#4）ab-性能指标">¶</a>4）ab 性能指标</h5><p>在进行性能测试过程中有几个指标比较重要：</p><h6 id="1、吞吐率（Requests-per-second）"><a class="header-anchor" href="#1、吞吐率（Requests-per-second）">¶</a>1、吞吐率（Requests per second）</h6><p>服务器并发处理能力的量化描述，单位是 reqs/s，指的是在某个并发用户数下单位时间内处 理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。 记住：吞吐率是基于并发用户数的。这句话代表了两个含义：</p><blockquote><p>a、吞吐率和并发用户数相关</p><p>b、不同的并发用户数下，吞吐率一般是不同的</p></blockquote><p>计算公式：总请求数/处理完成这些请求数所花费的时间，即：</p><p>Request per second=Complete requests/Time taken for tests</p><p>必须要说明的是，这个数值表示当前机器的整体性能，值越大越好</p><h6 id="2、并发连接数（The-number-of-concurrent-connections）"><a class="header-anchor" href="#2、并发连接数（The-number-of-concurrent-connections）">¶</a>2、并发连接数（The number of concurrent connections）</h6><p>并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话</p><h6 id="3、并发用户数（Concurrency-Level）"><a class="header-anchor" href="#3、并发用户数（Concurrency-Level）">¶</a>3、并发用户数（Concurrency Level）</h6><p>要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连 接数</p><h6 id="4、用户平均请求等待时间（Time-per-request）"><a class="header-anchor" href="#4、用户平均请求等待时间（Time-per-request）">¶</a>4、用户平均请求等待时间（Time per request）</h6><p>计算公式：处理完成所有请求数所花费的时间/（总请求数/并发用户数），即：</p><p>Time per request=Time taken for tests/（Complete requests/Concurrency Level）</p><h6 id="5、服务器平均请求等待时间（Time-per-request-across-all-concurrent-requests）"><a class="header-anchor" href="#5、服务器平均请求等待时间（Time-per-request-across-all-concurrent-requests）">¶</a>5、服务器平均请求等待时间（Time per request:across all concurrent requests）</h6><p>计算公式：处理完成所有请求数所花费的时间/总请求数，即：</p><p>Time taken for/testsComplete requests</p><p>可以看到，它是吞吐率的倒数。同时，它也等于用户平均请求等待时间/并发用户数，即：Time per request/Concurrency Level</p><h4 id="三、php加速软件Xcache"><a class="header-anchor" href="#三、php加速软件Xcache">¶</a>三、php加速软件Xcache</h4><p>（在 php 主机上完成下面的操作)</p><p>说明：</p><p>php 安装目录：/usr/local/php5.6</p><p>php.ini 配置文件路径：/etc/php.ini</p><p>php 网页根目录：/var/www/benet</p><h5 id="1、安装xcache"><a class="header-anchor" href="#1、安装xcache">¶</a>1、安装xcache</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># wget http://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># tar zxf xcache-3.2.0.tar.gz </span></span><br><span class="line">[root@phpserver ~]<span class="comment"># cd xcache-3.2.0/</span></span><br><span class="line"><span class="comment"># 用 phpize 生成 configure 配置文件</span></span><br><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># /usr/local/php5.6/bin/phpize</span></span><br><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># ./configure --enable-xcache --enable-xcache-coverager \</span></span><br><span class="line">&gt;  --<span class="built_in">enable</span>-xcache-optimizer --with-php-config=/usr/<span class="built_in">local</span>/php5.6/bin/php-config</span><br><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>安装完成后最后出现的目录要记住，后面会用到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing shared extensions:     /usr/<span class="built_in">local</span>/php5.6/lib/php/extensions/no-debug-non-zts-20131226/</span><br></pre></td></tr></table></figure><h5 id="2、创建-xcache-缓存文件"><a class="header-anchor" href="#2、创建-xcache-缓存文件">¶</a>2、创建 xcache 缓存文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># touch /tmp/xcache</span></span><br><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># chmod 777 /tmp/xcache</span></span><br></pre></td></tr></table></figure><h5 id="3、拷贝xcache-后台管理程序到网站根目录"><a class="header-anchor" href="#3、拷贝xcache-后台管理程序到网站根目录">¶</a>3、拷贝xcache 后台管理程序到网站根目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># cp -r htdocs/ /var/www/benet/xcache</span></span><br></pre></td></tr></table></figure><h5 id="4、配置php支持xcache"><a class="header-anchor" href="#4、配置php支持xcache">¶</a>4、配置php支持xcache</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># vim /etc/php.ini</span></span><br><span class="line"><span class="comment"># 在最后添加以下内容</span></span><br><span class="line">[xcache-common]</span><br><span class="line">extension = /usr/<span class="built_in">local</span>/php5.6/lib/php/extensions/no-debug-non-zts-20131226/xcache.so <span class="comment"># 这个路径就是之前保存的路径</span></span><br><span class="line">[xcache.admin]</span><br><span class="line">xcache.admin.enable_auth = Off</span><br><span class="line">[xcache]</span><br><span class="line">xcache.shm_scheme =<span class="string">"mmap"</span></span><br><span class="line">xcache.size=60M</span><br><span class="line">xcache.count =1</span><br><span class="line">xcache.slots =8K</span><br><span class="line">xcache.ttl=0</span><br><span class="line">xcache.gc_interval =0</span><br><span class="line">xcache.var_size=64M</span><br><span class="line">xcache.var_count =1</span><br><span class="line">xcache.var_slots =8K</span><br><span class="line">xcache.var_ttl=0</span><br><span class="line">xcache.var_maxttl=0</span><br><span class="line">xcache.var_gc_interval =300</span><br><span class="line">xcache.test =Off</span><br><span class="line">xcache.readonly_protection = Off</span><br><span class="line">xcache.mmap_path =<span class="string">"/tmp/xcache"</span></span><br><span class="line">xcache.coredump_directory =<span class="string">""</span></span><br><span class="line">xcache.cacher =On</span><br><span class="line">xcache.stat=On</span><br><span class="line">xcache.optimizer =Off</span><br><span class="line">[xcache.coverager]</span><br><span class="line">xcache.coverager =On</span><br><span class="line">xcache.coveragedump_directory =<span class="string">""</span></span><br></pre></td></tr></table></figure><p>将 xcache 目录拷贝到 apache 主机的网页文档目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># scp -r /var/www/benet/xcache/ root@192.168.1.70:/var/www/benet/</span></span><br></pre></td></tr></table></figure><h5 id="5、测试"><a class="header-anchor" href="#5、测试">¶</a>5、测试</h5><p>重启 php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># service php-fpm restart</span></span><br></pre></td></tr></table></figure><p>浏览器打开网站根目录下面的 xcache</p><p>192.168.1.70/xcache可以看到如下页面：<br><img data-src="https://img-blog.csdnimg.cn/20200610184657790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>至此，Linux 下安装 php 加速软件 Xcache 教程完成</p><p>执行 ab 压力测试：</p><p>执行第一次压力测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ab -c 100 -n 1000 http://192.168.1.70/index.php</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.70 (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache</span><br><span class="line">Server Hostname:        192.168.1.70</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.php</span><br><span class="line">Document Length:        84474 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   1.464 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        85</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 85, Exceptions: 0)</span><br><span class="line">Total transferred:      84719909 bytes</span><br><span class="line">HTML transferred:       84473909 bytes</span><br><span class="line">Requests per second:    683.19 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       146.373 [ms] (mean)</span><br><span class="line">Time per request:       1.464 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          56523.11 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.6      0       2</span><br><span class="line">Processing:    23  139  21.1    143     192</span><br><span class="line">Waiting:        9  135  20.9    138     157</span><br><span class="line">Total:         25  140  20.6    143     192</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    143</span><br><span class="line">  66%    145</span><br><span class="line">  75%    147</span><br><span class="line">  80%    148</span><br><span class="line">  90%    152</span><br><span class="line">  95%    157</span><br><span class="line">  98%    160</span><br><span class="line">  99%    161</span><br><span class="line"> 100%    192 (longest request)</span><br></pre></td></tr></table></figure><p>执行第二次压力测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ab -c 100 -n 1000 http://192.168.1.70/index.php</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.70 (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache</span><br><span class="line">Server Hostname:        192.168.1.70</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.php</span><br><span class="line">Document Length:        84474 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   1.510 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        101</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 101, Exceptions: 0)</span><br><span class="line">Total transferred:      84719889 bytes</span><br><span class="line">HTML transferred:       84473889 bytes</span><br><span class="line">Requests per second:    662.27 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       150.995 [ms] (mean)</span><br><span class="line">Time per request:       1.510 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          54792.57 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.3      0       2</span><br><span class="line">Processing:     8  144  24.0    150     184</span><br><span class="line">Waiting:        4  137  23.6    143     155</span><br><span class="line">Total:          9  144  23.7    150     184</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    150</span><br><span class="line">  66%    152</span><br><span class="line">  75%    152</span><br><span class="line">  80%    153</span><br><span class="line">  90%    155</span><br><span class="line">  95%    157</span><br><span class="line">  98%    158</span><br><span class="line">  99%    160</span><br><span class="line"> 100%    184 (longest request)</span><br></pre></td></tr></table></figure><p>查看 xcache 的命中率：<br><img data-src="https://img-blog.csdnimg.cn/20200610184715159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="四、部署bbs论坛"><a class="header-anchor" href="#四、部署bbs论坛">¶</a>四、部署bbs论坛</h4><h5 id="1、Discuz-的程序文件解压，并且将-upload-中所有文件放置到网站目录-php-服务器的操作"><a class="header-anchor" href="#1、Discuz-的程序文件解压，并且将-upload-中所有文件放置到网站目录-php-服务器的操作">¶</a>1、Discuz 的程序文件解压，并且将 upload 中所有文件放置到网站目录(php 服务器的操作)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># mkdir discus</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># unzip Discuz_7.0.0_FULL_SC_UTF8.zip -d discus</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># mv discus/Discuz_7.0.0_FULL_SC_UTF8/upload/ /var/www/benet/bbs</span></span><br></pre></td></tr></table></figure><h5 id="2、设置-php-fpm-的服务用户为下面文件的属主或者对其设置写权限，否则安装时会报错"><a class="header-anchor" href="#2、设置-php-fpm-的服务用户为下面文件的属主或者对其设置写权限，否则安装时会报错">¶</a>2、设置 php-fpm 的服务用户为下面文件的属主或者对其设置写权限，否则安装时会报错</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># chmod -R 777 /var/www/benet/bbs/</span></span><br></pre></td></tr></table></figure><h5 id="3、修改-php-ini-文件"><a class="header-anchor" href="#3、修改-php-ini-文件">¶</a>3、修改 php.ini 文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># vim  /etc/php.ini</span></span><br><span class="line">short_open_tag = On <span class="comment"># 将Off改为On，否则程序无法正常运行</span></span><br></pre></td></tr></table></figure><h5 id="4、重启-php-fpm"><a class="header-anchor" href="#4、重启-php-fpm">¶</a>4、重启 php-fpm</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># service php-fpm restart</span></span><br></pre></td></tr></table></figure><h5 id="5、web-服务器也需要有静态文件"><a class="header-anchor" href="#5、web-服务器也需要有静态文件">¶</a>5、web 服务器也需要有静态文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># scp -r /var/www/benet/bbs/ root@192.168.1.70:/var/www/benet/</span></span><br></pre></td></tr></table></figure><h5 id="6、在数据库服务器上创建-bbs-数据库及授权帐户"><a class="header-anchor" href="#6、在数据库服务器上创建-bbs-数据库及授权帐户">¶</a>6、在数据库服务器上创建 bbs 数据库及授权帐户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database bbsdb;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all on bbsdb.* to runbbs@&#39;%&#39; identified by &#39;pwd@123&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>置完成之后，输入 httd//192.168.1.70/bbs/install 即可安装<br><img data-src="https://img-blog.csdnimg.cn/20200610184748849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>填写数据库的相关信息，添加数据库服务器的地址和 MariaDB 创建的数据库和用户密码，而 后在设置 bbs 的管理员帐号密码就可以继续安装了<br><img data-src="https://img-blog.csdnimg.cn/20200610184803971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br><img data-src="https://img-blog.csdnimg.cn/20200610184819127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>出现上面这种情况是由于 php 服务器安装了 discuz 之后导致程序发生变化从而导致动态服 务器和静态服务器的程序不一致，只需要手动把 bbs 服务器的文件和 web 服务器进行一次 同步即可，如果想实现自动同步，需要使用其他服务，如 initory+rsync、sersync 等工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># scp -r /var/www/benet/bbs/* root@192.168.1.70:/var/www/benet/bbs/</span></span><br></pre></td></tr></table></figure><p>动态服务器和静态服务器同步文件之后，再次访问 bbs 的网址就正常了<br><img data-src="https://img-blog.csdnimg.cn/20200610184950613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache深度优化</title>
    <link href="https://pdxblog.top/Apache%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96.html"/>
    <id>https://pdxblog.top/Apache%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96.html</id>
    <published>2020-06-08T16:00:00.000Z</published>
    <updated>2020-06-09T05:13:28.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Apache深度优化"><a class="header-anchor" href="#Apache深度优化">¶</a>Apache深度优化</h3><h4 id="1）开启apache的Gzip（defate）功能"><a class="header-anchor" href="#1）开启apache的Gzip（defate）功能">¶</a>1）开启apache的Gzip（defate）功能</h4><p>gzip 可以极大的加速网站，有时压缩比率高到 80%,最少都有 40%以上，还是相当不错的。 在 Apache2 之后的版本，模块名不叫 gzip,而叫 mod_deflate</p><p>未使用 Gzip：<br><img data-src="https://img-blog.csdnimg.cn/20200609130213307.png" alt><br>开始使用Gzip：<br><img data-src="https://img-blog.csdnimg.cn/20200609130236625.png" alt><br>如果要开启 deflate 的话,一定要打开下面二个模块</p><blockquote><p>LoadModule deflate_module modules/mod_deflate.so</p><p>LoadModule headers_module modules/mod_headers.so</p></blockquote><p>设置压缩比率,取值范围在 1(最低) 到 9(最高)之间,不建议设置太高,虽然有很高的压缩率, 但是占用更多的 CPU 资源.</p><h5 id="mod-deflate-模块检查及安装"><a class="header-anchor" href="#mod-deflate-模块检查及安装">¶</a>mod_deflate 模块检查及安装</h5><p>检查模块是否安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># apachectl -M | grep deflte</span></span><br></pre></td></tr></table></figure><p>如果没有安装，有两种安装方法：</p><h6 id="a、编译时安装方法"><a class="header-anchor" href="#a、编译时安装方法">¶</a>a、编译时安装方法</h6><p>在编译安装Apache的时候跟上–enable-deflate 即可实现安装，<a href="https://blog.csdn.net/weixin_45636702/article/details/106614543" target="_blank" rel="noopener">Apache安装部署点击这里</a></p><h6 id="b、DSO方式安装"><a class="header-anchor" href="#b、DSO方式安装">¶</a>b、DSO方式安装</h6><p>切到apache 源码包 mod_deflate 所在 的目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># cd  /root/httpd-2.4.23/modules/filters/</span></span><br></pre></td></tr></table></figure><p>以 dso 的方式编译安装到 apache 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache filters]<span class="comment"># apxs -c -i -a mod_deflate.c</span></span><br></pre></td></tr></table></figure><p>如果报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@apache filters]<span class="comment"># apxs -c -i -a mod_deflate.c</span></span><br><span class="line">/usr/<span class="built_in">local</span>/apr/build-1/libtool --silent --mode=compile gcc -std=gnu99 -prefer-pic   -DLINUX -D_REENTRANT -D_GNU_SOURCE -g -O2 -pthread -I/usr/<span class="built_in">local</span>/http-2.4.23/include  -I/usr/<span class="built_in">local</span>/apr/include/apr-1   -I/usr/<span class="built_in">local</span>/apr-util/include/apr-1   -c -o mod_deflate.lo mod_deflate.c &amp;&amp; touch mod_deflate.slo</span><br><span class="line">mod_deflate.c:51:18: fatal error: zlib.h: No such file or directory</span><br><span class="line"> <span class="comment">#include "zlib.h"</span></span><br><span class="line">                  ^</span><br><span class="line">compilation terminated.</span><br><span class="line">apxs:Error: Command failed with rc=65536</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>原因是缺少了zlib-devel 的安装包，装上就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache filters]<span class="comment"># yum -y install zlib-devel</span></span><br></pre></td></tr></table></figure><p>再次安装模块，检查mod_deflate是否安装，成功安装这里会显示出该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache filters]<span class="comment"># ll /usr/local/http-2.4.23/modules/mod_deflate.so</span></span><br><span class="line">-rwxr-xr-x. 1 root root 98104 6月   9 09:20 /usr/<span class="built_in">local</span>/http-2.4.23/modules/mod_deflate.so</span><br></pre></td></tr></table></figure><p>apxs 命令参数说明：</p><ul><li>-i：此选项表示需要执行安装操作，以安装一个或多个动态共享对象到服务器的 modules 目 录中</li><li>-a：此选项自动增加一个 LoadModule 行到 httpd.conf 文件中，以启用此模块，或者，如果 此行已经存在，则启用之</li><li>-c：此选项表示需要执行编译操作</li></ul><p>如果重启的时候出现错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># apachectl -t</span></span><br><span class="line">httpd: Syntax error on line 104 of /usr/<span class="built_in">local</span>/http-2.4.23/conf/httpd.conf: Cannot load modules/mod_deflate.so into server: /usr/<span class="built_in">local</span>/http-2.4.23/modules/mod_deflate.so: undefined symbol: inflate</span><br><span class="line">[root@apache ~]<span class="comment"># apachectl -M</span></span><br><span class="line">httpd: Syntax error on line 104 of /usr/<span class="built_in">local</span>/http-2.4.23/conf/httpd.conf: Cannot load modules/mod_deflate.so into server: /usr/<span class="built_in">local</span>/http-2.4.23/modules/mod_deflate.so: undefined symbol: inflate</span><br><span class="line">[root@apache ~]<span class="comment"># httpd -M</span></span><br><span class="line">httpd: Syntax error on line 104 of /usr/<span class="built_in">local</span>/http-2.4.23/conf/httpd.conf: Cannot load modules/mod_deflate.so into server: /usr/<span class="built_in">local</span>/http-2.4.23/modules/mod_deflate.so: undefined symbol: inflate</span><br></pre></td></tr></table></figure><p>需要在 LoadModule deflate_module modules/mod_deflate.so 的前面加载 <a href="http://zlib.so" target="_blank" rel="noopener">zlib.so</a> 这里需要注意的是 LoadModule deflate_module 需要放在 LoadModule php5_module 之后 LoadFile /usr/lib/libz.so(x64 系统中该库文件位于/usr/lib64 目录下，可以软链接到/usr/lib 下 或者就在 LoadModule deflate_module modules/mod_deflate.so 这行的上一行添加 LoadFile /usr/lib64/libz.so 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line">LoadFile /usr/lib64/libz.so <span class="comment"># 追加</span></span><br><span class="line">LoadModule deflate_module modules/mod_deflate.so <span class="comment"># 去掉注释</span></span><br><span class="line">LoadModule headers_module modules/mod_headers.so <span class="comment"># 去掉注释</span></span><br></pre></td></tr></table></figure><p>这样 apache 就会启用这两个模块，</p><p>mod_deflate 是压缩模块，就是对要传输到客户端的代码进行 gzip 压缩</p><p>mod_headers 模块的作用是告诉浏览器页面使用了 gzip 压缩，如果不开启 mod_headers 那么浏览器就会 对 gzip 压缩过的页面进行下载，而无法正常显示</p><p>LoadModule /usr/lib64/libz.so：如果使用DSO方式安装的deflate模块需要声明，没用可以不用写</p><h6 id="在添加压缩级别等参数："><a class="header-anchor" href="#在添加压缩级别等参数：">¶</a>在添加压缩级别等参数：</h6><p>在 httpd.conf 中加入以下代码，可以加到任何空白地方，不了解 apache 的话，如果担心加 错地方，就放到 http.conf 文件的最后一行</p><p>注：在添加代码前最好先查一查要添加的代码是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_deflate.c&gt;</span><br><span class="line">DeflateCompressionLevel 9</span><br><span class="line">SetOutputFilter DEFLATE </span><br><span class="line">AddOutputFilterByType DEFLATE text/*</span><br><span class="line">AddOutputFilterByType DEFLATE application/x-httpd-php application/x-httpd-fastphp</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:gif|jpe?g|png)$ no-gzip dont-vary</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:pdf|mov|avi|mp3|mp4|rm)$ no-gzip dont-vary</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>DeflateCompressionLevel 9：</p><blockquote><p>压缩程度的等级，预设可以采用 6 这个数值，以维持 耗用处理器效能与网页压缩质量的平衡</p></blockquote><p>SetOutputFilter DEFLATE：</p><blockquote><p>设置输出过滤器，对输出启用压缩，必须的，就像一个 开关一样，告诉 apache 对传输到浏览器的内容进行压缩</p></blockquote><p>AddOutputFilterByType DEFLATE text/*：</p><blockquote><p>设置对文件是文本的内容进行压缩，例如 text/html text/css text/plain 等</p></blockquote><p>AddOutputFilterByType DEFLATE application/x-httpd-php application/x-httpd-fastphp：</p><blockquote><p>对 php 类型的文件进行压缩</p></blockquote><p>SetEnvIfNoCase Request_URI .(?:gif|jpe?g|png)$ no-gzip dont-vary：</p><blockquote><p>设置不对后缀 gif，jpg，jpeg，png 的图片文件进行压缩。注：?:表示不会捕获 ( )里内容了</p></blockquote><p>SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary：</p><blockquote><p>同上，设置不对 exe，tgz，gz 等的文件进行压缩</p></blockquote><p>SetEnvIfNoCase Request_URI .(?:pdf|mov|avi|mp3|mp4|rm)$ no-gzip dont-vary</p><blockquote><p>同上，设置不对 pdf，avi，mp3 等的文件进行压缩</p></blockquote><h6 id="设置日志输出"><a class="header-anchor" href="#设置日志输出">¶</a>设置日志输出</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DeflateFilterNote Input input_info</span><br><span class="line">DeflateFilterNote Output output_info</span><br><span class="line">DeflateFilterNote Ratio ratio_info</span><br><span class="line">LogFormat <span class="string">'"%r" %&#123;output_info&#125;n/%&#123;input_info&#125;n (%&#123;ratio_info&#125;n%%)'</span> deflate</span><br><span class="line">CustomLog logs/deflate_log.log deflate</span><br></pre></td></tr></table></figure><p>DeflateFilterNote Input input_info：</p><blockquote><p>声明输入流的 byte 数量</p></blockquote><p>DeflateFilterNote Output output_info：</p><blockquote><p>声明输出流的 byte 数量</p></blockquote><p>DeflateFilterNote Ratio ratio_info：</p><blockquote><p>声明压缩的百分比</p></blockquote><p>LogFormat ‘&quot;%r&quot; %{output_info}n/%{input_info}n (%{ratio_info}n%%)’ deflate：</p><blockquote><p>声明日志格式</p></blockquote><p>修改完成后保存退出并重启 apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># systemctl  restart  httpd</span></span><br></pre></td></tr></table></figure><p>使用谷歌浏览器测试访问，如下图显示结果：（提示：在访问测试页之前按 F12 键）<br><img data-src="https://img-blog.csdnimg.cn/2020060913031552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># cat /usr/local/http-2.4.23/logs/deflate_log.log</span></span><br><span class="line"><span class="string">"GET /test.html HTTP/1.1"</span> 6421/19949 (32%)</span><br><span class="line"><span class="string">"GET /test1.html HTTP/1.1"</span> 1360/4266 (31%)</span><br></pre></td></tr></table></figure><p>注：图片是不需要启用 GZip 压缩的，从 GZip 检测结果来看，压缩后的图片体积竟然大过原 体积！这就解释了为什么图片不用启用 GZip 压缩的原因了！</p><p>可以检测了几个门户网站的图片，还有 Google、baidu 的图片，统统都没有启用图片 GZip 压缩，只是启用了 html、css、js 等文件的 GZip 压缩，这就更加说明了 GZip 压缩不适用于图 片上。另外，除了图片之外，flash 的 swf 文件也是不用启用 GZip 压缩的</p><h4 id="2）配置-mod-expires-模块"><a class="header-anchor" href="#2）配置-mod-expires-模块">¶</a>2）配置 mod_expires 模块</h4><p>这个非常有用的优化，mod_expires 可以减少 20-30%左右的重复请求，让重复的用户对指定 的页面请求结果都 CACHE 在本地，根本不向服务器发出请求。但要注意更新快的文件不要 这么做</p><p>这个模块控制服务器应答时的 Expires 头内容和 Cache-Control 头的 max-age 指令。有效期 (expiration date)可以设置为相对于源文件的最后修改时刻或者客户端的访问时刻。</p><p>未启用 expire 的效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># curl -I 192.168.1.70/12.png</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 09 Jun 2020 02:11:04 GMT</span><br><span class="line">Server: Apache/2.4.23 (Unix)</span><br><span class="line">Last-Modified: Sat, 28 Sep 2019 02:39:14 GMT</span><br><span class="line">ETag: <span class="string">"206701-59393e8841880"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 2123521</span><br><span class="line">Content-Type: image/png</span><br></pre></td></tr></table></figure><h6 id="启用-expire-缓存："><a class="header-anchor" href="#启用-expire-缓存：">¶</a>启用 expire 缓存：</h6><p>mod_expires 的安装配置：</p><p>启用 expires_module</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule expires_module modules/mod_expires.so <span class="comment"># 去掉注释</span></span><br></pre></td></tr></table></figure><p>然后添加 Expires 配置规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_expires.c&gt;</span><br><span class="line">ExpiresActive On</span><br><span class="line">ExpiresByType text/css <span class="string">"now plus 1 month"</span></span><br><span class="line">ExpiresByType application/x-javascript <span class="string">"now plus 5 day"</span></span><br><span class="line">ExpiresByType image/jpeg <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresByType image/gif <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresByType image/bmp <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresByType image/x-icon <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresByType image/png <span class="string">"access plus 1 minute"</span></span><br><span class="line">ExpiresByType application/x-shockwave-flash <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresDefault <span class="string">"now plus 0 minute"</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>语法：</p><ul><li>ExpiresByType：定义缓存页面</li><li>text/html：指定缓存界面的类型</li><li>A60：缓存页面的时间</li><li>ExpireActive On：开启缓存功能</li><li>ExpiresByType text/html M60：页面最后一次修改缓存60</li><li>ExpiresByType image/png A60：图片缓存，和ExpiresByType image/png &quot;access plus 1 month&quot;意思相同</li><li>ExpiresDefault “now plus 0 minute”：其他页面不进行缓存</li></ul><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># curl -I 192.168.1.70/12.png</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 09 Jun 2020 02:14:55 GMT</span><br><span class="line">Server: Apache/2.4.23 (Unix)</span><br><span class="line">Last-Modified: Sat, 28 Sep 2019 02:39:14 GMT</span><br><span class="line">ETag: <span class="string">"206701-59393e8841880"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 2123521</span><br><span class="line">Cache-Control: max-age=60</span><br><span class="line">Expires: Tue, 09 Jun 2020 02:15:55 GMT</span><br><span class="line">Content-Type: image/png</span><br></pre></td></tr></table></figure><p>ExpiresDefault 和 ExpiresByType 指令同样能够用易懂的语法格式进行定义：</p><blockquote><p>ExpiresDefault &quot; [plus] {}&quot;</p><p>ExpiresByType type/encoding &quot; [plus] {}&quot;</p></blockquote><p>其中bash是下列之一：</p><ul><li>access</li><li>now (等价于’access ')</li><li>modification</li></ul><p>plus 关键字是可选的。num必须是整数，type是下列之一</p><ul><li>years</li><li>moths</li><li>weeks</li><li>days</li><li>hours</li><li>minutes</li><li>seconds</li></ul><p>例如，下列 3 个指令都表示文档默认的有效期是一个月：</p><blockquote><p>ExpiresDefault “access plus 1 month”</p><p>ExpiresDefault “access plus 4 weeks”</p><p>ExpiresDefault “access plus 30 days”</p></blockquote><p>有效期可以通过增加&quot;num type&quot;子句进一步调整</p><blockquote><p>ExpiresByType text/html “access plus 1 month 15 days 2 hours”</p><p>ExpiresByType image/gif “modification plus 5 hours 3 minutes”</p></blockquote><p>注意，如果你使用基于最后修改日期的设置，&quot;Expires:&quot;头将不会 被添加到那些并非来自于 磁盘文件的内容。这是因为这些内容并不存在&quot;最后修改时间&quot;的属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GIF 有效期为 1 个月（秒数）</span></span><br><span class="line">ExpiresByType image/gif A2592000</span><br><span class="line">ExpiresByType image/jpeg A2592000</span><br><span class="line">ExpiresByType image/png A2592000</span><br><span class="line">ExpiresByType image/x-icon A2592000</span><br><span class="line">ExpiresByType application/x-javascript A604800</span><br><span class="line">ExpiresByType text/plain A604800</span><br><span class="line"><span class="comment"># HTML 文档的有效期是最后修改时刻后的一星期</span></span><br><span class="line">ExpiresByType text/html M604800</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>&quot;M&quot;表示源文件的最后修改时刻，&quot;A&quot;表示客户端对源文件的访问时刻。后面的时间则以秒计 算</p><p>有关 Apache Expires Module 的介绍，可以参阅其<a href="http://httpd.apache.org/docs/2.4/mod/mod_expires.html" target="_blank" rel="noopener">官方文档</a>:</p><h4 id="3）Apache禁止目录遍历"><a class="header-anchor" href="#3）Apache禁止目录遍历">¶</a>3）Apache禁止目录遍历</h4><p>未禁用的效果：<br><img data-src="https://img-blog.csdnimg.cn/20200609130341874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>将 Options Indexes FollowSymLinks 中的 Indexes 去掉，就可以禁止 Apache 显示该目录结构。</p><p>Indexes 的作用就是当该目录下没有 index.html 文件时，就显示目录结构</p><p>在配置文件（httpd.conf）中搜索Options，找到Options Indexes FollowSymLinks 并修改为Options  FollowSymLinks</p><p>重启服务验证：<br><img data-src="https://img-blog.csdnimg.cn/20200609130353734.png" alt></p><h4 id="4）Apache隐藏版本信息"><a class="header-anchor" href="#4）Apache隐藏版本信息">¶</a>4）Apache隐藏版本信息</h4><p>测试默认 apache 的状态信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># curl -I 192.168.1.70</span></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Date: Tue, 09 Jun 2020 02:29:20 GMT</span><br><span class="line">Server: Apache/2.4.23 (Unix) <span class="comment"># 版本信息直接暴露</span></span><br><span class="line">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><h5 id="1、主配置中启用httpd-default-conf"><a class="header-anchor" href="#1、主配置中启用httpd-default-conf">¶</a>1、主配置中启用httpd-default.conf</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Include conf/extra/httpd-default.conf  <span class="comment"># 去掉注释</span></span><br></pre></td></tr></table></figure><h5 id="2、修改-httpd-default-conf"><a class="header-anchor" href="#2、修改-httpd-default-conf">¶</a>2、修改 httpd-default.conf</h5><p>文件：/usr/local/http-2.4.23/conf/extra/httpd-default.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">找到</span><br><span class="line">ServerTokens Full</span><br><span class="line">ServerSignature On</span><br><span class="line">改成</span><br><span class="line">ServerTokens Prod</span><br><span class="line">ServerSignature Off</span><br></pre></td></tr></table></figure><p>重启 apache 测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># apachectl restart</span></span><br><span class="line">[root@apache ~]<span class="comment"># curl -I 192.168.1.70</span></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Date: Tue, 09 Jun 2020 02:34:30 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><p>如果你需要彻底将版本之类的信息进行改头换面，你就需要在编译之前做准备或者进行从新 编译了。在重新编译时，修改源码包下 include 目录下的 ap_release.h 文件</p><p>#define AP_SERVER_BASEVENDOR “Apache Software Foundation” #服务的供应商名称</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define AP_SERVER_BASEPROJECT “Apache HTTP Server” #服务的项目名称</span><br><span class="line">#define AP_SERVER_BASEPRODUCT “Apache” #服务的产品名</span><br><span class="line">#define AP_SERVER_MAJORVERSION_NUMBER 2 #主要版本号</span><br><span class="line">#define AP_SERVER_MINORVERSION_NUMBER 4 #小版本号</span><br><span class="line">#define AP_SERVER_PATCHLEVEL_NUMBER 23 #补丁级别</span><br><span class="line">#define AP_SERVER_DEVBUILD_BOOLEAN 0 #</span><br></pre></td></tr></table></figure><p>上述列出的行，已经给出了注释，大家可以修改成自己想要的，然后编译安装之后，对方就彻底不知道你的版本号了</p><h4 id="5）Apache日志分割"><a class="header-anchor" href="#5）Apache日志分割">¶</a>5）Apache日志分割</h4><h5 id="为什么要分割日志"><a class="header-anchor" href="#为什么要分割日志">¶</a>为什么要分割日志</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">随着网站的访问越来越大，WebServer 产生的日志文件也会越来越大，如果不对日志进行分 割，那么只能一次将大的日志(如 Apache 的日志)整个删除，这样也丢失了很多对网站比较 宝贵的信息，因为这些日志可以用来进行访问分析、网络安全监察、网络运行状况监控等， 因此管理好这些海量的日志对网站的意义是很大的</span><br></pre></td></tr></table></figure><h5 id="方法-1-使用-rotatelogs（apache-自带的工具）每隔一天记录一个日志"><a class="header-anchor" href="#方法-1-使用-rotatelogs（apache-自带的工具）每隔一天记录一个日志">¶</a>方法 1:使用 rotatelogs（apache 自带的工具）每隔一天记录一个日志</h5><p>编辑Apache 的主配置文件，更改内容如下：</p><p>注释掉如下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorLog <span class="string">"logs/error_log"</span></span><br><span class="line">CustomLog <span class="string">"logs/access_log"</span> common</span><br></pre></td></tr></table></figure><p>然后添加如下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorLog <span class="string">"|/usr/local/http-2.4.23/bin/rotatelogs -l logs/error_%Y%m%d.log 86400"</span></span><br><span class="line">CustomLog <span class="string">"|/usr/local/http-2.4.23/bin/rotatelogs -l logs/access_%Y%m%d.log 86400"</span> combined</span><br></pre></td></tr></table></figure><p>注：其中 86400 为轮转的时间单位为秒</p><p>注：rotatelogs这个要写绝对路径，可以使用which来查询它的路径</p><p>验证：查看 logs 目录下的日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ls /usr/local/http-2.4.23/logs/</span></span><br><span class="line">access_20200609.log  access_log  deflate_log.log  error_20200609.log  error_log  httpd.pid</span><br></pre></td></tr></table></figure><p>由于 apache 自带的日志轮询工具 rotatelogs，据说在进行日志切割时容易丢日志，因此我们 通常使用 cronolog 进行日志轮询</p><h5 id="方法-2、使用-cronolog-为每一天建立一个新的日志"><a class="header-anchor" href="#方法-2、使用-cronolog-为每一天建立一个新的日志">¶</a>方法 2、使用 cronolog 为每一天建立一个新的日志</h5><p>安装 cronolog 程序</p><p>下载 <a href="https://pan.baidu.com/s/1N7qCgA7KESqS_Tdp4tU-dg" target="_blank" rel="noopener">cronolog</a><br>提取码：uzra</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf cronolog-1.6.2.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd cronolog-1.6.2/</span></span><br><span class="line">[root@apache cronolog-1.6.2]<span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>主配置文件中的使用方法，添加如下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorLog <span class="string">"|/usr/local/sbin/cronolog logs/error-%Y%m%d.log"</span> </span><br><span class="line">CustomLog <span class="string">"|/usr/local/sbin/cronolog logs/access-%Y%m%d.log"</span> combined</span><br></pre></td></tr></table></figure><p>如果 Apache 中有多个虚拟主机，最好每个虚拟主机中放置一个这样的代码，并将日志文件 名改成不同的名字</p><p>扩展：</p><p>这个保证了每天一个文件夹文件夹下每个小时产生一个 log</p><blockquote><p>CustomLog “|/usr/local/sbin/cronolog logs /%Y%m%d/access_log.%H” combined</p></blockquote><p>按天轮询（生产环境常见用法，推荐使用）：</p><blockquote><p>CustomLog “|/usr/local/sbin/cronolog logs/access_www_%Y%m%d.log” combined</p></blockquote><p>按小时轮询（生产环境较常见用法）：</p><blockquote><p>CustomLog “|/usr/local/sbin/cronolog logs /access_www_ %Y%m%d%H.log” combined</p></blockquote><p>验证：查看 logs 目录下的日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ls /usr/local/http-2.4.23/logs/</span></span><br><span class="line">access_20200609.log  access_log       error_20200609.log  error_log</span><br><span class="line">access-20200609.log  deflate_log.log  error-20200609.log  httpd.pid</span><br></pre></td></tr></table></figure><p>注意： 这两个管道日志文件程序还有一点不同之处是使用 cronolog 时如果日志是放在某个不存 在的路径则会自动创建目录，而使用 rotatelogs 时不能自动创建，这一点要特别注意</p><h4 id="6）配置防盗链"><a class="header-anchor" href="#6）配置防盗链">¶</a>6）配置防盗链</h4><p>有时候，你的网站莫名其妙的访问量变大，不要高兴的太早，有可能是被别人盗链了。 举个例子：比如你搭了个 discuz 论坛，里面有些热点图片、视频；然后别人将他网站上访问 图片的地址重定向到你的 discuz 上，这样他的服务器就可以空闲出来了；也就是说别人访问 他网站的图片视频，消耗的确是你服务器的资源</p><p>解决这个问题的方法是配置下防盗链，让外来的盗不了链</p><h5 id="方法-1：Apache-防盗链的第一种实现方法，可以用-rewrite-实现"><a class="header-anchor" href="#方法-1：Apache-防盗链的第一种实现方法，可以用-rewrite-实现">¶</a>方法 1：Apache 防盗链的第一种实现方法，可以用 rewrite 实现</h5><p>打开 httpd.conf，确保有这么一行配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule rewrite_module modules/mod_rewrite.so <span class="comment"># 去掉注释</span></span><br></pre></td></tr></table></figure><p>防盗链配置</p><p>在<code>&lt;Directory &quot;/usr/local/http-2.4.23/htdocs&quot;&gt;</code>这个区域下添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^$</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://192.168.1.70/.*$ [NC]</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://192.168.1.70$ [NC]</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://192.168.1.70/.*$ [NC]</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://192.168.1.70$ [NC]</span><br><span class="line">RewriteRule .*\.(gif|jpg|swf)<span class="variable">$http</span>://192.168.1.70/image/error.png[R,NC,L]</span><br></pre></td></tr></table></figure><p>注：相关选项的解释</p><ul><li>RewriteEngine On：</li></ul><blockquote><p>启用 rewrite，要想 rewrite 起作用，必须要写上</p></blockquote><ul><li>RewriteCond test-string condPattern ：</li></ul><blockquote><p>写在 RewriteRule 之前，可以有一或 N 条，用于测试 rewrite 的匹配条件，具体怎么写，后面会详细说到</p></blockquote><ul><li>RewriteRule Pattern Substitution：</li></ul><blockquote><p>规则</p></blockquote><ul><li>%{HTTP_REFERER}：</li></ul><blockquote><p>服务器变量，HTTPReferer 是 header 的一部分，当浏览器向 web 服务器发送请求的时候，一般会带上 Referer，告诉服务器我是从哪个页面链接过来的，服 务器藉此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就 能够从 HTTP Referer 中统计出每天有多少用户点击我主页上的链接访问他的网站</p></blockquote><ul><li>[ NC]：</li></ul><blockquote><p>指的是不区分大小写,[R]强制重定向 redirect</p></blockquote><ul><li>字母 L 表示如果能匹配本条规则，那么本条规则是最后一条(Last)，忽略之后的规则</li></ul><p>防盗链配置的说明：</p><p><strong>192.168.1.70：</strong></p><blockquote><p>表示自己的信任站点，如果有域名的可以写域名</p></blockquote><p><strong>gif|jpg|swf：</strong></p><blockquote><p>要保护文件的扩展名(以|分开)。以这些为扩展名的文件，必须通过红色标注的网址引用， 才可以访问</p></blockquote><p><strong>192.168.1.70/image/error.png：</strong></p><blockquote><p>定义被盗链时替代的图片，让所有盗链 jpg、gif、swf 等文件的网页，显示网页文档根目 录下的 image/ error.png 文件。注意：替换显示的图片不要放在设置防盗链的目录中，并且该图片文件体积越小越好。当然你也可以不设置替换图片，而是使用下面的语句即可：RewriteRule .*.(gif|jpg|png)$ - [F]</p></blockquote><p>注：[F] (强制 URL 为被禁止的 forbidden),强制当前 URL 为被禁止的，即，立即反馈一 个 HTTP 响应代码 403(被禁止的)</p><h6 id="验证"><a class="header-anchor" href="#验证">¶</a>验证</h6><p>再打开一个虚拟机（192.168.1.50），验证防盗链是否配置成功：</p><p>1、安装一个httpd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install httpd</span></span><br></pre></td></tr></table></figure><p>2、模拟web页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /var/www/html/index.html</span></span><br><span class="line">&lt;a  href=<span class="string">"http://192.168.1.70/12.png"</span>&gt;lianjie&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200609130430605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br><img data-src="https://img-blog.csdnimg.cn/20200609130444922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h5 id="方法-2"><a class="header-anchor" href="#方法-2">¶</a>方法 2</h5><p>通过判断浏览器头信息来阻止某些请求，即利用 SetEnvIfNoCase 和 access。</p><p>这个方法可以通过阻止某些机器人或蜘蛛爬虫抓取你的网站来节省你的带宽流量</p><p>语法: SetEnvIfNoCase attribute regex [!]env-variable[=value] [[!]env-variable[=value]] … SetEnvIfNoCase 当满足某个条件时，为变量赋值，即根据客户端请求属性设置环境变量</p><p>注：Referer ：指明了请求当前资源原始资源的 URL，使用 referer 是可以防盗链 然后在找到自己网站对应的配置的地方（如在主配置文件中或虚拟主机中），加入下列代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SetEnvIfNoCase Referer <span class="string">"^$"</span> local_ref</span><br><span class="line">SetEnvIfNoCase Referer<span class="string">"^http://www.benet.com/.*$"</span> local_ref</span><br><span class="line">SetEnvIfNoCase Referer<span class="string">"^http://benet.com/.*$"</span>local_ref</span><br><span class="line">&lt;filesmatch<span class="string">"\.(mp3|mp4|zip|rar|jpg|gif|png)"</span>&gt;</span><br></pre></td></tr></table></figure><p>2.4 版本以下的：</p><p>方法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Order Deny,Allow</span><br><span class="line">Allow from env=local_ref</span><br><span class="line">Deny from all</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Order Allow,Deny</span><br><span class="line">Allow from env=local_ref</span><br></pre></td></tr></table></figure><p>2.4 版本以上，方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Require all denied</span><br><span class="line"> Require env local_ref</span><br><span class="line">&lt;/filesmatch&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache安装部署及工作模式</title>
    <link href="https://pdxblog.top/Apache%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://pdxblog.top/Apache%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.html</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-06-09T02:47:45.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache安装部署及工作模式"><a class="header-anchor" href="#Apache安装部署及工作模式">¶</a>Apache安装部署及工作模式</h2><p>新版本的httpd-2.4新增一下特性：</p><p>新增模块：</p><ul><li>mod_proxy_fcgi(可提供 fcgi 代理）</li><li>mod_ratelimit（限制用户带宽）</li><li>mod_request（请求模块，对请求做过滤）</li></ul><p>对于基于 IP 的访问控制做了修改，不再支持 allow,deny,order 机制，而是统一使用 require 进行</p><p>还新增以下几条新特性；</p><ul><li>1、MPM 支持在运行时装载;不过要开启这种特性，在编译安装要启用这三种功能；</li></ul><blockquote><p>–enable-mpms-shared=all --with-mpm=event</p></blockquote><ul><li>2、支持 event</li><li>3、支持异步读写</li><li>4、在每个模块及每个目录上指定日志级别</li><li>5、增强版的表达式分析器</li><li>6、每请求配置：If, Elseif</li><li>7、毫秒级别的 keepalive timeout</li><li>8、基于 FQDN 的虚拟主机不再需要 NameVirtualHost 指令</li><li>9、支持使用自定义变量</li></ul><h3 id="一、部署apache"><a class="header-anchor" href="#一、部署apache">¶</a>一、部署apache</h3><p>安装环境：</p><p>操作系统：Centos7.5，关闭selinux</p><p>检查http是否安装，如查安装则卸载</p><h4 id="1、安装apache2-4-23"><a class="header-anchor" href="#1、安装apache2-4-23">¶</a>1、安装apache2.4.23</h4><h5 id="（1）下载源码包："><a class="header-anchor" href="#（1）下载源码包：">¶</a>（1）下载源码包：</h5><p>httpd-2.4.23.tar.gz</p><p>apr-1.5.2.tar.gz</p><p>apr-util-1.5.4.tar.gz</p><p>zlib-1.2.8.tar.gz</p><p>pcre-8.39.tar.gz</p><p><a href="https://pan.baidu.com/s/1N7qCgA7KESqS_Tdp4tU-dg" target="_blank" rel="noopener">软件链接</a><br>提取码：uzra</p><p>注：apr(Apache Portable Runtime)Apache 可移植运行库，它是一个对操作系统调用的抽 象库，用来实现 Apache 内部组件对操作系统的使用，提高系统的可移植性。</p><h5 id="（2）安装apr和apr-util"><a class="header-anchor" href="#（2）安装apr和apr-util">¶</a>（2）安装apr和apr-util</h5><blockquote><p>apr</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf apr-1.5.2.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  apr-1.5.2/</span></span><br><span class="line">[root@apache apr-1.5.2]<span class="comment"># ./configure --prefix=/usr/local/apr</span></span><br><span class="line">[root@apache apr-1.5.2]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><blockquote><p>apr-util</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf apr-util-1.5.4.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  apr-util-1.5.4/</span></span><br><span class="line">[root@apache apr-util-1.5.4]<span class="comment"># ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr</span></span><br><span class="line">[root@apache apr-util-1.5.4]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="（3）安装zlib"><a class="header-anchor" href="#（3）安装zlib">¶</a>（3）安装zlib</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf zlib-1.2.8.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  zlib-1.2.8/</span></span><br><span class="line">[root@apache zlib-1.2.8]<span class="comment"># ./configure --prefix=/usr/local/zlib</span></span><br><span class="line">[root@apache zlib-1.2.8]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="（4）安装pcre"><a class="header-anchor" href="#（4）安装pcre">¶</a>（4）安装pcre</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf pcre-8.39.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  pcre-8.39/</span></span><br><span class="line">[root@apache pcre-8.39]<span class="comment"># ./configure --prefix=/usr/local/pcre</span></span><br><span class="line">[root@apache pcre-8.39]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="（5）安装openssl"><a class="header-anchor" href="#（5）安装openssl">¶</a>（5）安装openssl</h5><p>安装 apache2.4.23 时提示 openssl 版本过低，centos7 自带版本 openssl-1.0.1e</p><p>下载openssl：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># wget https://www.openssl.org/source/openssl-1.0.1u.tar.gz</span></span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf openssl-1.0.1u.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  openssl-1.0.1u/</span></span><br><span class="line">[root@apache openssl-1.0.1u]<span class="comment"># ./config -fPIC --prefix=/usr/local/openssl enable-shared</span></span><br><span class="line">[root@apache openssl-1.0.1u]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">[root@apache ~]<span class="comment"># mv /usr/bin/openssl /usr/bin/openssl.1.0.1e</span></span><br><span class="line">[root@apache ~]<span class="comment"># ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span></span><br></pre></td></tr></table></figure><h5 id="（6）安装apache2-4-23"><a class="header-anchor" href="#（6）安装apache2-4-23">¶</a>（6）安装apache2.4.23</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@apache httpd-2.4.23]<span class="comment"># ./configure --prefix=/usr/local/http-2.4.23 --enable-so \</span></span><br><span class="line">&gt;  --<span class="built_in">enable</span>-cgi --<span class="built_in">enable</span>-cgid --<span class="built_in">enable</span>-ssl --with-ssl=/usr/<span class="built_in">local</span>/openssl \</span><br><span class="line">&gt;  --<span class="built_in">enable</span>-rewrite --with-pcre=/usr/<span class="built_in">local</span>/pcre --with-z=/usr/<span class="built_in">local</span>/zlib \</span><br><span class="line">&gt;  --with-apr=/usr/<span class="built_in">local</span>/apr --with-apr-util=/usr/<span class="built_in">local</span>/apr-util \</span><br><span class="line">&gt;  --<span class="built_in">enable</span>-modeles=most --<span class="built_in">enable</span>-mods-shared=most --<span class="built_in">enable</span>-mpms-shared=all \</span><br><span class="line">&gt;  --with-mpm=event --<span class="built_in">enable</span>-proxy --<span class="built_in">enable</span>-proxy-fcgi --<span class="built_in">enable</span>-expires --<span class="built_in">enable</span>-deflate</span><br></pre></td></tr></table></figure><p>相关参数解释：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">--enable-so：支持动态共享模块（即打开 DSO 支持）</span><br><span class="line"></span><br><span class="line">--enable-rewrite：支持 url 重写</span><br><span class="line"></span><br><span class="line">--enable-ssl：支持 ssl</span><br><span class="line"></span><br><span class="line">--with-ssl=/usr/local/openssl：指定 ssl 安装位置</span><br><span class="line"></span><br><span class="line">--enable-cgi：启用 cgi</span><br><span class="line"></span><br><span class="line">--enable-cgid：MPM 使用的是 event 或 worker 要启用 cgid</span><br><span class="line"></span><br><span class="line">--enable-modules=most：明确指明要静态编译到 httpd 二进制文件的模块，为 空格分隔的模块名列表、all 或者 most，all 表示包含所有模块，most 表示包含大部分常用模块</span><br><span class="line"></span><br><span class="line">--enable-mods-shared=most：明确指明要以 DSO 方式编译的模块，为空格分隔 的模块名列表、all 或者 most，all 表示包含所有模 块，most 表示包含大部分模块</span><br><span class="line"></span><br><span class="line">--enable-mpms-shared=all：启用 MPM 所有支持的模式，这样 event、worker、prefork 就会以 模块化的方式安装，要用哪个就在 httpd.conf 里配置就好了</span><br><span class="line"></span><br><span class="line">--with-mpm=event：指定启用的 mpm 模式，默认使用 enevt 模式，在 apache 的早期版本 2.0 默认 prefork,2.2 版本是 worker，2.4 版本是 event</span><br><span class="line"></span><br><span class="line">--with-pcre=/usr/local/pcre：支持 pcre</span><br><span class="line"></span><br><span class="line">--with-z=/usr/local/zlib：使用 zlib 压缩库</span><br><span class="line"></span><br><span class="line">--with-apr=/usr/local/apr：指定 apr 的安装路径</span><br><span class="line"></span><br><span class="line">--with-apr-util=/usr/local/apr-util：指定 apr-util 的安装路径</span><br><span class="line"></span><br><span class="line">--enable-expires：激活彧通过配置文件控制 HTTP 的“Expires:”和“Cache-Control:”头内容，即 对网站图片、js、css 等内容，提供客户端浏览器缓存的设置。这个是 apache 调优的一个重 要选项之一</span><br><span class="line"></span><br><span class="line">--enable-deflate提供对内容的压缩传输编码支持，一般是 html、js、css 等内容的站点。使 用此参数会打打提高传输速度，提升访问者访问的体验。在生产环境中，这是 apache 调优 的一个重要选项之一</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache httpd-2.4.23]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="（7）优化http程序执行路径"><a class="header-anchor" href="#（7）优化http程序执行路径">¶</a>（7）优化http程序执行路径</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ln -s /usr/local/http-2.4.23/bin/* /usr/local/bin/</span></span><br></pre></td></tr></table></figure><h6 id="1）修改配置文件-httpd-conf，设置其中的-ServerName-值"><a class="header-anchor" href="#1）修改配置文件-httpd-conf，设置其中的-ServerName-值">¶</a>1）修改配置文件 httpd.conf，设置其中的 ServerName 值</h6><p>例如：ServerName <a href="http://www.benet.com" target="_blank" rel="noopener">www.benet.com</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim  /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line">ServerName 127.0.0.1</span><br></pre></td></tr></table></figure><h6 id="2）开启-apache-服务器："><a class="header-anchor" href="#2）开启-apache-服务器：">¶</a>2）开启 apache 服务器：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># apachectl start</span></span><br></pre></td></tr></table></figure><h6 id="3）开机后自动启动"><a class="header-anchor" href="#3）开机后自动启动">¶</a>3）开机后自动启动</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># cp /usr/local/http-2.4.23/bin/apachectl /etc/init.d/httpd</span></span><br></pre></td></tr></table></figure><p>编辑 /etc/init.d/httpd 文件，在首行 #!/bin/sh 下面加入两行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /etc/init.d/httpd</span></span><br><span class="line"><span class="comment"># chkconfig: 35 85 15</span></span><br><span class="line"><span class="comment"># description: apache 2.4.23</span></span><br></pre></td></tr></table></figure><blockquote><p>chkconfig: 35 85 15 （在 3 和 5 启动模式下的–启动优先级）</p></blockquote><p>将 Apache 加入开机自动启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># chkconfig --add httpd</span></span><br><span class="line">[root@apache ~]<span class="comment"># chkconfig httpd on</span></span><br></pre></td></tr></table></figure><h5 id="（8）启动编译好的-Apache-2-4-23："><a class="header-anchor" href="#（8）启动编译好的-Apache-2-4-23：">¶</a>（8）启动编译好的 Apache 2.4.23：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">[root@apache ~]<span class="comment"># netstat -anplt | grep 80</span></span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      51792/httpd</span><br></pre></td></tr></table></figure><h5 id="（9）客户端测试访问（注意防火墙）"><a class="header-anchor" href="#（9）客户端测试访问（注意防火墙）">¶</a>（9）客户端测试访问（注意防火墙）</h5><p><img data-src="https://img-blog.csdnimg.cn/2020060811014015.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、Apache的优化配置"><a class="header-anchor" href="#2、Apache的优化配置">¶</a>2、Apache的优化配置</h4><p>apache 所运行的硬件环境都是对性能影响最大的因素，即使不能对硬件进行升级，也最好 给 apache 一个单独的主机以免受到其他应用的干扰。各个硬件指标中，对性能影响最大的 是内存，对于静态内容（图片、javascript 文件、css 文件等），它决定了 apache 可以缓存多 少内容，它缓存的内容越多，在硬盘上读取内容的机会就越少，大内存可以极大提高静态站 点的速度；对动态高负载站点来说，每个请求保存的时间更多一些，apache 的 mpm 模块会 为每个请求派生出相应的进程或线程分别处理，而进程或线程的数量与内存的消耗近似成正 比，因此增大内存对提高动态站点的负载和运行速度也极为有利</p><p>其次是硬盘的速度，静态站点尤为突出，apache 不断的在读取文件并发送给相应的请求， 硬盘的读写是极其频繁的；动态站点也要不断的加载 web 程序(php 等)，一个请求甚至要读 取十几个文件才能处理完成，因此尽可能的提高硬盘速度和质量对提高 apache 的性能是有 积极意义的</p><p>最后是 cpu 和网络，cpu 影响的是 web 程序执行速度，网络影响流量大小</p><h3 id="二、Apache的工作模式"><a class="header-anchor" href="#二、Apache的工作模式">¶</a>二、Apache的工作模式</h3><p>Apache HTTP 服务器被设计为一个强大的、灵活的能够在多种平台以及不同环境下工作的服 务器。这种模块化的设计就叫做“多进程处理模块”（Multi-Processing Module，MPM），也叫 做工作模式</p><h4 id="Prefork-模式（一个非线程型的）："><a class="header-anchor" href="#Prefork-模式（一个非线程型的）：">¶</a>Prefork 模式（一个非线程型的）：</h4><h5 id="其主要工作方式是："><a class="header-anchor" href="#其主要工作方式是：">¶</a>其主要工作方式是：</h5><p>当 Apache 服务器启动后，mpm_prefork 模块会预先创建多个子进程(默 认为 5 个)，每个子进程只有一个线程，当接收到客户端的请求后，mpm_prefork 模块再将 请求转交给子进程处理，并且每个子进程同时只能用于处理单个请求。如果当前的请求数将 超过预先创建的子进程数时，mpm_prefork 模块就会创建新的子进程来处理额外的请求。 Apache 总是试图保持一些备用的或者是空闲的子进程用于迎接即将到来的请求。这样客户 端的请求就不需要在接收后等候子进程的产生</p><p>由于在 mpm_prefork 模块中，每个请求对应一个子进程，因此其占用的系统资源相对其他 两种模块而言较多。不过 mpm_prefork 模块的优点在于它的每个子进程都会独立处理对应 的单个请求，这样，如果其中一个请求出现问题就不会影响到其他请求。Prefork 在效率上 要比 Worker 要高，但是内存使用大得多不擅长处理高并发的场景</p><h5 id="Apache-在-prefork-工作模式下影响性能的重要参数说明"><a class="header-anchor" href="#Apache-在-prefork-工作模式下影响性能的重要参数说明">¶</a>Apache 在 prefork 工作模式下影响性能的重要参数说明</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prefork MPM</span></span><br><span class="line">&lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">    StartServers             5</span><br><span class="line">    MinSpareServers          5</span><br><span class="line">    MaxSpareServers         10</span><br><span class="line">    MaxRequestWorkers      250</span><br><span class="line">    MaxConnectionsPerChild   500</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>StartServers：</p><blockquote><p>apache 启动时候默认开始的子进程数</p></blockquote><p>MinSpareServers：</p><blockquote><p>最小的闲置子进程数</p></blockquote><p>MaxSpareServers：</p><blockquote><p>最大的闲置子进程数</p></blockquote><p>MaxRequestWorkers：</p><blockquote><p>MaxRequestWorkers 设置了允许同时的最大接入请求数量 任何 超 过 MaxRequestWorkers 限 制 的 请 求 将 进 入 等 候 队 列 ， 在 apache2.3.1 以 前 的 版 本 MaxRequestWorkers 被称为 MaxClients，旧的名字仍旧被支持</p></blockquote><p>MaxConnectionsPerChild</p><blockquote><p>设置的是每个子进程可处理的请求数。每个子进程在处理了“MaxConnectionsPerChild” 个请求后将自动销毁。0 意味着无限，即子进程永不销毁。虽然缺省设为 0 可以使每个 子进程处理更多的请求，但如果设成非零值也有两点重要的好处：</p><p>1、可防止意外的内 存泄漏</p><p>2、在服务器负载下降的时侯会自动减少子进程数。因此，可根据服务器的负 载来调整这个值。在 Apache2.3.9 之前称之为 MaxRequestsPerChild</p></blockquote><h5 id="注意："><a class="header-anchor" href="#注意：">¶</a>注意：</h5><h6 id="注1"><a class="header-anchor" href="#注1">¶</a>注1</h6><blockquote><p>MaxRequestWorkers 是这些指令中最为重要的一个，设定的是 Apache 可以同时处理 的请求，是对 Apache 性能影响最大的参数。如果请求总数已达到这个值（可通过 ps -ef|grep http|wc -l 来确认），那么后面的请求就要排队，直到某个已处理请求完毕。这就是系统资源 还剩下很多而 HTTP 访问却很慢的主要原因。虽然理论上这个值越大，可以处理的请求就越 多，建议将初始值设为(以 Mb 为单位的最大物理内存/2),然后根据负载情况进行动态调整。 比如一台 4G 内存的机器，那么初始值就是 4000/2=2000</p></blockquote><h6 id="注2"><a class="header-anchor" href="#注2">¶</a>注2</h6><blockquote><p>prefork 控制进程在最初建立“StartServers”个子进程后，为了满足 MinSpareServers 设 置的需要创建一个进程，等待一秒钟，继续创建两 个，再等待一秒钟，继续创建四个……如 此按指数级增加创建的进程数，最多达到每秒 32 个，直到满足 MinSpareServers 设置的值为止。这种模式 可以不必在请求到来时再产生新的进程，从而减小了系统开销以增加性能。 MaxSpareServers 设置了最大的空闲进程数，如果空闲进程数大于这个 值，Apache 会自动 kill 掉一些多余进程。这个值不要设得过大，但如果设的值比 MinSpareServers 小，Apache 会自 动把其调整为 MinSpareServers+1。如果站点负载较大，可考虑同时加大 MinSpareServers 和 MaxSpareServers</p></blockquote><h6 id="注3"><a class="header-anchor" href="#注3">¶</a>注3</h6><p>ServerLimit 和 MaxClients（MaxRequestWorkers）有什么区别呢？</p><blockquote><p>是因为在 apache1 时代，控制最大进程数只有 MaxClients 这个参数，并且这个参数最大值为 256，并且是写死了的，试图设置为超过 256 是无效的，这是由于 apache1 时代的服务器硬 件限制的。但是 apache2 时代由于服务器硬件的升级，硬件已经不再是限制，所以使用 ServerLimit 这个参数来控制最大进程数，ServerLimit 值&gt;=MaxClient 值才有效。ServerLimit 要放在 MaxClients 之前，值要不小于 MaxClients</p></blockquote><h6 id="注4"><a class="header-anchor" href="#注4">¶</a>注4</h6><p>查看 Apache 加载的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@apache conf]<span class="comment"># apachectl -t -D DUMP_MODULES</span></span><br><span class="line">或</span><br><span class="line">[root@apache conf]<span class="comment"># apachectl -M</span></span><br><span class="line">或</span><br><span class="line">[root@apache conf]<span class="comment"># apachectl -l  # 小写 L，只显示静态模块</span></span><br></pre></td></tr></table></figure><p>如何查看 Apache 的工作模式呢？可以使用 httpd -V 命令查看，另外使用 httpd -l 也可以查 看到</p><h6 id="注5"><a class="header-anchor" href="#注5">¶</a>注5</h6><p>如何修改 prefork 参数和启用 prefork 模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim  /usr/local/http-2.4.23/conf/extra/httpd-mpm.conf</span></span><br><span class="line">&lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">    StartServers             5</span><br><span class="line">    MinSpareServers          5</span><br><span class="line">    MaxSpareServers         10</span><br><span class="line">    MaxRequestWorkers      250</span><br><span class="line">    MaxConnectionsPerChild 500</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">[root@apache ~]<span class="comment"># vim  /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line"><span class="comment"># 注释掉当前的工作模式，开启新的工作模式</span></span><br><span class="line">LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</span><br><span class="line">Include conf/extra/httpd-mpm.conf</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure><h4 id="Worker-模式-多线程多进程-："><a class="header-anchor" href="#Worker-模式-多线程多进程-：">¶</a>Worker 模式(多线程多进程)：</h4><p>和 prefork 模式相比，worker 使用了多进程和多线程的混合模式，worker 模式也同样会先预 派生一些子进程，然后每个子进程创建一些线程，同时包括一个监听线程，每个请求过来会 被分配到一个线程来服务。线程比起进程会更轻量，因为线程是通过共享父进程的内存空间， 因此，内存的占用会减少一些，在高并发的场景下会比 prefork 有更多可用的线程，表现会 更优秀一些；另外，如果一个线程出现了问题也会导致同一进程下的线程出现问题，如果是 多个线程出现问题，也只是影响 Apache 的一部分，而不是全部。由于用到多进程多线程， 需要考虑到线程的安全了，在使用 keep-alive 长连接的时候，某个线程会一直被占用，即使 中间没有请求，需要等待到超时才会被释放（该问题在 prefork 模式下也存在）</p><p>总的来说，prefork 方式速度要稍高于 worker，然而它需要的 cpu 和 memory 资源也稍多于 woker</p><h5 id="Apache-在-worker-工作模式下影响性能的重要参数说明"><a class="header-anchor" href="#Apache-在-worker-工作模式下影响性能的重要参数说明">¶</a>Apache 在 worker 工作模式下影响性能的重要参数说明</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># worker MPM</span></span><br><span class="line">&lt;IfModule mpm_worker_module&gt;</span><br><span class="line">    StartServers             3</span><br><span class="line">    MinSpareThreads         75</span><br><span class="line">    MaxSpareThreads        250</span><br><span class="line">    ThreadsPerChild         25</span><br><span class="line">    MaxRequestWorkers      400</span><br><span class="line">    MaxConnectionsPerChild   0</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>StartServers：apache 启动时候默认开始的子进程数</p><p>MinSpareThreads：最小空闲数量的工作线程</p><p>MaxSpareThreads：最大空闲数量的工作线程</p><p>ThreadsPerChild：每个子进程产生的线程数量</p><p>MaxRequestWorkers：与 prefork 模式相同</p><p>MaxConnectionsPerChild：与 prefork 模式相同</p><h5 id="注意"><a class="header-anchor" href="#注意">¶</a>注意</h5><h6 id="注1-v2"><a class="header-anchor" href="#注1-v2">¶</a>注1</h6><p>Worker 由主控制进程生成“StartServers”个子进程，每个子进程中包含固定的 ThreadsPerChild 线程数，各个线程独立地处理请求。同样， 为了不在请求到来时再生成线 程，MinSpareThreads 和 MaxSpareThreads 设置了最少和最多的空闲线程数；</p><p>而 MaxRequestWorkers 设置了同时连入的 clients 最大总数。如果现有子进程中的线程总数不 能满足负载，控制进程将派生新的子进程</p><p>MinSpareThreads 和 MaxSpareThreads 的最大缺省值分别是 75 和 250。这两个参数对 Apache 的性能影响并不大，可以按照实际情况相应调节</p><h6 id="注2-v2"><a class="header-anchor" href="#注2-v2">¶</a>注2</h6><p>ThreadsPerChild 是 worker MPM 中与性能相关最密切的指令。ThreadsPerChild 的最大 缺省值是 64，如果负载较大，64 也是不够的。这时要显式使用 ThreadLimit 指令，它的最大 缺省值是 20000。</p><h6 id="注3-v2"><a class="header-anchor" href="#注3-v2">¶</a>注3</h6><p>Worker 模式下所能同时处理的请求总数是由子进程总数乘以 ThreadsPerChild 值决定 的，应该大于等于 MaxRequestWorkers。如果负载很大，现有的子进程数不能满足时，控制 进程会派生新的子进程。默认最大的子进程总数是 16，加大时 也需要显式声明 ServerLimit （系统配置的最大进程数量，最大值是 20000）。需要注意的是，如果显式声明了 ServerLimit， 那么它乘以 ThreadsPerChild的值必须大于等于MaxRequestWorkers，而且MaxRequestWorkers 必须是 ThreadsPerChild 的整数倍，否则 Apache 将会自动调节到一个相应值</p><h6 id="注4：进程与线程的区别"><a class="header-anchor" href="#注4：进程与线程的区别">¶</a>注4：进程与线程的区别</h6><p>线程是指进程内的一个执行单元,也是进程内的可调度实体</p><p>与进程的区别:</p><blockquote><p>（1）地址空间:进程内的一个执行单元;进程至少有一个线程;它们共享进程的地址空间;而进程 有自己独立的地址空间;</p><p>（2）资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源</p><p>（3）线程是处理器调度的基本单位,但进程不是</p><p>（4）二者均可并发执行.</p></blockquote><p>进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对 应用的并发性</p><p>进程和线程的区别在于：</p><blockquote><p>简而言之,一个程序至少有一个进程,一个进程至少有一个线程.</p><p>线程的划分尺度小于进程，使得多线程程序的并发性高。</p><p>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程 序的运行效率</p></blockquote><h4 id="Event模式"><a class="header-anchor" href="#Event模式">¶</a>Event模式</h4><p>这是 Apache 最新的工作模式，是 worker 模式的变种，它把服务进程从连接中分离出来，一 worker 模式不同的是在于它解决了 keep-alive 长连接的时候占用线程资源被浪费的问题，在 event 工作模式中，会有一些专门的线程用来管理这些 keep-alive 类型的线程，当有真实请求过来的时候，将请求传递给服务器的线程，执行完毕后，又允许它释放。这增强了在高并 发场景下的请求处理。event 模式不能很好的支持 https 的访问（HTTP 认证相关的问题）</p><h3 id="三、apache-配置参数"><a class="header-anchor" href="#三、apache-配置参数">¶</a>三、apache 配置参数</h3><h5 id="（1）KeepAlive-On-Off"><a class="header-anchor" href="#（1）KeepAlive-On-Off">¶</a>（1）KeepAlive On/Off</h5><p>KeepAlive 指的是保持连接活跃，换一句话说，如果将 KeepAlive 设置为 On，那么来自 同一客户端的请求就不需要再一次连接，避免每次请求都要新建一个连接而加重服务器的负 担。一般情况下，图片较多的网站应该把 KeepAlive 设为 On</p><h5 id="（2）KeepAliveTimeOut-number"><a class="header-anchor" href="#（2）KeepAliveTimeOut-number">¶</a>（2）KeepAliveTimeOut number</h5><p>如果第二次请求和第一次请求之间超过 KeepAliveTimeOut 的时间的话，第一次连接就会 中断，再新建第二个连接。它的设置一般考虑图片或者 JS 等文件两次请求间隔，一般设置 为 3-5 秒</p><h5 id="（3）MaxKeepAliveRequests-100"><a class="header-anchor" href="#（3）MaxKeepAliveRequests-100">¶</a>（3）MaxKeepAliveRequests 100</h5><p>一次连接可以进行的 HTTP 请求的最大请求次数。将其值设为 0 将支持在一次连接内进 行无限次的传输请求。事实上没有客户程序在一次连接中请求太多的页面，通常达不到这个 上限就完成连接了</p><h5 id="（4）HostnameLookups-on-off-double"><a class="header-anchor" href="#（4）HostnameLookups-on-off-double">¶</a>（4）HostnameLookups on|off|double</h5><p>如果是使用 on，那么只有进行一次反查，如果用 double，那么进行反查之后还要进行一次 正向解析，只有两次的结果互相符合才行，而 off 就是不进行域名验证。 如果为了安全，建议使用 double；为了加快访问速度，建议使用 off。 域名查找开启这个会增加 apache 的负担, 减慢访问速度建议关闭</p><h5 id="（5）timeout-5"><a class="header-anchor" href="#（5）timeout-5">¶</a>（5）timeout 5</h5><p>推荐 5 这个是 apache 接受请求或者发出相应的时间超过这个时间断开</p><p>注：以上配置项可在/usr/local/http-2.4.23/conf/extra/httpd-default.conf 设置并在 httpd.conf 文件中通过 include 选项引用</p><h4 id="MPM-这个比较关键是影响并发效率的主要因素"><a class="header-anchor" href="#MPM-这个比较关键是影响并发效率的主要因素">¶</a>MPM 这个比较关键是影响并发效率的主要因素</h4><h5 id="（1）StartServers-10"><a class="header-anchor" href="#（1）StartServers-10">¶</a>（1）StartServers 10</h5><p>设置服务器启动时建立的子进程数量。因为子进程数量动态的取决于负载的轻重,所以 一般没有必要调整这个参数</p><h5 id="（2）MinSpareServers-10"><a class="header-anchor" href="#（2）MinSpareServers-10">¶</a>（2）MinSpareServers 10</h5><p>设置空闲子进程的最小数量。所谓空闲子进程是指没有正在处理请求的子进程。如果当 前空闲子进程数少于 MinSpareServers ,那么 Apache 将以最大每秒一个的速度产生新的子进 程。只有在非常繁忙机器上才需要调整这个参数。将此参数设的太大通常是一个坏主意</p><h5 id="（3）MaxSpareThreads-75"><a class="header-anchor" href="#（3）MaxSpareThreads-75">¶</a>（3）MaxSpareThreads 75</h5><p>设置空闲子进程的最大数量。如果当前有超过 MaxSpareServers 数量的空闲子进程,那么 父进程将杀死多余的子进程。只有在非常繁忙机器上才需要调整这个参数。将此参数设的太 大通常是一个坏主意。如果你将该指令的值设置为比 MinSpareServers 小,Apache 将会自动将 其修改成”MinSpareServers+1″</p><h5 id="（4）ServerLimit-2000"><a class="header-anchor" href="#（4）ServerLimit-2000">¶</a>（4）ServerLimit 2000</h5><p>服务器允许配置的进程数上限。只有在你需要将 MaxClients 设置成高于默认值 256 的时 候才需要使用。要将此指令的值保持和 MaxClients 一样。修改此指令的值必须完全停止服务 后再启动才能生效，以 restart 方式重启动将不会生效</p><h5 id="（5）MaxClients-MaxRequestWorkers-256"><a class="header-anchor" href="#（5）MaxClients-MaxRequestWorkers-256">¶</a>（5）MaxClients/MaxRequestWorkers 256</h5><p>用于客户端请求的最大请求数量（最大子进程数），任何超过 MaxClients 限制的请求都 将进入等候队列。默认值是 256，如果要提高这个值必须同时提高 ServerLimit 的值。建议将初始值设为(以 Mb 为单位的最大物理内存/2),然后根据负载情况进行动态调整。比如一台 4G 内存的机器，那么初始值就是 4000/2=2000。</p><h5 id="（6）MaxRequestsPerChild-MaxConnectionsPerChild-0"><a class="header-anchor" href="#（6）MaxRequestsPerChild-MaxConnectionsPerChild-0">¶</a>（6）MaxRequestsPerChild /MaxConnectionsPerChild 0</h5><p>设置的是每个子进程可处理的请求数。每个子进程在处理了“MaxRequestsPerChild”个请 求后将自动销毁。0 意味着无限，即子进程永不销毁。内存较大的服务器可以设置为 0 或较 大的数字。内存较小的服务器不妨设置成 30、50、100。所以一般情况下，如果你发现服务 器的内存直线上升，建议修改该参数试试</p><p>效，以 restart 方式重启动将不会生效</p><h5 id="（5）MaxClients-MaxRequestWorkers-256-v2"><a class="header-anchor" href="#（5）MaxClients-MaxRequestWorkers-256-v2">¶</a>（5）MaxClients/MaxRequestWorkers 256</h5><p>用于客户端请求的最大请求数量（最大子进程数），任何超过 MaxClients 限制的请求都 将进入等候队列。默认值是 256，如果要提高这个值必须同时提高 ServerLimit 的值。建议将初始值设为(以 Mb 为单位的最大物理内存/2),然后根据负载情况进行动态调整。比如一台 4G 内存的机器，那么初始值就是 4000/2=2000。</p><h5 id="（6）MaxRequestsPerChild-MaxConnectionsPerChild-0-v2"><a class="header-anchor" href="#（6）MaxRequestsPerChild-MaxConnectionsPerChild-0-v2">¶</a>（6）MaxRequestsPerChild /MaxConnectionsPerChild 0</h5><p>设置的是每个子进程可处理的请求数。每个子进程在处理了“MaxRequestsPerChild”个请 求后将自动销毁。0 意味着无限，即子进程永不销毁。内存较大的服务器可以设置为 0 或较 大的数字。内存较小的服务器不妨设置成 30、50、100。所以一般情况下，如果你发现服务 器的内存直线上升，建议修改该参数试试</p><p>注：以上配置项可在/usr/local/http-2.4.23/conf/extra/httpd-mpm.conf 设置并在 httpd.conf 文 件中通过 include 选项引用</p>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python列表(list)练习题</title>
    <link href="https://pdxblog.top/Python%E5%88%97%E8%A1%A8(list)%E7%BB%83%E4%B9%A0%E9%A2%98.html"/>
    <id>https://pdxblog.top/Python%E5%88%97%E8%A1%A8(list)%E7%BB%83%E4%B9%A0%E9%A2%98.html</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2020-05-29T08:04:06.818Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python列表-list-练习题"><a class="header-anchor" href="#Python列表-list-练习题">¶</a>Python列表(list)练习题</h3><p>@[toc]</p><h4 id="一、姓名："><a class="header-anchor" href="#一、姓名：">¶</a>一、姓名：</h4><blockquote><p>将一些朋友的姓名存储在一个列表中，并将其命名为names。依次访问该列表中的每个元素，从而将每个朋友的姓名都打印出来</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>, <span class="string">'赵六'</span>, <span class="string">'田七'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br><span class="line">赵六</span><br><span class="line">田七</span><br></pre></td></tr></table></figure><h4 id="二、问候语"><a class="header-anchor" href="#二、问候语">¶</a>二、问候语</h4><blockquote><p>继续使用上一个的列表，但不打印每个朋友的姓名，而为每人打印一条消息。</p><p>每条消息都包含相同的问候语，但抬头为相应朋友的姓名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>, <span class="string">'赵六'</span>, <span class="string">'田七'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name + <span class="string">'，Good moning!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">张三，Good moning!</span><br><span class="line">李四，Good moning!</span><br><span class="line">王五，Good moning!</span><br><span class="line">赵六，Good moning!</span><br><span class="line">田七，Good moning!</span><br></pre></td></tr></table></figure><h4 id="三、自己的列表"><a class="header-anchor" href="#三、自己的列表">¶</a>三、自己的列表</h4><blockquote><p>想想你喜欢的通勤方式，如骑摩托车或开汽车，并创建一个包含多种通勤方式的列表。根据该列表打印一系列有关这些通勤方式的宣言，如“I would like to own a Honda motorcycle”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">commuting = [<span class="string">'car'</span>, <span class="string">'bicycle'</span>, <span class="string">'motorcycle'</span>]</span><br><span class="line">brands = [<span class="string">'Benz'</span>, <span class="string">'GIANT'</span>, <span class="string">'Honda'</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">    print(<span class="string">'I would like to own a '</span> + brands[num] + <span class="string">' '</span> + commuting[num])</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I would like to own a Benz car</span><br><span class="line">I would like to own a GIANT bicycle</span><br><span class="line">I would like to own a Honda motorcycle</span><br></pre></td></tr></table></figure><h4 id="四、嘉宾名单"><a class="header-anchor" href="#四、嘉宾名单">¶</a>四、嘉宾名单</h4><blockquote><p>如果你可以邀请任何人一起共进晚餐（无论是在世的还是故去的），你会邀请哪些人？请创建一个列表，其中包含至少3你想邀请的人；然后，使用这个列表打印消息，邀请这些人来与你共进晚餐</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">guests = [<span class="string">"Tom"</span>, <span class="string">"John"</span>, <span class="string">"Mike"</span>, <span class="string">"Padma"</span>]</span><br><span class="line"><span class="keyword">for</span> guest <span class="keyword">in</span> guests:</span><br><span class="line">    print(guest + <span class="string">", 我可以邀请你共进晚餐吗?"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tom, 我可以邀请你共进晚餐吗?</span><br><span class="line">John, 我可以邀请你共进晚餐吗?</span><br><span class="line">Mike, 我可以邀请你共进晚餐吗?</span><br><span class="line">Padma, 我可以邀请你共进晚餐吗?</span><br></pre></td></tr></table></figure><h4 id="五、修改嘉宾名单"><a class="header-anchor" href="#五、修改嘉宾名单">¶</a>五、修改嘉宾名单</h4><blockquote><p>你刚得知有位嘉宾无法赴约，因此需要另外邀请一位嘉宾。</p><p>以完成练习4时编写的程序为基础，在程序末尾添加一条print语句，指出哪位嘉宾无法赴约。</p><p>修改嘉宾名单，将无法赴约的嘉宾的姓名替换为新邀请的嘉宾的姓名。</p><p>再次打印一系列消息，向名单中的每位嘉宾发出邀请</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(guests[<span class="number">2</span>] + <span class="string">"不能一起吃饭!"</span> + <span class="string">"\n"</span>)</span><br><span class="line">guests[<span class="number">2</span>] = <span class="string">'Bob'</span></span><br><span class="line"><span class="keyword">for</span> guest <span class="keyword">in</span> guests:</span><br><span class="line">    print(guest + <span class="string">", 我可以邀请你共进晚餐吗?"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mike不能一起吃饭!</span><br><span class="line"></span><br><span class="line">Tom, 我可以邀请你共进晚餐吗?</span><br><span class="line">John, 我可以邀请你共进晚餐吗?</span><br><span class="line">Bob, 我可以邀请你共进晚餐吗?</span><br><span class="line">Padma, 我可以邀请你共进晚餐吗?</span><br></pre></td></tr></table></figure><h4 id="六、添加嘉宾"><a class="header-anchor" href="#六、添加嘉宾">¶</a>六、添加嘉宾</h4><blockquote><p>你刚找到了一个更大的餐桌，可容纳更多的嘉宾。请想想你还想邀请哪三位嘉宾。</p><p>以完成练习4或练习5时编写的程序为基础，在程序末尾添加一条print语句，指出你找到了一个更大的餐桌。</p><p>使用insert()将一位新嘉宾添加到名单开头。</p><p>使用insert()将另一位新嘉宾添加到名单中间。</p><p>使用append()将最后一位新嘉宾添加到名单末尾。</p><p>打印一系列消息，向名单中的每位嘉宾发出邀请</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"我找到了一个更大的餐桌!"</span> + <span class="string">"\n"</span>)</span><br><span class="line">guests.insert(<span class="number">0</span>, <span class="string">'zhangsan'</span>)</span><br><span class="line">guests.insert(<span class="number">3</span>, <span class="string">'lisi'</span>)</span><br><span class="line">guests.append(<span class="string">'wangwu'</span>)</span><br><span class="line"><span class="keyword">for</span> guest <span class="keyword">in</span> guests:</span><br><span class="line">    print(guest + <span class="string">", 我可以邀请你共进晚餐吗?"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我找到了一个更大的餐桌!</span><br><span class="line"></span><br><span class="line">zhangsan, 我可以邀请你共进晚餐吗?</span><br><span class="line">Tom, 我可以邀请你共进晚餐吗?</span><br><span class="line">John, 我可以邀请你共进晚餐吗?</span><br><span class="line">lisi, 我可以邀请你共进晚餐吗?</span><br><span class="line">Bob, 我可以邀请你共进晚餐吗?</span><br><span class="line">Padma, 我可以邀请你共进晚餐吗?</span><br><span class="line">wangwu, 我可以邀请你共进晚餐吗?</span><br></pre></td></tr></table></figure><h4 id="七、缩减名单"><a class="header-anchor" href="#七、缩减名单">¶</a>七、缩减名单</h4><p>你刚得知新购买的餐桌无法及时送达，因此只能邀请两位嘉宾。</p><blockquote><p>以完成练习6时编写的程序为基础，在程序末尾添加一行代码，打印一条你只能邀请两位嘉宾共进晚餐的消息。</p><p>使用 pop()不断地删除名单中的嘉宾，直到只有两位嘉宾为止。每次从名单中弹出一位嘉宾时，都打印一条消息，让该嘉宾知悉你很抱歉，无法邀请他来共进晚餐。</p><p>对于余下的两位嘉宾中的每一位，都打印一条消息，指出他依然在受邀人之列。</p><p>使用del()将最后两位嘉宾从名单中删除，让名单变成空的。打印该名单，核实程序结束时名单确实是空的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"sorry,我只能邀请两位嘉宾共进晚餐!"</span> + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">while</span> len(guests) &gt; <span class="number">2</span>:</span><br><span class="line">    honored = guests.pop()</span><br><span class="line">    print(honored + <span class="string">",我很抱歉,我不能邀请你一起共进晚餐!"</span>)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line"><span class="keyword">for</span> guest <span class="keyword">in</span> guests:</span><br><span class="line">    print(guest + <span class="string">", 我仍然希望你能和我一起吃饭!"</span>)</span><br><span class="line"><span class="keyword">del</span> guests[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">del</span> guests[<span class="number">0</span>]</span><br><span class="line">print(guests)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sorry,我只能邀请两位嘉宾共进晚餐!</span><br><span class="line"></span><br><span class="line">wangwu,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">Padma,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">Bob,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">lisi,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">John,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">------------</span><br><span class="line">zhangsan, 我仍然希望你能和我一起吃饭!</span><br><span class="line">Tom, 我仍然希望你能和我一起吃饭!</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h4 id="八、放眼世界"><a class="header-anchor" href="#八、放眼世界">¶</a>八、放眼世界</h4><blockquote><p>想出至少5个你渴望去旅游的地方。</p><p>​将这些地方存储在一个列表中，并确保其中的元素不是按字母顺序排列的。</p><p>​按原始排列顺序打印该列表。不要考虑输出是否整洁的问题，只管打印原始Python列表。</p><p>​使用sorted()按字母顺序打印这个列表，同时不要修改它。</p><p>​再次打印该列表，核实排列顺序未变。</p><p>​使用sorted()按与字母顺序相反的顺序打印这个列表， 同时不要修改它。</p><p>​再次打印该列表，核实排列顺序未变。</p><p>​使用reverse()修改列表元素的排列顺序。打印该列表，核实排列顺序确实变了。</p><p>​使用reverse()再次修改列表元素的排列顺序。打印该列表，核实已恢复到原来的排列顺序。</p><p>​使用sort()修改该列表，使其元素按字母顺序排列。打印该列表，核实排列顺序确实变了。</p><p>​使用sort()修改该列表，使其元素按与字母顺序相反的顺序排列。打印该列表，核实排列顺序确实变了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">resort = [</span><br><span class="line">    <span class="string">"Santorini"</span>, <span class="string">"Aegean Sea"</span>, <span class="string">"Pink Sands"</span>, <span class="string">"Rose Lake"</span>, <span class="string">"The blue hole"</span></span><br><span class="line">]</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">print(sorted(resort))</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">print(sorted(resort, reverse=<span class="literal">True</span>))</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">resort.reverse()</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">resort.reverse()</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">resort.sort()</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">resort.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(resort)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">['Santorini', 'Aegean Sea', 'Pink Sands', 'Rose Lake', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['Aegean Sea', 'Pink Sands', 'Rose Lake', 'Santorini', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['Santorini', 'Aegean Sea', 'Pink Sands', 'Rose Lake', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['The blue hole', 'Santorini', 'Rose Lake', 'Pink Sands', 'Aegean Sea']</span><br><span class="line">------------</span><br><span class="line">['Santorini', 'Aegean Sea', 'Pink Sands', 'Rose Lake', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['The blue hole', 'Rose Lake', 'Pink Sands', 'Aegean Sea', 'Santorini']</span><br><span class="line">------------</span><br><span class="line">['Santorini', 'Aegean Sea', 'Pink Sands', 'Rose Lake', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['Aegean Sea', 'Pink Sands', 'Rose Lake', 'Santorini', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['The blue hole', 'Santorini', 'Rose Lake', 'Pink Sands', 'Aegean Sea']</span><br></pre></td></tr></table></figure><h4 id="九、晚餐嘉宾"><a class="header-anchor" href="#九、晚餐嘉宾">¶</a>九、晚餐嘉宾</h4><blockquote><p>使用len()打印一条消息，指出你邀请了多少位嘉宾来与你共进晚餐</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guests = [<span class="string">"Tom"</span>, <span class="string">"John"</span>, <span class="string">"Mike"</span>, <span class="string">"Padma"</span>]</span><br><span class="line">print(<span class="string">"我一共邀请了"</span> + str(len(guests)) + <span class="string">"位嘉宾"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我一共邀请了4位嘉宾</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python一系列练习题
    
    </summary>
    
    
      <category term="Python一些列练习题" scheme="https://pdxblog.top/categories/Python%E4%B8%80%E4%BA%9B%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Python一系列练习题" scheme="https://pdxblog.top/tags/Python%E4%B8%80%E7%B3%BB%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>for循环和原作练习题</title>
    <link href="https://pdxblog.top/for%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%8E%9F%E4%BD%9C%E7%BB%83%E4%B9%A0%E9%A2%98.html"/>
    <id>https://pdxblog.top/for%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%8E%9F%E4%BD%9C%E7%BB%83%E4%B9%A0%E9%A2%98.html</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2020-05-29T08:04:06.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for循环和原作练习题"><a class="header-anchor" href="#for循环和原作练习题">¶</a>for循环和原作练习题</h3><p>@[toc]</p><h4 id="1、比萨："><a class="header-anchor" href="#1、比萨：">¶</a>1、比萨：</h4><blockquote><p>想出至少三种你喜欢的比萨，将其名称存储在一个列表中，再使用for循环将每种比萨的名称都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pizzas = [<span class="string">'鸡肉披萨'</span>, <span class="string">'牛肉披萨'</span>, <span class="string">'培根披萨'</span>]</span><br><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">    print(pizza)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">鸡肉披萨</span><br><span class="line">牛肉披萨</span><br><span class="line">培根披萨</span><br></pre></td></tr></table></figure><h5 id="（1）I-like-pepperoni-pizza"><a class="header-anchor" href="#（1）I-like-pepperoni-pizza">¶</a>（1）I like pepperoni pizza</h5><blockquote><p>修改这个for循环，使其打印包含比萨名称的句子，而不仅仅是比萨的名称。对于每种比萨，都显示一行输出，如“Ilikepepperonipizza”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">    print(<span class="string">'I like '</span> + pizza)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I like 鸡肉披萨</span><br><span class="line">I like 牛肉披萨</span><br><span class="line">I like 培根披萨</span><br></pre></td></tr></table></figure><h5 id="（2）I-really-love-pizza"><a class="header-anchor" href="#（2）I-really-love-pizza">¶</a>（2）I really love pizza!</h5><blockquote><p>在程序末尾添加一行代码，它不在for循环中，指出你有多喜欢比萨。输出应包含针对每种比萨的消息，还有一个总结性句子，如“Ireallylovepizza!”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">    print(<span class="string">'I like '</span> + pizza + <span class="string">' very much'</span>)</span><br><span class="line">print(<span class="string">'I really love pizza!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I like 鸡肉披萨 very much</span><br><span class="line">I like 牛肉披萨 very much</span><br><span class="line">I like 培根披萨 very much</span><br><span class="line">I really love pizza!</span><br></pre></td></tr></table></figure><h4 id="2、动物："><a class="header-anchor" href="#2、动物：">¶</a>2、动物：</h4><blockquote><p>想出至少三种有共同特征的动物，将这些动物的名称存储在一个列表中，再使用for循环将每种动物的名称都打印出来。</p></blockquote><h5 id="（1）A-dog-would-make-great-pet"><a class="header-anchor" href="#（1）A-dog-would-make-great-pet">¶</a>（1）A dog would make great pet</h5><blockquote><p>修改这个程序，使其针对每种动物都打印一个句子，如“Adogwouldmakeagreatpet”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zoos = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'pig'</span>]</span><br><span class="line"><span class="keyword">for</span> zoo <span class="keyword">in</span> zoos:</span><br><span class="line">    print(zoo + <span class="string">' would make great pet!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dog would make great pet!</span><br><span class="line">cat would make great pet!</span><br><span class="line">pig would make great pet!</span><br></pre></td></tr></table></figure><h5 id="（2）Any-of-these-animals-would-make-a-great-pet"><a class="header-anchor" href="#（2）Any-of-these-animals-would-make-a-great-pet">¶</a>（2）Any of these animals would make a great pet</h5><blockquote><p>在程序末尾添加一行代码，指出这些动物的共同之处，如打印诸如“Anyoftheseanimalswouldmakeagreatpet!”这样的句子。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> zoo <span class="keyword">in</span> zoos:</span><br><span class="line">    print(zoo + <span class="string">' would make great pet!'</span>)</span><br><span class="line">print(<span class="string">"Any of these animals would make a great pet!"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog would make great pet!</span><br><span class="line">cat would make great pet!</span><br><span class="line">pig would make great pet!</span><br><span class="line">Any of these animals would make a great pet!</span><br></pre></td></tr></table></figure><h4 id="3、数到20："><a class="header-anchor" href="#3、数到20：">¶</a>3、数到20：</h4><blockquote><p>使用一个for循环打印数字1~20（含）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    print(num, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</span><br></pre></td></tr></table></figure><h4 id="4、一百万："><a class="header-anchor" href="#4、一百万：">¶</a>4、一百万：</h4><blockquote><p>创建一个列表，其中包含数字1~1000000，再使用一个for循环将这些数字打印出来（如果输出的时间太长，按Ctrl+C停止输出，或关闭输出窗口）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> nums <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000001</span>):</span><br><span class="line">    print(nums, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h4 id="5、计算1-1000000的总和："><a class="header-anchor" href="#5、计算1-1000000的总和：">¶</a>5、计算1~1000000的总和：</h4><blockquote><p>创建一个列表，其中包含数字1~1000000，再使用min()和max()核实该列表确实是从1开始，到1000000结束的。另外，对这个列表调用函数sum()，看看Python将一百万个数字相加需要多长时间。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = list(range(<span class="number">1</span>, <span class="number">1000001</span>))</span><br><span class="line">print(min(number))</span><br><span class="line">print(max(number))</span><br><span class="line">print(sum(number))</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1000000</span><br><span class="line">500000500000</span><br></pre></td></tr></table></figure><h4 id="6、奇数："><a class="header-anchor" href="#6、奇数：">¶</a>6、奇数：</h4><blockquote><p>通过给函数range()指定第三个参数来创建一个列表，其中包含1~20的奇数；再使用一个for循环将这些数字都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>, <span class="number">2</span>):</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 7 9 11 13 15 17 19</span><br></pre></td></tr></table></figure><h4 id="7、3的倍数："><a class="header-anchor" href="#7、3的倍数：">¶</a>7、3的倍数：</h4><blockquote><p>创建一个列表，其中包含3~30内能被3整除的数字；再使用一个for循环将这个列表中的数字都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">30</span>,<span class="number">3</span>):</span><br><span class="line">    print(j,end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 6 9 12 15 18 21 24 27</span><br></pre></td></tr></table></figure><h4 id="8、立方："><a class="header-anchor" href="#8、立方：">¶</a>8、立方：</h4><blockquote><p>将同一个数字乘三次称为立方。例如，在Python中，2的立方用2**3表示。请创建一个列表，其中包含前10个整数（即1~10）的立方，再使用一个for循环将这些立方数都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">values = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    cube = value**<span class="number">3</span></span><br><span class="line">    values.append(cube)</span><br><span class="line">print(values)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]</span><br></pre></td></tr></table></figure><h4 id="9、立方解析："><a class="header-anchor" href="#9、立方解析：">¶</a>9、立方解析：</h4><blockquote><p>使用列表解析生成一个列表，其中包含前10个整数的立方。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cubes = [value ** <span class="number">3</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">print(cubes)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]</span><br></pre></td></tr></table></figure><h4 id="10、自助餐："><a class="header-anchor" href="#10、自助餐：">¶</a>10、自助餐：</h4><blockquote><p>有一家自助式餐馆，只提供五种简单的食品。请想出五种简单的食品，并将其存储在一个元组中。</p></blockquote><h5 id="（1）使用一个for循环将该餐馆提供的五种食品都打印出来。"><a class="header-anchor" href="#（1）使用一个for循环将该餐馆提供的五种食品都打印出来。">¶</a>（1）使用一个for循环将该餐馆提供的五种食品都打印出来。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buffets = (<span class="string">'饮料'</span>,<span class="string">'甜品'</span>,<span class="string">'水果'</span>,<span class="string">'肉食'</span>,<span class="string">'素食'</span>)</span><br><span class="line"><span class="keyword">for</span> buffet <span class="keyword">in</span> buffets:</span><br><span class="line">    print(buffet,end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">饮料 甜品 水果 肉食 素食</span><br></pre></td></tr></table></figure><h5 id="（2）尝试修改其中的一个元素，核实Python确实会拒绝你这样做。"><a class="header-anchor" href="#（2）尝试修改其中的一个元素，核实Python确实会拒绝你这样做。">¶</a>（2）尝试修改其中的一个元素，核实Python确实会拒绝你这样做。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffets[<span class="number">0</span>] = <span class="string">'啤酒'</span></span><br></pre></td></tr></table></figure><h5 id="（3）餐馆调整了菜单，替换了它提供的其中两种食品。请编写一个这样的代码块："><a class="header-anchor" href="#（3）餐馆调整了菜单，替换了它提供的其中两种食品。请编写一个这样的代码块：">¶</a>（3）餐馆调整了菜单，替换了它提供的其中两种食品。请编写一个这样的代码块：</h5><blockquote><p>给元组变量赋值，并使用一个for循环将新元组的每个元素都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buffets = (<span class="string">'啤酒'</span>,<span class="string">'蛋糕'</span>,<span class="string">'水果'</span>,<span class="string">'肉食'</span>,<span class="string">'素食'</span>)</span><br><span class="line"><span class="keyword">for</span> buffet <span class="keyword">in</span> buffets:</span><br><span class="line">    print(buffet,end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">啤酒 蛋糕 水果 肉食 素食</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python一系列练习题
    
    </summary>
    
    
      <category term="Python一些列练习题" scheme="https://pdxblog.top/categories/Python%E4%B8%80%E4%BA%9B%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Python一系列练习题" scheme="https://pdxblog.top/tags/Python%E4%B8%80%E7%B3%BB%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python制作疫情地图</title>
    <link href="https://pdxblog.top/%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE.html"/>
    <id>https://pdxblog.top/%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE.html</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2020-05-29T08:08:11.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="疫情地图"><a class="header-anchor" href="#疫情地图">¶</a>疫情地图</h3><p>话不多说，直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opt</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">result = requests.get(<span class="string">'https://gwpre.sina.cn/interface/fymap2020_data.json'</span>).text</span><br><span class="line">result = json.loads(result)</span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清洗数据</span></span><br><span class="line">data = list()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result[<span class="string">'data'</span>][<span class="string">'list'</span>]:</span><br><span class="line">    data.append((i[<span class="string">'name'</span>], i[<span class="string">'value'</span>]))</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制中国地图</span></span><br><span class="line">new_map = Map()</span><br><span class="line">new_map.set_global_opts(</span><br><span class="line">    title_opts=opt.TitleOpts(<span class="string">'疫情地图'</span>,</span><br><span class="line">                             subtitle=<span class="string">'数据来源于新浪网'</span>,</span><br><span class="line">                             subtitle_link=<span class="string">'http://www.sina.cn'</span>),</span><br><span class="line">    visualmap_opts=opt.VisualMapOpts(max_=<span class="number">10000</span>, is_piecewise=<span class="literal">True</span>))</span><br><span class="line">new_map.add(<span class="string">'确诊'</span>, data, maptype=<span class="string">'china'</span>)</span><br><span class="line">new_map.render(<span class="string">'20200528.html'</span>)</span><br></pre></td></tr></table></figure><p>效果图：<br><img data-src="https://img-blog.csdnimg.cn/20200529155455859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      Python一系列练习题
    
    </summary>
    
    
      <category term="Python一些列练习题" scheme="https://pdxblog.top/categories/Python%E4%B8%80%E4%BA%9B%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Python一系列练习题" scheme="https://pdxblog.top/tags/Python%E4%B8%80%E7%B3%BB%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python网络管理</title>
    <link href="https://pdxblog.top/Python%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86.html"/>
    <id>https://pdxblog.top/Python%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86.html</id>
    <published>2020-05-14T16:00:00.000Z</published>
    <updated>2020-05-15T06:31:34.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络"><a class="header-anchor" href="#网络">¶</a>网络</h2><p>网络可以将多台主机进行连接，使得网络中的主机可以相互通信。在网络通信中，使用最广泛的通信协议是TCP/IP协议簇，因此，Python也提供了相应的应用程序接口（API), 使得工程师可以在Python程序中创建网络连接、进行网络通信。<br>计算机之间可以相互通信以后，就开始涉及网络安全问题。现如今网络情况复杂安全环境恶劣。</p><blockquote><p>2017年5月12日起，全球范围内爆发基于Windows网络共享协议进行攻击传播的蠕虫恶意代码，这是不法分子通过改造之前泄露的NSA黑客武器库中“永恒之蓝”攻击程序发起的网络攻击事件。五个小时内，包括英国、俄罗斯、整个欧洲以及中国国内多个高校校内网、大型企业内网和政府机构专网中招，被勒索支付高额赎金才能解密恢复文件，对重要数据造成严重损失。<br>被袭击的设备被锁定，并索要300美元比特币赎金。要求尽快支付勒索赎金，否则将删除文件，甚至提出半年后如果还没支付的穷人可以参加免费解锁的活动。原来以为这只是个小范围的恶作剧式的勒索软件，没想到该勒索软件大面积爆发，许多高校学生中招，愈演愈烈。</p></blockquote><p>Python是一门应用领域非常广泛的语言，除了在科学计算、大数据处理、自动化运维等领域广泛应用以外，在计算机网络领域中使用也非常广泛。这主要得益于Python语言的开发效率高、入门门槛低、功能强大等优点。工程师可以使用Python语言管理网络，计算机黑客可以使用Python语言或者Python语言编写的安全工具进行渗透测试、网络分析、安全防范等。<br>在这章中，我们将介绍Python在网络方面的应用，包括网络通信、网络管理和网络安全。我们首先介绍如何使用Python语言列出网络上所有活跃的主机；然后介绍一个 端口扫描工具；接着介绍如何使用IPy方便地进行IP地址管理；随后，介绍了一个DNS工具包；最后，我们介绍了一个非常强大的网络嗅探工具。</p><h3 id="一、列出网络上所有活跃的主机"><a class="header-anchor" href="#一、列出网络上所有活跃的主机">¶</a>一、列出网络上所有活跃的主机</h3><p>在这一小节中，我们将会学习如何在shell脚本中调用ping命令得到网络上活跃的主机列表，随后，我们使用Python语言改造这个程序，以此支持并发的判断。</p><h4 id="1、使用ping命令判断主机是否活跃"><a class="header-anchor" href="#1、使用ping命令判断主机是否活跃">¶</a>1、使用ping命令判断主机是否活跃</h4><p>ping命令是所有用户都应该了解的最基础的网络命令，ping命令可以探测主机到主机之间是否能够通信，如果不能ping到某台主机，则表明不能和这台主机进行通信。ping命令最常使用的场景是验证网络上两台主机的连通性以及找出网络上活跃的主机。<br>为了检査网络上两台主机之间的连通性，ping命令使用互联网控制协议（ICMP)中的 ECHO_REQUEST数据报，网络设备收到该数据报后会做出回应。ping命令可以通过网络设备的回复得知两台主机的连通性以及主机之间的网络延迟。<br>ping命令的使用非常简单，直接使用主机名、域名或IP地址作为参数调用ping命令即可。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]# ping 192.168.1.10</span><br><span class="line">PING 192.168.1.10 (192.168.1.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=1 ttl=64 time=0.023 ms</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=2 ttl=64 time=0.034 ms</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=3 ttl=64 time=0.033 ms</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=4 ttl=64 time=0.039 ms</span><br></pre></td></tr></table></figure><p>ping命令会连续发送包，并将结果打印到屏幕终端上。如果主机不可达，ping将会显示“Destination Host Unreachable”的错误信息。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]# ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (220.181.38.150) 56(84) bytes of data.</span><br><span class="line">From bogon (192.168.1.10) icmp_seq=1 Destination Host Unreachable</span><br><span class="line">From bogon (192.168.1.10) icmp_seq=2 Destination Host Unreachable</span><br><span class="line">From bogon (192.168.1.10) icmp_seq=3 Destination Host Unreachable</span><br><span class="line">From bogon (192.168.1.10) icmp_seq=4 Destination Host Unreachable</span><br></pre></td></tr></table></figure><p>除了检查网络上两台主机之间的连通性外，ping命令还可以粗略地估计主机之间的网络延迟情况。在ping命令的输出结果中，time字段的取值表示网络上两台主机之间的往返时间，它是分组从源主机到B的主机一个来回的时间，单位是毫秒。我们可以通过这个时间粗略估计网络的速度以及监控网络状态。例如，有这样一个使用ping命令解决线上问题的案例。当时的情况是应用程序使用我们提供的数据库服务，在每个整点时都会出现应用程序建立数据库连接失败的情况。通过前期排査，可以确定的是应用的请求已成功发出，数据库的压力并不是特别大，数据库连接也没有满。因此，问题很有可能出在网络上面。为此，我们增加了一个ping延迟监控。通过监控发现，在每个整点时ping的网络延迟变大，甚至大到了不可接受的程度。有了这个线索以后，接着排查网络问题。通过分析定位，发现是因为宿主机上有定时任务，导致每个整点宿主机的cpu压力增加，从而引发了前面所说的建立数据库连接失败的错误。<br>默认情况下，ping命令会不停地发送ECHO_REQUEST数据报并等待回复，到按下Ctrl+C为止。我们可以用选项-c限制所发送的ECHO_REQUEST数据报数量。用法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]# ping -c 2 192.168.1.10</span><br><span class="line">PING 192.168.1.10 (192.168.1.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=1 ttl=64 time=0.030 ms</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=2 ttl=64 time=0.047 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.1.10 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.030/0.038/0.047/0.010 ms</span><br></pre></td></tr></table></figure><p>在这个例子中，ping命令发送了 2个ECHO_REQUEST数据报就停止发送，这个功能对于脚本中检查网络的连通性非常有用。<br>ping命令将结果打印到屏幕终端，我们通过ping命令的输出结果判断主机是否可达, 这种方式虽然直观，但是不便于程序进行处理。在程序中可以通过ping命令的返回码判断主机足否可达，当主机活跃时，ping命令的返回码为0，当主机不可达时，ping命令的返回码非0。<br>有了上面的基础以后，要判断网络上活跃的主机就非常容易了。我们只需要ping每一台主机，然后通过ping命令的返回值判断主机是否活跃。下面这段Shell程序就是用来判断网络中的主机是否可达：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for ip in 'cat ips.txt'</span><br><span class="line">do</span><br><span class="line">if ping $ip -c 2 &amp; &gt; /dev/null</span><br><span class="line">then</span><br><span class="line">echo "$ip is alive"</span><br><span class="line">else</span><br><span class="line">echo "$ip is unreachable"</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>在这个例子中，我们首先将主机地址以每行一个地址的形式保存到ips.txt文件中，然后通过cat命令读取ips.txt文件中的内容，使用for循环迭代ips.txt中保存的主机。<br>为了减少视觉杂讯，使用输出重定向的方式将ping命令的结果输出到/dev/null中，以此避免信息在终端上打印。为了简化起见，我们直接在if语句中调用ping命令，Shell脚本能够根据ping命令的返回码判断命令执行成功还是失败。</p><h4 id="2、使用Python判断主机是否活跃"><a class="header-anchor" href="#2、使用Python判断主机是否活跃">¶</a>2、使用Python判断主机是否活跃</h4><p>前面的Shell脚本中，虽然所有的IP地址都是彼此独立，但是，我们的程序依然是顺序调用ping命令进行主机探活。由于每执行一次ping命令都要经历一段时间延迟（或者接收回应，或者等待回应超时)，所以，当我们要检査大量主机是否处于活跃状态时需要很长的时间。对于这种情况可以考虑并发地判断主机是否活跃。<br>Shell脚本可以非常快速地解决简单的任务，但是，对于比较复杂的任务，Shell脚本就无能为力。如这里的并发判断主机是否活跃的需求。对于这种情况，可以使用Python语言编写并发的程序，以此加快程序的执行。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_reacheable</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (subprocess.call([<span class="string">'ping'</span>, <span class="string">'-c'</span>, <span class="string">'1'</span>, ip])):</span><br><span class="line">        print(<span class="string">'&#123;0&#125; is alive'</span>.format(ip))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'&#123;0&#125; is unreacheable'</span>.format(ip))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ips.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines();</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            thr = threading.Thread(target=is_reacheable, args=(line,))</span><br><span class="line">            thr.start()</span><br><span class="line">            threads.append(thr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> thr <span class="keyword">in</span> threads:</span><br><span class="line">            thr.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这个例子中，我们首先打开ips.txt文件，并通过File对象的readlines函数将所有IP 地址读入内存。读入内存以后，IP地址保存在一个列表中，列表的每一项正好是一个地址。 对于每一个IP地址都创建一个线程。由于线程之间不共享任何数据，因此，不需要进行并发控制，这也使得整个程序变得简单。</p><p>在Python 中要判断两台主机是否可达有两种不同的方法，一种是在Python程序中调用ping命令实 现，另一种是使用socket编程发送ICMP数据报。为了简单起见，在我们这里的例子中使用前一种方法。为了调用系统中的ping命令，我们使用了subprocess模块。<br>我们的Python程序最终也是调用ping命令判断主机是否活跃，从思路上来说，和前面的Shell脚本是一样的。区别就在于Python程序使用并发加快了程序的执行效率。在我的测试环境中，测试了36个IP地址，其中，有12个IP地址不可达，需要等待网络超时才能返回，另外24个IP地址可达。使用Linux自带的time命令进行粗略计时，Shell脚本的执行时间是1分48秒，Python程序的执行时间是10秒。两个程序执行时间的差异，根据网络规模和网络环境将会显著不同。这里要表达的是，使用Python语言只需要很少的代码就能够将一个程序改造成并发的程序，通过并发来大幅提升程序的效率。</p><h4 id="3、使用生产者消费者模型减少线程的数量"><a class="header-anchor" href="#3、使用生产者消费者模型减少线程的数量">¶</a>3、使用生产者消费者模型减少线程的数量</h4><p>在前面的例子中，我们为每一个IP地址创建一个线程，这在IP地址较少的时候还算可行，但在IP地址较多时就会暴露出各种问题（如频繁的上下文切换）。因此，我们需要限制线程的数量。</p><p>列出网络上所有活跃主机的问题，其实是一个简单的生产者和消费者的问题。生产者 和消费者问题是多线程并发中一个非常经典的问题，该问题描述如下：</p><blockquote><p>有一个或多个生产者在生产商品，这些商品将提供给若干个消费者去消费。为了使生产者和消费者能并发执行，在两者之间设置一个缓冲期，生产者将它生产的商品放入缓冲中，消费者可以从缓冲区中取走商品进行消费。生产者只需要关心这个缓冲区是否已满， 如果未满则向缓冲区中放入商品，如果已满，则需要等待。同理，消费者只需要关心緩冲区中是否存在商品，如果存在商品则进行消费，如果缓冲区为空，则需要等待。</p></blockquote><p>生产者和消费者模型的好处是，生产者不需要关心有多少消费者、消费者何时消费、 以怎样的速度进行消费。消费者也不需要关心生产者，这就实现了程序模块的解耦。<br>我们这里的问题比生产者和消费者模型还要简单，只需要一次性将所有的IP地址读入到内存中，然后交由多个线程去处理。也就是说，我们一开始就生产好了所有的商品，只需要消费者消费完这些商品即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.util.queue <span class="keyword">import</span> Empty, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_ping</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (subprocess.call([<span class="string">'ping'</span>, <span class="string">'-c'</span>, <span class="string">'1'</span>, ip])):</span><br><span class="line">        print(<span class="string">'&#123;0&#125; is alive'</span>.format(ip))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'&#123;0&#125; is unreacheable'</span>.format(ip))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_reacheable</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ip = q.get_nowait()</span><br><span class="line">            call_ping(ip)</span><br><span class="line">    <span class="keyword">except</span> Empty:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ips.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            q.put(line)</span><br><span class="line"></span><br><span class="line">        threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        thr = threading.Thread(target=is_reacheable, args=(q,))</span><br><span class="line">        thr.start()</span><br><span class="line">        threads.append(thr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thr <span class="keyword">in</span> threads:</span><br><span class="line">        thr.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这个例子中创建了10个线程作为消费者线程，我们可以修改range函数的参数控制线程的个数。此外，我们还用到了一个新的数据结构，即Queue。引入Queue足因为多个消费者之间存在并发访问的问题，即多个消费者可能同时从缓冲区中获取商品。为了解决并发问题，我们使用了 Python标准库的Queue。Queue是标准库中线程安全的队列（FIFO) 实现，提供了一个适用于多线程编程的先进先出的数据结构，非常适合用于生产者和消费者线程之间的数据传递。<br>在这段程序中，我们首先将所有1P地址读入内存并放入Queue中，消费者不断从 Queue中获取商品。需要注意的是，如果我们使用Queue的get方法，当Queue中没有商品时，线程将会阻塞等待直到有新的商品为止。而在这个例子中不需要消费者阻塞等待， 因此，使用了Queue的get_nowait方法。该方法在冇商品时直接返回商品，没有商品时抛出Empty异常。消费者线程不断从Queue中获取IP地址，获取到IP地址以后调用call_ ping函数判断主机是否可达，直到没有商品以后退出线程。</p><h3 id="二、端口扫描"><a class="header-anchor" href="#二、端口扫描">¶</a>二、端口扫描</h3><p>仅仅知道网络上的主机是否可达还不够，很多情况下，我们需要的是一个端口扫描器。使用端口扫描器吋以进行安全检测与攻击防范。例如，在2017年5月12日，全球范围内爆发了基于Windows网络共享协议的永恒之蓝（Wannacry)勒索蠕虫。仅仅五个小时，包 括美国、中国、俄罗斯以及整个欧洲在内的100多个国家都不问程度地遭受永恒之蓝病毒攻击，尤其是高校、大型企业内网和政府机构专网，被攻击的电脑被勒索支付高额赎金才能解密恢复文件，对重要数据造成严重损失。永恒之蓝利用Windows系统的445端口进行蠕虫攻击，部分运营商已经在主干网络上封禁了 445端口，但是教育网以及大量企业内网并没有此限制，从而导致了永恒之蓝勒索蠕虫的泛滥。</p><p>所以作为工程师，一方面需要在日常维护养成良好的习惯，如配置防火墙、进行网络隔离、关闭不必要的服务、及时更新补丁；另一方面可以掌握一些安全相关的工具，在日常中进行安全防范，在紧急悄况下进行安全检测。在这一小节，我们将介绍如何使用Python进行端口扫描。有了端口扫描器，我们可以快速了解主机打开了哪些不必要的端口，以便及时消灭安全隐患。<br>在这一小节中，我们将使用Python语言编写一个端口扫描器，然后介绍大名鼎鼎的端 口扫描工具nmap，最后，通过python-nmap在Python代码中调用nmap进行端口扫描。</p><h4 id="1、使用Python编写端口扫描工具"><a class="header-anchor" href="#1、使用Python编写端口扫描工具">¶</a>1、使用Python编写端口扫描工具</h4><p>在Linux下，可以使用ping命令要判断一台主机是否可达，而判断一个端口是否打开可以使用telnet命令。我们可以模仿前面小节中并行ping的例子，在Python代码中调用 telnet命令判断一个端口是否打开。但是telnet命令存在一个问题，当我们telnet—个不可达的端口时，telnet需要很久才能够超时返回，并且telnet命令没有参数控制超时时间。 此外，如果Python标准库中有相应的模块，应该尽可能地使用Python的标准库，而不是在 Python代码中执行Linux命令。这一方面能够增加代码的可读性、可维护性，另一方面也能够保证程序跨平台运行。<br>为了使用Python编写端口扫描器，我们需要简单了解socket模块。socket模块为操作系统的socket连接提供了一个Python接口。有了 socket模块，我们可以完成任何使用 socket的任务。<br>socket模块提供了一个工厂函数socket，socket函数会返冋一个socket对象。我们可以给socket函数传递参数，以此创建不同网络协议和网络类塑的socket对象。默认情况下，socket函数会返回一个使用TCP协议的socket对象。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s = socket.socket()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: s.connect((<span class="string">'47.100.98.242'</span>,<span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s.send(<span class="string">"GET/HTTP/1.0"</span>.encode())</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">12</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: print(s.recv(<span class="number">200</span>))</span><br><span class="line"><span class="string">b'HTTP/1.1 400 Bad Request\r\nServer: nginx\r\nDate: Sat, 29 Feb 2020 15:44:51</span></span><br><span class="line"><span class="string"> GMT\r\nContent-Type: text/html\r\nContent-Length: 150\r\nConnection: close\r\</span></span><br><span class="line"><span class="string">n\r\n&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;\r\n&lt;b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: s.close()</span><br></pre></td></tr></table></figure><p>在这个例子中，socket工厂函数以默认参数AF_INET和SOCK_STREAM创建了一个 名为s的socket对象，该对象可以在进程间进行TCP通信。创建完对象以后，我们使用connect函数连接到远程服务器的80端口，并发送一个HTTP请求到远程服务器，发送完 毕之后，接收服务器响应的前200个宇节。最后，调用socket对象的close方法关闭连接。<br>在这个例子中，我们用到了 socket工厂函数、socket的connect方法、send方法、recv 方法和close方法，这也是socket中最常使用的一些方法。</p><p>接下来，我们就看一下如何使用简单的socket接口编写一个端口扫描器。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_scan</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    conn = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn.connect((host, port))</span><br><span class="line">        print(host, port, <span class="string">'is avaliable'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(host, port, <span class="string">'is not avaliable'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">'47.100.98.242'</span></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">80</span>, <span class="number">5000</span>):</span><br><span class="line">        conn_scan(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这个端口扫描的例子中，conn_scan用来判断端口是否可用。该函数尝试建立与目标主机和端口的连接，如果成功，打印一个端口开放的消息，否则，打印一个端口关闭的消息。<br>除广使用socket套接字编程的方式判断端口是否可用以外，还可以使用Python标准库的telnet模块。该模块中包含了一个Telnet类，该类的对象表示一个telnet的连接。创建一 个Telnet对象并不会建立到远程主机的连接，需要显式地使用open方法建立连接。open方法接受三个参数，分别是主机名、端口号和超时时间。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_scan</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    t = telnetlib.Telnet()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t.open(host,port,timeout=<span class="number">1</span>)</span><br><span class="line">        print(host, port, <span class="string">'is avaliable'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(host, port, <span class="string">'is not avaliable'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        t.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">'47.100.98.242'</span></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">20</span>, <span class="number">5000</span>):</span><br><span class="line">        conn_scan(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>对于上面这段程序，我们可以参考多线程的ping程序，以及使用生产者和消费者模型的ping程序，将这段程序扩展成多主机和多线程的端口扫描器。<br>与ping程序不同的是，端U扫描需要用到两个参数，即主机地址和端口号。当我们有了主机的列表和端口号的列表以后，如何能够快速地得到所有主机与端口号的组合呢？对于这个问题，有多种不同的方法。其中比较方便的是使用列表推导。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: l1 = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: l2 = (<span class="number">22</span>,<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: list([(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> l1 <span class="keyword">for</span> y <span class="keyword">in</span> l2])</span><br><span class="line">Out[<span class="number">3</span>]: [(<span class="string">'a'</span>, <span class="number">22</span>), (<span class="string">'a'</span>, <span class="number">80</span>), (<span class="string">'b'</span>, <span class="number">22</span>), (<span class="string">'b'</span>, <span class="number">80</span>), (<span class="string">'c'</span>, <span class="number">22</span>), (<span class="string">'c'</span>, <span class="number">80</span>)]</span><br></pre></td></tr></table></figure><p>使用列表推导虽然比较方便，但是，这个列表推导表达式本身比较复杂。因此，我们可以考虑使用itertools模块中的product函数。Python标准库的itertools模块提供了一组非常常用的函数，读者很有必要了解hertooU模块中提供的函数。在itertools模块中有一个名为product的函数，该函数用来返回多个可迭代对象的笛卡尔积。注意，product比前面的列表推导表达式更加通用，它可以返回多个可迭代对象的笛长尔积。这里的例子只需要计算两个可迭代对象的笛卡尔积。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: <span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list(product(l1,l2))</span><br><span class="line">Out[<span class="number">5</span>]: [(<span class="string">'a'</span>, <span class="number">22</span>), (<span class="string">'a'</span>, <span class="number">80</span>), (<span class="string">'b'</span>, <span class="number">22</span>), (<span class="string">'b'</span>, <span class="number">80</span>), (<span class="string">'c'</span>, <span class="number">22</span>), (<span class="string">'c'</span>, <span class="number">80</span>)]</span><br></pre></td></tr></table></figure><p>有了主机和端口的组合以后，我们可以参照生产者和消费者模型的例子，开发一个多线程的端口扫描器。但是我们并没有必要这么做，因为除了使用多线程编程编写端口扫描器以外，还可以使用Python-nmap模块更加方便地进行端口扫描。</p><h4 id="2、使用nmap扫描端口"><a class="header-anchor" href="#2、使用nmap扫描端口">¶</a>2、使用nmap扫描端口</h4><p>Python-nmap模块是对nmap命令的封装。nmap是知名的网络探测和安全扫描程序, 是Network Mapper的简称。nmap可以进行主机发现（Host Discovery)、端口扫描（Port Scanning)、版本侦测（Version Detection〉、操作系统侦测（Operating System Detection)，nmap是网络管理员必用的软件之一。nmap因为功能强大、跨平台、开源、文档丰富等诸多优点，在安全领域使用非常广泛。<br>在使用之前，需要先安装nmap。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># yum install nmap</span></span><br></pre></td></tr></table></figure><p>nmap的使用非常灵活，功能又很强大，因此nmap有很多命令行选项。使用nmap时， 首先需要确定要对哪些主机进行扫描，然后确定怎么进行扫描（如使用何种技术，对哪些端 口进行扫描）。<br>nmap具有非常灵活的方式指定需要扫描的主机，我们可以使用nmap命令的-sL选项 来进行测试。-sL选项仅仅打印IP列表，不会进行任何操作。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># nmap -sL 47.100.98.242/80</span></span><br><span class="line"></span><br><span class="line">Starting Nmap <span class="number">6.40</span> ( http://nmap.org ) at <span class="number">2020</span><span class="number">-03</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">18</span> CST</span><br><span class="line">Illegal netmask <span class="keyword">in</span> <span class="string">"47.100.98.242/80"</span>. Assuming /<span class="number">32</span> (one host)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">47.100</span><span class="number">.98</span><span class="number">.242</span></span><br><span class="line">Nmap done: <span class="number">1</span> IP address (<span class="number">0</span> hosts up) scanned <span class="keyword">in</span> <span class="number">0.04</span> seconds</span><br></pre></td></tr></table></figure><p>nmap提供了非常灵活的方式来指定主机，包括同时指定多个IP、通过网段指定主机、通过通配符指定主机等。如下所示：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nmap -sL 47.100.98.242 14.215.177.39</span><br><span class="line">nmap -sL 47.100.98.*</span><br><span class="line">nmap -sL 47.100.98.242,243,245</span><br><span class="line">nmap -sL 47.100.98.242-250</span><br><span class="line">nmap -sL 47.100.98.* --exclude 47.100.98.242</span><br><span class="line">nmap -sL 47.100.98.242/30</span><br></pre></td></tr></table></figure><p>除了上面指定主机的方式，我们也可以将IP地址保存到文本中，通过-iL选项读取文件中的IP地址。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -iL ip.list</span><br></pre></td></tr></table></figure><h5 id="（1）主机发现"><a class="header-anchor" href="#（1）主机发现">¶</a>（1）主机发现</h5><p>端口扫描是nmap的重点，除此之外，我们也可以使用nmap检查网络上所有在线的主机，实现类似前边小节中列出网络上所有活跃的主机的功能。使用-sP或-sn选项可以告诉nmap不要进行端口扫描，仅仅判断主机是否可达。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># nmap -sP 47.100.98.*</span></span><br><span class="line">Starting Nmap <span class="number">6.40</span> ( http://nmap.org ) at <span class="number">2020</span><span class="number">-03</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">25</span> CST</span><br><span class="line">Nmap done: <span class="number">256</span> IP addresses (<span class="number">0</span> hosts up) scanned <span class="keyword">in</span> <span class="number">206.44</span> seconds</span><br><span class="line">    </span><br><span class="line">[root@bogon ~]<span class="comment"># nmap -sn 47.100.98.*</span></span><br><span class="line">Starting Nmap <span class="number">6.40</span> ( http://nmap.org ) at <span class="number">2020</span><span class="number">-03</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> CST</span><br><span class="line">Nmap done: <span class="number">256</span> IP addresses (<span class="number">0</span> hosts up) scanned <span class="keyword">in</span> <span class="number">205.38</span> seconds</span><br></pre></td></tr></table></figure><h5 id="（2）端口扫描"><a class="header-anchor" href="#（2）端口扫描">¶</a>（2）端口扫描</h5><p>端口扫描是nmap最基本，也是最核心的功能，用于确定目标主机TCP/UDP端口的开放情况。不添加任何参数便是对主机进行端口扫描。默认情况下，nmap将会扫描1000个最常用的端口号。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># nmap 14.215.177.39</span></span><br><span class="line">Starting Nmap <span class="number">6.40</span> ( http://nmap.org ) at <span class="number">2020</span><span class="number">-03</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">42</span> CST</span><br><span class="line">Note: Host seems down. If it <span class="keyword">is</span> really up, but blocking our ping probes, <span class="keyword">try</span> -Pn</span><br><span class="line">Nmap done: <span class="number">1</span> IP address (<span class="number">0</span> hosts up) scanned <span class="keyword">in</span> <span class="number">3.09</span> seconds</span><br></pre></td></tr></table></figure><p>在进行端口扫描时，nmap提供了大M的参数控制端口扫描。包括端口扫描协议、端口扫描类型、扫描的端口号。如下所示：</p><blockquote><p>端口扫描协议：T (TCP)、U (UDP)、S (SCTP&gt;、P (IP);</p><p>端口扫描类型：-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans;</p><p>扫描的端口号：-p 80,443 -p 80-160</p></blockquote><p>nmap中的端口扫描协议、扫描类型和端口号相关的选项，可以结合起来使用。如下所示：</p><blockquote><p>-p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</p></blockquote><p>nmap通过探测将端口划分为6个状态，下表给出了每个状态的含义。</p><table><thead><tr><th>端口状态</th><th>状态含义</th></tr></thead><tbody><tr><td>open</td><td>端口是开放的</td></tr><tr><td>closed</td><td>端口是关闭的</td></tr><tr><td>filtered</td><td>端口被防火墙IDS/IPS屏蔽，无法确认其状态</td></tr><tr><td>unfiltered</td><td>端口没有被屏蔽，但是否开放需要进一步确定</td></tr><tr><td>open|filtered</td><td>端口是开放的或被屏蔽</td></tr><tr><td>closed|filtered</td><td>端口是关闭的或被屏蔽</td></tr></tbody></table><p>在进行端口扫描时，可以使用不同的端口扫描类型。常见的端口扫描类型如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TCP SYNC SCAN:半开放扫描，这种类沏的扫描为发送一个SYN包，启动一个TCP会话，并等待响应的数据包。如果收到的是一个reset包，表明端口是关闭的; 如果收到的是一个SYNC/ACK包，则表示端口是打开的。</span><br><span class="line">TCP NULL SCAN: NULL扫描把TCP头中的所有标志位都设置为NULL。如果收到的是一个RST包，则表示相应的端口是关闭的。</span><br><span class="line">TCP FIN SCAN : TCP FIN扫描发送一个表示结束一个活跃的TCP连接的FIN包， 让对方关闭连接。如果收到了一个RST包，则表示相应的端口是关闭的。 TCPXMASSCAN: TCPXMAS扫描发送PSH、FIN、URG和TCP标志位被设置为1的数据包，如果收到一个RST包，则表示相砬端口是关闭的。</span><br></pre></td></tr></table></figure><h5 id="（3）版本侦测"><a class="header-anchor" href="#（3）版本侦测">¶</a>（3）版本侦测</h5><p>nmap在进行端口扫描时，还可以进行版本侦测。版本监测功能用于确定开放端口上运行的应用程序及版本信息。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV <span class="number">47.100</span><span class="number">.98</span><span class="number">.242</span></span><br></pre></td></tr></table></figure><h5 id="（4）操作系统监测"><a class="header-anchor" href="#（4）操作系统监测">¶</a>（4）操作系统监测</h5><p>操作系统侦测用于监测主机运行的操作系统类型及设备类型等信息。nmap拥有丰富的系统数据库，可以识别2600多种操作系统与设备类型。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sO <span class="number">47.100</span><span class="number">.98</span><span class="number">.242</span></span><br></pre></td></tr></table></figure><h4 id="3、使用python-nmap进行端口扫描"><a class="header-anchor" href="#3、使用python-nmap进行端口扫描">¶</a>3、使用python-nmap进行端口扫描</h4><p>我们在上一小节中，花f较多的篇幅介绍nmap。Python的Python-nmap仅仅趋对nmap的封装，因此，要使用Python-nmap,必须先了解nmap。Python-nmap相对于nmap, 主要的改进在于对输出结果的处理。Python-nmap将nmap的输出结果保存到宇典之中，我们只需要通过Python的字典就可以获取到nmap的输出信息，不用像Shell脚本一样通过字符串处理和正则表达式来解析nmap的结果。Python-nmap将nmap的强大功能与Python语言优秀的表达能力进行了完美的结合，使用Python语言丰富的数据结构保存结果，以便后续继续进行处理，如使用Python-nmap生成相关的报告。<br>Python-nmap是开源的库，因此，在使用之前需要手动进行安装。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-nmap</span><br></pre></td></tr></table></figure><p>Python-nmap的使用非常简单，我们只要创建一个PortScarmer对象，并调用对象的 scan方法就能够完成基本的nmap端口扫描。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> nmap                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: nm = nmap.PortScanner()    </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: nm.scan(<span class="string">'192.168.79.129'</span>,<span class="string">'22-1000'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">&#123;<span class="string">'nmap'</span>: &#123;<span class="string">'command_line'</span>: <span class="string">'nmap -oX - -p 22-1000 -sV 192.168.79.129'</span>,</span><br><span class="line">  <span class="string">'scaninfo'</span>: &#123;<span class="string">'tcp'</span>: &#123;<span class="string">'method'</span>: <span class="string">'syn'</span>, <span class="string">'services'</span>: <span class="string">'22-1000'</span>&#125;&#125;,</span><br><span class="line">  <span class="string">'scanstats'</span>: &#123;<span class="string">'timestr'</span>: <span class="string">'Mon Mar  2 16:31:17 2020'</span>,</span><br><span class="line">   <span class="string">'elapsed'</span>: <span class="string">'6.33'</span>,</span><br><span class="line">   <span class="string">'uphosts'</span>: <span class="string">'1'</span>,</span><br><span class="line">   <span class="string">'downhosts'</span>: <span class="string">'0'</span>,</span><br><span class="line">   <span class="string">'totalhosts'</span>: <span class="string">'1'</span>&#125;&#125;,</span><br><span class="line"> <span class="string">'scan'</span>: &#123;<span class="string">'192.168.79.129'</span>: &#123;<span class="string">'hostnames'</span>: [&#123;<span class="string">'name'</span>: <span class="string">'192.168.79.129'</span>,</span><br><span class="line">     <span class="string">'type'</span>: <span class="string">'PTR'</span>&#125;],</span><br><span class="line">   <span class="string">'addresses'</span>: &#123;<span class="string">'ipv4'</span>: <span class="string">'192.168.79.129'</span>&#125;,</span><br><span class="line">   <span class="string">'vendor'</span>: &#123;&#125;,</span><br><span class="line">   <span class="string">'status'</span>: &#123;<span class="string">'state'</span>: <span class="string">'up'</span>, <span class="string">'reason'</span>: <span class="string">'localhost-response'</span>&#125;,</span><br><span class="line">   <span class="string">'tcp'</span>: &#123;<span class="number">22</span>: &#123;<span class="string">'state'</span>: <span class="string">'open'</span>,</span><br><span class="line">     <span class="string">'reason'</span>: <span class="string">'syn-ack'</span>,</span><br><span class="line">     <span class="string">'name'</span>: <span class="string">'ssh'</span>,</span><br><span class="line">     <span class="string">'product'</span>: <span class="string">'OpenSSH'</span>,</span><br><span class="line">     <span class="string">'version'</span>: <span class="string">'7.4'</span>,</span><br><span class="line">     <span class="string">'extrainfo'</span>: <span class="string">'protocol 2.0'</span>,</span><br><span class="line">     <span class="string">'conf'</span>: <span class="string">'10'</span>,</span><br><span class="line">     <span class="string">'cpe'</span>: <span class="string">'cpe:/a:openbsd:openssh:7.4'</span>&#125;,</span><br><span class="line">    <span class="number">111</span>: &#123;<span class="string">'state'</span>: <span class="string">'open'</span>,</span><br><span class="line">     <span class="string">'reason'</span>: <span class="string">'syn-ack'</span>,</span><br><span class="line">     <span class="string">'name'</span>: <span class="string">'rpcbind'</span>,</span><br><span class="line">     <span class="string">'product'</span>: <span class="string">''</span>,</span><br><span class="line">     <span class="string">'version'</span>: <span class="string">'2-4'</span>,</span><br><span class="line">     <span class="string">'extrainfo'</span>: <span class="string">'RPC #100000'</span>,</span><br><span class="line">     <span class="string">'conf'</span>: <span class="string">'10'</span>,</span><br><span class="line">     <span class="string">'cpe'</span>: <span class="string">''</span>&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>当我们创建PortScanner对象时，Python-nmap会检査系统中是否已经安装了 nmap，如果没有安装，抛出PortScannerError异常。调用PortScanner对象的scan方法进行扫描以后就可以通过该类的其他方法获取本次扫描的信息。如命令行参数、主机列表、扫描的方法等。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: nm.command_line()           </span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'nmap -oX - -p 22-1000 -sV 192.168.79.129'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: nm.scaninfo()                </span><br><span class="line">Out[<span class="number">5</span>]: &#123;<span class="string">'tcp'</span>: &#123;<span class="string">'method'</span>: <span class="string">'syn'</span>, <span class="string">'services'</span>: <span class="string">'22-1000'</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: nm.all_hosts()              </span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'192.168.79.129'</span>]</span><br></pre></td></tr></table></figure><p>Python-nmap还提供了以主机地址为键，获取单台主机的详细信息。包括获取主机网络状态、所有的协议、所有打开的端口号，端口号对应的服务等。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: nm[<span class="string">'192.168.79.129'</span>].state()</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'up'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: nm[<span class="string">'192.168.79.129'</span>].all_protocols()</span><br><span class="line">Out[<span class="number">8</span>]: [<span class="string">'tcp'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: nm[<span class="string">'192.168.79.129'</span>].keys()  </span><br><span class="line">Out[<span class="number">9</span>]: dict_keys([<span class="string">'hostnames'</span>, <span class="string">'addresses'</span>, <span class="string">'vendor'</span>, <span class="string">'status'</span>, <span class="string">'tcp'</span>])</span><br><span class="line">    </span><br><span class="line">In [<span class="number">10</span>]: nm[<span class="string">'192.168.79.129'</span>][<span class="string">'tcp'</span>][<span class="number">22</span>]</span><br><span class="line">Out[<span class="number">10</span>]: </span><br><span class="line">&#123;<span class="string">'state'</span>: <span class="string">'open'</span>,</span><br><span class="line"> <span class="string">'reason'</span>: <span class="string">'syn-ack'</span>,</span><br><span class="line"> <span class="string">'name'</span>: <span class="string">'ssh'</span>,</span><br><span class="line"> <span class="string">'product'</span>: <span class="string">'OpenSSH'</span>,</span><br><span class="line"> <span class="string">'version'</span>: <span class="string">'7.4'</span>,</span><br><span class="line"> <span class="string">'extrainfo'</span>: <span class="string">'protocol 2.0'</span>,</span><br><span class="line"> <span class="string">'conf'</span>: <span class="string">'10'</span>,</span><br><span class="line"> <span class="string">'cpe'</span>: <span class="string">'cpe:/a:openbsd:openssh:7.4'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: nm[<span class="string">'192.168.79.129'</span>][<span class="string">'tcp'</span>][<span class="number">111</span>]</span><br><span class="line">Out[<span class="number">11</span>]: </span><br><span class="line">&#123;<span class="string">'state'</span>: <span class="string">'open'</span>,</span><br><span class="line"> <span class="string">'reason'</span>: <span class="string">'syn-ack'</span>,</span><br><span class="line"> <span class="string">'name'</span>: <span class="string">'rpcbind'</span>,</span><br><span class="line"> <span class="string">'product'</span>: <span class="string">''</span>,</span><br><span class="line"> <span class="string">'version'</span>: <span class="string">'2-4'</span>,</span><br><span class="line"> <span class="string">'extrainfo'</span>: <span class="string">'RPC #100000'</span>,</span><br><span class="line"> <span class="string">'conf'</span>: <span class="string">'10'</span>,</span><br><span class="line"> <span class="string">'cpe'</span>: <span class="string">''</span>&#125;</span><br></pre></td></tr></table></figure><p>Python-nmap是对nmap的Python封装，因此我们也可以通过Python-nmap指定nmap命令的复杂选项。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm.scan(hosts=<span class="string">'192.168.79.129/24'</span>,arguments=<span class="string">'-n -sP -PE -PA21,23,80,3389'</span>)</span><br></pre></td></tr></table></figure><h3 id="三、使用IPy进行IP管理"><a class="header-anchor" href="#三、使用IPy进行IP管理">¶</a>三、使用IPy进行IP管理</h3><p>在网络设计中，首先要做的就是规划IP地址。IP地址规划的好坏直接影响路由算法的效率，包括网络性能和扩展性。在IP地址规划中，需要进行大量的IP地址计算，包括网段、网络掩码、广播地址、子网数、IP类型等计算操作。在大量的计算操作中，如果没有一个好的工具，计算IP地址是一个很无趣有容易出错的事情。在Perl语言中，可以使用NET::IP模块，在Python语言中，可以使用开源的IPy模块进行操作。</p><h4 id="1、IPy模块介绍"><a class="header-anchor" href="#1、IPy模块介绍">¶</a>1、IPy模块介绍</h4><p>IPy模块是一个处理IP地址的模块，它能够自动识别IP地址的版本、IP地址的类型。使用IPy模块，可以方便地进行IP地址的计算。</p><p>IPy模块是第三方的开源模块，因此，在使用之前需要进行安装。直接使用pip安装即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install ipy</span><br></pre></td></tr></table></figure><h4 id="2、IPy模块的基本使用"><a class="header-anchor" href="#2、IPy模块的基本使用">¶</a>2、IPy模块的基本使用</h4><p>IPy模块有一个IP类，这个类几乎可以接受任何格式的IP地址和网段。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> IPy </span><br><span class="line">    </span><br><span class="line">In [<span class="number">2</span>]:<span class="keyword">from</span> IPy <span class="keyword">import</span> IP           </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: IP(<span class="number">0x7f000001</span>)               </span><br><span class="line">Out[<span class="number">3</span>]: IP(<span class="string">'127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: IP(<span class="string">'127.0.0.1'</span>)               </span><br><span class="line">Out[<span class="number">4</span>]: IP(<span class="string">'127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: IP(<span class="string">'127.0.0.0/30'</span>)             </span><br><span class="line">Out[<span class="number">5</span>]: IP(<span class="string">'127.0.0.0/30'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: IP(<span class="string">'1080:0:0:0:8:800:200C:417A'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: IP(<span class="string">'1080::8:800:200c:417a'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: IP(<span class="string">'127.0.0.0-127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: IP(<span class="string">'127.0.0.0/8'</span>)</span><br></pre></td></tr></table></figure><p>IP类包含了许多的方法，用来进行灵活的IP地址操作。例如：</p><h5 id="（1）version-获取IP地址的版本"><a class="header-anchor" href="#（1）version-获取IP地址的版本">¶</a>（1）version:获取IP地址的版本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: IP(<span class="string">'127.0.0.0-127.255.255.255'</span>) </span><br><span class="line">Out[<span class="number">9</span>]: IP(<span class="string">'127.0.0.0/8'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: IP(<span class="string">'10.0.0.0/8'</span>).version()  </span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: IP(<span class="string">'::1'</span>).version()        </span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="（2）len-得到子网IP地址的个数"><a class="header-anchor" href="#（2）len-得到子网IP地址的个数">¶</a>（2）len:得到子网IP地址的个数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: IP(<span class="string">'127.0.0.0/30'</span>).len()    </span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">13</span>]: IP(<span class="string">'127.0.0.0/28'</span>).len()    </span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">16</span></span><br></pre></td></tr></table></figure><h5 id="（3）iptype-返回IP地址的类型"><a class="header-anchor" href="#（3）iptype-返回IP地址的类型">¶</a>（3）iptype:返回IP地址的类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: IP(<span class="string">'127.0.0.1'</span>).iptype()    </span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'LOOPBACK'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: IP(<span class="string">'8.8.8.8'</span>).iptype()      </span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'PUBLIC'</span></span><br></pre></td></tr></table></figure><h5 id="（4）int-返回IP地址的整数形式"><a class="header-anchor" href="#（4）int-返回IP地址的整数形式">¶</a>（4）int:返回IP地址的整数形式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: IP(<span class="string">'8.8.8.8'</span>).int()         </span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">134744072</span></span><br></pre></td></tr></table></figure><h5 id="（5）strHex-返回IP地址的十六进制形式"><a class="header-anchor" href="#（5）strHex-返回IP地址的十六进制形式">¶</a>（5）strHex:返回IP地址的十六进制形式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: IP(<span class="string">'8.8.8.8'</span>).strHex()    </span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'0x8080808'</span></span><br></pre></td></tr></table></figure><h5 id="（6）strBin-返回IP地址的二进制形式"><a class="header-anchor" href="#（6）strBin-返回IP地址的二进制形式">¶</a>（6）strBin:返回IP地址的二进制形式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: IP(<span class="string">'8.8.8.8'</span>).strBin()</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'00001000000010000000100000001000'</span></span><br></pre></td></tr></table></figure><p>有一个方便的函数能够将IP转换为不同的格式，在工作环境中将会非常有用。例如，以数宇的形式在数据库中存储IP地址，在数据库中存储IP地址有两种形式，第一种是以变长字符串的形式将IP地址保存到数据库中，另一种是将IP地址转换为整数以后保存到数据库中。将IP地址转换为整数进行存储能够有效地节省存储空间，提高数据库的存储效率和访问速度。因此，在最佳实践中，我们一般将IP地址以数字的形式保存到数据库中。需要 IP地址时，再将数字形式的IP地址转换为字符串格式的IP地址。这个需求十分常见，因 此，MySQL提供了两个函数，分别用以将字符串形式的IP地址转换为数据格式的IP地址，以及将数字格式的IP地址转换为字符串形式的IP地址。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select INET_ATON(<span class="string">'10.166.224.14'</span>);</span><br><span class="line">+----------------------------+</span><br><span class="line">| INET_ATON(<span class="string">'10.166.224.14'</span>) |</span><br><span class="line">+----------------------------+</span><br><span class="line">|                  <span class="number">178708494</span> |</span><br><span class="line">+----------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select INET_NTOA(<span class="string">'178708494'</span>);</span><br><span class="line">+------------------------+</span><br><span class="line">| INET_NTOA(<span class="string">'178708494'</span>) |</span><br><span class="line">+------------------------+</span><br><span class="line">| <span class="number">10.166</span><span class="number">.224</span><span class="number">.14</span>          |</span><br><span class="line">+------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>除了使用MySQL自带的函数以外，我们也可以使用IP类提供的int方法将字符串形式的IP地址转换为数字形式的IP地址。要将数字形式的IP地址转换会字符串形式的IP地址，可以直接使用数字的方式创建IP对象。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: IP(<span class="string">'178708494'</span>)             </span><br><span class="line">Out[<span class="number">9</span>]: IP(<span class="string">'10.166.224.14'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="string">'&#123;0&#125;'</span>.format(IP(<span class="string">"178708494"</span>))</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'10.166.224.14'</span></span><br></pre></td></tr></table></figure><h4 id="3、网段管理"><a class="header-anchor" href="#3、网段管理">¶</a>3、网段管理</h4><p>IP类的构造函数可以接受不同格式的IP地址，也可以接受网段。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> IPy <span class="keyword">import</span> IP            </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: IP(<span class="string">'127.0.0.0/24'</span>)        </span><br><span class="line">Out[<span class="number">2</span>]: IP(<span class="string">'127.0.0.0/24'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: IP(<span class="string">'127.0.0.0-127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: IP(<span class="string">'127.0.0.0/8'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: IP(<span class="string">'127.0.0.0/127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: IP(<span class="string">'127.0.0.0/31'</span>)</span><br></pre></td></tr></table></figure><p>网段包含多个IP地址，我们可以直接使用len方法或者Python内置的len函数得到网段中IP地址的个数，也可以直接使用for循环迭代网段，以此遍历各个IP。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> IPy <span class="keyword">import</span> IP            </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: IP(<span class="string">'127.0.0.0/24'</span>)            </span><br><span class="line">Out[<span class="number">2</span>]: IP(<span class="string">'127.0.0.0/24'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: IP(<span class="string">'127.0.0.0-127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: IP(<span class="string">'127.0.0.0/8'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: IP(<span class="string">'127.0.0.0/127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: IP(<span class="string">'127.0.0.0/31'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: ips = IP(<span class="string">'10.166.224.144/28'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: ips.len()                     </span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">16</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: len(ips)                      </span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">16</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: [ip <span class="keyword">for</span> ip <span class="keyword">in</span> ips]            </span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">[IP(<span class="string">'10.166.224.144'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.145'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.146'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.147'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.148'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.149'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.150'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.151'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.152'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.153'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.154'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.155'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.156'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.157'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.158'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.159'</span>)]</span><br></pre></td></tr></table></figure><p>IP类有一个名为strNormal的方法，该方法接受一个wantprefixlen参数，参数的合法取值为0~3，每一个取值代表一种网段的显示方式。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: ips.strNormal(<span class="number">0</span>)          </span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'10.166.224.144'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: ips.strNormal(<span class="number">1</span>)            </span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'10.166.224.144/28'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: ips.strNormal(<span class="number">2</span>)            </span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'10.166.224.144/255.255.255.240'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: ips.strNormal(<span class="number">3</span>)           </span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'10.166.224.144-10.166.224.159'</span></span><br></pre></td></tr></table></figure><p>通过IP类，我们也可以方便地判断一个IP是否属于一个网段，判断子网是否包含于另一个网段中，以及两个网段是否有重叠。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: <span class="string">'10.166.224.144'</span> <span class="keyword">in</span> IP(<span class="string">'10.166.224.144/28'</span>)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: IP(<span class="string">'10.166.224.144/29'</span>) <span class="keyword">in</span> IP(<span class="string">'10.166.224.144/28'</span>)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: IP(<span class="string">'10.166.224.0/28'</span>).overlaps(<span class="string">'10.166.224.144/28'</span>)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>对于网段，我们可以方便地获取网络地址掩码以及网络的广播地址。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: ips.netmask()              </span><br><span class="line">Out[<span class="number">22</span>]: IP(<span class="string">'255.255.255.240'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: ips.broadcast()            </span><br><span class="line">Out[<span class="number">23</span>]: IP(<span class="string">'10.166.224.159'</span>)</span><br></pre></td></tr></table></figure><h3 id="四、使用dnspython解析DNS"><a class="header-anchor" href="#四、使用dnspython解析DNS">¶</a>四、使用dnspython解析DNS</h3><h4 id="1、dnspython简介与安装"><a class="header-anchor" href="#1、dnspython简介与安装">¶</a>1、dnspython简介与安装</h4><p>dnspython是Python实现的一个DNS工具集，它支持几乎所有的记录类型，可以用于查询、传输并动态更新ZONE信息，同时支持TSIG（事务签名）验证消息和EDNS0（扩展DNS）。使用dnspython可以代替Linux命令行下的nslookup以及dig等工具。</p><p>dnspython是第三方的开源模块，因此，使用之前需要先进行安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install dnspython</span><br></pre></td></tr></table></figure><h4 id="2、使用dnspython进行域名解析"><a class="header-anchor" href="#2、使用dnspython进行域名解析">¶</a>2、使用dnspython进行域名解析</h4><p>dnspython提供了丰富的API，其中，高层次的API根据名称和类型执行查询操作，低层次的API可以直接更新ZONE信息、消息、名称和记录。在所有的API中，最常使用的是域名查询。dnspython提供了一个DNS解析类resolver，使用它的query方法可以实现域名的查询功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dns.resolver.query(qname,rdtype=<span class="number">1</span>,rdclass=<span class="number">1</span>,tcp=<span class="literal">False</span>,source=<span class="literal">None</span>,raise_on_no_answer=<span class="literal">True</span>,source_port=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>query方法各参数的含义如下：</p><blockquote><p>qname:査询的域名；<br>rdtype:指定RR资源；</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A:地址记录（Address),返回域名指向的IP地址；</span><br><span class="line">NS:域名服务器记录（Name Server)，返回保存下一级域名信息的服务器地址。该记录只能设罝为域名，不能设置为IP地址；</span><br><span class="line">MX:邮件记录（Mail exchange),返回接收电子邮件的服务器地址；</span><br><span class="line">CNAME:规范名称记录（Canonical Name)，别名记录，实现域名间的映射；</span><br><span class="line">PTR:逆向査询记录（Pointer Record),反向解析，与A记录相反，将IP地址转换为主机名。</span><br></pre></td></tr></table></figure><blockquote><p>rdclass:网络类型；<br>tcp:指定査询是否启用TCP协议；<br>source:査询源的地址；<br>source_port:査询源的端口 ;<br>raise_on_no_answer:指定査询无应答时是否触发异常，默认为True。</p></blockquote><p>在使用dnspython查询DNS相关信息之前，我们先简单了解一下dig命令，以便对照查看Python程序的输出结果与dig命令的输出结果。<br>dig的全称是domain information groper,它是一个灵活探测DNS的工具，可以执行DNS査找，并显示从查询的名称服务器返回的答案。由于dig命令灵活易用、输出明确， 因此，大多数DNS管理员都使用dig解决DNS问题。<br>在我的主机上运行dig命令査找dnspython.org域名的信息。运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192</span> ~]<span class="comment"># dig qiniu.lexizhi.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG <span class="number">9.9</span><span class="number">.4</span>-RedHat<span class="number">-9.9</span><span class="number">.4</span><span class="number">-72.</span>el7 &lt;&lt;&gt;&gt; qiniu.lexizhi.com</span><br><span class="line">;; <span class="keyword">global</span> options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 35907</span><br><span class="line">;; flags: qr rd ra; QUERY: <span class="number">1</span>, ANSWER: <span class="number">12</span>, AUTHORITY: <span class="number">0</span>, ADDITIONAL: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;qiniu.lexizhi.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">qiniu.lexizhi.com.<span class="number">5</span>INCNAMEwww.lexizhi.com.qiniudns.com.</span><br><span class="line">www.lexizhi.com.qiniudns.com. <span class="number">5</span>INCNAMEdt003.china.line.qiniudns.com.</span><br><span class="line">dt003.china.line.qiniudns.com. <span class="number">5</span> INCNAMEtinychinacdnweb.qiniu.com.w.kunlunno.com.</span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.231</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.234</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.232</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.233</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">219.147</span><span class="number">.157</span><span class="number">.66</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.228</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.235</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.229</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.230</span></span><br><span class="line"></span><br><span class="line">;; Query time: <span class="number">633</span> msec</span><br><span class="line">;; SERVER: <span class="number">192.168</span><span class="number">.79</span><span class="number">.2</span><span class="comment">#53(192.168.79.2)</span></span><br><span class="line">;; WHEN: 一 <span class="number">3</span>月 <span class="number">02</span> <span class="number">17</span>:<span class="number">29</span>:<span class="number">51</span> CST <span class="number">2020</span></span><br><span class="line">;; MSG SIZE  rcvd: <span class="number">300</span></span><br></pre></td></tr></table></figure><p>在Python代码中，可以使用dnspython查询A记录。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"></span><br><span class="line">data = dns.resolver.query(<span class="string">'www.lexizhi.com'</span>, <span class="string">'A'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>Python程序的输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">47.100</span><span class="number">.98</span><span class="number">.242</span></span><br></pre></td></tr></table></figure><p>使用dnspython实现NS记录，查询方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"></span><br><span class="line">data = dns.resolver.query(<span class="string">'dnspython.org'</span>, <span class="string">'NS'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>Python程序查询NS记录的结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ns<span class="number">-343.</span>awsdns<span class="number">-42.</span>com.</span><br><span class="line">ns<span class="number">-518.</span>awsdns<span class="number">-00.</span>net.</span><br><span class="line">ns<span class="number">-1253.</span>awsdns<span class="number">-28.</span>org.</span><br><span class="line">ns<span class="number">-2020.</span>awsdns<span class="number">-60.</span>co.uk.</span><br></pre></td></tr></table></figure><p>从输出结果来看，使用dig命令或dnspython模块都是一样的。如果在命令行操作，建议使用dig命令。如果要使用程序管理DNS或查询DNS的内容，则推荐使用dnspython模块。</p><h3 id="五、网络嗅探器Scapy"><a class="header-anchor" href="#五、网络嗅探器Scapy">¶</a>五、网络嗅探器Scapy</h3><p>Scapy是一个Python语言编写的工具，使用Scapy可以发送、嗅探、剖析和伪造网络数据报。Scapy涉及比较底层的网络协议，因此，不可避免地导致Scapy的接口复杂。虽然 Scapy的接口复杂，但整体思路却非常简单，就是发送数据报和接收数据报。在发送数据报时，Scapy提供了相关的辅助类来帮助我们构造数据报，在接收数据报时，Scapy也提供了相应的函数来帮助我们过滤和解析数据报。</p><p>在这一小节中，首先我们将介绍Scapy的功能和安装方式，然后介绍Scapy的基本使用，接着介绍如何使用Scapy发送数据报，并通过 —个DNS査询的例子演示Scapy发送数据报，最后介绍如何使用Scapy进行网络嗅探，并通过一个抓取敏感信息的例子来演示Scapy的网络嗅探。</p><h4 id="1、Scapy简介与安装"><a class="header-anchor" href="#1、Scapy简介与安装">¶</a>1、Scapy简介与安装</h4><p>Scapy是一个强大的交互式数据报处理程序，它能够伪造或者解码大量的网络协议数据报，能够发送、捕捉、匹配请求和回复数据报。Scapy可以轻松处理大多数经典任务，如端口扫描、路由跟踪、探测、攻击或网络发现等。使用Scapy可以替代hping, arpspoof，arp-sk, arping，p0f等功能，甚至可以替代nmap, tcpdump和tshark的部分功能。此外，Scapy 还有很多其他工具没有的优秀特性，如发送无效数据帧、注入修改的802.11数据帧、在 WEP上解码加密通道（VOIP)、ARP缓存攻击（VLAN)等。<br>Scapy是使用Python语言开发的丁.具，因此，我们可以直接使用pip安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install scapy</span><br></pre></td></tr></table></figure><p>Scapy运行时要对网络接口进行控制，所以需要root权限。在这一小节的例子中， 我们都使用root用户来运行Scapy程序或与Scapy相关的Python程序。<br>Scapy提供了非常丰富的功能，不同的功能依赖不同的软件。启动Scapy命令行工具时，Scapy会进行相应的检査并给出提示。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192</span> ~]<span class="comment"># scapy</span></span><br><span class="line">INFO: Can<span class="string">'t import matplotlib. Won'</span>t be able to plot.</span><br><span class="line">INFO: Can<span class="string">'t import PyX. Won'</span>t be able to use psdump() <span class="keyword">or</span> pdfdump().</span><br><span class="line">WARNING: No route found for IPv6 destination :: (no default route?)</span><br><span class="line">INFO: Can<span class="string">'t import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11)</span></span><br><span class="line"><span class="string">INFO: Can'</span>t <span class="keyword">import</span> python-cryptography v1<span class="number">.7</span>+. Disabled IPsec encryption/authentication.</span><br><span class="line">                                      </span><br><span class="line">                     aSPY//YASa       </span><br><span class="line">             apyyyyCY//////////YCa       |</span><br><span class="line">            sY//////YSpcs  scpCY//Pp     | Welcome to Scapy</span><br><span class="line"> ayp ayyyyyyySCP//Pp           syY//C    | Version <span class="number">2.4</span><span class="number">.3</span></span><br><span class="line"> AYAsAYYYYYYYY///Ps              cY//S   |</span><br><span class="line">         pCCCCY//p          cSSps y//Y   | https://github.com/secdev/scapy</span><br><span class="line">         SPPPP///a          pP///AC//Y   |</span><br><span class="line">              A//A            cyP////C   | Have fun!</span><br><span class="line">              p///Ac            sC///a   |</span><br><span class="line">              P////YCpc           A//A   | Craft packets before they craft</span><br><span class="line">       scccccp///pSP///p          p//Y   | you.</span><br><span class="line">      sY/////////y  caa           S//P   |                      -- Socrate</span><br><span class="line">       cayCyayP//Ya              pY/Ya   |</span><br><span class="line">        sY/PsY////YCc          aC//Yp </span><br><span class="line">         sc  sccaCY//PCypaapyCP//YSs  </span><br><span class="line">                  spCPY//////YPSps    </span><br><span class="line">                       ccaacs         </span><br><span class="line">                                       using IPython <span class="number">7.12</span><span class="number">.0</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>例如，使用Scapy生成图形化的示意图需要安装matplotlib库，但没有安装matplotlib并不影响Scapy的基本使用。</p><h4 id="2、Scapy的基本使用"><a class="header-anchor" href="#2、Scapy的基本使用">¶</a>2、Scapy的基本使用</h4><p>在本教程中，我们会介绍Scapy的一些基本用法，完整的使用方法可以参考Scapy的官方文档http://www.secdev.org/projects/scapy/doc/usage.html。</p><p>我们有两种方式运行Scapy，一种是直接启动Scapy进入一个交互式界面，另一种是在Python程序中调用Scapy提供的功能。与其他软件不同的是，Scapy的交互模式其实就是Python的交互模式。因此我们可以在Scapy的交互模式下导入Python的包，使用Python的语法，执行Python中的语句。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys                                                                                                              </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.version)                                                                                                      </span><br><span class="line"><span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">10</span>:<span class="number">59</span>:<span class="number">16</span>) </span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-39</span>)]</span><br></pre></td></tr></table></figure><p>既然知道了Scapy的交换模式是Python的交换模式这个事实，那我们就可以轻易地将Scapy交换模式中的代码放置在Python的源文件中，使用Python程序的方式进行软件开发。要在Python程序中使用Scapy的功能，只需要导入scapy.all模块即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys                                                                                                              </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.version)                                                                                                      </span><br><span class="line"><span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">10</span>:<span class="number">59</span>:<span class="number">16</span>) </span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-39</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function                                                                                   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *                                                                                                 </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ls())                                                                                                             </span><br><span class="line">AH         : AH</span><br><span class="line">AKMSuite   : AKM suite</span><br><span class="line">ARP        : ARP</span><br><span class="line">ASN1P_INTEGER : <span class="literal">None</span></span><br><span class="line">ASN1P_OID  : <span class="literal">None</span></span><br><span class="line">ASN1P_PRIVSEQ : <span class="literal">None</span></span><br><span class="line">ASN1_Packet : <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在Scapy的交互式工具中，我们可以通过ls()显示Scapy支持的所有协议、lsc()列出Scapy支持的所有命令、conf显示所有的配置信息、help(cmd)显示某一命令的使用帮助等。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls()                      </span><br><span class="line">AH         : AH</span><br><span class="line">AKMSuite   : AKM suite</span><br><span class="line">ARP        : ARP</span><br><span class="line">ASN1P_INTEGER : <span class="literal">None</span></span><br><span class="line">ASN1P_OID  : <span class="literal">None</span></span><br><span class="line">ASN1P_PRIVSEQ : <span class="literal">None</span></span><br><span class="line">ASN1_Packet : <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lsc()                         </span><br><span class="line">IPID_count          : Identify IP id values classes <span class="keyword">in</span> a list of packets</span><br><span class="line">arpcachepoison      : Poison target<span class="string">'s cache with (your MAC,victim'</span>s IP) couple</span><br><span class="line">arping              : Send ARP who-has requests to determine which hosts are up</span><br><span class="line">arpleak             : Exploit ARP leak flaws, like NetBSD-SA2017<span class="number">-002.</span></span><br><span class="line">bind_layers         : Bind <span class="number">2</span> layers on some specific fields<span class="string">' values.</span></span><br><span class="line"><span class="string">bridge_and_sniff    : Forward traffic between interfaces if1 and if2, sniff and return</span></span><br><span class="line"><span class="string">chexdump            : Build a per byte hexadecimal representation</span></span><br><span class="line"><span class="string">computeNIGroupAddr  : Compute the NI group Address. Can take a FQDN as input parameter</span></span><br><span class="line"><span class="string">corrupt_bits        : Flip a given percentage or number of bits from a string</span></span><br><span class="line"><span class="string">corrupt_bytes       : Corrupt a given percentage or number of bytes from a string</span></span><br><span class="line"><span class="string">defrag              : defrag(plist) -&gt; ([not fragmented], [defragmented],</span></span><br><span class="line"><span class="string">defragment          : defragment(plist) -&gt; plist defragmented as much as possible </span></span><br><span class="line"><span class="string">dhcp_request        : Send a DHCP discover request and return the answer</span></span><br><span class="line"><span class="string">dyndns_add          : Send a DNS add message to a nameserver for "name" to have a new "rdata"</span></span><br><span class="line"><span class="string">dyndns_del          : Send a DNS delete message to a nameserver for "name"</span></span><br><span class="line"><span class="string">etherleak           : Exploit Etherleak flaw</span></span><br><span class="line"><span class="string">explore             : Function used to discover the Scapy layers and protocols.</span></span><br><span class="line"><span class="string">fletcher16_checkbytes: Calculates the Fletcher-16 checkbytes returned as 2 byte binary-string.</span></span><br><span class="line"><span class="string">fletcher16_checksum : Calculates Fletcher-16 checksum of the given buffer.</span></span><br><span class="line"><span class="string">fragleak            : --</span></span><br><span class="line"><span class="string">fragleak2           : --</span></span><br><span class="line"><span class="string">fragment            : Fragment a big IP datagram</span></span><br><span class="line"><span class="string">fuzz                : </span></span><br><span class="line"><span class="string">getmacbyip          : Return MAC address corresponding to a given IP address</span></span><br><span class="line"><span class="string">getmacbyip6         : Returns the MAC address corresponding to an IPv6 address</span></span><br><span class="line"><span class="string">hexdiff             : Show differences between 2 binary strings</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; help(sniff)</span></span><br><span class="line"><span class="string">Help on function sniff in module scapy.sendrecv:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sniff(*args, **kwargs)</span></span><br><span class="line"><span class="string">    Sniff packets and return a list of packets.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        count: number of packets to capture. 0 means infinity.</span></span><br><span class="line"><span class="string">        store: whether to store sniffed packets or discard them</span></span><br><span class="line"><span class="string">        prn: function to apply to each packet. If something is returned, it</span></span><br><span class="line"><span class="string">             is displayed.</span></span><br><span class="line"><span class="string">             --Ex: prn = lambda x: x.summary()</span></span><br><span class="line"><span class="string">        session: a session = a flow decoder used to handle stream of packets.</span></span><br><span class="line"><span class="string">                 e.g: IPSession (to defragment on-the-flow) or NetflowSession</span></span><br><span class="line"><span class="string">        filter: BPF filter to apply. </span></span><br><span class="line"><span class="string">                                        </span></span><br><span class="line"><span class="string">【按q退出】</span></span><br></pre></td></tr></table></figure><p>如果你对网络编程特别感兴趣，你一定会喜欢上Scapy。我们不但可以使用Scapy嗅探和发送数据报，甚至还可以使用Scapy学习计算机网络相关知识。例如，我们可以使用ls查看协议的详细格式。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls(ARP)                          </span><br><span class="line">hwtype     : XShortField                         = (<span class="number">1</span>)</span><br><span class="line">ptype      : XShortEnumField                     = (<span class="number">2048</span>)</span><br><span class="line">hwlen      : FieldLenField                       = (<span class="literal">None</span>)</span><br><span class="line">plen       : FieldLenField                       = (<span class="literal">None</span>)</span><br><span class="line">op         : ShortEnumField                      = (<span class="number">1</span>)</span><br><span class="line">hwsrc      : MultipleTypeField                   = (<span class="literal">None</span>)</span><br><span class="line">psrc       : MultipleTypeField                   = (<span class="literal">None</span>)</span><br><span class="line">hwdst      : MultipleTypeField                   = (<span class="literal">None</span>)</span><br><span class="line">pdst       : MultipleTypeField                   = (<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h4 id="3、使用Scapy发送数据报"><a class="header-anchor" href="#3、使用Scapy发送数据报">¶</a>3、使用Scapy发送数据报</h4><p>Scapy的数据报遵循了网络协议中经典的TCP/IP四层模型，即链路层、网络层、运输层和应用层。Scapy为每个层协议都提供了辅助类，我们要做的就是把这些类实例化并修改对象的取值，以此来构造数据报。每一层都可以通过类调用创建相应的数据报，如IP()、TCP()、UDP()等，不同层之间通过“/”来连接。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1 = IP(dst=<span class="string">'10.166.244.14'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet2 = IP(dst=<span class="string">'10.166.244.14'</span>)/TCP(dport=<span class="number">80</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet3 = IP(dst=<span class="string">'10.166.244.14'</span>)/ICMP()</span><br></pre></td></tr></table></figure><p>display方法可以查看当前数据报的内容，即各个参数的取值情况。例如，下面就显示了我们构造的第一个数据报中各个字段的取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.display()                </span><br><span class="line"><span class="comment">###[ IP ]### </span></span><br><span class="line">  version= <span class="number">4</span></span><br><span class="line">  ihl= <span class="literal">None</span></span><br><span class="line">  tos= <span class="number">0x0</span></span><br><span class="line">  len= <span class="literal">None</span></span><br><span class="line">  id= <span class="number">1</span></span><br><span class="line">  flags= </span><br><span class="line">  frag= <span class="number">0</span></span><br><span class="line">  ttl= <span class="number">64</span></span><br><span class="line">  proto= hopopt</span><br><span class="line">  chksum= <span class="literal">None</span></span><br><span class="line">  src= <span class="number">192.168</span><span class="number">.79</span><span class="number">.129</span></span><br><span class="line">  dst= <span class="number">10.166</span><span class="number">.244</span><span class="number">.14</span></span><br><span class="line">  \options\</span><br></pre></td></tr></table></figure><p>字段都有默认值，如果我们建立一个类的实例，没有传给它任何参数，那么它的参数取值就是默认值。如果传递了相应的参数，就使用用户传递的参数。如果使用del删除了某个参数，就恢复了默认值。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.dst                      </span><br><span class="line"><span class="string">'10.166.244.14'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.ttl = <span class="number">32</span>                </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.ttl                      </span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> packet1.ttl                  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.ttl                      </span><br><span class="line"><span class="number">64</span></span><br></pre></td></tr></table></figure><p>如果我们没有提供相应的参数取值（user set fields)，参数将使用默认值（default fields）。之后，如果我们在这个类的上层进行操作 (比如IP的上面定义TCP)，那么，数据报的取值将由上层协议进行覆盖。</p><h4 id="4、使用Scapy构造DNS查询请求"><a class="header-anchor" href="#4、使用Scapy构造DNS查询请求">¶</a>4、使用Scapy构造DNS查询请求</h4><p>下面以DNS解析为例，介绍如何使用Scapy构造数据报并发送请求。假设我们使用的 DNS服务器地址为8.8,8.8,现在，我们需要获取百度（&lt;<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>&gt; )的IP地址。 为了获取百度的IP地址，我们需要创建一个DNS的请求包。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dns=DNS(rd=<span class="number">1</span>,qd=DNSQR(qname=<span class="string">'www.baidu.com'</span>))</span><br></pre></td></tr></table></figure><p>DNS是一个应用层协议，底层可以使用UDP或TCP协议。无论是TCP协议还是UDP 协议，都依赖IP协议进行网络报传输。因此，完整的DNS清求数据报如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet = sr1(IP(dst=<span class="string">'8.8.8.8'</span>)/UDP()/dns)</span><br><span class="line">Begin emission:</span><br><span class="line">...Finished sending <span class="number">1</span> packets.</span><br><span class="line">..*</span><br><span class="line">Received <span class="number">6</span> packets, got <span class="number">1</span> answers, remaining <span class="number">0</span> packets</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用sr1函数发送和接收数据报，sr1在三层发送数据报，并且接收第一个回复。收到回复后，我们可以使用show方法来查看数据报的详细内容。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet[DNS].show()</span><br><span class="line"><span class="comment">###[ DNS ]### </span></span><br><span class="line">  id= <span class="number">0</span></span><br><span class="line">  qr= <span class="number">1</span></span><br><span class="line">  opcode= QUERY</span><br><span class="line">  aa= <span class="number">0</span></span><br><span class="line">  tc= <span class="number">0</span></span><br><span class="line">  rd= <span class="number">1</span></span><br><span class="line">  ra= <span class="number">1</span></span><br><span class="line">  z= <span class="number">0</span></span><br><span class="line">  ad= <span class="number">0</span></span><br><span class="line">  cd= <span class="number">0</span></span><br><span class="line">  rcode= ok</span><br><span class="line">  qdcount= <span class="number">1</span></span><br><span class="line">  ancount= <span class="number">3</span></span><br><span class="line">  nscount= <span class="number">0</span></span><br><span class="line">  arcount= <span class="number">0</span></span><br><span class="line">  \qd\</span><br><span class="line">   |<span class="comment">###[ DNS Question Record ]### </span></span><br><span class="line">   |  qname= <span class="string">'www.baidu.com.'</span></span><br><span class="line">   |  qtype= A</span><br><span class="line">   |  qclass= IN</span><br><span class="line">  \an\</span><br><span class="line">   |<span class="comment">###[ DNS Resource Record ]### </span></span><br><span class="line">   |  rrname= <span class="string">'www.baidu.com.'</span></span><br><span class="line">   |  type= CNAME</span><br><span class="line">   |  rclass= IN</span><br><span class="line">   |  ttl= <span class="number">332</span></span><br><span class="line">   |  rdlen= <span class="literal">None</span></span><br><span class="line">   |  rdata= <span class="string">'www.a.shifen.com.'</span></span><br><span class="line">   |<span class="comment">###[ DNS Resource Record ]### </span></span><br><span class="line">   |  rrname= <span class="string">'www.a.shifen.com.'</span></span><br><span class="line">   |  type= CNAME</span><br><span class="line">   |  rclass= IN</span><br><span class="line">   |  ttl= <span class="number">93</span></span><br><span class="line">   |  rdlen= <span class="literal">None</span></span><br><span class="line">   |  rdata= <span class="string">'www.wshifen.com.'</span></span><br><span class="line">   |<span class="comment">###[ DNS Resource Record ]### </span></span><br><span class="line">   |  rrname= <span class="string">'www.wshifen.com.'</span></span><br><span class="line">   |  type= A</span><br><span class="line">   |  rclass= IN</span><br><span class="line">   |  ttl= <span class="number">58</span></span><br><span class="line">   |  rdlen= <span class="literal">None</span></span><br><span class="line">   |  rdata= <span class="number">103.235</span><span class="number">.46</span><span class="number">.39</span></span><br><span class="line">  ns= <span class="literal">None</span></span><br><span class="line">  ar= <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>DNS应答包里面包含了非常详细的信息。例如，在这个应答中我们可以看到，DNS支持递归查询（ra取值为1表示DNS服务器支持递归查询，ra取值为0表示不支持递归查询）。百度的域名解析给出了 3个结果（ancount取值为3）。在这个例子中，我们通过手动构造数据报的方式，正确发送了DNS请求，解析了百度的IP地址。<br>在构造数据报时，如果有应用的数据，数据部分可以直接使用字符。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=Ether()/IP(dst=<span class="string">'www.slashdot.org'</span>)/TCP()/<span class="string">"GET /index.html HTTP/1.0 \n\n"</span>         </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hexdump(a)</span><br><span class="line"><span class="number">0000</span>  <span class="number">00</span> <span class="number">50</span> <span class="number">56</span> FE <span class="number">43</span> <span class="number">5</span>E <span class="number">00</span> <span class="number">0</span>C <span class="number">29</span> <span class="number">58</span> <span class="number">4</span>A <span class="number">96</span> <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span>  .PV.C^..)XJ...E.</span><br><span class="line"><span class="number">0010</span>  <span class="number">00</span> <span class="number">43</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">06</span> <span class="number">6</span>C <span class="number">12</span> C0 A8 <span class="number">4</span>F <span class="number">81</span> D8 <span class="number">69</span>  .C....@.l...O..i</span><br><span class="line"><span class="number">0020</span>  <span class="number">26</span> <span class="number">0</span>F <span class="number">00</span> <span class="number">14</span> <span class="number">00</span> <span class="number">50</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">50</span> <span class="number">02</span>  &amp;....P........P.</span><br><span class="line"><span class="number">0030</span>  <span class="number">20</span> <span class="number">00</span> AF <span class="number">0</span>F <span class="number">00</span> <span class="number">00</span> <span class="number">47</span> <span class="number">45</span> <span class="number">54</span> <span class="number">20</span> <span class="number">2</span>F <span class="number">69</span> <span class="number">6</span>E <span class="number">64</span> <span class="number">65</span> <span class="number">78</span>   .....GET /index</span><br><span class="line"><span class="number">0040</span>  <span class="number">2</span>E <span class="number">68</span> <span class="number">74</span> <span class="number">6</span>D <span class="number">6</span>C <span class="number">20</span> <span class="number">48</span> <span class="number">54</span> <span class="number">54</span> <span class="number">50</span> <span class="number">2</span>F <span class="number">31</span> <span class="number">2</span>E <span class="number">30</span> <span class="number">20</span> <span class="number">0</span>A  .html HTTP/<span class="number">1.0</span> .</span><br><span class="line"><span class="number">0050</span>  <span class="number">0</span>A</span><br></pre></td></tr></table></figure><p>如果我们安装了PyX，还可以直接将数据报dump成一个PostScript或PDF文件。</p><h4 id="5、使用Scapy进行网络嗅探"><a class="header-anchor" href="#5、使用Scapy进行网络嗅探">¶</a>5、使用Scapy进行网络嗅探</h4><p>Scapy除了可以伪造数据报并接收响应结果以外，还可以用于数据报嗅探。对数据报进行嗅探的函数为sniff，sniff函数的详细使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sniff(filter=<span class="string">""</span>, iface=<span class="string">"any"</span>, prn=function, count=N)</span><br></pre></td></tr></table></figure><p>sniff函数的参数说明如下：</p><blockquote><ol><li>filter:用来表示想要捕获数据报类型的过滤器，如只捕获ICMP数据报，则filter取值为“ICMP”，只捕获80端口的TCP数据报，则filter取值为“TCP and （port 80)&quot;；</li><li>iface:设置嗅探器所要嗅探的网卡，默认对所有网卡进行嗅探；</li><li>pm:指定嗅探到符合过滤器条件的数据报时所调用的回调函数，这个回调函数只接受一个参数，即收到的数据报。</li><li>count:指定需要嗅探的数据报的个数。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_callback</span><span class="params">(packet)</span>:</span></span><br><span class="line">print(packet.show())</span><br><span class="line">sniff(prn=pack_calback, iface=<span class="string">"ens33"</span>, count=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>下面是一个非常简单的sniff使用示例。在这个例子中，我们仅仅捕获三个ICMP的数据报，并且直接打印数据报的信息。前面说过，Scapy的交互模式就是Python的交互模式，因此，我们可以直接使用Python的库、语法和语句。sniff要求prn是一个回调函数，因此，我们传递给prn参数的是一个Lambda函数。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = sniff(filter=<span class="string">"tcp"</span>, prn=<span class="keyword">lambda</span> x:x.summary(), count=<span class="number">3</span>) </span><br><span class="line">Ether / IP / TCP <span class="number">192.168</span><span class="number">.79</span><span class="number">.1</span>:<span class="number">65134</span> &gt; <span class="number">192.168</span><span class="number">.79</span><span class="number">.129</span>:ssh PA / Raw</span><br><span class="line">Ether / IP / TCP <span class="number">192.168</span><span class="number">.79</span><span class="number">.129</span>:ssh &gt; <span class="number">192.168</span><span class="number">.79</span><span class="number">.1</span>:<span class="number">65134</span> PA / Raw</span><br><span class="line">Ether / IP / TCP <span class="number">192.168</span><span class="number">.79</span><span class="number">.129</span>:ssh &gt; <span class="number">192.168</span><span class="number">.79</span><span class="number">.1</span>:<span class="number">65134</span> PA / Raw</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用Python监控Linux系统</title>
    <link href="https://pdxblog.top/%E4%BD%BF%E7%94%A8Python%E7%9B%91%E6%8E%A7Linux%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://pdxblog.top/%E4%BD%BF%E7%94%A8Python%E7%9B%91%E6%8E%A7Linux%E7%B3%BB%E7%BB%9F.html</id>
    <published>2020-05-11T16:00:00.000Z</published>
    <updated>2020-05-12T09:10:20.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Python监控Linux系统"><a class="header-anchor" href="#使用Python监控Linux系统">¶</a>使用Python监控Linux系统</h2><p>Linux下有许多使用Python语言编写的监控工具，如inotify-sync、dstat和glances。此外，如果要根据业务编写简单的监控脚本，很多工程师也会选择Python语言。Python语言是一门简单易学/语法清晰/表达能力强的编程语言，非常适合于编写监控程序的场景。使用Python语言编写监控程序具有以下几个优势：</p><p>1、Python语言开发效率高。Python语言有自己的优势与劣势，使用Python开发监控程序是一个充分发挥Python优势，避免Python劣势的领域。对于监控程序来说，能够利用Python语言开发效率高的优势尽快完成程序的编写工作。同时，监控程序也不要求性能，因此避免了Python语言性能不如C、C++和Java的劣势。</p><p>2、Python语言表达能力强。相信任何一个学习Linux的工程师都使用过shell脚本编写过监控程序。虽然Linux下有很多监控工具，也有很多文本处理程序，但是获取监控与解析结果是完全不同的工具。解析监控结果的程序不理解监控程序输出结果的具体含义。Python语言中有非常丰富的数据结构，可以用各种方式保存监控结果，以便后续处理。</p><p>3、利用第三方库开发监控程序。Python的标准库本身非常强大，被称为“连电池都包含在内”。对于一个问题，如果标准库没有提供相应的工具，那么也会有开源的项目来填补这个空白。监控程序正式这样一种情况，在Python语言中，具有非常成熟的第三方库帮助开发者简化监控程序的编写工作。</p><h3 id="一、Python编写的监控工具"><a class="header-anchor" href="#一、Python编写的监控工具">¶</a>一、Python编写的监控工具</h3><p>我们将介绍两个Python语言编写的监控工具，分别是dstat和glances。</p><h4 id="1、多功能系统资源统计工具dstat"><a class="header-anchor" href="#1、多功能系统资源统计工具dstat">¶</a>1、多功能系统资源统计工具dstat</h4><p>dstat是一个用Python语言实现的多功能系统资源统计工具，用来取代Linux下的vmstat、iostat、netstat、和ifstat等命令。并且，dstat克服了这些命令的限制，增加了额外的功能，以及更多的计数器与更好的灵活性。dstat可以在一个界面上展示非常全面的监控信息，因此，在系统监控、基准测试和故障排除等应用场景下特别有用。</p><p>我们可以使用dstat监控所有系统资源的使用情况，并且可以结合不同的场景定制监控的资源。例如，在同一时间段以相同的时间频率比较网络带宽与磁盘的吞吐率。</p><p>dstat将以列表的形式显示监控信息，并且使用不同的颜色进行输出，以可读性较强的单位展示监控数值。例如，对于字节数值，dstat自动根据数值的大小，以K、M、G等单位进行显示，避免了开发者使用其他命令时因为数值太大造成的困惑和错误。此外，使用dstat还可以非常方便地编写插件，用来收集默认情况下没有收到的监控信息。dstat是专门为人们实时查看监控信息设计的，因此默认将监控结果输出到屏幕终端。我们也可以将监控信息以CSV格式输出到文件，以便后续处理。</p><h5 id="（1）dstat介绍"><a class="header-anchor" href="#（1）dstat介绍">¶</a>（1）dstat介绍</h5><p>作为一个多功能系统资源统计工具，dstat具有以下特性：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">结合了vmstat，iostat，ifstat，netstat以及更多的信息</span><br><span class="line">实时显示统计情况</span><br><span class="line">在分析和排障时可以通过启用监控项并排序</span><br><span class="line">模块化设计</span><br><span class="line">使用python编写的，更方便扩展现有的工作任务</span><br><span class="line">容易扩展和添加你的计数器（请为此做出贡献）</span><br><span class="line">包含的许多扩展插件充分说明了增加新的监控项目是很方便的</span><br><span class="line">可以分组统计块设备/网络设备，并给出总数</span><br><span class="line">可以显示每台设备的当前状态</span><br><span class="line">极准确的时间精度，即便是系统负荷较高也不会延迟显示</span><br><span class="line">显示准确地单位和和限制转换误差范围</span><br><span class="line">用不同的颜色显示不同的单位</span><br><span class="line">显示中间结果延时小于1秒</span><br><span class="line">支持输出CSV格式报表，并能导入到Gnumeric和Excel以生成图形</span><br></pre></td></tr></table></figure><p>如果操作系统默认没有安装dstat，那么需要我们手动进行安装。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install dstat</span><br></pre></td></tr></table></figure><p>查看dstat命令的帮助信息与支持选项，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dstat --help</span><br></pre></td></tr></table></figure><p>dstat命令的–version选项，处理显示dstat的版本以外，还会显示操作系统的版本、Python语言的版本、CPU的个数，以及dstat支持的插件列表等详细信息。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat --version</span><br><span class="line">Dstat 0.7.2</span><br><span class="line">Written by Dag Wieers &lt;dag@wieers.com&gt;</span><br><span class="line">Homepage at http://dag.wieers.com/home-made/dstat/</span><br><span class="line"></span><br><span class="line">Platform posix/linux2</span><br><span class="line">Kernel 3.10.0-957.el7.x86_64</span><br><span class="line">Python 2.7.5 (default, Oct 30 2018, 23:45:53) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br><span class="line"></span><br><span class="line">Terminal type: xterm (color support)</span><br><span class="line">Terminal size: 16 lines, 83 columns</span><br><span class="line"></span><br><span class="line">Processors: 1</span><br><span class="line">Pagesize: 4096</span><br><span class="line">Clock ticks per secs: 100</span><br><span class="line"></span><br><span class="line">internal:</span><br><span class="line">aio, cpu, cpu24, disk, disk24, disk24old, epoch, fs, int, int24, io, ipc, </span><br><span class="line">load, lock, mem, net, page, page24, proc, raw, socket, swap, swapold, </span><br><span class="line">sys, tcp, time, udp, unix, vm</span><br><span class="line">/usr/share/dstat:</span><br><span class="line">battery, battery-remain, cpufreq, dbus, disk-tps, disk-util, dstat, </span><br><span class="line">dstat-cpu, dstat-ctxt, dstat-mem, fan, freespace, gpfs, gpfs-ops, </span><br><span class="line">helloworld, innodb-buffer, innodb-io, innodb-ops, lustre, memcache-hits, </span><br><span class="line">mysql-io, mysql-keys, mysql5-cmds, mysql5-conn, mysql5-io, mysql5-keys, </span><br><span class="line">net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, ntp, postfix, power, </span><br><span class="line">proc-count, qmail, rpc, rpcd, sendmail, snooze, squid, test, thermal, </span><br><span class="line">top-bio, top-bio-adv, top-childwait, top-cpu, top-cpu-adv, top-cputime, </span><br><span class="line">top-cputime-avg, top-int, top-io, top-io-adv, top-latency, </span><br><span class="line">top-latency-avg, top-mem, top-oom, utmp, vm-memctl, vmk-hba, vmk-int, </span><br><span class="line">vmk-nic, vz-cpu, vz-io, vz-ubc, wifi</span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><p>除了使用dstat命令的–version选项查看dstat的详细信息获取可支持的插件以外，还可以使用dstat命令的–list选项获取dstat的插件列表。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat --list</span><br><span class="line">internal:</span><br><span class="line">aio, cpu, cpu24, disk, disk24, disk24old, epoch, fs, int, int24, io, ipc, load, lock, mem, net, page, page24, </span><br><span class="line">proc, raw, socket, swap, swapold, sys, tcp, time, udp, unix, vm</span><br><span class="line">/usr/share/dstat:</span><br><span class="line">battery, battery-remain, cpufreq, dbus, disk-tps, disk-util, dstat, dstat-cpu, dstat-ctxt, dstat-mem, fan, </span><br><span class="line">freespace, gpfs, gpfs-ops, helloworld, innodb-buffer, innodb-io, innodb-ops, lustre, memcache-hits, mysql-io, </span><br><span class="line">mysql-keys, mysql5-cmds, mysql5-conn, mysql5-io, mysql5-keys, net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, ntp, </span><br><span class="line">postfix, power, proc-count, qmail, rpc, rpcd, sendmail, snooze, squid, test, thermal, top-bio, top-bio-adv, </span><br><span class="line">top-childwait, top-cpu, top-cpu-adv, top-cputime, top-cputime-avg, top-int, top-io, top-io-adv, top-latency, </span><br><span class="line">top-latency-avg, top-mem, top-oom, utmp, vm-memctl, vmk-hba, vmk-int, vmk-nic, vz-cpu, vz-io, vz-ubc, wifi</span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><p>直接在终端输入dstat命令，dstat将以默认参数运行。默认情况下，dstat会收集CPU、磁盘、网络、交换页和系统消息，并以1秒钟1次的频率进行输出，直到我们按Ctrl+C结束。</p><h5 id="（2）dstat常用选项"><a class="header-anchor" href="#（2）dstat常用选项">¶</a>（2）dstat常用选项</h5><p>如下所示，dstat会提示我们没有指定任何参数，因此使用-cdngy参数运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat</span><br><span class="line">You did not select any stats, using -cdngy by default.</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  9   3  88   0   0   0| 219k   60k|   0     0 |2682B 5427B| 163  1542 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  894B|   0     0 | 326  4218 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 | 126B  410B|   0     0 | 330  4431 </span><br><span class="line"> 18   7  75   0   0   0|   0     0 |  66B  416B|   0     0 | 341  2998 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  350B|   0     0 | 340  4098 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  350B|   0     0 | 319  4010 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  350B|   0     0 | 326  4378 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  350B|   0     0 | 322  4407 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  350B|   0     0 | 332  4520 </span><br><span class="line"> 21   6  73   0   0   0|1140k    0 |  66B  350B|   0     0 | 345  3341 </span><br><span class="line"> 20   7  72   0   0   1|   0     0 |  66B  358B|   0     0 | 348  3821</span><br></pre></td></tr></table></figure><p>常用选项如下：</p><blockquote><p>直接跟数字，表示#秒收集一次数据，默认为一秒；dstat 5表示5秒更新一次</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-c,--cpu  统计CPU状态，包括system, user, idle, wait, hardware interrupt, software interrupt等；</span><br><span class="line">-d, --disk 统计磁盘读写状态</span><br><span class="line">-D total,sda 统计指定磁盘或汇总信息</span><br><span class="line">-l, --load 统计系统负载情况，包括1分钟、5分钟、15分钟平均值</span><br><span class="line">-m, --mem 统计系统物理内存使用情况，包括used, buffers, cache, free</span><br><span class="line">-s, --swap 统计swap已使用和剩余量</span><br><span class="line">-n, --net 统计网络使用情况，包括接收和发送数据</span><br><span class="line">-N eth1,total  统计eth1接口汇总流量</span><br><span class="line">-r, --io 统计I/O请求，包括读写请求</span><br><span class="line">-p, --proc 统计进程信息，包括runnable、uninterruptible、new</span><br><span class="line">-y, --sys 统计系统信息，包括中断、上下文切换</span><br><span class="line">-t 显示统计时时间，对分析历史数据非常有用</span><br><span class="line">--fs 统计文件打开数和inodes数</span><br></pre></td></tr></table></figure><p>除了前面介绍的与监控相关的参数以外，dstat还可以像vmstat和iostat一样使用参数控制报告的时间间隔，或者同事指定时间间隔与报告次数。</p><p>例如，下面的命令表示以默认的选项运行dstat，每2秒钟输出一条监控信息，并在输出10条监控信息以后退出dstat。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat 2 10</span><br><span class="line">You did not select any stats, using -cdngy by default.</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  9   3  88   0   0   0| 218k   60k|   0     0 |2674B 5409B| 164  1550 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  594B|   0     0 | 326  3956 </span><br><span class="line"> 21   6  73   0   0   0|   0   147k|  66B  346B|   0     0 | 360  4114 </span><br><span class="line"> 20   5  76   0   0   0|   0     0 |  66B  346B|   0     0 | 320  4494 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  96B  372B|   0     0 | 349  4144 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  342B|   0     0 | 331  4360 </span><br><span class="line"> 21   6  74   0   0   0|   0     0 |  66B  342B|   0     0 | 344  3607 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  342B|   0     0 | 334  4475 </span><br><span class="line"> 21   6  74   0   0   0|   0     0 |  66B  342B|   0     0 | 338  4580 </span><br><span class="line"> 20   7  73   0   0   1|   0     0 |  66B  342B|   0     0 | 340  4341 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  342B|   0     0 | 344  3899 </span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><h5 id="（3）dstat高级用法"><a class="header-anchor" href="#（3）dstat高级用法">¶</a>（3）dstat高级用法</h5><p>dstat的强大之处不仅仅是因为它聚合了多种工具的监控结果，还因为它能通过附带的插件实现一些更高级功能。如：找出磁盘中占用资源最高的进程和用户。</p><p>dstat -cdlmnpsyt 5 可以得到较全面的系统性能数据。</p><p>dstat的–top-(io|bio|cpu|cputime|cputime-avg|mem) 通过这几个选项，可以看到具体是哪个用户哪个进程占用了相关系统资源，对系统调优非常有效。如查看当前占用I/O、cpu、内存等最高的进程信息可以使用dstat --top-mem --top-io --top-cpu选项。以下示例演示了如何找出占用资源最多的进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat --top-mem --top-io --top-cpu</span><br><span class="line">--most-expensive- ----most-expensive---- -most-expensive-</span><br><span class="line">  memory process |     i/o process      |  cpu process   </span><br><span class="line">gnome-shell  115M|polkitd     203k   10k|polkitd      3.8</span><br><span class="line">gnome-shell  115M|polkitd     459k   23k|polkitd       10</span><br><span class="line">gnome-shell  115M|polkitd     625k   31k|polkitd      9.0</span><br><span class="line">gnome-shell  115M|polkitd     592k   29k|dbus-daemon  8.0</span><br><span class="line">gnome-shell  115M|polkitd     606k   30k|polkitd      9.0</span><br><span class="line">gnome-shell  115M|polkitd     525k   26k|polkitd       10</span><br><span class="line">gnome-shell  115M|polkitd     525k   26k|dbus-daemon  8.0</span><br></pre></td></tr></table></figure><p>dstat的插件保存在/usr/share/dstat目录下，我们可以参考它们的实现，编写自己的插件。</p><h5 id="（4）将结果输出到CSV文件"><a class="header-anchor" href="#（4）将结果输出到CSV文件">¶</a>（4）将结果输出到CSV文件</h5><p>dstat还可以将监控信息保存到CSV文件中，以便后续进行处理。通过–output选项指定监控数据输出的文件。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat -a --output dstat_output.csv</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  9   3  88   0   0   0| 217k   60k|   0     0 |2656B 5370B| 165  1568 </span><br><span class="line"> 19   8  50  22   0   0|  11M   50k|  66B  838B| 128k    0 | 428  3116 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  374B|   0     0 | 325  4514 </span><br><span class="line"> 25   7  25  43   0   0|5284k    0 |  66B  350B| 476k    0 | 448  4227 </span><br><span class="line"> 18   7  74   0   0   1|  32k  144k|  66B  366B|  52k    0 | 334  4524 </span><br><span class="line"> 31  11   6  52   0   0|1944k 4096B|  66B  374B| 868k    0 | 613  3846 </span><br><span class="line"> 19   6  69   6   0   0| 116k 4096B|  66B  374B| 116k    0 | 337  4367 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  374B|   0     0 | 331  4573 </span><br><span class="line"> 20   7  73   0   0   0|   0     0 |  66B  350B|   0     0 | 339  3787 </span><br><span class="line"> 18   6  76   0   0   0|   0     0 |  66B  350B|   0     0 | 317  4472 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  350B|   0     0 | 338  3675 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  350B|   0     0 | 324  4633 </span><br><span class="line"> 21   5  74   0   0   0|   0     0 |  66B  350B|   0     0 | 318  4597 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  350B|   0     0 | 333  4847 </span><br><span class="line"> 18   6  76   0   0   0|   0     0 |  66B  350B|   0     0 | 308  4742 ^C</span><br><span class="line">[root@192 ~]# cat dstat_output.csv </span><br><span class="line">"Dstat 0.7.2 CSV output"</span><br><span class="line">"Author:","Dag Wieers &lt;dag@wieers.com&gt;",,,,"URL:","http://dag.wieers.com/home-made/dstat/"</span><br><span class="line">"Host:","192.168.32.138",,,,"User:","root"</span><br><span class="line">"Cmdline:","dstat -a --output dstat_output.csv",,,,"Date:","22 Feb 2020 00:22:08 CST"</span><br><span class="line"></span><br><span class="line">"total cpu usage",,,,,,"dsk/total",,"net/total",,"paging",,"system",</span><br><span class="line">"usr","sys","idl","wai","hiq","siq","read","writ","recv","send","in","out","int","csw"</span><br><span class="line">8.683,2.816,88.156,0.313,0.0,0.032,222019.623,61103.678,0.0,0.0,2655.691,5370.227,164.807,1568.447</span><br><span class="line">19.388,8.163,50.0,22.449,0.0,0.0,11702272.0,51200.0,66.0,838.0,131072.0,0.0,428.0,3116.0</span><br><span class="line">19.192,6.061,74.747,0.0,0.0,0.0,0.0,0.0,66.0,374.0,0.0,0.0,325.0,4514.0</span><br><span class="line">24.510,6.863,25.490,43.137,0.0,0.0,5410816.0,0.0,66.0,350.0,487424.0,0.0,448.0,4227.0</span><br><span class="line">18.182,7.071,73.737,0.0,0.0,1.010,32768.0,147456.0,66.0,366.0,53248.0,0.0,334.0,4524.0</span><br><span class="line">30.928,11.340,6.186,51.546,0.0,0.0,1990656.0,4096.0,66.0,374.0,888832.0,0.0,613.0,3846.0</span><br><span class="line">19.192,6.061,68.687,6.061,0.0,0.0,118784.0,4096.0,66.0,374.0,118784.0,0.0,337.0,4367.0</span><br><span class="line">19.802,5.941,74.257,0.0,0.0,0.0,0.0,0.0,66.0,374.0,0.0,0.0,331.0,4573.0</span><br><span class="line">20.0,7.0,73.0,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,339.0,3787.0</span><br><span class="line">18.367,6.122,75.510,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,317.0,4472.0</span><br><span class="line">20.0,6.0,74.0,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,338.0,3675.0</span><br><span class="line">20.202,5.051,74.747,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,324.0,4633.0</span><br><span class="line">21.0,5.0,74.0,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,318.0,4597.0</span><br><span class="line">19.192,6.061,74.747,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,333.0,4847.0</span><br><span class="line">18.182,6.061,75.758,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,308.0,4742.0</span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><h4 id="2、交互式监控工具glances"><a class="header-anchor" href="#2、交互式监控工具glances">¶</a>2、交互式监控工具glances</h4><p>在紧急情况下，工程师需要在尽可能短的时间内查看尽可能多的信息。此时，glances是一个不错的选择。glances的设计初衷就是在当前窗口中尽可能多地显示系统消息。</p><p>glances是一款使用Python语言开发、基于psutil的跨平台系统监控工具，在所有Linux命令行工具中，它与top命令最相似，都是命令行交互监控工具。但是，glances实现了比top命令更齐全的接口，提供了更加丰富的功能。</p><h5 id="（1）glances提供的系统信息"><a class="header-anchor" href="#（1）glances提供的系统信息">¶</a>（1）glances提供的系统信息</h5><p>glances提供的系统信息如下所示：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CPU 使用率</span><br><span class="line">内存使用情况</span><br><span class="line">内核统计信息和运行队列信息</span><br><span class="line">磁盘 I/O 速度、传输和读/写比率</span><br><span class="line">文件系统中的可用空间</span><br><span class="line">磁盘适配器</span><br><span class="line">网络 I/O 速度、传输和读/写比率</span><br><span class="line">页面空间和页面速度</span><br><span class="line">消耗资源最多的进程</span><br><span class="line">计算机信息和系统资源</span><br></pre></td></tr></table></figure><p>glances 工具可以在用户的终端上实时显示重要的系统信息，并动态地对其进行更新。这个高效的工具可以工作于任何终端屏幕。另外它并不会消耗大量的 CPU 资源，通常低于百分之二。glances 在屏幕上对数据进行显示，并且每隔2秒钟对其进行更新。您也可以自己将这个时间间隔更改为更长或更短的数值。</p><p>glances 工具还可以将相同的数据捕获到一个文件，便于以后对报告进行分析和绘制图形。输出文件可以是电子表格的格式 (.csv) 或者 html 格式。</p><h5 id="（2）Linux下glances的安装"><a class="header-anchor" href="#（2）Linux下glances的安装">¶</a>（2）Linux下glances的安装</h5><p>在Linux系统中，可以使用yum命令或者pip命令安装glances。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install glances</span><br></pre></td></tr></table></figure><p>glances的使用非常简单，直接输入glances命令便进入了一个类似top命令的交互式界面。在这个界面中，显示了比top更加全面，更加具有可读性的信息。如下所示：</p><p>glances 工作界面的说明 :<br>在图 1 的上部是 CPU 、Load（负载）、Mem（内存使用）、 Swap（交换分区）的使用情况。在图 1 的中上部是网络接口、Processes（进程）的使用情况。通常包括如下字段：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">VIRT: 虚拟内存大小</span><br><span class="line">RES: 进程占用的物理内存值</span><br><span class="line"><span class="comment">%CPU：该进程占用的 CPU 使用率</span></span><br><span class="line"><span class="comment">%MEM：该进程占用的物理内存和总内存的百分比</span></span><br><span class="line">PID: 进程 ID 号</span><br><span class="line">USER: 进程所有者的用户名</span><br><span class="line">TIME+: 该进程启动后占用的总的 CPU 时间</span><br><span class="line">IO_R 和 IO_W: 进程的读写 I/O 速率</span><br><span class="line">NAME: 进程名称</span><br><span class="line">NI: 进程优先级</span><br><span class="line">S: 进程状态，其中 S 表示休眠，R 表示正在运行，Z 表示僵死状态。</span><br></pre></td></tr></table></figure><h5 id="（3）glances的可读性"><a class="header-anchor" href="#（3）glances的可读性">¶</a>（3）glances的可读性</h5><p>对比可以发现，glances对屏幕的利用率比top明显高很多，信息量很大，有许多top所没有显示的数据。而且，glances的实时变动比top颜值高太多了。</p><p>Glances 会用一下几种颜色来代表状态，如下所示：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">绿色：OK（一切正常）</span><br><span class="line">蓝色：CAREFUL（需要注意）</span><br><span class="line">紫色：WARNING（警告）</span><br><span class="line">红色：CRITICAL（严重）</span><br></pre></td></tr></table></figure><h5 id="（4）glances常见命令"><a class="header-anchor" href="#（4）glances常见命令">¶</a>（4）glances常见命令</h5><p>glances是一个交互式的工具，因此我们也可以输入命令来控制glances的行为。glances常见的命令有：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">h：显示帮助信息</span><br><span class="line">q：离开程序退出</span><br><span class="line">c：按照 CPU 实时负载对系统进程进行排序</span><br><span class="line">m：按照内存使用状况对系统进程排序</span><br><span class="line">i：按照 I/O 使用状况对系统进程排序</span><br><span class="line">p：按照进程名称排序</span><br><span class="line">d：显示磁盘读写状况</span><br><span class="line">w：删除日志文件</span><br><span class="line">l：显示日志</span><br><span class="line">s：显示传感器信息</span><br><span class="line">f：显示系统信息</span><br><span class="line">1：轮流显示每个 CPU 内核的使用情况（次选项仅仅使用在多核 CPU 系统）</span><br></pre></td></tr></table></figure><p>glances还支持将采集的数据导入到其他服务中心，包括InfluxDB、Cassandra、CouchDB、OpenTSDB、Prometheus、StatsD、ElasticSearch、RabbitMQ/ActiveMQ、ZeroMQ、Kafaka和Riemann。</p><h3 id="二、Python监控Linux"><a class="header-anchor" href="#二、Python监控Linux">¶</a>二、Python监控Linux</h3><p>shell查看磁盘的监控信息，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon proc]# cat /proc/diskstats </span><br><span class="line">   8       0 sda 85935 21845 10913707 101067 3119 81257 743486 15647 0 31410 109079</span><br><span class="line">   8       1 sda1 1822 0 12456 397 4 0 4096 74 0 457 462</span><br><span class="line">   8       2 sda2 84082 21845 10897907 100659 3115 81257 739390 15573 0 30950 108604</span><br><span class="line">  11       0 sr0 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 253       0 dm-0 80726 0 10688467 99971 2275 0 82606 10224 0 27927 110196</span><br><span class="line"> 253       1 dm-1 25123 0 205184 7367 82098 0 656784 616558 0 5167 623924</span><br></pre></td></tr></table></figure><p>编写一个Python脚本，监控磁盘信息，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">disk  = namedtuple(<span class="string">'Disk'</span>,<span class="string">'major_number minor_number device_name'</span></span><br><span class="line">                <span class="string">' read_count read_merged_count read_sections'</span></span><br><span class="line">                <span class="string">' time_spent_reading write_count write_merged_count'</span></span><br><span class="line">                <span class="string">' write_sections time_spent_write io_requests'</span></span><br><span class="line">                <span class="string">' time_spent_doing_io weighted_time_spent_dong_io'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_disk_info</span><span class="params">(device)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'/proc/diskstats'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                        <span class="keyword">if</span> line.split()[<span class="number">2</span>] == device:</span><br><span class="line">                                <span class="keyword">return</span> disk(*(line.split()))</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'设备(&#123;0&#125;)没找到。。。'</span>.format(device))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">        disk_info = get_disk_info(<span class="string">'sda1'</span>)</span><br><span class="line"></span><br><span class="line">        print(disk_info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">        main()</span><br></pre></td></tr></table></figure><h3 id="三、使用开源库监控Linux"><a class="header-anchor" href="#三、使用开源库监控Linux">¶</a>三、使用开源库监控Linux</h3><p>在这一小节，我们将介绍一个在Python生态中广泛使用的开源项目，即psutil。随后，我们将使用psutil重构前一小节编写的监控程序。另外，还会简单介绍psutil提供的进程管理功能。</p><h4 id="1、psutil介绍"><a class="header-anchor" href="#1、psutil介绍">¶</a>1、psutil介绍</h4><blockquote><p>psutil = process and system utilities</p></blockquote><p>psutil是一个开源且跨平台的库，其提供了便利的函数用来获取操作系统的信息，比如CPU，内存，磁盘，网络等。此外，psutil还可以用来进行进程管理，包括判断进程是否存在、获取进程列表、获取进程详细信息等。而且psutil还提供了许多命令行工具提供的功能，包括：ps，top，lsof，netstat，ifconfig， who，df，kill，free，nice，ionice，iostat，iotop，uptime，pidof，tty，taskset，pmap。</p><p>psutil是一个跨平台的库，支持Linux、Windows、OSX、FreeBSD、OpenBSD、NetBSD、Sun Solaris、AIX等操作系统。同时，psutil也支持32位与64位的系统架构，支持Python2.6到Python3.x之间的所有Python版本。</p><p>psutil具有简单易用、功能强大、跨平台等诸多优点，广泛应用于开源项目中，比较有名的有glances、Facebook的osquery、Google的grr等。psutil不但广泛应用于Python语言开发的开源项目中，还被移植到了其他编程语言中，如Go语言的gopsutil、C语言的cpslib、Rust语言的rust-psutil、Ruby语言的posixpsutil等。</p><p>psutil是一个第三方的开源项目，因此，需要先安装才能够使用。如果安装了Anaconda，psutil就已经可用了。否则，需要在命令行下通过pip安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pip install psutil</span><br><span class="line">Collecting psutil</span><br><span class="line">  Downloading psutil-5.7.0.tar.gz (449 kB)</span><br><span class="line">     |████████████████████████████████| 449 kB 4.6 kB/s </span><br><span class="line">Installing collected packages: psutil</span><br><span class="line">    Running setup.py install for psutil ... done</span><br><span class="line">Successfully installed psutil-5.7.0</span><br></pre></td></tr></table></figure><p>psutil包含了异常、类、功能函数和常量，其中功能函数用来获取系统的信息，如CPU、磁盘、内存、网络等。类用来实现进程的管理功能。</p><h4 id="2、psutil提供的功能函数"><a class="header-anchor" href="#2、psutil提供的功能函数">¶</a>2、psutil提供的功能函数</h4><p>根据函数的功能，主要分为CPU、磁盘、内存、网络几类，下面将会总几个方面来介绍psutil提供的功能函数。在这一小节，我们也将学习如何使用psutil来简化使用shell脚本获取监控信息的程序，并获取CPU、内存、磁盘和网络等不同维度。</p><h5 id="（1）CPU"><a class="header-anchor" href="#（1）CPU">¶</a>（1）CPU</h5><p>与CPU相关的功能函数如下：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>psutil.cpu_count()</td><td>cpu_count(,[logical]):默认返回逻辑CPU的个数,当设置logical的参数为False时，返回物理CPU的个数。</td></tr><tr><td>psutil.cpu_percent()</td><td>cpu_percent(,[percpu],[interval])：返回CPU的利用率,percpu为True时显示所有物理核心的利用率,interval不为0时,则阻塞时显示interval执行的时间内的平均利用率</td></tr><tr><td>psutil.cpu_times()</td><td>cpu_times(,[percpu])：以命名元组(namedtuple)的形式返回cpu的时间花费,percpu=True表示获取每个CPU的时间花费</td></tr><tr><td>psutil.cpu_times_percent()</td><td>cpu_times_percent(,[percpu])：功能和cpu_times大致相同，看字面意思就能知道，该函数返回的是耗时比例。</td></tr><tr><td>psutil.cpu_stats()</td><td>cpu_stats()以命名元组的形式返回CPU的统计信息，包括上下文切换，中断，软中断和系统调用次数。</td></tr><tr><td>psutil.cpu_freq()</td><td>cpu_freq([percpu])：返回cpu频率</td></tr></tbody></table><h6 id="1）cpu-count"><a class="header-anchor" href="#1）cpu-count">¶</a>1）cpu_count</h6><blockquote><p>默认返回逻辑CPU的个数,当设置logical的参数为False时，返回物理CPU的个数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import psutil                                                              </span><br><span class="line"></span><br><span class="line">In [2]: psutil.cpu_count()                                                         </span><br><span class="line">Out[2]: 2</span><br><span class="line"></span><br><span class="line">In [3]: psutil.cpu_count(logical&#x3D;False)                                            </span><br><span class="line">Out[3]: 1</span><br></pre></td></tr></table></figure><h6 id="2）cpu-percent"><a class="header-anchor" href="#2）cpu-percent">¶</a>2）cpu_percent</h6><blockquote><p>返回CPU的利用率，percpu为True时显示所有物理核心的利用率，interval不为0时，则阻塞时显示interval执行的时间内的平均利用率。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: psutil.cpu_percent()                                                       </span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: psutil.cpu_percent(percpu=<span class="literal">True</span>)                                            </span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">1.3</span>, <span class="number">1.5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: psutil.cpu_percent(percpu=<span class="literal">True</span>,interval=<span class="number">2</span>)                                 </span><br><span class="line">Out[<span class="number">6</span>]: [<span class="number">1.0</span>, <span class="number">0.0</span>]</span><br></pre></td></tr></table></figure><h6 id="3）cpu-times"><a class="header-anchor" href="#3）cpu-times">¶</a>3）cpu_times</h6><p>以命名元组(namedtuple)的形式返回cpu的时间花费，percpu=True表示获取每个CPU的时间花费。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: psutil.cpu_times()                                                         </span><br><span class="line">Out[<span class="number">7</span>]: scputimes(user=<span class="number">41.51</span>, nice=<span class="number">2.05</span>, system=<span class="number">35.36</span>, idle=<span class="number">2096.05</span>, iowait=<span class="number">5.45</span>, irq=<span class="number">0.0</span>, softirq=<span class="number">1.31</span>, steal=<span class="number">0.0</span>, guest=<span class="number">0.0</span>, guest_nice=<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: psutil.cpu_times_percent()                                                 </span><br><span class="line">Out[<span class="number">8</span>]: scputimes(user=<span class="number">0.3</span>, nice=<span class="number">0.0</span>, system=<span class="number">0.1</span>, idle=<span class="number">99.5</span>, iowait=<span class="number">0.0</span>, irq=<span class="number">0.0</span>, softirq=<span class="number">0.0</span>, steal=<span class="number">0.0</span>, guest=<span class="number">0.0</span>, guest_nice=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure><h6 id="4）cpu-stats"><a class="header-anchor" href="#4）cpu-stats">¶</a>4）cpu_stats</h6><p>以命名元组的形式返回CPU的统计信息，包括上下文切换，中断，软中断和系统调用次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: psutil.cpu_stats()                                                        </span><br><span class="line">Out[<span class="number">10</span>]: scpustats(ctx_switches=<span class="number">538642</span>, interrupts=<span class="number">238329</span>, soft_interrupts=<span class="number">273448</span>, syscalls=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h6 id="5）cpu-freq"><a class="header-anchor" href="#5）cpu-freq">¶</a>5）cpu_freq</h6><p>返回cpu频率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: psutil.cpu_freq()                                                         </span><br><span class="line">Out[<span class="number">11</span>]: scpufreq(current=<span class="number">2394.464</span>, min=<span class="number">0.0</span>, max=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure><h5 id="（2）内存"><a class="header-anchor" href="#（2）内存">¶</a>（2）内存</h5><p>与内存相关的功能函数如下：</p><h6 id="1）virtual-memory"><a class="header-anchor" href="#1）virtual-memory">¶</a>1）virtual_memory</h6><p>以命名元组的形式返回内存使用情况，包括总内存、可用内存、内存利用率、buffer和cache等。除了内存利用率，其它字段都以字节为单位返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: psutil.virtual_memory()                                                    </span><br><span class="line">Out[<span class="number">2</span>]: svmem(total=<span class="number">1019797504</span>, available=<span class="number">95744000</span>, percent=<span class="number">90.6</span>, used=<span class="number">758079488</span>, free=<span class="number">67502080</span>, active=<span class="number">295485440</span>, inactive=<span class="number">417394688</span>, buffers=<span class="number">0</span>, cached=<span class="number">194215936</span>, shared=<span class="number">19103744</span>, slab=<span class="number">92905472</span>)</span><br></pre></td></tr></table></figure><blockquote><p>单位转换</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- conding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes2human</span><span class="params">(n)</span>:</span></span><br><span class="line">     symbols = (<span class="string">'K'</span>,<span class="string">'M'</span>,<span class="string">'G'</span>,<span class="string">'T'</span>,<span class="string">'P'</span>,<span class="string">'E'</span>,<span class="string">'Z'</span>,<span class="string">'Y'</span>)</span><br><span class="line">     prefix = &#123;&#125;</span><br><span class="line">     <span class="keyword">for</span> i,s <span class="keyword">in</span> enumerate(symbols):</span><br><span class="line">         prefix[s] = <span class="number">1</span> &lt;&lt; (i + <span class="number">1</span>) * <span class="number">10</span></span><br><span class="line">     <span class="keyword">for</span> s <span class="keyword">in</span> reversed(symbols):</span><br><span class="line">         <span class="keyword">if</span> n &gt;= prefix[s]:</span><br><span class="line">             value = float(n) / prefix[s]</span><br><span class="line">             <span class="keyword">return</span> <span class="string">'%.1f%s'</span> % (value,s)</span><br><span class="line">     <span class="keyword">return</span> <span class="string">'%sB'</span> % n</span><br><span class="line"></span><br><span class="line">print(bytes2human(psutil.virtual_memory().total))</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# python mem.py </span><br><span class="line">972.6M</span><br></pre></td></tr></table></figure><h6 id="2）swap-memory"><a class="header-anchor" href="#2）swap-memory">¶</a>2）swap_memory</h6><p>以命名元组的形式返回swap/memory使用情况，包含swap中页的换入和换出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: psutil.swap_memory()                                                       </span><br><span class="line">Out[<span class="number">3</span>]: sswap(total=<span class="number">2147479552</span>, used=<span class="number">141819904</span>, free=<span class="number">2005659648</span>, percent=<span class="number">6.6</span>, sin=<span class="number">24666112</span>, sout=<span class="number">147292160</span>)</span><br></pre></td></tr></table></figure><h5 id="（3）磁盘"><a class="header-anchor" href="#（3）磁盘">¶</a>（3）磁盘</h5><p>与磁盘相关的功能如下：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>psutil.disk_io_counters()</td><td>disk_io_counters([perdisk])：以命名元组的形式返回磁盘io统计信息(汇总的)，包括读、写的次数，读、写的字节数等。 当perdisk的值为True，则分别列出单个磁盘的统计信息(字典：key为磁盘名称，value为统计的namedtuple)。</td></tr><tr><td>psutil.disk_partitions()</td><td>disk_partitions([all=False])：以命名元组的形式返回所有已挂载的磁盘，包含磁盘名称，挂载点，文件系统类型等信息。 当all等于True时，返回包含/proc等特殊文件系统的挂载信息</td></tr><tr><td>psutil.disk_usage()</td><td>disk_usage(path)：以命名元组的形式返回path所在磁盘的使用情况，包括磁盘的容量、已经使用的磁盘容量、磁盘的空间利用率等。</td></tr></tbody></table><h6 id="1）psutil-disk-io-counters"><a class="header-anchor" href="#1）psutil-disk-io-counters">¶</a>1）psutil.disk_io_counters</h6><p>以命名元组的形式返回磁盘io统计信息(汇总的)，包括读、写的次数，读、写的字节数等。 当perdisk的值为True，则分别列出单个磁盘的统计信息(字典：key为磁盘名称，value为统计的namedtuple)。有了disk_io_counters函数，省去了解析/proc/diskstats文件的烦恼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: psutil.disk_io_counters()                                                  </span><br><span class="line">Out[<span class="number">2</span>]: sdiskio(read_count=<span class="number">86913</span>, write_count=<span class="number">46560</span>, read_bytes=<span class="number">5038501376</span>, write_bytes=<span class="number">408987648</span>, read_time=<span class="number">77974</span>, write_time=<span class="number">79557</span>, read_merged_count=<span class="number">5933</span>, write_merged_count=<span class="number">35916</span>, busy_time=<span class="number">42153</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: psutil.disk_io_counters(perdisk=<span class="literal">True</span>)                                      </span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">&#123;<span class="string">'sda'</span>: sdiskio(read_count=<span class="number">41472</span>, write_count=<span class="number">5340</span>, read_bytes=<span class="number">2524417024</span>, write_bytes=<span class="number">205662720</span>, read_time=<span class="number">38302</span>, write_time=<span class="number">4484</span>, read_merged_count=<span class="number">5933</span>, write_merged_count=<span class="number">35916</span>, busy_time=<span class="number">21074</span>),</span><br><span class="line"> <span class="string">'sda1'</span>: sdiskio(read_count=<span class="number">1854</span>, write_count=<span class="number">4</span>, read_bytes=<span class="number">6441472</span>, write_bytes=<span class="number">2097152</span>, read_time=<span class="number">370</span>, write_time=<span class="number">35</span>, read_merged_count=<span class="number">0</span>, write_merged_count=<span class="number">0</span>, busy_time=<span class="number">396</span>),</span><br><span class="line"> <span class="string">'sda2'</span>: sdiskio(read_count=<span class="number">39587</span>, write_count=<span class="number">5337</span>, read_bytes=<span class="number">2516263424</span>, write_bytes=<span class="number">203570688</span>, read_time=<span class="number">37925</span>, write_time=<span class="number">4449</span>, read_merged_count=<span class="number">5933</span>, write_merged_count=<span class="number">35916</span>, busy_time=<span class="number">20675</span>),</span><br><span class="line"> <span class="string">'sr0'</span>: sdiskio(read_count=<span class="number">0</span>, write_count=<span class="number">0</span>, read_bytes=<span class="number">0</span>, write_bytes=<span class="number">0</span>, read_time=<span class="number">0</span>, write_time=<span class="number">0</span>, read_merged_count=<span class="number">0</span>, write_merged_count=<span class="number">0</span>, busy_time=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'dm-0'</span>: sdiskio(read_count=<span class="number">38566</span>, write_count=<span class="number">5197</span>, read_bytes=<span class="number">2483773952</span>, write_bytes=<span class="number">55885312</span>, read_time=<span class="number">37685</span>, write_time=<span class="number">3546</span>, read_merged_count=<span class="number">0</span>, write_merged_count=<span class="number">0</span>, busy_time=<span class="number">19410</span>),</span><br><span class="line"> <span class="string">'dm-1'</span>: sdiskio(read_count=<span class="number">6875</span>, write_count=<span class="number">36059</span>, read_bytes=<span class="number">30310400</span>, write_bytes=<span class="number">147697664</span>, read_time=<span class="number">1987</span>, write_time=<span class="number">71537</span>, read_merged_count=<span class="number">0</span>, write_merged_count=<span class="number">0</span>, busy_time=<span class="number">1673</span>)&#125;</span><br></pre></td></tr></table></figure><h6 id="2）psutil-disk-partitions"><a class="header-anchor" href="#2）psutil-disk-partitions">¶</a>2）psutil.disk_partitions</h6><p>以命名元组的形式返回所有已挂载的磁盘，包含磁盘名称，挂载点，文件系统类型等信息。当all等于True时，返回包含/proc等特殊文件系统的挂载信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: psutil.disk_partitions()                                                   </span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line">[sdiskpart(device=<span class="string">'/dev/mapper/centos-root'</span>, mountpoint=<span class="string">'/'</span>, fstype=<span class="string">'xfs'</span>, opts=<span class="string">'rw,seclabel,relatime,attr2,inode64,noquota'</span>),</span><br><span class="line"> sdiskpart(device=<span class="string">'/dev/sda1'</span>, mountpoint=<span class="string">'/boot'</span>, fstype=<span class="string">'xfs'</span>, opts=<span class="string">'rw,seclabel,relatime,attr2,inode64,noquota'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: [device <span class="keyword">for</span> device <span class="keyword">in</span> psutil.disk_partitions() <span class="keyword">if</span> device.mountpoint == <span class="string">'/'</span>]</span><br><span class="line">Out[<span class="number">5</span>]: [sdiskpart(device=<span class="string">'/dev/mapper/centos-root'</span>, mountpoint=<span class="string">'/'</span>, fstype=<span class="string">'xfs'</span>, opts=<span class="string">'rw,seclabel,relatime,attr2,inode64,noquota'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="function"><span class="keyword">def</span> <span class="title">get_disk_via_mountpoint</span><span class="params">(point)</span>:</span> </span><br><span class="line">    ...:     disk = [item <span class="keyword">for</span> item <span class="keyword">in</span> psutil.disk_partitions() <span class="keyword">if</span> item.mountpoint == point] </span><br><span class="line">    ...:     <span class="keyword">return</span> disk[<span class="number">0</span>].device </span><br><span class="line">    ...:                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: get_disk_via_mountpoint(<span class="string">'/'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'/dev/mapper/centos-root'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: get_disk_via_mountpoint(<span class="string">'/boot'</span>) </span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'/dev/sda1'</span></span><br></pre></td></tr></table></figure><h6 id="3）psutil-disk-usage"><a class="header-anchor" href="#3）psutil-disk-usage">¶</a>3）psutil.disk_usage</h6><p>以命名元组的形式返回path所在磁盘的使用情况，包括磁盘的容量、已经使用的磁盘容量、磁盘的空间利用率等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: psutil.disk_usage(<span class="string">'/'</span>)       </span><br><span class="line">Out[<span class="number">9</span>]: sdiskusage(total=<span class="number">18238930944</span>, used=<span class="number">6775488512</span>, free=<span class="number">11463442432</span>, percent=<span class="number">37.1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: psutil.disk_usage(<span class="string">'/'</span>).percent</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">37.2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: type(psutil.disk_usage(<span class="string">'/'</span>).percent)</span><br><span class="line">Out[<span class="number">11</span>]: float</span><br></pre></td></tr></table></figure><h5 id="（4）网络"><a class="header-anchor" href="#（4）网络">¶</a>（4）网络</h5><p>与网络相关的函数如下：</p><table><thead><tr><th>函数</th><th>详情</th></tr></thead><tbody><tr><td>psutil.net_io_counter([pernic])</td><td>以命名元组的形式返回当前系统中每块网卡的网络io统计信息，包括收发字节数，收发包的数量、出错的情况和删包情况。当pernic为True时，则列出所有网卡的统计信息。</td></tr><tr><td>psutil.net_connections([kind])</td><td>以列表的形式返回每个网络连接的详细信息(namedtuple)。命名元组包含fd, family, type, laddr, raddr, status, pid等信息。kind表示过滤的连接类型，支持的值如下：(默认为inet)</td></tr><tr><td>psutil.net_if_addrs()</td><td>以字典的形式返回网卡的配置信息，包括IP地址和mac地址、子网掩码和广播地址。</td></tr><tr><td>psutil.net_if_stats()</td><td>返回网卡的详细信息，包括是否启动、通信类型、传输速度与mtu。</td></tr><tr><td>psutil.users()</td><td>以命名元组的方式返回当前登陆用户的信息，包括用户名，登陆时间，终端，与主机信息</td></tr><tr><td>psutil.boot_time()</td><td>以时间戳的形式返回系统的启动时间</td></tr></tbody></table><h6 id="1）psutil-net-io-counter"><a class="header-anchor" href="#1）psutil-net-io-counter">¶</a>1）psutil.net_io_counter</h6><p>以命名元组的形式返回当前系统中每块网卡的网络io统计信息，包括收发字节数，收发包的数量、出错的情况和删包情况。当pernic为True时，则列出所有网卡的统计信息。使用net_io_counter函数与自己解析/proc/net/dev文件内容实现的功能相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: psutil.net_io_counters()     </span><br><span class="line">Out[<span class="number">2</span>]: snetio(bytes_sent=<span class="number">720405</span>, bytes_recv=<span class="number">3661606</span>, packets_sent=<span class="number">5520</span>, packets_recv=<span class="number">14886</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: psutil.net_io_counters(pernic=<span class="literal">True</span>) </span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">&#123;<span class="string">'ens37'</span>: snetio(bytes_sent=<span class="number">724145</span>, bytes_recv=<span class="number">3365944</span>, packets_sent=<span class="number">5538</span>, packets_recv=<span class="number">10017</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'lo'</span>: snetio(bytes_sent=<span class="number">0</span>, bytes_recv=<span class="number">0</span>, packets_sent=<span class="number">0</span>, packets_recv=<span class="number">0</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'virbr0-nic'</span>: snetio(bytes_sent=<span class="number">0</span>, bytes_recv=<span class="number">0</span>, packets_sent=<span class="number">0</span>, packets_recv=<span class="number">0</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'virbr0'</span>: snetio(bytes_sent=<span class="number">0</span>, bytes_recv=<span class="number">0</span>, packets_sent=<span class="number">0</span>, packets_recv=<span class="number">0</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'ens33'</span>: snetio(bytes_sent=<span class="number">0</span>, bytes_recv=<span class="number">298202</span>, packets_sent=<span class="number">0</span>, packets_recv=<span class="number">4899</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>)&#125;</span><br></pre></td></tr></table></figure><h6 id="2）net-connections"><a class="header-anchor" href="#2）net-connections">¶</a>2）net_connections</h6><p>以列表的形式返回每个网络连接的详细信息(namedtuple)，可以使用该函数查看网络连接状态，统计连接个数以及处于特定状态的网络连接个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: psutil.net_connections()      </span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line">[sconn(fd=<span class="number">6</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, type=&lt;SocketKind.SOCK_STREAM: <span class="number">1</span>&gt;, laddr=addr(ip=<span class="string">'::'</span>, port=<span class="number">111</span>), raddr=(), status=<span class="string">'LISTEN'</span>, pid=<span class="number">6558</span>),</span><br><span class="line"> sconn(fd=<span class="number">7</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, type=&lt;SocketKind.SOCK_DGRAM: <span class="number">2</span>&gt;, laddr=addr(ip=<span class="string">'::'</span>, port=<span class="number">111</span>), raddr=(), status=<span class="string">'NONE'</span>, pid=<span class="number">6558</span>),</span><br><span class="line"> sconn(fd=<span class="number">8</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, type=&lt;SocketKind.SOCK_STREAM: <span class="number">1</span>&gt;, laddr=addr(ip=<span class="string">'::1'</span>, port=<span class="number">6010</span>), raddr=(), status=<span class="string">'LISTEN'</span>, pid=<span class="number">9047</span>),</span><br><span class="line"> sconn(fd=<span class="number">6</span>, family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, type=&lt;SocketKind.SOCK_STREAM: <span class="number">1</span>&gt;,</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: conns = psutil.net_connections()</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: len([conn <span class="keyword">for</span> conn <span class="keyword">in</span> conns <span class="keyword">if</span> conn.status == <span class="string">'TIME_WAIT'</span>])   </span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><h6 id="3）net-if-addrs"><a class="header-anchor" href="#3）net-if-addrs">¶</a>3）net_if_addrs</h6><p>以字典的形式返回网卡的配置信息，包括IP地址和mac地址、子网掩码和广播地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: psutil.net_if_addrs()                                                                                               </span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">&#123;<span class="string">'lo'</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, address=<span class="string">'127.0.0.1'</span>, netmask=<span class="string">'255.0.0.0'</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>),</span><br><span class="line">  snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, address=<span class="string">'::1'</span>, netmask=<span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>),</span><br><span class="line">  snicaddr(family=&lt;AddressFamily.AF_PACKET: <span class="number">17</span>&gt;, address=<span class="string">'00:00:00:00:00:00'</span>, netmask=<span class="literal">None</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>)],</span><br><span class="line"> <span class="string">'ens37'</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, address=<span class="string">'192.168.1.131'</span>, netmask=<span class="string">'255.255.255.255'</span>, broadcast=<span class="string">'192.168.1.131'</span>, ptp=<span class="literal">None</span>),</span><br><span class="line">  snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, address=<span class="string">'240e:82:e03:7342:4378:7be3:558c:fc88'</span>, netmask=<span class="string">'ffff:ffff:ffff:ffff::'</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h6 id="4）psutil-net-if-stats"><a class="header-anchor" href="#4）psutil-net-if-stats">¶</a>4）psutil.net_if_stats</h6><p>返回网卡的详细信息，包括是否启动、通信类型、传输速度与mtu。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: psutil.net_if_stats()        </span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">&#123;<span class="string">'ens37'</span>: snicstats(isup=<span class="literal">True</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_FULL: <span class="number">2</span>&gt;, speed=<span class="number">1000</span>, mtu=<span class="number">1500</span>),</span><br><span class="line"> <span class="string">'lo'</span>: snicstats(isup=<span class="literal">True</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_UNKNOWN: <span class="number">0</span>&gt;, speed=<span class="number">0</span>, mtu=<span class="number">65536</span>),</span><br><span class="line"> <span class="string">'virbr0-nic'</span>: snicstats(isup=<span class="literal">False</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_FULL: <span class="number">2</span>&gt;, speed=<span class="number">10</span>, mtu=<span class="number">1500</span>),</span><br><span class="line"> <span class="string">'virbr0'</span>: snicstats(isup=<span class="literal">True</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_UNKNOWN: <span class="number">0</span>&gt;, speed=<span class="number">0</span>, mtu=<span class="number">1500</span>),</span><br><span class="line"> <span class="string">'ens33'</span>: snicstats(isup=<span class="literal">True</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_FULL: <span class="number">2</span>&gt;, speed=<span class="number">1000</span>, mtu=<span class="number">1500</span>)&#125;</span><br></pre></td></tr></table></figure><h5 id="（5）其他"><a class="header-anchor" href="#（5）其他">¶</a>（5）其他</h5><h6 id="1）users"><a class="header-anchor" href="#1）users">¶</a>1）users</h6><p>以命名元组的方式返回当前登陆用户的信息，包括用户名，登陆时间，终端，与主机信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: psutil.users()              </span><br><span class="line">Out[<span class="number">9</span>]: </span><br><span class="line">[suser(name=<span class="string">'root'</span>, terminal=<span class="string">':0'</span>, host=<span class="string">'localhost'</span>, started=<span class="number">1582366080.0</span>, pid=<span class="number">7991</span>),</span><br><span class="line"> suser(name=<span class="string">'root'</span>, terminal=<span class="string">'pts/0'</span>, host=<span class="string">'localhost'</span>, started=<span class="number">1582366208.0</span>, pid=<span class="number">8927</span>),</span><br><span class="line"> suser(name=<span class="string">'root'</span>, terminal=<span class="string">'pts/1'</span>, host=<span class="string">'192.168.1.4'</span>, started=<span class="number">1582370816.0</span>, pid=<span class="number">10099</span>),</span><br><span class="line"> suser(name=<span class="string">'root'</span>, terminal=<span class="string">'pts/3'</span>, host=<span class="string">'192.168.1.4'</span>, started=<span class="number">1582369408.0</span>, pid=<span class="number">9787</span>)]</span><br></pre></td></tr></table></figure><h6 id="2）boot-time"><a class="header-anchor" href="#2）boot-time">¶</a>2）boot_time</h6><p>以时间戳的形式返回系统的启动时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: psutil.boot_time()    </span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">1582527367.0</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">11</span>]: datetime.datetime.fromtimestamp(psutil.boot_time()).strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)                                  </span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'2020-02-24 14:56:07'</span></span><br></pre></td></tr></table></figure><h4 id="3、综合案例：使用psutil实现监控程序"><a class="header-anchor" href="#3、综合案例：使用psutil实现监控程序">¶</a>3、综合案例：使用psutil实现监控程序</h4><h4 id="4、psutil进程管理"><a class="header-anchor" href="#4、psutil进程管理">¶</a>4、psutil进程管理</h4><p>psutil还提供了作为进程管理的功能函数，包括获取进程列表，判断是否存在，以及进程管理的类封装。</p><table><thead><tr><th>函数</th><th>详情</th></tr></thead><tbody><tr><td>psutil.Process()</td><td>对进程进行封装，可以使用该类的方法获取进行的详细信息，或者给进程发送信号。</td></tr><tr><td>psutil.pids()</td><td>以列表的形式返回当前正在运行的进程</td></tr><tr><td>psutil.pid_exists(1)</td><td>判断给点定的pid是否存在</td></tr><tr><td>psutil.process_iter()</td><td>迭代当前正在运行的进程，返回的是每个进程的Process对象</td></tr></tbody></table><h6 id="1）Process类"><a class="header-anchor" href="#1）Process类">¶</a>1）Process类</h6><p>对进程进行封装，可以使用该类的方法获取进行的详细信息，或者给进程发送信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: init_process = psutil.Process()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: init_process.cmdline()      </span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'/usr/local/python38/bin/python3.8'</span>, <span class="string">'/usr/local/python38/bin/ipython'</span>]</span><br></pre></td></tr></table></figure><p>Process类包含很多方法来获取进程的详细信息。下面是几个较常用的方法：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name：获取进程的名称</span><br><span class="line">cmdline：获取启动进程的命令行参数</span><br><span class="line">create_time：获取进程的创建时间(时间戳格式)</span><br><span class="line">num_fds：进程打开的文件个数</span><br><span class="line">num_threads：进程的子进程个数</span><br><span class="line">is_running：判断进程是否正在运行</span><br><span class="line">send_signal：给进程发送信号，类似与os.kill等</span><br><span class="line">kill：发送SIGKILL信号结束进程</span><br><span class="line">terminate：发送SIGTEAM信号结束进程</span><br></pre></td></tr></table></figure><h6 id="2）pids"><a class="header-anchor" href="#2）pids">¶</a>2）pids</h6><p>以列表的形式返回当前正在运行的进程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: init_process = psutil.Process()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: init_process.cmdline()       </span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'/usr/local/python38/bin/python3.8'</span>, <span class="string">'/usr/local/python38/bin/ipython'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: psutil.pids()[:<span class="number">5</span>]            </span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><h6 id="3）pid-exists"><a class="header-anchor" href="#3）pid-exists">¶</a>3）pid_exists</h6><p>判断给点定的pid是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: psutil.pid_exists(<span class="number">1</span>)          </span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: psutil.pid_exists(<span class="number">10245</span>)                              </span><br><span class="line">Out[<span class="number">6</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h6 id="4）process-iter"><a class="header-anchor" href="#4）process-iter">¶</a>4）process_iter</h6><p>迭代当前正在运行的进程，返回的是每个进程的Process对象，而pids返回的是进程的列表。</p><h3 id="四、使用Python监控MongoDB"><a class="header-anchor" href="#四、使用Python监控MongoDB">¶</a>四、使用Python监控MongoDB</h3><p>对于MongoDB数据库来说，获取监控的方法比较简单，因为MongoDB本身流返回给我们一个字典形式的数据。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pymongo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'127.0.0.1:27017'</span>)</span><br><span class="line">client.admin.authenticate(<span class="string">'laoyu'</span>,<span class="string">'laoyu'</span>)</span><br><span class="line">rs = client.admin.command(<span class="string">'replSetGetStatus'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"set:"</span>,rs[<span class="string">'set'</span>])</span><br><span class="line">print(<span class="string">"myState:"</span>,rs[<span class="string">'myState'</span>])</span><br><span class="line">print(<span class="string">'num of members:'</span>,len(rs[<span class="string">'members'</span>]))</span><br></pre></td></tr></table></figure><h6 id="3）pid-exists-v2"><a class="header-anchor" href="#3）pid-exists-v2">¶</a>3）pid_exists</h6><p>判断给点定的pid是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: psutil.pid_exists(<span class="number">1</span>)          </span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: psutil.pid_exists(<span class="number">10245</span>)                              </span><br><span class="line">Out[<span class="number">6</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h6 id="4）process-iter-v2"><a class="header-anchor" href="#4）process-iter-v2">¶</a>4）process_iter</h6><p>迭代当前正在运行的进程，返回的是每个进程的Process对象，而pids返回的是进程的列表。</p><h3 id="四、使用Python监控MongoDB-v2"><a class="header-anchor" href="#四、使用Python监控MongoDB-v2">¶</a>四、使用Python监控MongoDB</h3><p>对于MongoDB数据库来说，获取监控的方法比较简单，因为MongoDB本身流返回给我们一个字典形式的数据。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pymongo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'127.0.0.1:27017'</span>)</span><br><span class="line">client.admin.authenticate(<span class="string">'laoyu'</span>,<span class="string">'laoyu'</span>)</span><br><span class="line">rs = client.admin.command(<span class="string">'replSetGetStatus'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"set:"</span>,rs[<span class="string">'set'</span>])</span><br><span class="line">print(<span class="string">"myState:"</span>,rs[<span class="string">'myState'</span>])</span><br><span class="line">print(<span class="string">'num of members:'</span>,len(rs[<span class="string">'members'</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python3+Django3开发简单的人员管理系统</title>
    <link href="https://pdxblog.top/Python3+Django3%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://pdxblog.top/Python3+Django3%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-27T14:43:16.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python3-Django3开发简单的人员管理系统"><a class="header-anchor" href="#Python3-Django3开发简单的人员管理系统">¶</a>Python3+Django3开发简单的人员管理系统</h2><h3 id="1、创建工程和应用"><a class="header-anchor" href="#1、创建工程和应用">¶</a>1、创建工程和应用</h3><h4 id="1-1-使用pycharm创建项目"><a class="header-anchor" href="#1-1-使用pycharm创建项目">¶</a>1.1 使用pycharm创建项目</h4><p><img data-src="https://img-blog.csdnimg.cn/20200427202651145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200427202714742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-2安装mysqlclient"><a class="header-anchor" href="#1-2安装mysqlclient">¶</a>1.2安装mysqlclient</h4><p>在设置里面找创建的项目点击右边的“+”号直接安装<br><img data-src="https://img-blog.csdnimg.cn/20200427202822941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2、应用配置"><a class="header-anchor" href="#2、应用配置">¶</a>2、应用配置</h3><h4 id="2-1、修改项目配置文件（UserSystem-settings-py）"><a class="header-anchor" href="#2-1、修改项目配置文件（UserSystem-settings-py）">¶</a>2.1、修改项目配置文件（UserSystem/settings.py）</h4><h5 id="1）注释csrf校验"><a class="header-anchor" href="#1）注释csrf校验">¶</a>1）注释csrf校验</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',  # 注释此项</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="2）修改数据库的默认配置：sqlite3改为mysql"><a class="header-anchor" href="#2）修改数据库的默认配置：sqlite3改为mysql">¶</a>2）修改数据库的默认配置：sqlite3改为mysql</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 'default': &#123;</span></span><br><span class="line">    <span class="comment">#     'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">    <span class="comment">#     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"><span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'userinfo'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123.com'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3）修改语言和时区"><a class="header-anchor" href="#3）修改语言和时区">¶</a>3）修改语言和时区</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LANGUAGE_CODE = 'en-us'</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">'zh-Hans'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TIME_ZONE = 'UTC'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><h5 id="4）允许所有IP访问"><a class="header-anchor" href="#4）允许所有IP访问">¶</a>4）允许所有IP访问</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure><h4 id="2-2、定义用户信息的数据模型：UserInfo-models-py"><a class="header-anchor" href="#2-2、定义用户信息的数据模型：UserInfo-models-py">¶</a>2.2、定义用户信息的数据模型：UserInfo/models.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (<span class="string">'男'</span>, <span class="string">'男'</span>),</span><br><span class="line">        (<span class="string">'女'</span>, <span class="string">'女'</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">'姓 名'</span>)</span><br><span class="line">    birthday = models.DateField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'生 日'</span>)</span><br><span class="line">    gender = models.CharField(max_length=<span class="number">30</span>, choices=GENDER_CHOICES, verbose_name=<span class="string">'性 别'</span>)</span><br><span class="line">    account = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">'工 号'</span>)</span><br><span class="line">    age = models.IntegerField(default=<span class="number">18</span>, verbose_name=<span class="string">'年 龄'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3、初始化模型数据库兵生成数据库文件"><a class="header-anchor" href="#2-3、初始化模型数据库兵生成数据库文件">¶</a>2.3、初始化模型数据库兵生成数据库文件</h4><p>简言之：在Django 1.9及未来的版本种使用migrate代替原先的syscdb.</p><p>先在Mysql中创建数据库&quot;userinfo&quot;</p><p>执行下面代码：（直接再Pycharm里的&quot;Terminal&quot;终端执行 ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) F:\python1\UserSystem&gt;python manage.py makemigrations</span><br><span class="line">(venv) F:\python1\UserSystem&gt;python ./manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="2-4、显示注册信息修改默认标题（UserInfo-admin-py）"><a class="header-anchor" href="#2-4、显示注册信息修改默认标题（UserInfo-admin-py）">¶</a>2.4、显示注册信息修改默认标题（UserInfo/admin.py）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'age'</span>,</span><br><span class="line">        <span class="string">'birthday'</span>,</span><br><span class="line">        <span class="string">'gender'</span>,</span><br><span class="line">        <span class="string">'account'</span>,</span><br><span class="line">    ]</span><br><span class="line">    search_fields = (<span class="string">'name'</span>,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(User, HostAdmin)</span><br><span class="line">admin.AdminSite.site_header = <span class="string">'运维系统管理后台'</span></span><br><span class="line">admin.AdminSite.site_title = <span class="string">'运维系统'</span></span><br></pre></td></tr></table></figure><h4 id="2-5、添加应用的url访问（UserSystem-urls-py）"><a class="header-anchor" href="#2-5、添加应用的url访问（UserSystem-urls-py）">¶</a>2.5、添加应用的url访问（UserSystem/urls.py）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3、启动Django服务"><a class="header-anchor" href="#3、启动Django服务">¶</a>3、启动Django服务</h3><h4 id="3-1、命令启动"><a class="header-anchor" href="#3-1、命令启动">¶</a>3.1、命令启动</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv) F:\python1\UserSystem&gt;python ./manage.py runserver</span><br></pre></td></tr></table></figure><h4 id="3-2、创建超级用户"><a class="header-anchor" href="#3-2、创建超级用户">¶</a>3.2、创建超级用户</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(venv) F:\python1\UserSystem&gt;python ./manage.py createsuperuser</span><br><span class="line">用户名: accp</span><br><span class="line">电子邮件地址:</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">密码长度太短。密码必须包含至少 <span class="number">8</span> 个字符。</span><br><span class="line">这个密码太常见了。</span><br><span class="line">密码只包含数字。</span><br><span class="line">Bypass password validation and create user anyway? [y/N]: y</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><h4 id="3-3、浏览器访问登录：http-127-0-0-1-8000-admin"><a class="header-anchor" href="#3-3、浏览器访问登录：http-127-0-0-1-8000-admin">¶</a>3.3、浏览器访问登录：<a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></h4><p><img data-src="https://img-blog.csdnimg.cn/20200427202927690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-4、登录成功后即可添加对应的信息到系统中"><a class="header-anchor" href="#3-4、登录成功后即可添加对应的信息到系统中">¶</a>3.4、登录成功后即可添加对应的信息到系统中</h4><p><img data-src="https://img-blog.csdnimg.cn/20200427202946525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-5、前往数据库查看，用户信息是否保存"><a class="header-anchor" href="#3-5、前往数据库查看，用户信息是否保存">¶</a>3.5、前往数据库查看，用户信息是否保存</h4><p><img data-src="https://img-blog.csdnimg.cn/20200427203007623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python对Linux系统的管理</title>
    <link href="https://pdxblog.top/Python%E5%AF%B9Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AE%A1%E7%90%86.html"/>
    <id>https://pdxblog.top/Python%E5%AF%B9Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AE%A1%E7%90%86.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-27T14:43:53.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python对Linux系统的管理"><a class="header-anchor" href="#Python对Linux系统的管理">¶</a>Python对Linux系统的管理</h2><h3 id="一、OS模块常用功能"><a class="header-anchor" href="#一、OS模块常用功能">¶</a>一、OS模块常用功能</h3><h4 id="1、os模块打开文件"><a class="header-anchor" href="#1、os模块打开文件">¶</a>1、os模块打开文件</h4><p>方法如下：</p><blockquote><p>os.open(filename, flag, [,mode])</p></blockquote><p>flag参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">os.O_CREAT# 创建文件</span><br><span class="line">os.O_RDONLY# 只读方式打开</span><br><span class="line">os.O_WRONLY# 只写方式打开</span><br><span class="line">os.O_RDWR# 读写方式打开</span><br></pre></td></tr></table></figure><h4 id="2、os模块对文件进行操作"><a class="header-anchor" href="#2、os模块对文件进行操作">¶</a>2、os模块对文件进行操作</h4><p>常用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">os.read(fd, buffersize)</span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">os.write(fd, string)</span><br><span class="line"><span class="comment"># 文件指针操作</span></span><br><span class="line">os.lseek(fd, pos, how)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">os.close(fd)</span><br></pre></td></tr></table></figure><p>代码演示：</p><blockquote><p>文件创建和写入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fd = os.open(<span class="string">"abc.txt"</span>, os.O_RDWR | os.O_CREAT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入字符串</span></span><br><span class="line">str = <span class="string">"Hello Python!"</span></span><br><span class="line">ret = os.write(fd, bytes(str, <span class="string">'UTF-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入返回值</span></span><br><span class="line">print(<span class="string">"写入的位数为: "</span>)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"写入成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">os.close(fd)</span><br><span class="line">print(<span class="string">"关闭文件成功!!"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>文件读取</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fd = os.open(<span class="string">"abc.txt"</span>, os.O_RDWR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文本</span></span><br><span class="line">ret = os.read(fd, <span class="number">6</span>)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">os.close(fd)</span><br><span class="line">print(<span class="string">"关闭文件成功!!"</span>)</span><br></pre></td></tr></table></figure><h4 id="3、os模块管理文件和目录"><a class="header-anchor" href="#3、os模块管理文件和目录">¶</a>3、os模块管理文件和目录</h4><p>常用方法如下：</p><table><thead><tr><th>os方法</th><th>说明</th></tr></thead><tbody><tr><td>getcwd()</td><td>获取当前目录</td></tr><tr><td>listdir(path)</td><td>返回当前目录下所有文件组成的列表</td></tr><tr><td>chdir(path)</td><td>切换目录</td></tr><tr><td>rename(old, new)</td><td>修改文件或者目录名</td></tr><tr><td>mkdir(path [,mode])</td><td>创建目录</td></tr><tr><td>makedirs(path [,mode])</td><td>创建多级目录</td></tr><tr><td>rmdir(path)</td><td>删除目录（目录必须为空目录）</td></tr><tr><td>removedirs(path)</td><td>删除多级目录（目录必须为空目录）</td></tr><tr><td>remove(path)</td><td>删除文件</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(os.getcwd())  <span class="comment"># pwd</span></span><br><span class="line">print(os.listdir()) <span class="comment"># ls</span></span><br><span class="line">os.chdir(<span class="string">'/opt'</span>)<span class="comment"># cd /opt</span></span><br><span class="line">os.rename(<span class="string">'abc.txt'</span>,<span class="string">'test.txt'</span>) <span class="comment"># mv abc.txt test.txt</span></span><br><span class="line">os.remove(<span class="string">'read.py'</span>)    <span class="comment"># rm -f abc.txt</span></span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">'test'</span>)    <span class="comment"># mkdir dir1</span></span><br><span class="line">os.makedirs(<span class="string">'demo/abc'</span>) <span class="comment"># mkdir -p dir2/dir22</span></span><br><span class="line">os.rmdir(<span class="string">'test'</span>)    <span class="comment"># 目录必须为空</span></span><br><span class="line">os.removedirs(<span class="string">'demo'</span>)   <span class="comment"># 目录必须为空</span></span><br></pre></td></tr></table></figure><h4 id="4、os模块管理文件权限"><a class="header-anchor" href="#4、os模块管理文件权限">¶</a>4、os模块管理文件权限</h4><table><thead><tr><th>os方法</th><th>说明</th></tr></thead><tbody><tr><td>access(path, mode)</td><td>判断该文件权限：F_OK表示该路径存在；<br>权限：R_OK，W_OK，X_OK</td></tr><tr><td>chmod(path, mode)</td><td>修改文件权限：0o755</td></tr><tr><td>chown(path, uid, gid)</td><td>更改文件所有者，如果不修改可以设置为 -1</td></tr></tbody></table><p>代码演示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试路径是否存在：os.F_OK</span></span><br><span class="line">res = os.access('test.txt',os.F_OK)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试当前用户对该文件是否有读的权限</span></span><br><span class="line">res = os.access('test.txt',os.R_OK)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试当前用户对该文件是否有写的权限</span></span><br><span class="line">res = os.access('test.txt',os.W_OK)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试当前用户对该文件是否有执行的权限</span></span><br><span class="line">res = os.access('test.txt',os.X_OK)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改当前用户的权限</span></span><br><span class="line">os.chmod('test.txt',0o755)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改文件的所有者</span></span><br><span class="line">os.chown('test.txt', 1001, 1002)</span><br></pre></td></tr></table></figure><h4 id="5、os-path模块管理文件与路径"><a class="header-anchor" href="#5、os-path模块管理文件与路径">¶</a>5、os.path模块管理文件与路径</h4><h5 id="（1）拆分路径"><a class="header-anchor" href="#（1）拆分路径">¶</a>（1）拆分路径</h5><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.split(path)</td><td>返回一个二元组，包含文件的路径和文件名</td></tr><tr><td>os.path.dirname(path)</td><td>返回文件的路径</td></tr><tr><td>os.path.basename(path)</td><td>返回文件名</td></tr><tr><td>os.path.splitext(path)</td><td>返回一个去掉文件扩展名的部分和扩展名的二元组</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: os.getcwd()</span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'/opt/os_demo'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: os.listdir()</span><br><span class="line">Out[<span class="number">11</span>]: [<span class="string">'os_access.py'</span>, <span class="string">'test.txt'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: path = <span class="string">'/opt/os_demo/test.txt'</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">13</span>]: os.path.split(path)</span><br><span class="line">Out[<span class="number">13</span>]: (<span class="string">'/opt/os_demo'</span>, <span class="string">'test.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: os.path.dirname(path)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'/opt/os_demo'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: os.path.basename(path)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'test.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: os.path.splitext(path) </span><br><span class="line">Out[<span class="number">16</span>]: (<span class="string">'/opt/os_demo/test'</span>, <span class="string">'.txt'</span>)</span><br></pre></td></tr></table></figure><h5 id="（2）构建路径"><a class="header-anchor" href="#（2）构建路径">¶</a>（2）构建路径</h5><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.expanduser(path)</td><td>展开用户的HOME目录，如<sub>，</sub>oracle</td></tr><tr><td>os.path.abspath(path)</td><td>得到文件或路径的绝对路径</td></tr><tr><td>os.path.join(path)</td><td>根据不同的操作系统平台，使用不同的路径分隔符拼接路径</td></tr><tr><td>os.path.isabs(path)</td><td>检查一个路径是不是一个绝对路径</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: os.path.expanduser(<span class="string">'~'</span>) </span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'/root'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: os.path.expanduser(<span class="string">'~oracle'</span>) </span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'/home/oracle'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: os.path.expanduser(<span class="string">'~accp'</span>)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'/home/accp'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: os.path.expanduser(<span class="string">'~acp'</span>) </span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'~acp'</span><span class="comment"># 错误演示</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'/opt/os_demo'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: os.path.abspath(<span class="string">'..'</span>)</span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">'/opt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: os.path.join(<span class="string">'/opt/os_demo'</span>,<span class="string">'test.txt'</span>)</span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'/opt/os_demo/test.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: os.path.isabs(<span class="string">'/opt/os_demo/'</span>) </span><br><span class="line">Out[<span class="number">26</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: os.path.isabs(<span class="string">'.'</span>) </span><br><span class="line">Out[<span class="number">27</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h5 id="（3）获取文件属性"><a class="header-anchor" href="#（3）获取文件属性">¶</a>（3）获取文件属性</h5><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.getatime(path)</td><td>返回最近访问时间（浮点型秒数）</td></tr><tr><td>os.path.getmtime(path)</td><td>返回最近文件修改时间</td></tr><tr><td>os.path.getctime(path)</td><td>返回文件 path 创建时间</td></tr><tr><td>os.path.getsize(path)</td><td>返回文件大小，如果文件不存在就返回错误</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: os.path.getatime(path)</span><br><span class="line">Out[<span class="number">33</span>]: <span class="number">1587547270.7306058</span><span class="comment"># 时间戳</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: os.path.getmtime(path)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">1587547270.7306058</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: os.path.getctime(path)</span><br><span class="line">Out[<span class="number">35</span>]: <span class="number">1587548055.4721448</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: os.path.getsize(path)</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="（4）判断文件类型"><a class="header-anchor" href="#（4）判断文件类型">¶</a>（4）判断文件类型</h5><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.isfile(path)</td><td>判断路径是否为文件</td></tr><tr><td>os.path.isdir(path)</td><td>判断路径是否为目录</td></tr><tr><td>os.path.islink(path)</td><td>判断路径是否为链接</td></tr><tr><td>os.path.ismount(path)</td><td>判断路径是否为挂载点</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: os.path.isfile(path)</span><br><span class="line">Out[<span class="number">37</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: os.path.isdir(path)</span><br><span class="line">Out[<span class="number">38</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: os.path.islink(path)</span><br><span class="line">Out[<span class="number">39</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: os.path.ismount(path)</span><br><span class="line">Out[<span class="number">40</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="6、os模块执行shell命令"><a class="header-anchor" href="#6、os模块执行shell命令">¶</a>6、os模块执行shell命令</h4><p>os.system()的作用：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行shell命令</span><br><span class="line">返回shell命令的返回值</span><br><span class="line">命令的输出会输出到标准输出</span><br></pre></td></tr></table></figure><p>代码演示：</p><blockquote><p>os.system(‘cls’)</p></blockquote><h4 id="案例1：编写自动安装Python的脚本"><a class="header-anchor" href="#案例1：编写自动安装Python的脚本">¶</a>案例1：编写自动安装Python的脚本</h4><p>实现步骤：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载Python版本源码</span><br><span class="line">安装Python需要的依赖库</span><br><span class="line">编译安装Python</span><br></pre></td></tr></table></figure><p>伪代码：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 判断用户是不是root</span><br><span class="line">2. 如果是，等待用户输入Python版本</span><br><span class="line">3. 执行shell命令下载源码包</span><br><span class="line">4. 安装依赖开发包</span><br><span class="line">5. 编译安装Python</span><br></pre></td></tr></table></figure><p>脚本内容如下（基于Python2）：</p><blockquote><p>auto_install_python.py</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> coding=utf-8</span></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断用户是否是root用户</span></span><br><span class="line">if os.getuid() == 0:</span><br><span class="line">    pass</span><br><span class="line">else:</span><br><span class="line">    print</span><br><span class="line">    '当前用户不是root用户！'</span><br><span class="line">    SystemExit(1)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Python依赖库</span></span><br><span class="line">cmd_module = 'yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel'</span><br><span class="line">res = os.system(cmd_module)</span><br><span class="line">if res != 0:</span><br><span class="line">    print</span><br><span class="line">    'Python依赖库安装失败，请重新执行该脚本。'</span><br><span class="line">    SystemExit(1)</span><br><span class="line">else:</span><br><span class="line">    print</span><br><span class="line">    'python依赖库安装成功！'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入Python版本，下载Python源码包到本地目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget url</span></span><br><span class="line">version = raw_input('请输入Python版本：（3.6/3.8）')</span><br><span class="line">if version == '3.6':</span><br><span class="line">    url = 'https://www.python.org/ftp/python/3.6.10/Python-3.6.10.tgz'</span><br><span class="line">else:</span><br><span class="line">    url = 'https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz'</span><br><span class="line">cmd = 'wget ' + url</span><br><span class="line">res = os.system(cmd)</span><br><span class="line">if res != 0:</span><br><span class="line">    print 'Python源码包下载失败！'</span><br><span class="line">    SystemExit(1)</span><br><span class="line">else:</span><br><span class="line">    print('======================&gt;&gt;&gt;Python源码包下载成功！')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压Python源码包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar zxvf Python-3.6.10.tgz</span></span><br><span class="line">if version == '3.6':</span><br><span class="line">    package_name = 'Python-3.6.10'</span><br><span class="line">else:</span><br><span class="line">    package_name = 'Python-3.8.1'</span><br><span class="line">res = os.system('tar zxvf ' + package_name + '.tgz')</span><br><span class="line">if res != 0:</span><br><span class="line">    print '解压失败。。。'</span><br><span class="line">    SystemExit(1)</span><br><span class="line">else:</span><br><span class="line">    print('#########################解压成功！#########################')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置语言</span></span><br><span class="line">os.system('export LANG=zh_CN.UTF-8')</span><br><span class="line">os.system('export LANGUAGE=zh_CN.UTF-8')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到Python目录</span></span><br><span class="line">os.chdir(package_name)</span><br><span class="line">os.system('./configure --prefix=/usr/local/python3')</span><br><span class="line">res = os.system('make &amp;&amp; make install')</span><br><span class="line">if res !=0:</span><br><span class="line">    print '源码编译失败。。。'</span><br><span class="line">    SystemExit(1)</span><br><span class="line">else:</span><br><span class="line">    print('####################Python安装成功，请进行验证！####################')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改用户环境变量</span></span><br><span class="line">os.system('echo "export PYTHON3=/usr/local/python3" &gt;&gt;~/.bash_profile')</span><br><span class="line">os.system('echo "export PATH=$PYTHON3/bin:$PATH" &gt;&gt;~/.bash_profile')</span><br><span class="line">os.system("source ~/.bash_profile")</span><br><span class="line">os.system('cat ~/.bash_profile')</span><br><span class="line">print('####################用户环境变量已修改，请进行验证！####################')</span><br><span class="line">os.system('python3 --version')</span><br></pre></td></tr></table></figure><h4 id="7、os-walk函数遍历目录树"><a class="header-anchor" href="#7、os-walk函数遍历目录树">¶</a>7、os.walk函数遍历目录树</h4><p>os.walk() 方法遍历某个目录及其子目录，对于每一个目录，walk()函数返回一个三元组（dirpath、dirnames、filenames）。其中dirpath保存的是当前目录，dirnames是当前目录下的子目录列表，filenames是当前目录下的文件列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"."</span>, topdown=<span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        print(os.path.join(root, name))</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">        print(os.path.join(root, name))</span><br></pre></td></tr></table></figure><p>os.walk() 方法是一个简单易用的文件、目录遍历器，可以帮助我们高效的处理文件、目录方面的事情。</p><h4 id="案例2：打印最常用的10条Linux命令"><a class="header-anchor" href="#案例2：打印最常用的10条Linux命令">¶</a>案例2：打印最常用的10条Linux命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count &#x3D; Counter()</span><br><span class="line">with open(os.path.expanduser(&#39;~&#x2F;.bash_history&#39;)) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        cmd &#x3D; line.strip().split()</span><br><span class="line">        if cmd:</span><br><span class="line">            count[cmd[0]] +&#x3D;1</span><br><span class="line"></span><br><span class="line">print(count.most_common(10))</span><br></pre></td></tr></table></figure><h3 id="二、使用ConfigParser类解析配置文件"><a class="header-anchor" href="#二、使用ConfigParser类解析配置文件">¶</a>二、使用ConfigParser类解析配置文件</h3><p>Python中有ConfigParser类，可以很方便的从配置文件中读取数据（如DB的配置，路径的配置），所以可以自己写一个函数，实现读取config配置。</p><h4 id="1、配置文件的格式"><a class="header-anchor" href="#1、配置文件的格式">¶</a>1、配置文件的格式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">节：[session]</span><br><span class="line">参数(键=值)name=value</span><br></pre></td></tr></table></figure><p>mysql配置文件部分内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span>= <span class="number">3306</span></span><br><span class="line"><span class="attr">user</span>= mysql</span><br><span class="line"><span class="attr">password</span>= mysql</span><br><span class="line"><span class="attr">host</span>= <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">basedir</span>= /usr</span><br><span class="line"><span class="attr">datadir</span>= /var/lib/mysql</span><br><span class="line"><span class="attr">tmpdir</span>= /tmp</span><br><span class="line">skip-external-locking</span><br></pre></td></tr></table></figure><h4 id="2、ConfigParser类的使用方法"><a class="header-anchor" href="#2、ConfigParser类的使用方法">¶</a>2、ConfigParser类的使用方法</h4><h5 id="（1）创建configParser对象"><a class="header-anchor" href="#（1）创建configParser对象">¶</a>（1）创建configParser对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> configparser</span><br><span class="line">    </span><br><span class="line">In [<span class="number">2</span>]: cf = configparser.ConfigParser(allow_no_value=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h5 id="（2）读取配置文件内容"><a class="header-anchor" href="#（2）读取配置文件内容">¶</a>（2）读取配置文件内容</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: cf.read(<span class="string">'my.inf'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'my.ini'</span>]</span><br></pre></td></tr></table></figure><h5 id="（3）获取配置文件信息"><a class="header-anchor" href="#（3）获取配置文件信息">¶</a>（3）获取配置文件信息</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sections: 返回一个包含所有章节的列表</span><br><span class="line">options：返回一个包含章节下所有选项的列表</span><br><span class="line"></span><br><span class="line">has_section：判断章节是否存在</span><br><span class="line">has_options：判断某个选项是否存在</span><br><span class="line"></span><br><span class="line">items：以元组的形式返回所有的选项</span><br><span class="line">get、getboolean、getint、getfloat：获取选项的值</span><br></pre></td></tr></table></figure><p>方法测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: cf.sections()</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="string">'client'</span>, <span class="string">'mysqld'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: cf.has_section(<span class="string">'client'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]cf.options(<span class="string">'client'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'port'</span>, <span class="string">'user'</span>, <span class="string">'password'</span>, <span class="string">'host'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: cf.has_option(<span class="string">'client'</span>,<span class="string">'user'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: cf.get(<span class="string">'client'</span>,<span class="string">'port'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'3306'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: cf.getint(<span class="string">'client'</span>,<span class="string">'port'</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">3306</span></span><br></pre></td></tr></table></figure><h5 id="（4）修改配置文件"><a class="header-anchor" href="#（4）修改配置文件">¶</a>（4）修改配置文件</h5><p>常用方法：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">remove_section：删除一个章节</span><br><span class="line">add_section：添加一个章节</span><br><span class="line">remove_option：删除一个选项</span><br><span class="line">set：添加一个选项</span><br><span class="line">write：将ConfigParser兑现中的数据保存到文件中</span><br></pre></td></tr></table></figure><p>方法测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: cf.remove_section(<span class="string">'client'</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: cf.write(open(<span class="string">'my.ini'</span>, <span class="string">'w'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: cf.add_section(<span class="string">'client'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: cf.set(<span class="string">'client'</span>,<span class="string">'port'</span>,<span class="string">'3306'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: cf.set(<span class="string">'client'</span>,<span class="string">'user'</span>,<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: cf.set(<span class="string">'client'</span>,<span class="string">'password'</span>,<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: cf.set(<span class="string">'client'</span>,<span class="string">'host'</span>,<span class="string">'127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: cf.write(open(<span class="string">'my.ini'</span>,<span class="string">'w'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: cf.remove_option(<span class="string">'client'</span>,<span class="string">'host'</span>)</span><br><span class="line">Out[<span class="number">19</span>: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: cf.write(open(<span class="string">'my.ini'</span>,<span class="string">'w'</span>))</span><br></pre></td></tr></table></figure><h3 id="三、查找文件"><a class="header-anchor" href="#三、查找文件">¶</a>三、查找文件</h3><h4 id="1、使用fnmatch找到特定文件"><a class="header-anchor" href="#1、使用fnmatch找到特定文件">¶</a>1、使用fnmatch找到特定文件</h4><p>fnmatch.fnmatch()函数一次只能处理一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(item):</span><br><span class="line">        <span class="comment"># if fnmatch.fnmatch(item, '*.jpg'):</span></span><br><span class="line">        <span class="keyword">if</span> fnmatch.fnmatch(item, <span class="string">'[a-e]*'</span>):</span><br><span class="line">        <span class="comment"># if fnmatch.fnmatch(item, '[a-g]?.txt'):</span></span><br><span class="line">        <span class="comment"># if fnmatch.fnmatch(item, '[!a-c]*'):</span></span><br><span class="line">            print(item)</span><br></pre></td></tr></table></figure><p>fnmatch.filter()函数一次可以处理多个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"></span><br><span class="line">items = os.listdir(<span class="string">'.'</span>)</span><br><span class="line">files = fnmatch.filter(items, <span class="string">'[a-c]*'</span>)</span><br><span class="line">print(files)</span><br></pre></td></tr></table></figure><h4 id="2、使用glob找到特定文件"><a class="header-anchor" href="#2、使用glob找到特定文件">¶</a>2、使用glob找到特定文件</h4><p>标准库glob的作用相当于os.listdir()加上fnmatch。使用glob以后，不需要调用os.listdir()获取文件列表，直接通过模式匹配即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">files = glob.glob(<span class="string">'*.jpg'</span>)</span><br><span class="line">print(files)</span><br></pre></td></tr></table></figure><h4 id="案例3：找到目录下最大（或最老）的10个文件"><a class="header-anchor" href="#案例3：找到目录下最大（或最老）的10个文件">¶</a>案例3：找到目录下最大（或最老）的10个文件</h4><h3 id="四、高级文件处理接口shutil"><a class="header-anchor" href="#四、高级文件处理接口shutil">¶</a>四、高级文件处理接口shutil</h3><h4 id="1、复制文件和文件夹"><a class="header-anchor" href="#1、复制文件和文件夹">¶</a>1、复制文件和文件夹</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutil.copy(file1,file2)</span><br><span class="line">shuti.copytree(dir1, dir2)</span><br></pre></td></tr></table></figure><h4 id="2、文件和文件夹的移动与重命名"><a class="header-anchor" href="#2、文件和文件夹的移动与重命名">¶</a>2、文件和文件夹的移动与重命名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutil.move(file1, file2)</span><br><span class="line">shutil.move(file, dir)</span><br></pre></td></tr></table></figure><h4 id="3、删除目录"><a class="header-anchor" href="#3、删除目录">¶</a>3、删除目录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutil.rmtree(dir)</span><br><span class="line">os.unlink(file)</span><br></pre></td></tr></table></figure><h3 id="五、文件内容管理"><a class="header-anchor" href="#五、文件内容管理">¶</a>五、文件内容管理</h3><h4 id="1、目录和文件对比"><a class="header-anchor" href="#1、目录和文件对比">¶</a>1、目录和文件对比</h4><p>filecmp模块包含了比较目录和文件的操作。</p><p>目录结构如下，其中，a.txt和c.txt内容是一样的，a_copy.txt是a.txt的拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├─dir1</span><br><span class="line">│  │  a.txt</span><br><span class="line">│  │  a_copy.txt</span><br><span class="line">│  │  b.txt</span><br><span class="line">│  │  c.txt</span><br><span class="line">│  └─subdir1</span><br><span class="line">│          sa.txt</span><br><span class="line">└─dir2</span><br><span class="line">    │  a.txt</span><br><span class="line">    │  b.txt</span><br><span class="line">    │  c.txt</span><br><span class="line">    ├─subdir1</span><br><span class="line">    │      sb.txt</span><br><span class="line">    └─subdir2</span><br></pre></td></tr></table></figure><h4 id="（1）比较两个文件"><a class="header-anchor" href="#（1）比较两个文件">¶</a>（1）比较两个文件</h4><p>使用filecmp模块的cmp函数比较两个文件是否相同，如果文件相同则返回True，否则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> filecmp</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: cd dir1</span><br><span class="line">E:\git-project\python_project\cloud33\Python常用模块\compare\dir1</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: filecmp.cmp(<span class="string">'a.txt'</span>,<span class="string">'b.txt'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: filecmp.cmp(<span class="string">'a.txt'</span>,<span class="string">'c.txt'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: filecmp.cmp(<span class="string">'a.txt'</span>,<span class="string">'a_copy.txt'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="（2）比较多个文件"><a class="header-anchor" href="#（2）比较多个文件">¶</a>（2）比较多个文件</h4><p>filecmp目录下还有一个名为cmpfiles的函数，该函数用来同时比较两个不同的目录下的多个文件，并且返回一个三元组，分别包含相同的文件、不同的文件和无法比较的文件。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: filecmp.cmpfiles(<span class="string">'dir1'</span>,<span class="string">'dir2'</span>,[<span class="string">'a.txt'</span>,<span class="string">'b.txt'</span>,<span class="string">'c.txt'</span>,<span class="string">'a_copy.txt'</span>])</span><br><span class="line">Out[<span class="number">6</span>]: ([<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>], [], [<span class="string">'a_copy.txt'</span>])</span><br></pre></td></tr></table></figure><p>cmpfiles函数同时用来比较两个目录下的文件，也可以使用该函数比较两个目录。但是，在比较两个目录时，需要通过参数指定可能的文件，因此比较繁琐。</p><h4 id="（3）比较目录"><a class="header-anchor" href="#（3）比较目录">¶</a>（3）比较目录</h4><p>filecmp中还有一个名为dircmp的函数，用来比较两个目录。调用dircmp函数以后，会返回一个dircmp类的对象，该对象保存了诸多属性，我们可以通过查看这些属性获取目录之间的差异。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: d = filecmp.dircmp(<span class="string">'dir1'</span>,<span class="string">'dir2'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: d.report()</span><br><span class="line">diff dir1 dir2</span><br><span class="line">Only <span class="keyword">in</span> dir1 : [<span class="string">'a_copy.txt'</span>]</span><br><span class="line">Only <span class="keyword">in</span> dir2 : [<span class="string">'subdir2'</span>]</span><br><span class="line">Identical files : [<span class="string">'c.txt'</span>]</span><br><span class="line">Differing files : [<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>]</span><br><span class="line">Common subdirectories : [<span class="string">'subdir1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: d.left_list</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="string">'a.txt'</span>, <span class="string">'a_copy.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>, <span class="string">'subdir1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: d.right_list</span><br><span class="line">Out[<span class="number">10</span>]: [<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>, <span class="string">'subdir1'</span>, <span class="string">'subdir2'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: d.left_only</span><br><span class="line">Out[<span class="number">11</span>]: [<span class="string">'a_copy.txt'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: d.right_only</span><br><span class="line">Out[<span class="number">12</span>]: [<span class="string">'subdir2'</span>]</span><br></pre></td></tr></table></figure><h4 id="2、MD5校验和比较"><a class="header-anchor" href="#2、MD5校验和比较">¶</a>2、MD5校验和比较</h4><p>校验码是通过散列函数计算而成，是一种从任何数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，便于进行比较。MD5是目前使用最广泛的散列算法。</p><p>MD5哈希一般用于检查文件的完整性，尤其常用于检查文件传输、磁盘错误或其他情况下文件的正确性。</p><p>Linux下计算一个文件的MD5校验码，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 demo]# md5sum a.txt</span><br><span class="line">d41d8cd98f00b204e9800998ecf8427e  a.txt</span><br></pre></td></tr></table></figure><p>在Python中计算文件的MD5校验码也非常简单，使用标准库hashlib模块即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">d = hashlib.md5()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'b.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        d.update(line.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(d.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者可以这样（最常见的写法，常用于图片的命名）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.md5(<span class="string">b'123'</span>).hexdigest()</span><br><span class="line"><span class="string">'202cb962ac59075b964b07152d234b70'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用hash.new()这个一般方法，hashlib.new(name[, data])，name传入的是哈希加密算法的名称，如md5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.new(<span class="string">'md5'</span>, <span class="string">b'123'</span>).hexdigest()</span><br><span class="line"><span class="string">'202cb962ac59075b964b07152d234b70'</span></span><br></pre></td></tr></table></figure><h3 id="六、使用Python管理压缩包"><a class="header-anchor" href="#六、使用Python管理压缩包">¶</a>六、使用Python管理压缩包</h3><h4 id="1、tarfile"><a class="header-anchor" href="#1、tarfile">¶</a>1、tarfile</h4><h5 id="（1）读取tar包"><a class="header-anchor" href="#（1）读取tar包">¶</a>（1）读取tar包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'cmake-3.17.0.tar.gz'</span>) <span class="keyword">as</span> t:</span><br><span class="line">    <span class="keyword">for</span> member <span class="keyword">in</span> t.getmembers():</span><br><span class="line">        print(member.name)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'cmake-3.17.0.tar.gz'</span>) <span class="keyword">as</span> t:</span><br><span class="line">t.extractall()</span><br><span class="line">t.extract(<span class="string">'cmake-3.17.0/Help'</span>,<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure><p>常用方法说明：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getmembers():获取tar包中的文件列表</span><br><span class="line">member.name:获取tar包中文件的文件名</span><br><span class="line">extract(member, path):提取单个文件</span><br><span class="line">extractall(path, memebers):提取所有的文件</span><br></pre></td></tr></table></figure><h5 id="（2）创建tar包"><a class="header-anchor" href="#（2）创建tar包">¶</a>（2）创建tar包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'readme.tar'</span>, mode=<span class="string">'w'</span>) <span class="keyword">as</span> out:</span><br><span class="line">    out.add(<span class="string">'read.txt'</span>)</span><br></pre></td></tr></table></figure><h5 id="（3）读取与创建压缩包"><a class="header-anchor" href="#（3）读取与创建压缩包">¶</a>（3）读取与创建压缩包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'tarfile_add.tar'</span>,mode=<span class="string">'r:gz'</span>) <span class="keyword">as</span> out:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'tarfile_add.tar'</span>,mode=<span class="string">'r:bz2'</span>) <span class="keyword">as</span> out:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="案例4：备份指定文件到压缩包中"><a class="header-anchor" href="#案例4：备份指定文件到压缩包中">¶</a>案例4：备份指定文件到压缩包中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_file_math</span><span class="params">(filename, patterns)</span>:</span></span><br><span class="line">    <span class="string">'''查找特定类型的文件'''</span></span><br><span class="line">    <span class="keyword">for</span> pattern <span class="keyword">in</span> patterns:</span><br><span class="line">        <span class="keyword">if</span> fnmatch.fnmatch(filename, pattern):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_files</span><span class="params">(root, patterns=[<span class="string">'*'</span>])</span>:</span></span><br><span class="line">    <span class="keyword">for</span> root, dirnames, filenames <span class="keyword">in</span> os.walk(root):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> is_file_math(filename, patterns):</span><br><span class="line">                <span class="keyword">yield</span> os.path.join(root, filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">patterns = [<span class="string">'*.txt'</span>,<span class="string">'*.md'</span>]</span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">'%Y_%m_%d_%H_%M_%S'</span>)</span><br><span class="line">filename = <span class="string">'backup_all_file_&#123;0&#125;.tar.gz'</span>.format(now)</span><br><span class="line"><span class="keyword">with</span> tarfile.open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> find_files(<span class="string">'.'</span>, patterns):</span><br><span class="line">        f.add(item)</span><br></pre></td></tr></table></figure><h4 id="2、zipfile"><a class="header-anchor" href="#2、zipfile">¶</a>2、zipfile</h4><h5 id="（1）读取zip文件"><a class="header-anchor" href="#（1）读取zip文件">¶</a>（1）读取zip文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">demo_zip = zipfile.ZipFile(<span class="string">'read.zip'</span>)</span><br><span class="line">print(demo_zip.namelist())</span><br><span class="line">demo_zip.extractall(<span class="string">'1'</span>)</span><br><span class="line">demo_zip.extract(<span class="string">'a.jpg'</span>,<span class="string">'2'</span>)</span><br></pre></td></tr></table></figure><p>常用方法说明：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">namelist():返回zip文件中包含的所有文件和文件夹的字符串列表</span><br><span class="line">extract(filename, path)：从zip文件中提取单个文件</span><br><span class="line">extractall(path)：从zip文件中提取所有文件</span><br></pre></td></tr></table></figure><h5 id="（2）创建zip文件"><a class="header-anchor" href="#（2）创建zip文件">¶</a>（2）创建zip文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">newZip = zipfile.ZipFile(<span class="string">'new.zip'</span>,mode=<span class="string">'w'</span>)</span><br><span class="line">newZip.write(<span class="string">'a.jpg'</span>)</span><br><span class="line">newZip.close()</span><br></pre></td></tr></table></figure><h5 id="（3）Python命令行调用zipfile"><a class="header-anchor" href="#（3）Python命令行调用zipfile">¶</a>（3）Python命令行调用zipfile</h5><p>zipfile模块提供的命令行接口包含的选项：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-l:显示zip格式压缩包中的文件列表</span><br><span class="line">-e:提取zip格式的压缩包</span><br><span class="line">-c:创建zip格式的压缩包</span><br><span class="line">-t:验证文件是不是一个有效的zip格式压缩包</span><br></pre></td></tr></table></figure><p>示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建zip文件</span></span><br><span class="line">python -m zipfile -c new1.zip archive_tar.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看zip文件列表</span></span><br><span class="line">python -m zipfile -l new1.zip</span><br><span class="line">File Name                                             Modified             Size</span><br><span class="line">archive_tar.py                                 <span class="number">2020</span><span class="number">-04</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">32</span>:<span class="number">54</span>          <span class="number">239</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取zip文件到指定目录</span></span><br><span class="line">python -m zipfile -e new1.zip new_dir</span><br></pre></td></tr></table></figure><h4 id="3、shutil创建和读取压缩包"><a class="header-anchor" href="#3、shutil创建和读取压缩包">¶</a>3、shutil创建和读取压缩包</h4><p>shutil支持的格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">print(shutil.get_archive_formats())</span><br><span class="line"></span><br><span class="line">[(<span class="string">'bztar'</span>, <span class="string">"bzip2'ed tar-file"</span>), (<span class="string">'gztar'</span>, <span class="string">"gzip'ed tar-file"</span>), (<span class="string">'tar'</span>, <span class="string">'uncompressed tar file'</span>), (<span class="string">'xztar'</span>, <span class="string">"xz'ed tar-file"</span>), (<span class="string">'zip'</span>, <span class="string">'ZIP file'</span>)]</span><br></pre></td></tr></table></figure><h5 id="（1）创建压缩包"><a class="header-anchor" href="#（1）创建压缩包">¶</a>（1）创建压缩包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数1：生成的压缩包文件名</span></span><br><span class="line"><span class="comment"># 参数2：压缩包的格式</span></span><br><span class="line"><span class="comment"># 参数3：压缩的目录</span></span><br><span class="line">shutil.make_archive(<span class="string">'a.jpg'</span>,<span class="string">'gztar'</span>, <span class="string">'ddd'</span>)</span><br></pre></td></tr></table></figure><h5 id="（2）解压"><a class="header-anchor" href="#（2）解压">¶</a>（2）解压</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数1：需要解压的压缩包</span></span><br><span class="line"><span class="comment"># 参数2：解压的目录</span></span><br><span class="line">print(shutil.unpack_archive(<span class="string">'a.jpg.tar.gz'</span>,<span class="string">'jpg'</span>))</span><br></pre></td></tr></table></figure><h3 id="七、Python执行外部命令"><a class="header-anchor" href="#七、Python执行外部命令">¶</a>七、Python执行外部命令</h3><h4 id="1、subprocess模块简介"><a class="header-anchor" href="#1、subprocess模块简介">¶</a>1、subprocess模块简介</h4><p>这个模块用来创建和管理子进程。它提供了高层次的接口，用来替换os.system()、os.spawn*()、os.popen*()、os.popen2.*()和commands.*等模块和函数。</p><p>subprocess提供了一个名为Popen的类启动和设置子进程的参数，由于这个类比较复杂，subprosess还提供了若干便利的函数，这些函数都是对Popen类的封装。</p><h4 id="2、subprocess模块的便利函数"><a class="header-anchor" href="#2、subprocess模块的便利函数">¶</a>2、subprocess模块的便利函数</h4><h5 id="（1）call"><a class="header-anchor" href="#（1）call">¶</a>（1）call</h5><p>call函数的定义如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)</span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> subprocess                                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: subprocess.call([<span class="string">'ls'</span>,<span class="string">'-l'</span>])                                                          </span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2049</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">2077</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root   <span class="number">21</span> <span class="number">4</span>月  <span class="number">22</span> <span class="number">16</span>:<span class="number">32</span> os</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 公共</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 模板</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 视频</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 图片</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 文档</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 下载</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 音乐</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 桌面</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">0</span></span><br><span class="line">     </span><br><span class="line">In [<span class="number">3</span>]: subprocess.call(<span class="string">'exit 1'</span>, shell=<span class="literal">True</span>)                                             </span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="（2）check-call"><a class="header-anchor" href="#（2）check-call">¶</a>（2）check_call</h5><p>check_all函数的作用与call函数类似，区别在于异常情况下返回的形式不同。</p><p>对于call函数，工程师通过捕获call命令的返回值判断命令是否执行成功，如果成功则返回0，否则的话返回非0。对于check_call函数，如果执行成功，返回0，如果执行失败，抛出subprocess.CallProseccError异常，示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: subprocess.check_call([<span class="string">'ls'</span>,<span class="string">'-l'</span>])                                                    </span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2049</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">2077</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root   <span class="number">21</span> <span class="number">4</span>月  <span class="number">22</span> <span class="number">16</span>:<span class="number">32</span> os</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 公共</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 模板</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 视频</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 图片</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 文档</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 下载</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 音乐</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 桌面</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: subprocess.check_call(<span class="string">'lsljdl'</span>, shell=<span class="literal">True</span>)                                           </span><br><span class="line">/bin/sh: lsljdl: 未找到命令</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">CalledProcessError                        Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-7</span><span class="number">-885</span>ea94380a9&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 subprocess.check_call('lsljdl', shell=True)</span><br><span class="line"></span><br><span class="line">/usr/local/python3/lib/python3<span class="number">.8</span>/subprocess.py <span class="keyword">in</span> check_call(*popenargs, **kwargs)</span><br><span class="line">    <span class="number">362</span>         <span class="keyword">if</span> cmd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="number">363</span>             cmd = popenargs[<span class="number">0</span>]</span><br><span class="line">--&gt; 364         raise CalledProcessError(retcode, cmd)</span><br><span class="line">    <span class="number">365</span>     <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="number">366</span> </span><br><span class="line"></span><br><span class="line">CalledProcessError: Command <span class="string">'lsljdl'</span> returned non-zero exit status <span class="number">127.</span></span><br></pre></td></tr></table></figure><h5 id="（3）check-output"><a class="header-anchor" href="#（3）check-output">¶</a>（3）check_output</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: output = subprocess.check_output([<span class="string">'df'</span>,<span class="string">'-h'</span>])                                         </span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: print(output.decode())                                                               </span><br><span class="line">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/cl-root   <span class="number">37</span>G  <span class="number">5.1</span>G   <span class="number">32</span>G   <span class="number">14</span>% /</span><br><span class="line">devtmpfs             <span class="number">897</span>M     <span class="number">0</span>  <span class="number">897</span>M    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                <span class="number">912</span>M   <span class="number">84</span>K  <span class="number">912</span>M    <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs                <span class="number">912</span>M  <span class="number">9.0</span>M  <span class="number">903</span>M    <span class="number">1</span>% /run</span><br><span class="line">tmpfs                <span class="number">912</span>M     <span class="number">0</span>  <span class="number">912</span>M    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1           <span class="number">1014</span>M  <span class="number">173</span>M  <span class="number">842</span>M   <span class="number">18</span>% /boot</span><br><span class="line">tmpfs                <span class="number">183</span>M   <span class="number">16</span>K  <span class="number">183</span>M    <span class="number">1</span>% /run/user/<span class="number">42</span></span><br><span class="line">tmpfs                <span class="number">183</span>M     <span class="number">0</span>  <span class="number">183</span>M    <span class="number">0</span>% /run/user/<span class="number">0</span></span><br><span class="line"></span><br><span class="line">                                                                                       </span><br><span class="line">In [<span class="number">10</span>]: lines = output.decode().split(<span class="string">'\n'</span>)                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: lines                                                                           </span><br><span class="line">Out[<span class="number">11</span>]: </span><br><span class="line">[<span class="string">'文件系统             容量  已用  可用 已用% 挂载点'</span>,</span><br><span class="line"> <span class="string">'/dev/mapper/cl-root   37G  5.1G   32G   14% /'</span>,</span><br><span class="line"> <span class="string">'devtmpfs             897M     0  897M    0% /dev'</span>,</span><br><span class="line"> <span class="string">'tmpfs                912M   84K  912M    1% /dev/shm'</span>,</span><br><span class="line"> <span class="string">'tmpfs                912M  9.0M  903M    1% /run'</span>,</span><br><span class="line"> <span class="string">'tmpfs                912M     0  912M    0% /sys/fs/cgroup'</span>,</span><br><span class="line"> <span class="string">'/dev/sda1           1014M  173M  842M   18% /boot'</span>,</span><br><span class="line"> <span class="string">'tmpfs                183M   16K  183M    1% /run/user/42'</span>,</span><br><span class="line"> <span class="string">'tmpfs                183M     0  183M    0% /run/user/0'</span>,</span><br><span class="line"> <span class="string">''</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">1</span>:<span class="number">-1</span>]: </span><br><span class="line">    ...:     <span class="keyword">if</span> line: </span><br><span class="line">    ...:         print(line.split()[<span class="number">-2</span>]) </span><br><span class="line">    ...:                                                                                 t</span><br><span class="line"><span class="number">14</span>%</span><br><span class="line"><span class="number">0</span>%</span><br><span class="line"><span class="number">1</span>%</span><br><span class="line"><span class="number">1</span>%</span><br><span class="line"><span class="number">0</span>%</span><br><span class="line"><span class="number">18</span>%</span><br><span class="line"><span class="number">1</span>%</span><br><span class="line"><span class="number">0</span>%</span><br></pre></td></tr></table></figure><h4 id="3、subprocess模块的Popen类"><a class="header-anchor" href="#3、subprocess模块的Popen类">¶</a>3、subprocess模块的Popen类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmd</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    p = subprocess.Popen(cmd, shell=<span class="literal">True</span>,</span><br><span class="line">                         stdin=subprocess.PIPE,</span><br><span class="line">                         stdout=subprocess.PIPE,</span><br><span class="line">                         stderr=subprocess.PIPE)</span><br><span class="line">    stdout, stderr = p.communicate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p.returncode, stderr</span><br><span class="line">    <span class="keyword">return</span> p.returncode, stdout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">execute_cmd(<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure><h3 id="八、综合案例：使用Python部署MongoDB"><a class="header-anchor" href="#八、综合案例：使用Python部署MongoDB">¶</a>八、综合案例：使用Python部署MongoDB</h3><p>看一个综合案例，使用Python不俗MongoDB数据库。在这个例子中，将会用到各种与系统管理相关的标准库，包括os、os.path、shutil、tarfile和subprocess模块。</p><blockquote><p>假设当前目录下存在一个MongoDB安装包，我们的Python程序需要将他解压到当前目录的mongo目录下，并且当前目录创建一个mongodata目录用老保存MongoDB的数据库文件。</p></blockquote><p>在部署MongoDB数据库之前，当前目录下的文件结构如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── auto_install_mongodb.py</span><br><span class="line">└── ./mongodb-linux-x86_64-rhel70-4.2.3.tgz</span><br></pre></td></tr></table></figure><p>程序部署完成后，当前目录的文件结构大致如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ./auto_install_mongodb.py</span><br><span class="line">├── ./mongo</span><br><span class="line">│   ├── ./mongo/bin</span><br><span class="line">│   │   ├── ./mongo/bin/bsondump</span><br><span class="line">│   │   ├── ./mongo/bin/install_compass</span><br><span class="line">│   │   ├── ./mongo/bin/mongo</span><br><span class="line">│   │   ├── ./mongo/bin/mongod</span><br><span class="line">│   │   ├── ./mongo/bin/mongodump</span><br><span class="line">│   │   ├── ./mongo/bin/mongoexport</span><br><span class="line">│   │   ├── ./mongo/bin/mongofiles</span><br><span class="line">│   │   ├── ./mongo/bin/mongoimport</span><br><span class="line">│   │   ├── ./mongo/bin/mongoreplay</span><br><span class="line">│   │   ├── ./mongo/bin/mongorestore</span><br><span class="line">│   │   ├── ./mongo/bin/mongos</span><br><span class="line">│   │   ├── ./mongo/bin/mongostat</span><br><span class="line">│   │   └── ./mongo/bin/mongotop</span><br><span class="line">│   ├── ./mongo/LICENSE-Community.txt</span><br><span class="line">│   ├── ./mongo/MPL-2</span><br><span class="line">│   ├── ./mongo/README</span><br><span class="line">│   ├── ./mongo/THIRD-PARTY-NOTICES</span><br><span class="line">│   └── ./mongo/THIRD-PARTY-NOTICES.gotools</span><br><span class="line">├── ./mongodata</span><br><span class="line">│   ├── ./mongodata/collection-0-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/collection-2-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/collection-4-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/diagnostic.data</span><br><span class="line">│   │   ├── ./mongodata/diagnostic.data/metrics.2020-04-27T10-17-57Z-00000</span><br><span class="line">│   │   └── ./mongodata/diagnostic.data/metrics.interim</span><br><span class="line">│   ├── ./mongodata/index-1-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/index-3-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/index-5-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/index-6-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/journal</span><br><span class="line">│   │   ├── ./mongodata/journal/WiredTigerLog.0000000001</span><br><span class="line">│   │   ├── ./mongodata/journal/WiredTigerPreplog.0000000001</span><br><span class="line">│   │   └── ./mongodata/journal/WiredTigerPreplog.0000000002</span><br><span class="line">│   ├── ./mongodata/_mdb_catalog.wt</span><br><span class="line">│   ├── ./mongodata/mongod.lock</span><br><span class="line">│   ├── ./mongodata/mongod.log</span><br><span class="line">│   ├── ./mongodata/sizeStorer.wt</span><br><span class="line">│   ├── ./mongodata/storage.bson</span><br><span class="line">│   ├── ./mongodata/WiredTiger</span><br><span class="line">│   ├── ./mongodata/WiredTigerLAS.wt</span><br><span class="line">│   ├── ./mongodata/WiredTiger.lock</span><br><span class="line">│   ├── ./mongodata/WiredTiger.turtle</span><br><span class="line">│   └── ./mongodata/WiredTiger.wt</span><br><span class="line">└── ./mongodb-linux-x86_64-rhel70-4.2.3.tgz</span><br></pre></td></tr></table></figure><p>MongoDB下载地址如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-s390x-rhel72-4.3.3.tgz</span><br></pre></td></tr></table></figure><p>MongoDB是当下最流行的文档数据库，具有很好的易用性。启动一个MongoDB数据库实例，只需要执行一下几条shell命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf mongodb-linux-x86_64-rhel70-4.2.3.tgz</span><br><span class="line">mv mongodb-linux-x86_64-rhel70-4.2.3 mongo</span><br><span class="line">mkdir mongodata</span><br><span class="line">mongo/bin/mongod --fork --logpath mongodata/mongod.log --dbpath mongodata</span><br></pre></td></tr></table></figure><blockquote><p>这里给出的shell命令，只是为了便于不熟悉MongoDB的人了解MongoDB数据库的启动过程，还有很多的情况没有考虑。例如，要将当前目录下的MongoDB安装包解压到当前目录下的mongo目录中，但是当前目录下已经存在一个名为mongo的目录，则会报错</p></blockquote><p>下面的程序时使用Python部署MongoDB数据库的完整代码，这段程序综合应用了很多与系统管理相关的模块。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmd</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    <span class="string">'''执行shell命令'''</span></span><br><span class="line">    p = subprocess.Popen(cmd, shell=<span class="literal">True</span>,</span><br><span class="line">                         stdin=subprocess.PIPE,</span><br><span class="line">                         stdout=subprocess.PIPE,</span><br><span class="line">                         stderr=subprocess.PIPE)</span><br><span class="line">    stdout, stderr = p.communicate()</span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p.returncode, stderr</span><br><span class="line">    <span class="keyword">return</span> p.returncode, stdout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpackage_mongo</span><span class="params">(package, package_dir)</span>:</span></span><br><span class="line">    unpackage_dir = os.path.splitext(package)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(unpackage_dir):</span><br><span class="line">        shutil.rmtree(unpackage_dir)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(package_dir):</span><br><span class="line">        shutil.rmtree(package_dir)</span><br><span class="line">    <span class="comment"># 解压</span></span><br><span class="line">    t = tarfile.open(package, <span class="string">'r:gz'</span>)</span><br><span class="line">    t.extractall(<span class="string">'.'</span>)</span><br><span class="line">    print(<span class="string">'tar is ok.'</span>)</span><br><span class="line">    <span class="comment"># 重命名mongodb-linux-x86_64-rhel70-4.2.3为mongo</span></span><br><span class="line">    shutil.move(unpackage_dir, <span class="string">'mongo'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_datadir</span><span class="params">(data_dir)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(data_dir):</span><br><span class="line">        shutil.rmtree(data_dir)</span><br><span class="line">    os.mkdir(data_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_mongod_commamd</span><span class="params">(package_dir, data_dir, logfile)</span>:</span></span><br><span class="line">    mongod = os.path.join(package_dir, <span class="string">'bin'</span>, <span class="string">'mongod'</span>)</span><br><span class="line">    mongod_format = <span class="string">"""&#123;0&#125; --fork --dbpath &#123;1&#125; --logpath &#123;2&#125;"""</span></span><br><span class="line">    <span class="keyword">return</span> mongod_format.format(mongod, data_dir, logfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_mongod</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    returncode, out = execute_cmd(cmd)</span><br><span class="line">    <span class="keyword">if</span> returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">'execute &#123;0&#125; error:&#123;1&#125;'</span>.format(cmd, out.decode()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'execute &#123;0&#125; sucessfully.'</span>.format(cmd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    package = <span class="string">'mongodb-linux-x86_64-rhel70-4.2.3.tgz'</span></span><br><span class="line">    cur_dir = os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line">    package_dir = os.path.join(cur_dir, <span class="string">'mongo'</span>)</span><br><span class="line">    data_dir = os.path.join(cur_dir, <span class="string">'mongodata'</span>)</span><br><span class="line">    logfile = os.path.join(data_dir, <span class="string">'mongod.log'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(package):</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">'&#123;0&#125; not found.'</span>.format(package))</span><br><span class="line"></span><br><span class="line">    unpackage_mongo(package, package_dir)</span><br><span class="line">    create_datadir(data_dir)</span><br><span class="line">    start_mongod(format_mongod_commamd(package_dir, data_dir, logfile))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>代码说明：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在这段过程中，我们首先在main函数中定义了几个变量，包括当前目录的路径，MongoDB二进制文件所在的路径、MongoDB数据目录所在的路径，以及MongoDB的日志问紧啊</span><br><span class="line"></span><br><span class="line">随后，我们判断MongoDB的安装包是否存在，如果不存在，则通过抛出SystemExit异常的方式结束程序</span><br><span class="line"></span><br><span class="line">在unpackage_mongo函数中，我们通过Python程序得到MongoDB安装包解压以后的目录。如果目录已经存在，则删除该目录。随后，我们使用tarfile解压MongoDB数据库，解压完成后，将命令重命名为mongo目录</span><br><span class="line"></span><br><span class="line">在create_datadir目录红，我们首先判断MongoDB数据库目录是否存在，如果存在，则删除该目录，随后在创建MongoDB数据库目录</span><br><span class="line"></span><br><span class="line">在start_mongod函数中，我们执行MongoDB数据库的启动命令启动MongoDB数据库。为了在Python代码中执行shell命令，我们使用了subprocess库，我们将subprocess库执行shell命令的瑞吉封装成execute_cmd函数，在执行shell命令时，直接调用该函数即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python生态工具</title>
    <link href="https://pdxblog.top/Python%E7%94%9F%E6%80%81%E5%B7%A5%E5%85%B7.html"/>
    <id>https://pdxblog.top/Python%E7%94%9F%E6%80%81%E5%B7%A5%E5%85%B7.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-27T14:45:09.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python生态工具"><a class="header-anchor" href="#Python生态工具">¶</a>Python生态工具</h2><h3 id="一、Python内置小工具"><a class="header-anchor" href="#一、Python内置小工具">¶</a>一、Python内置小工具</h3><h4 id="1-1、-1秒钟启动一个下载服务器"><a class="header-anchor" href="#1-1、-1秒钟启动一个下载服务器">¶</a>1.1、 1秒钟启动一个下载服务器</h4><p>在实际工作中，时常会有这样的一个需求：将文件传给其他同事。将文件传给同事本身并不是一个很繁 琐的工作，现在的聊天工具一般都支持文件传输。但是，如果需要传送的文件较多，操作起来就会比较 麻烦。此外，如果文件在远程的服务器上，则需要先将远程服务器的文件下载到本地，然后再通过聊天 工具传给同事。再或者，你并不是特别清楚要传哪几个文件给同事，所以，你们需要进行交流，而交流 的时间成本是比较高的，会降低办事效率。</p><p>此时，如果你知道Python内置了一个下载服务器就能够显著提升效率了。例如，你的同事要让你传的文 件位于某一个目录下，那么，你可以进入这个目录，然后执行下面的命令启动一个下载服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p>在Python 3中，由于对系统库进行了重新整理，因此，使用方式会有不同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>执行上面的命令就会在当前目录下启动一个文件下载服务器，默认打开8000端口。完成以后，只需要将 IP和端口告诉同事，让同事自己去操作即可，非常方便高效。</p><p>使用浏览器访问Python启动的下载服务器，可以看到一个类似于FTP下载的界面，这个时候单击文件下 载即可。通过这种方式传输文件，可以降低大家的沟通成本，提高文件传输的效率。</p><p>上面使用的Python语句，从工作原理来说，仅仅是启动了一个Python内置的Web服务器。如果当前目 录下存在一个名为index.html的文件，则默认显示该文件的内容。如果当前目录下不存在这样一个文 件，则默认显示当前目录下的文件列表，也就是大家看到的下载服务器。</p><h4 id="1-2、字符串转换为JSON"><a class="header-anchor" href="#1-2、字符串转换为JSON">¶</a>1.2、字符串转换为JSON</h4><p>JSON是一种轻量级的数据交换格式，易于人类阅读和编写，同时也易于机器解析和生成。由于JSON的 诸多优点，已被广泛使用在各个系统中。JSON使用越广泛，需要将JSON字符串转换为JSON对象的需求 就越频繁。</p><p>例如，在工作过程中，我们的系统会调用底层服务的API。底层服务的API一般都是以JSON的格式返 回，为了便于问题追踪，我们会将API返回的JSON转换为字符串记录到日志文件中。当需要分析问题 时，就需要将日志文件中的JSON字符串拿出来进行分析。这个时候，需要将一个JSON字符串转换为 JSON对象，以提高日志的可读性。</p><p>这个需求十分常见，以至于使用搜索引擎搜索&quot;JSON&quot;，处于搜索结果的第一项便是“在线JSON格式化工 具”。除了打开浏览器，使用在线JSON格式化工具以外，我们也可以使用命令行终端的Python解释器来 解析JSON串，如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]<span class="comment"># echo '&#123;"address": &#123;"province": "zhejiang", "city": "hangzhou"&#125;, "name": "lmx", "sex": "male"&#125;' | python -m json.tool </span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"address"</span>: </span><br><span class="line">        <span class="string">"city"</span>: <span class="string">"hangzhou"</span>,</span><br><span class="line">       <span class="string">"province"</span>: <span class="string">"zhejiang</span></span><br><span class="line"><span class="string">   &#125;,</span></span><br><span class="line"><span class="string">   "</span>name<span class="string">": "</span>lmx<span class="string">"</span></span><br><span class="line"><span class="string">   "</span>sex<span class="string">": "</span>male<span class="string">"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>使用命令行解释器解析JSON串非常方便，而且，为了便于阅读，该工具还会自动将转换的结果进行对 齐和格式化。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]<span class="comment"># echo '&#123;"address": &#123;"province": "zhejiang", "city":</span></span><br><span class="line"><span class="string">"hangzhou"</span>&#125;, <span class="string">"name"</span>: <span class="string">"lmx"</span>, <span class="string">"sex"</span>: <span class="string">"male"</span>&#125;<span class="string">' | python -m json.tool</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"address": &#123;</span></span><br><span class="line"><span class="string">"city": "hangzhou",</span></span><br><span class="line"><span class="string">"province": "zhejiang"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"name": "lmx",</span></span><br><span class="line"><span class="string">"sex": "male"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="1-3、检查第三方库是否正常安装"><a class="header-anchor" href="#1-3、检查第三方库是否正常安装">¶</a>1.3、检查第三方库是否正常安装</h4><p>安装完Python的第三方库以后，如何确认这个库已经正确安装了呢？答案很简单，只需要尝试进行 import导入即可。如果导入没有任何错误，则认为安装成功；如果导入失败，则认为安装失败。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]<span class="comment"># python</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.5</span> (default, Oct <span class="number">30</span> <span class="number">2018</span>, <span class="number">23</span>:<span class="number">45</span>:<span class="number">53</span>)</span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-36</span>)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>验证Python的第三方库是否安装成功，本身也是一件很简单的事情，但是，如果我们使用脚本对大批量 的服务器进行自动部署，又应该如何验证第三方库安装成功了呢？肯定不能登录每一台服务器进行验 证。这个时候，我们可以使用Python解释器的-c参数快速地执行import语句，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]<span class="comment"># python -c "import paramiko"</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named paramiko</span><br></pre></td></tr></table></figure><h3 id="二、pip高级用法"><a class="header-anchor" href="#二、pip高级用法">¶</a>二、pip高级用法</h3><p>为了便于用户安装和管理第三方库和软件，越来越多的编程语言拥有自己的包管理工具，如nodejs的 npm，ruby的gem。Python也不例外，现在Python生态主流的包管理工具是pip</p><h4 id="2-1、pip介绍"><a class="header-anchor" href="#2-1、pip介绍">¶</a>2.1、pip介绍</h4><p>pip是一个用来安装和管理Python包的工具，是easy_install的替代品，如果读者使用的是Python 2.7.9+或Python 3.4+版本的Python，则已经内置了pip，无须安装直接使用即可。如果系统中没有安装 pip，也可以手动安装</p><h4 id="2-2、python3安装pip"><a class="header-anchor" href="#2-2、python3安装pip">¶</a>2.2、python3安装pip</h4><blockquote><p><strong>方法1：python33安装完成后默认已经带有pip3</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle bin]<span class="comment"># pip3 -V</span></span><br><span class="line">pip 19.2.3 from /usr/<span class="built_in">local</span>/python38/lib/python3.8/site-packages/pip (python</span><br><span class="line">3.8)</span><br><span class="line">[root@oracle bin]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/python38/bin</span><br></pre></td></tr></table></figure><p>你可以用以下命令,创建软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python38/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><blockquote><p><strong>方法2：使用以下方法重新安装pip插件</strong></p></blockquote><p>下载get-pip.py脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/3.2/get-pip.py</span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 get-pip.py</span><br></pre></td></tr></table></figure><p>python3创建pip3索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/python3.6.1/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><p>pip之所以能够成为最流行的包管理工具，并不是因为它被Python官方作为默认的包管理器，而是因为 它自身的诸多优点。pip的优点有：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip提供了丰富的功能，其竞争对手easy_install则只支持安装，没有提供卸载和显示已安装列表的功</span><br><span class="line">能；</span><br><span class="line">pip能够很好地支持虚拟环境；</span><br><span class="line">pip可以通过requirements.txt集中管理依赖；</span><br><span class="line">pip能够处理二进制格式(.whl)；</span><br><span class="line">pip是先下载后安装，如果安装失败，也会清理干净，不会留下一个中间状态。</span><br></pre></td></tr></table></figure><p><a href="http://xn--pypi-z94fx2cpii0ty2bsy4aoqgoxuqkav67c75bq19aje7az32h.python.org" target="_blank" rel="noopener">如果用户没有将软件打包上传到pypi.python.org</a>，则无法使用pip进行安装。对于这种情况，Python生 态也有标准的做法，例如，我们尝试从源码安装paramiko。需要注意的是，我们也可以通过pip安装 paramiko的，这里只是为了演示Python生态中源码安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/paramiko/paramiko.git</span><br><span class="line">$ <span class="built_in">cd</span> paramiko</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><h4 id="2-3、给pip3重命名"><a class="header-anchor" href="#2-3、给pip3重命名">¶</a>2.3、给pip3重命名</h4><p>切换至家目录，通过.bashrc添加别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle bin]<span class="comment"># cd ~</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim .bashrc</span></span><br><span class="line"><span class="built_in">alias</span> pip=pip3</span><br><span class="line">[root@localhost ~]<span class="comment"># source .bashrc</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pip -V</span></span><br><span class="line">pip 19.2.3 from /usr/<span class="built_in">local</span>/python38/lib/python3.8/site-packages/pip (python</span><br><span class="line">3.8)</span><br></pre></td></tr></table></figure><h4 id="2-4、pip3常用命令"><a class="header-anchor" href="#2-4、pip3常用命令">¶</a>2.4、pip3常用命令</h4><table><thead><tr><th>子命令</th><th>解释说明</th></tr></thead><tbody><tr><td>install</td><td>安装软件包</td></tr><tr><td>download</td><td>下载软件包</td></tr><tr><td>uninstall</td><td>卸载安装包</td></tr><tr><td>freeze</td><td>按照requirements格式输出安装包，可以到其他服务器上执行pip install -r requirements.txt直接安装软件</td></tr><tr><td>list</td><td>列出当前系统中的安装包</td></tr><tr><td>show</td><td>查看安装包的信息，包括版本、依赖、许可证、作者、主页等信息</td></tr><tr><td>check</td><td>检查安装包依赖是否完整</td></tr><tr><td>search</td><td>查找安装包</td></tr><tr><td>wheel</td><td>打包软件到wheel格式</td></tr><tr><td>hash</td><td>计算安装包的hash值</td></tr><tr><td>completion</td><td>生成命令补全配置</td></tr><tr><td>help</td><td>获取pip和子命令的帮助信息</td></tr></tbody></table><h4 id="2-5、加速pip安装的技巧"><a class="header-anchor" href="#2-5、加速pip安装的技巧">¶</a>2.5、加速pip安装的技巧</h4><p>如果大家使用Python的时间比较长的话，会发现Python安装的一个问题，即pypi.python.org不是特别 稳定，有时候会很慢，甚至处于完全不可用的状态。这个问题有什么好办法可以解决呢？根据笔者的经 验，至少有两种不同的方法。</p><h5 id="1、使用豆瓣或阿里云的源加速软件安装"><a class="header-anchor" href="#1、使用豆瓣或阿里云的源加速软件安装">¶</a>1、使用豆瓣或阿里云的源加速软件安装</h5><p>访问pypi.python.org不稳定的主要原因是因为网络不稳定，如果我们从网络稳定的服务器下载安装 包，问题就迎刃而解了。我们国内目前有多个pypi镜像，推荐使用豆瓣的镜像源或阿里的镜像源。如果 要使用第三方的源，只需要在安装时，通过pip命令的-i选项指定镜像源即可。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple/ flask</span><br></pre></td></tr></table></figure><p>每次都要指定镜像源的地址比较麻烦，我们也可以修改pip的配置文件，将镜像源写入配置文件中。对 于Linux系统来说，需要创建～/.pip/pip.conf文件，然后在文件中保存如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir .pip</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd .pip</span></span><br><span class="line">[root@localhost .pip]<span class="comment"># touch pip.conf</span></span><br><span class="line">[root@localhost .pip]<span class="comment"># vim pip.conf</span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h5 id="2、将软件下载到本地部署"><a class="header-anchor" href="#2、将软件下载到本地部署">¶</a>2、将软件下载到本地部署</h5><p>如果需要对大批量的服务器安装软件包，并且安装包比较多或者比较大，则可以考虑将软件包下载到本 地，然后从本地安装。这对于使用脚本部署大量的服务器非常有用，此外，对于服务器无法连接外网的 情况，也可以使用这种方法。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载到本地</span></span><br><span class="line">pip install --download=<span class="string">'pwd'</span> -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line">pip install --no-index -f file://<span class="string">'pwd'</span> -r requirements.txt</span><br></pre></td></tr></table></figure><p>使用这种方式，只需要下载一次，就可以多处安装，不用担心网络不稳定的问题。并且，pip能够自动 处理软件依赖问题。例如，我们通过这种方式下载Flask到当前目录下，则Flask的依赖click、 itsdangerous、Jinja2、MarkupSafe和Werkzeug也会被下载到本地，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install --download=<span class="string">'pwd'</span> flask</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">click-6.7-py2.py3-none-any.whl itsdangerous-0.24.tar.gz</span><br><span class="line">MarkupSafe-0.23.tar.gz Flask-0.12-py2.py3-none-any.whl</span><br><span class="line">Jinja2-2.9.5-py2.py3-none-any.whl Werkzeug-0.11.15-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure><h3 id="三、Python变成辅助工具"><a class="header-anchor" href="#三、Python变成辅助工具">¶</a>三、Python变成辅助工具</h3><p>因为Python是一门动态类型语言，所以，Python程序不需要编译和链接就可以直接运行。Python程序 运行时是从上至下逐行执行，因此Python工程师可以进行交互式的编程，从而快速验证代码的运行结果 是否符合预期。同时，Python工程师也可以通过交互式编程的方式学习Python编程。也正是因为 Python交互式编程的诸多优点，所以，Python交互式编程使用非常广泛。</p><h4 id="3-1、Python交互式编程"><a class="header-anchor" href="#3-1、Python交互式编程">¶</a>3.1、Python交互式编程</h4><p>要使用Python的交互式编程，最简单的方式是使用标准的Python Shell。在命令行直接输入python命 令便可进入Python Shell，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># python</span></span><br><span class="line">Python <span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">20</span>:<span class="number">36</span>)</span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-39</span>)] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>虽然标准的Python Shell也支持交互式编程，但是，它有很多不足，包括：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">没有语法高亮；</span><br><span class="line">不支持Tab自动补全；</span><br><span class="line">没有自动缩进功能；</span><br><span class="line">不能保存历史记录；</span><br><span class="line">不能很好地与操作系统交互；</span><br><span class="line">无法导入外部文件中的程序。</span><br></pre></td></tr></table></figure><p>虽然Python自带的交互式编程满足了功能性需求，但是在易用性上仍有诸多不足。IPython是增强型的 Python Shell，不但解决了上面提到的各种问题，而且提供了非常丰富的组件，可以方便地进行交互式 编程和数据分析。IPython功能丰富，不可避免地导致软件变得庞大复杂，因此，IPython 4.0对 IPython进行了拆分，分离成IPython Shell和jupyter两个组件，这两个组件现在需要分别安装。 按照行业惯例，IPython代指IPython Shell，是一个类似于Python Shell的交互式解释器；jupyter代指 IPython Notebook，是一个带图形界面的应用程序。接下来我们分别介绍IPython和jupyter的使用。</p><h4 id="3-2、使用IPython交互编程"><a class="header-anchor" href="#3-2、使用IPython交互编程">¶</a>3.2、使用IPython交互编程</h4><p>IPython是一个第三方工具，因此，在使用之前需要先安装。可以直接使用操作系统的包管理工具或pip 进行安装。以下是在centos7上的安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pip install ipython</span></span><br><span class="line">Looking <span class="keyword">in</span> indexes: https://pypi.douban.com/simple/</span><br><span class="line">Collecting ipython</span><br><span class="line">Downloading</span><br><span class="line">https://pypi.doubanio.com/packages/1c/f3/c8be38ee117d02508bb8b9158eb41ca416</span><br><span class="line">f442a6e8e3b3159c2f2d14ed79/ipython-7.11.1-py3-none-any.whl (777kB)</span><br><span class="line">|████████████████████████████████| 778kB 934kB/s</span><br><span class="line"></span><br><span class="line">……省略部分输出信息</span><br><span class="line"></span><br><span class="line">Installing collected packages: six, ipython-genutils, decorator, traitlets,</span><br><span class="line">ptyprocess, pexpect, pickleshare, wcwidth, prompt-toolkit, pygments,</span><br><span class="line">backcall, parso, jedi, ipython</span><br><span class="line">Running setup.py install <span class="keyword">for</span> backcall ... <span class="keyword">done</span></span><br><span class="line">Successfully installed backcall-0.1.0 decorator-4.4.1 ipython-7.11.1</span><br><span class="line">ipython-genutils-0.2.0 jedi-0.15.2 parso-0.5.2 pexpect-4.7.0 pickleshare0.7.5 prompt-toolkit-3.0.2 ptyprocess-0.6.0 pygments-2.5.2 six-1.13.0</span><br><span class="line">traitlets-4.3.3 wcwidth-0.1.8</span><br></pre></td></tr></table></figure><p>安装完成以后，在命令行终端输入ipython就进入了IPython交互式编程界面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipython</span></span><br><span class="line">Python <span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">20</span>:<span class="number">36</span>)</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.11</span><span class="number">.1</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: sum=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">...: sum+=i</span><br><span class="line">...: print(sum)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: os.getlogin()</span><br><span class="line"></span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'root'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]:</span><br></pre></td></tr></table></figure><p>与标准的Python Shell一样，IPython的行显示了所使用的Python解释器版本以及当前的时间。第二行 是获取版权信息的方式，接着给出了IPython的版本。后是简短的使用说明，包括特征介绍、简短的 使用手册和如何获取帮助信息。表2-2给出了IPython提供的使用说明。 接下来我们将从五个不同的维度介绍IPython的使用，分别是：</p><blockquote><p>①更好的编辑器；</p><p>②更方便地获取帮助信息；</p><p>③IPython提供的magic函数；</p><p>④IPython的保存历史功能；</p><p>⑤IPython与操作系统交</p></blockquote><h5 id="（1）更好的编辑器"><a class="header-anchor" href="#（1）更好的编辑器">¶</a>（1）更好的编辑器</h5><p>IPython非常强大，有各种高级功能。其中，有用也直观的便是作为交互式编程工具的编辑器功 能。简单来说，IPython相对于标准的Python Shell是一个更好的交互式编程的编辑器，因为它具有：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法高亮； </span><br><span class="line">自动缩进； </span><br><span class="line">Tab补全； </span><br><span class="line">快速获取帮助信息； </span><br><span class="line">搜索历史； </span><br><span class="line">执行shell命令</span><br></pre></td></tr></table></figure><p>如果只是描述IPython的特征，相信读者并没有完全的概念。这个时候可以坐在计算机旁，打开IPython 随便敲几行Python代码和标准的Python Shell进行比较，就能够直观感受到IPython的优点。</p><p>IPython与标准Python Shell的大区别在于，IPython会对命令提示符的每一行进行编号，编号以后能 够提高交互式编程的可读性。更重要的是，我们可以通过IPython提供的特殊函数对编号以后的代码进 行操作。此外，IPython支持语法高亮和自动缩进，相对于标准的Python Shell，是一个更好的编辑 器。如果在编写代码的过错中出现了错误需要删除时，标准的Python Shell无法进行很好的处理，只能 重新进行输入，而IPython则不存在这样的问题。</p><p>tab补全是一个特别有用的功能，IPython支持tab补全，而标准的Python Shell不支持。大家可以想象 一下，一个工程师近正在学习Python，他知道一个库里面有他想要的函数，但是，他并不能非常准确 地说出这个函数的名称。这个时候，如果没有tab补全，就只能一边打开Python官方的参考手册，一边 学习编程。有了tab补全以后，即使他对函数名称不是特别熟悉也没有关系，可以先通过tab补全列出当 前命名空间下的函数列表，然后根据函数名称选择自己需要的函数。IPython的补全功能非常强大，不 但可以补全用户的变量名、标准库的函数，在导入包时也可以进行补全。</p><p>这一小节，我们一直在强调IPython比标准的Python Shell更好用，拥有更多高级功能。如果读者接触 Python的时间不长，也许不能理解为什么需要使用交互式编程。交互式编程在当前会话退出以后就结束 了，并不满足计算机程序一次编写多次运行的特点。但是，在我们的日常工作中还是会经常用到交互式编程。</p><p>交互式编程不但可以快速验证代码执行结果，还可以帮助我们学习Python编程。Python工程师在编写 代码时，通常会使用编辑器和Python Shell组合的方式来完成程序的编写，例如，将代码从编辑器复制 到Python Shell以验证代码的正确性，然后将验证过的代码从Python Shell复制到编辑器中。</p><h5 id="（2）使用IPython来解析MySQL的备份日志"><a class="header-anchor" href="#（2）使用IPython来解析MySQL的备份日志">¶</a>（2）使用IPython来解析MySQL的备份日志</h5><p>为了便于读者理解交互式编程的好处，我们这里演示一个使用Python交互式编程的例子。在这个例子 中，我们使用IPython来解析MySQL的备份日志。</p><p>一个典型的MySQL物理备份日志如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">170221 01:07:48 Executing UNLOCK TABLES</span><br><span class="line">170221 01:07:48 All tables unlocked</span><br><span class="line">Starting slave SQL thread</span><br><span class="line">170221 01:07:48 [00] Streaming ib_buffer_pool to &lt;STDOUT&gt;</span><br><span class="line">170221 01:07:48 [00] ...done</span><br><span class="line">170221 01:07:48 Backup created in directory '/home/lmx/log/backup'</span><br><span class="line">MySQL binlog position: filename 'mysql-bin.000003', position '507946128',</span><br><span class="line">GTID of the last change '5a81ea97-daf1-11e6-94c1-fa163ee35df3:1-3409440'</span><br><span class="line">MySQL slave binlog position: master host '10.173.33.35', filename 'mysqlbin.000002', position '524993060'</span><br><span class="line">170221 01:07:48 [00] Streaming backup-my.cnf</span><br><span class="line">170221 01:07:48 [00] ...done</span><br><span class="line">170221 01:07:48 [00] Streaming xtrabackup_info</span><br><span class="line">170221 01:07:48 [00] ...done</span><br><span class="line">xtrabackup: Transaction log of lsn (3387315364) to (3451223966) was copied.</span><br><span class="line">170221 01:07:48 completed OK!</span><br></pre></td></tr></table></figure><p>即使读者对MySQL不了解也没有关系，我们现在的需求是解析下面这一行日志，并获取日志中的host、 filename和position的值。虽然在日志中position的值包含在一对单引号内，但是，我们希望解析以后 position的值是一个整数。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL slave binlog position: master host '10.173.33.35', filename 'mysqlbin.000002', position '524993060'</span><br></pre></td></tr></table></figure><p>在这个例子中，主要就是对字符串进行处理，并提取相应的值。这个问题当然不难，但是，如果不借助 交互式编程工具，需要工程师一次在代码中编写正确也不简单。如果工程师不知道交互式编程工具，就 只能在编辑器里面编写代码，然后运行。如果有错误再修改，直到获取正确的取值，整个过程将会非常 耗时。如果项目庞大，调试起来也会比较困难。这个时候就可以借助Python的交互式编程工具，先验证 代码的正确性，然后将验证过的代码从交互式编程工具复制到编辑器中。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipython</span></span><br><span class="line">Python <span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">20</span>:<span class="number">36</span>)</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.11</span><span class="number">.1</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line">In [<span class="number">1</span>]: line=<span class="string">"MySQL slave binlog position: master host '10.173.33.35',</span></span><br><span class="line"><span class="string">filename 'mysql-bin.000002', position '524993060'"</span></span><br><span class="line">In [<span class="number">2</span>]: line.split(<span class="string">"'"</span>)</span><br><span class="line">Out[<span class="number">2</span>]:</span><br><span class="line">[<span class="string">'MySQL slave binlog position: master host '</span>,</span><br><span class="line"><span class="string">'10.173.33.35'</span>,</span><br><span class="line"><span class="string">', filename '</span>,</span><br><span class="line"><span class="string">'mysql-bin.000002'</span>,</span><br><span class="line"><span class="string">', position '</span>,</span><br><span class="line"><span class="string">'524993060'</span>,</span><br><span class="line"><span class="string">''</span>]</span><br><span class="line">In [<span class="number">3</span>]: host=line.split(<span class="string">"'"</span>)[<span class="number">1</span>]</span><br><span class="line">In [<span class="number">4</span>]: filename=line.split(<span class="string">"'"</span>)[<span class="number">3</span>]</span><br><span class="line">In [<span class="number">5</span>]: position=line.split(<span class="string">"'"</span>)[<span class="number">5</span>]</span><br><span class="line">In [<span class="number">6</span>]: print(host,filename,position)</span><br><span class="line"><span class="number">10.173</span><span class="number">.33</span><span class="number">.35</span> mysql-bin<span class="number">.000002</span> <span class="number">524993060</span></span><br><span class="line">In [<span class="number">7</span>]: type(position)</span><br><span class="line">Out[<span class="number">7</span>]: str</span><br><span class="line">In [<span class="number">8</span>]: position=int(position)</span><br><span class="line">In [<span class="number">9</span>]: print(host,filename,position)</span><br><span class="line"><span class="number">10.173</span><span class="number">.33</span><span class="number">.35</span> mysql-bin<span class="number">.000002</span> <span class="number">524993060</span></span><br></pre></td></tr></table></figure><p>为了节省文章篇幅，我们没有进行错误的尝试，而是直接通过单引号来分解字符串。由于我们使用了交 互式编程，可以很方便地看到字符串分解以后的中间结果。正是有了这个中间结果，我们才知道，字符 串分解成列表以后，下标1对应的字符串是host的值，下标3对应的字符串是filename的值，下标5对应 的字符串是position的值。我们还可以通过交互式编程发现position是一个字符串。由于我们要求 position是一个整数，因此，需要在代码中将position强制转换为一个整数。</p><p>如果读者自己尝试从这一行字符串中获取有效的值，很可能一开始会尝试使用逗号或空格来分解字符 串。这两种方法都无法一次取出host、filename和position的值。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: line.split(<span class="string">','</span>)</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line">[<span class="string">"MySQL slave binlog position: master host '10.173.33.35'"</span>,</span><br><span class="line"><span class="string">" filename 'mysql-bin.000002'"</span>,</span><br><span class="line"><span class="string">" position '524993060'"</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: line.split(<span class="string">' '</span>)</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">[<span class="string">'MySQL'</span>,</span><br><span class="line"><span class="string">'slave'</span>,</span><br><span class="line"><span class="string">'binlog'</span>,</span><br><span class="line"><span class="string">'position:'</span>,</span><br><span class="line"><span class="string">'master'</span>,</span><br><span class="line"><span class="string">'host'</span>,</span><br><span class="line"><span class="string">"'10.173.33.35',"</span>,</span><br><span class="line"><span class="string">'filename'</span>,</span><br><span class="line"><span class="string">"'mysql-bin.000002',"</span>,</span><br><span class="line"><span class="string">'position'</span>,</span><br><span class="line"><span class="string">"'524993060'"</span>]</span><br></pre></td></tr></table></figure><p>使用交互式编程，我们可以快速尝试不同的方案，先验证自己的想法是否正确，然后将代码拷贝到编辑 器中，组成我们的Python程序文件。通过这种方式，能够有效降低代码出错的概率，减少调试的时间， 从而提高工作效率。</p><h5 id="（3）更好地获取帮助信息"><a class="header-anchor" href="#（3）更好地获取帮助信息">¶</a>（3）更好地获取帮助信息</h5><p>Python工程师不但可以通过交互式编程快速验证代码执行结果，还可以通过交互式编程的方式学习 Python编程。之所以说Python工程师可以通过交互式编程学习编程，是因为使用IPython能够方便地获 取到相应的帮助信息。如命名空间下的每个对象以及其定义和使用说明。虽然标准的Python Shell也可 以通过help函数获取到对象的帮助信息，但是，IPython提供了更加灵活的方式获取命名空间下的对象 列表，以及更加全面的帮助信息。</p><p>我们知道，在标准库的os模块下的path子模块中有很多操作文件、目录和路径的函数，也有很多 以&quot;is&quot;开始的判断类函数。这些判断类函数的作用非常明确，用以判断给定的对象是否为一个文件或一 个目录。我们可以使用通配符的方式获取该模块下的所有判断类函数，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: <span class="keyword">import</span> os</span><br><span class="line">In [11]: ?os.path.is*</span><br><span class="line">os.path.isabs</span><br><span class="line">os.path.isdir</span><br><span class="line">os.path.isfile</span><br><span class="line">os.path.islink</span><br><span class="line">os.path.ismount</span><br></pre></td></tr></table></figure><p>获取当前命名空间下的所有对象，除了使用通配符的方式以外，也可以使用前面介绍的tab补全方式。 tab补全的方式更加实用一些，就如同IPython提供的获取帮助信息的方式比标准的Python Shell获取帮 助信息更实用一样。在IPython中，可以通过标准的help函数获取对象的帮助信息，也可以使用“？”和 “？？”获取对象的帮助信息，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="keyword">import</span> json</span><br><span class="line">In [<span class="number">13</span>]: <span class="keyword">import</span> os</span><br><span class="line">In [14]: os.path.isfile?</span><br><span class="line">Signature: os.path.isfile(path)</span><br><span class="line">Docstring: Test whether a path <span class="keyword">is</span> a regular file</span><br><span class="line">File: ~/.pyenv/versions/<span class="number">3.8</span><span class="number">.1</span>/lib/python3<span class="number">.8</span>/genericpath.py</span><br><span class="line">Type: function</span><br><span class="line"></span><br><span class="line">In [15]: json.dump?</span><br><span class="line"></span><br><span class="line">Signature:</span><br><span class="line">json.dump(</span><br><span class="line">obj,</span><br><span class="line">fp,</span><br><span class="line">*,</span><br><span class="line">skipkeys=<span class="literal">False</span>,</span><br><span class="line">ensure_ascii=<span class="literal">True</span>,</span><br><span class="line">check_circular=<span class="literal">True</span>,</span><br><span class="line">allow_nan=<span class="literal">True</span>,</span><br><span class="line">cls=<span class="literal">None</span>,</span><br><span class="line">indent=<span class="literal">None</span>,</span><br><span class="line">separators=<span class="literal">None</span>,</span><br><span class="line">default=<span class="literal">None</span>,</span><br><span class="line">sort_keys=<span class="literal">False</span>,</span><br><span class="line">**kw,</span><br><span class="line">)</span><br><span class="line">Docstring:</span><br><span class="line">Serialize ``obj`` <span class="keyword">as</span> a JSON formatted stream to ``fp`` (a</span><br><span class="line">``.write()``-supporting file-like object).</span><br><span class="line"></span><br><span class="line">If ``skipkeys`` <span class="keyword">is</span> true then ``dict`` keys that are <span class="keyword">not</span> basic types</span><br><span class="line">(``str``, ``int``, ``float``, ``bool``, ``<span class="literal">None</span>``) will be skipped</span><br><span class="line">instead of raising a ``TypeError``.</span><br></pre></td></tr></table></figure><p>当我们输入对象名称，再输入一个问号以后按回车键，就会显示相应的帮助信息。如果帮助信息比较 长，则会以分页的方式显示帮助信息。如果因为帮助信息太多而进入了分页页面，可以通过“q”键退出， 退出以后可以继续进行编程。</p><p>例如，json这个标准库下有一个dump函数和一个dumps函数，Python初学者总是容易混淆。这个时 候，如果能够充分利用IPython，就可以方便地获取到帮助信息，使用时不容易犯错。下面就是一个典 型的Python工程师使用json模块的方式，先构造了一个字典，希望将字典转换成json字符串。因为不知 道应该使用json.dump函数还是json.dumps函数，所以，在交互式编程中通过“json.dump?”语句获取dump函数的帮助信息。获取完json.dump函数的帮助信息以后，按“q”键退出，退出以后继续进行编 程。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: <span class="keyword">import</span> json</span><br><span class="line">In [<span class="number">19</span>]: d=dict(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">In [20]: json.dump?</span><br><span class="line">In [<span class="number">21</span>]: json.dumps(d)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'&#123;"a": 1, "b": 2, "c": 3&#125;'</span></span><br></pre></td></tr></table></figure><p>在IPython中，除了使用一个问号获取帮助信息以外，也可以使用两个问号获取帮助信息。两个问号获 取到的帮助信息更加全面，甚至会包含函数的实现源码。</p><p>除了使用问号的方式获取对象的帮助信息以外，IPython还提供了另外一种方式获取对象的信息，可以 分别获取对象的定义、文档和文件等。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: <span class="keyword">import</span> json</span><br><span class="line">In [<span class="number">23</span>]: %pdef json</span><br><span class="line">Object <span class="keyword">is</span> <span class="keyword">not</span> callable.</span><br><span class="line">In [<span class="number">24</span>]: %pdef json.dump</span><br><span class="line">json.dump(</span><br><span class="line">obj,</span><br><span class="line">fp,</span><br><span class="line">*,</span><br><span class="line">skipkeys=<span class="literal">False</span>,</span><br><span class="line">ensure_ascii=<span class="literal">True</span>,</span><br><span class="line">check_circular=<span class="literal">True</span>,</span><br><span class="line">allow_nan=<span class="literal">True</span>,</span><br><span class="line">cls=<span class="literal">None</span>,</span><br><span class="line">indent=<span class="literal">None</span>,</span><br><span class="line">separators=<span class="literal">None</span>,</span><br><span class="line">default=<span class="literal">None</span>,</span><br><span class="line">sort_keys=<span class="literal">False</span>,</span><br><span class="line">**kw,</span><br><span class="line">)</span><br><span class="line">In [<span class="number">25</span>]: %pfile json.dump</span><br><span class="line">In [<span class="number">26</span>]: %pdoc json.dump</span><br><span class="line">In [<span class="number">27</span>]: %pinfo json</span><br></pre></td></tr></table></figure><h5 id="（4）magic函数"><a class="header-anchor" href="#（4）magic函数">¶</a>（4）magic函数</h5><p>IPython提供了很多功能强大的函数，如前面已经提到的%pfile、%pdoc、%pinfo等。为了区分 IPython提供的函数和用户的输入，所有IPython提供的函数都以“%”开头。以“%”开头的这类功能强大的 函数，在IPython中称为magic函数。magic函数主要是为IPython提供增强的功能、与操作系统交互、 操纵用户的输入和输出以及对IPython进行配置。</p><p>IPython会将任何第一个字母为“%”的行，视为对magic函数的特殊调用。因此，所有的magic函数都是 以“%”开头。在IPython中，有两种不同的方法可以获取magic函数列表，分别是通过“%”获取所有的 magic函数和通过“%lsmagic”获取所有的magic函数。</p><p>下面是一个用lsmagic函数获取magic函数列表的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: %lsmagic</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">Available line magics:</span><br><span class="line">%alias %alias_magic %autoawait %autocall %autoindent %automagic</span><br><span class="line">%bookmark %cat %cd %clear %colors %conda %config %cp %cpaste</span><br><span class="line">%debug %dhist %dirs %doctest_mode %ed %edit %env %gui %hist</span><br><span class="line">%history %killbgscripts %ldir %less %lf %lk %ll %load %load_ext</span><br><span class="line">%loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic</span><br><span class="line">%lx %macro %magic %man %matplotlib %mkdir %more %mv %notebook</span><br><span class="line">%page %paste %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %pip</span><br><span class="line">%popd %pprint %precision %prun %psearch %psource %pushd %pwd %pycat</span><br><span class="line">%pylab %quickref %recall %rehashx %reload_ext %rep %rerun %reset</span><br><span class="line">%reset_selective %rm %rmdir %run %save %sc %set_env %store %sx</span><br><span class="line">%system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos</span><br><span class="line">%xdel %xmode</span><br><span class="line"></span><br><span class="line">Available cell magics:</span><br><span class="line">%%! %%HTML %%SVG %%bash %%capture %%debug %%file %%html %%javascript</span><br><span class="line">%%js %%latex %%markdown %%perl %%prun %%pypy %%python %%python2</span><br><span class="line">%%python3 %%ruby %%script %%sh %%svg %%sx %%system %%time %%timeit</span><br><span class="line">%%writefile</span><br><span class="line"></span><br><span class="line">Automagic <span class="keyword">is</span> ON, % prefix IS NOT needed <span class="keyword">for</span> line magics.</span><br></pre></td></tr></table></figure><p>可以看到，IPython提供了很多magic函数。并且，随着IPython的功能越来越多，magic函数还会不断 增加。那么，有没有一种好的方法能够快速了解magic函数的用法呢？前面介绍的通过问号获取对象帮 助信息的方法对magic函数也适用。因此，只要输入一个magic函数，后面再输入一个问号，回车以后 就能够看到这个magic函数的帮助信息。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [29]: %save?</span><br><span class="line">Docstring:</span><br><span class="line">Save a set of lines <span class="keyword">or</span> a macro to a given filename.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">%save [options] filename n1-n2 n3-n4 ... n5 .. n6 ...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">     </span><br><span class="line">-r: use <span class="string">'raw'</span> input. By default, the <span class="string">'processed'</span> history <span class="keyword">is</span> used,so that magics are loaded <span class="keyword">in</span> their transformed version to validPython. If this option <span class="keyword">is</span> given, the raw input <span class="keyword">as</span> typed <span class="keyword">as</span> thecommand line <span class="keyword">is</span> used instead.</span><br><span class="line"></span><br><span class="line">-f: force overwrite. If file exists, %save will prompt <span class="keyword">for</span> overwriteunless -f <span class="keyword">is</span> given.</span><br><span class="line"></span><br><span class="line">-a: append to the file instead of overwriting it.</span><br><span class="line">:</span><br></pre></td></tr></table></figure><p>IPython的官方文档将magic函数分为三类，分别是：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）操作代码的magic函数，如<span class="comment">%run、%edit、%save、%macro、%recall；</span></span><br><span class="line">2）控制IPython的magic函数，如<span class="comment">%colors、%xmode、%autoindent、%automagic；</span></span><br><span class="line">3）其他magic函数，如<span class="comment">%reset、%timeit、%%writefile、%load、%paste。</span></span><br></pre></td></tr></table></figure><p>为了演示magic函数的使用，我们来看一个实际的例子。假设你是一名DBA，并且非常喜欢Python这门 编程语言，会经常使用Python管理MySQL。因此，你经常需要使用Python连接MySQL执行SQL语句 （Python连接MySQL的知识将在11章介绍）。使用Python执行SQL语句，对于普通的查询语句，返回 的结果将是一个二维的元组。但是，如果执行的是一些管理类的SQL语句或者监控类的SQL语句， Python驱动将会以怎样的方式返回MySQL的查询结果呢？</p><p>例如，需要执行下面的SQL语句，并获取返回结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>；</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>；</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%innodb%buffer%'</span>；</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'%select%'</span>；</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_buffer_pool_dump_pct = <span class="number">30</span>；</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> . <span class="keyword">TO</span> [<span class="string">'lmx'</span>@<span class="string">'localhost'</span>](mailto:<span class="string">'lmx'</span>@<span class="string">'localhost'</span>)</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>。</span><br></pre></td></tr></table></figure><p>为了得到Python执行上面SQL语句的结果，需要在Python中连接MySQL并进行认证。认证完成以后执 行SQL语句获取输出。由于你经常需要验证SQL语句，因此，使用Python连接MySQL并认证这些代码需 要反复输入。为了节省输入时间，我们可以将Python连接MySQL并认证的逻辑保存到外部文件中，在 需要的时候通过%load这个magic函数将外部代码导入到IPython中执行即可。例如，我们在一个名为 connect.py的外部文件中保存了连接MySQL的代码，在Ipython中使用%load导入外部Python文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: %load connect.py</span><br><span class="line">     </span><br><span class="line">In [<span class="number">31</span>]: <span class="keyword">import</span> MySQLdb <span class="keyword">as</span> db</span><br><span class="line">conn = db.connect(host=<span class="string">"localhost"</span>, db=<span class="string">"test"</span>, user=<span class="string">'lmx'</span>,</span><br><span class="line">passwd=<span class="string">'my_passwd'</span>, unix_socket=<span class="string">'/tmp/mysql.sock'</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">sql = <span class="string">"select 1"</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">print</span> rows</span><br><span class="line">((<span class="number">1L</span>,),)</span><br></pre></td></tr></table></figure><p>使用%load命令导入外部的Python文件并执行以后，可以继续使用已经建立的MySQL连接执行SQL语 句。这个例子主要用以演示magic函数的用法，IPython提供了大量的magic函数，每一个magic函数的 具体用法都可以通过问号表达式获取相应的帮助文档。</p><h5 id="（5）保存历史"><a class="header-anchor" href="#（5）保存历史">¶</a>（5）保存历史</h5><p>保存编码历史这方面，IPython相比标准的Python Shell有了质的提升。用户可以非常灵活地操作 IPython的输入历史和输出历史。下面我们简单看几个例子：</p><blockquote><p>_i, _ii, _iii 分别保存了最近的三次输入； _, , _ 分别保存了最近的三次输出； 可以像Bash一样，通 过ctrl+p, ctrl+n查找输入； 可以像Bash一样，使用ctrl+r进行反向查找； IPython的输入历史在 当前会话退出以后会进行持久化，下一次进入IPython时，依然可以查找前一次会话的输入历史； %edit IPython可以通过%edit编辑历史输入并重新执行； %save IPython可以通过%save将 IPython中的代码保存到程序文件中； %rerun IPython可以指定代码行数重新运行；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: %rerun <span class="number">21</span></span><br><span class="line">=== Executing: ===</span><br><span class="line">json.dumps(d)</span><br><span class="line">=== Output: ===</span><br><span class="line">Out[<span class="number">32</span>]: <span class="string">'&#123;"a": 1, "b": 2, "c": 3&#125;'</span></span><br></pre></td></tr></table></figure><h5 id="（6）与操作系统交互"><a class="header-anchor" href="#（6）与操作系统交互">¶</a>（6）与操作系统交互</h5><p>IPython比标准的Python Shell好用的另一个理由是，它能够更好地与操作系统进行交互。在使用 Python进行交互式编程时，不用退出Python Shell就可以执行Linux命令。magic函数里的%cd和%pwd 作用相当于Linux下的cd命令和pwd命令。此外，在IPython中，可以通过“!cmd”的形式执行任何Linux 命令。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: %ls</span><br><span class="line">anaconda-ks.cfg initial-setup-ks.cfg Python<span class="number">-3.8</span><span class="number">.1</span>/ Python<span class="number">-3.8</span><span class="number">.1</span>.tgz</span><br><span class="line">In [<span class="number">34</span>]: %pwd</span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">'/root'</span></span><br><span class="line">In [<span class="number">35</span>]: ! wc -l /tmp/storage.log</span><br><span class="line"><span class="number">0</span> /tmp/storage.log</span><br></pre></td></tr></table></figure><p>也可以通过赋值的方式捕获命令的输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: data=!df</span><br><span class="line">In [<span class="number">37</span>]: data</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">[<span class="string">'文件系统    1K-块      已用      可用       已用%      挂载点'</span>,</span><br><span class="line"><span class="string">'/dev/mapper/centos-root 17811456 6060988  11750468   35%  /'</span>,</span><br><span class="line"><span class="string">'devtmpfs 480872               0  480872     0%    /dev'</span>,</span><br><span class="line"><span class="string">'tmpfs 497948               0  497948     0% /dev/shm'</span>,</span><br><span class="line"><span class="string">'tmpfs                   497948            8696  489252     2% /run'</span>,</span><br><span class="line"><span class="string">'tmpfs                   497948               0  497948     0%      /sys/fs/cgroup'</span>,</span><br><span class="line"><span class="string">'/dev/sda1               1038336         169504  868832     17% /boot'</span>,</span><br><span class="line"><span class="string">'tmpfs                   99592               64  99528      1%      /run/user/1000'</span>,</span><br><span class="line"><span class="string">'tmpfs                   99592                0  99592      0% /run/user/0'</span>]</span><br><span class="line">In [<span class="number">38</span>]: data[<span class="number">1</span>].split()[<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">38</span>]: <span class="string">'35%'</span></span><br></pre></td></tr></table></figure><p>在Python生态中，除了IPython这个增强的Python Shell以外，还有bython和ptpython这两个不错的 Python Shell。后面这两个工具都有自己的特色，但是都没有IPython使用广泛。而且，由于IPython使 用最为广泛，很多开源项目（如流行的爬虫框架Scrapy）对IPython进行了集成，所以，建议读者学习 IPython。</p><h4 id="3-3、-jupyter的使用"><a class="header-anchor" href="#3-3、-jupyter的使用">¶</a>3.3、 jupyter的使用</h4><h5 id="（1）、jupyter介绍"><a class="header-anchor" href="#（1）、jupyter介绍">¶</a>（1）、jupyter介绍</h5><p>jupyter就是以前的IPython Notebook，是一种新兴的交互式数据分析与记录工具。它通过浏览器访问 本地或者远端的IPython进程，并利用浏览器的图形界面，增强IPython的可视化输出。jupyter定义了 一种全新的文件格式，文件的后缀名是ipynb。ipynb文件包含了代码，用以说明每一步的计算和输出。 也就是说，ipynb文件完整记录了计算过程中的所有相关信息，并且，能够支持图片、视频和公式等副 文本格式，是科学计算、数据分析和编程教学的优秀工具。</p><p>正是由于jupyter丰富的可视化输出，其广泛应用于以下场景：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">编程教学；</span><br><span class="line">数据分析；</span><br><span class="line">科学计算；</span><br><span class="line">幻灯片演示。</span><br></pre></td></tr></table></figure><h5 id="（2）、-jupyter-notebook的使用"><a class="header-anchor" href="#（2）、-jupyter-notebook的使用">¶</a>（2）、 jupyter notebook的使用</h5><p>IPython Shell与jupyter分离以后，jupyter需要额外进行安装。直接使用pip安装即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pip install jupyter</span><br><span class="line">Looking in indexes: https://pypi.douban.com/simple/</span><br><span class="line">Collecting jupyter</span><br><span class="line">Downloading</span><br><span class="line">https://pypi.doubanio.com/packages/83/df/0f5dd132200728a86190397e1ea87cd762</span><br><span class="line">44e42d39ec5e88efd25b2abd7e/jupyter-1.0.0-py2.py3-none-any.whl</span><br><span class="line">……省略部分信息</span><br><span class="line">Successfully installed MarkupSafe-1.1.1 Send2Trash-1.5.0 attrs-19.3.0</span><br><span class="line">bleach-3.1.0 defusedxml-0.6.0 entrypoints-0.3 ipykernel-5.1.3 ipywidgets7.5.1 jinja2-2.10.3 jsonschema-3.2.0 jupyter-1.0.0 jupyter-client-5.3.4</span><br><span class="line">jupyter-console-6.0.0 jupyter-core-4.6.1 mistune-0.8.4 nbconvert-5.6.1</span><br><span class="line">nbformat-5.0.3 notebook-6.0.2 pandocfilters-1.4.2 prometheus-client-0.7.1</span><br><span class="line">prompt-toolkit-2.0.10 pyrsistent-0.15.7 python-dateutil-2.8.1 pyzmq-18.1.1</span><br><span class="line">qtconsole-4.6.0 terminado-0.8.3 testpath-0.4.4 tornado-6.0.3 webencodings0.5.1 widgetsnbextension-3.5.1</span><br></pre></td></tr></table></figure><p>由于我们是在Linux下安装jupyter，如果我们的Linux没有图形界面，可以通过设置–no-browser和设 置–ip=0.0.0.0进行外部访问，如果不指定–ip参数，默认IP是localhost，也就是只有本地才能访问。如 下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# jupyter notebook --no-browser --ip=0.0.0.0 --allow-root</span><br><span class="line">[I 13:06:33.656 NotebookApp] 启动notebooks 在本地路径: /root</span><br><span class="line">[I 13:06:33.657 NotebookApp] 本程序运行在: http://localhost:8888/?</span><br><span class="line">token=33fdb8256c7c1d13a23b8189ea0f4e7b7f434f14cc07ea5e</span><br><span class="line">[I 13:06:33.657 NotebookApp] or http://127.0.0.1:8888/?</span><br><span class="line">token=33fdb8256c7c1d13a23b8189ea0f4e7b7f434f14cc07ea5e</span><br><span class="line">[I 13:06:33.657 NotebookApp] 使用control-c停止此服务器并关闭所有内核(两次跳过确认).</span><br><span class="line">[C 13:06:33.727 NotebookApp]</span><br><span class="line"></span><br><span class="line">To access the notebook, open this file in a browser:</span><br><span class="line">file:///root/.local/share/jupyter/runtime/nbserver-3998-open.html</span><br><span class="line">Or copy and paste one of these URLs:</span><br><span class="line">http://localhost:8888/?</span><br><span class="line">token=33fdb8256c7c1d13a23b8189ea0f4e7b7f434f14cc07ea5e</span><br><span class="line">or http://127.0.0.1:8888/?</span><br><span class="line">token=33fdb8256c7c1d13a23b8189ea0f4e7b7f434f14cc07ea5e</span><br></pre></td></tr></table></figure><p>从jupyter notebook的输出结果可以看到，jupyter notebook命令给出了一个URL，我们只需将该URL 拷贝至浏览器中，然后将0.0.0.0替换为Linux服务器的IP即可。</p><blockquote><p>在Windows下可以使用远程连接工具xmanager来操作</p></blockquote><p>通过浏览器访问jupyter给我们的URL，就可以登录到jupyter的主界面。这个界面会显示当前目录下的 所有文件<br><img data-src="https://img-blog.csdnimg.cn/20200427203400246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>登录jupyter的主界面后，我们如果要创建一个文件，只需要单击“新建”，选择你希望启动的Notebook 类型即可。我们选择Python 3。选择Python 3以后，浏览器会打开一个新的页面。在这个新的页面中， 可以看到一个空的Notebook界面。</p><p>jupyter界面由以下部分组成：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标题栏</span><br><span class="line">菜单栏</span><br><span class="line">快捷键</span><br><span class="line">编辑区</span><br></pre></td></tr></table></figure><p>在菜单栏中有一个“帮助”选项，读者可以通过该选项得到jupyter的使用说明。jupyter本身是图形界面的 应用，使用比较简单，因此，本教程不会花很多篇幅来介绍jupyter的使用。<br><img data-src="https://img-blog.csdnimg.cn/20200427203426132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在jupyter的编辑区中默认有一个输入框。输入框在jupyter中称为cell。我们可以通过菜单栏的“cell”选项 控制cell的格式、执行cell的代码。与此同时，我们也可以通过快捷键控制cell，如ctrl+enter快捷键用以 执行cell中的代码，shift+enter快捷键用以执行当前cell中的代码，并且在当前cell下方创建一个新的 cell。<br><img data-src="https://img-blog.csdnimg.cn/20200427203444853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>jupyter之所以能够进行编程教学和幻灯片演示，是因为它可以支持富文本格式和markdown格式。我们 只需修改cell的类型为“Markdown”，就可以在cell中使用markdown语句进行输入了。我们也可以在 jupyter中画图。为了在jupyter中画图，我们需要先安装matplotlib。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pip install matplotlib</span><br><span class="line">Looking in indexes: https://pypi.douban.com/simple/</span><br><span class="line">Collecting matplotlib</span><br><span class="line">Downloading</span><br><span class="line">https://pypi.doubanio.com/packages/53/6c/7b400d45f0ecd6703b2779a7dfda657857</span><br><span class="line">9a353748e1b43d8353cb7f5b7f/matplotlib-3.1.2-cp38-cp38-manylinux1_x86_64.whl</span><br><span class="line">(13.1MB)</span><br><span class="line">|████████████████████████████████| 13.1MB 1.8MB/s</span><br><span class="line">……省略部分信息</span><br><span class="line">Installing collected packages: kiwisolver, numpy, pyparsing, cycler,</span><br><span class="line">matplotlib</span><br><span class="line">Successfully installed cycler-0.10.0 kiwisolver-1.1.0 matplotlib-3.1.2</span><br><span class="line">numpy-1.18.1 pyparsing-2.4.6</span><br></pre></td></tr></table></figure><p>安装matplotlib以后就可以在jupyter中画图了，下面给出了一个jupyter使用的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">x = numpy.arange(<span class="number">11</span>)</span><br><span class="line">y = x**<span class="number">2</span></span><br><span class="line">plt.plot(x, y)</span><br></pre></td></tr></table></figure><p>运行结果如下图：<br><img data-src="https://img-blog.csdnimg.cn/20200427203507236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="四、Python工作环境管理"><a class="header-anchor" href="#四、Python工作环境管理">¶</a>四、Python工作环境管理</h3><p>Python 2和Python 3之间存在着较大的差异，并且，由于各种原因导致了Python 2和Python 3的长期 共存。在实际工作过程中，我们可能会同时用到Python 2和Python 3，因此，需要经常在Python 2和 Python 3之间进行来回切换。此外，如果你是喜欢尝鲜的人，那么，你很有可能在Python新版本出来 的时候立即下载Python的版本，试验Python的特性。</p><p>在Python世界里，除了需要对Python的版本进行管理以外，还需要对不同的软件包进行管理。大部分 情况下，对于开源的库我们使用***版本即可。但是，有时候可能需要对相同的Python版本，在不同的 项目中使用不同版本的软件包。</p><p>在这一节里，我们将介绍两个工具，即pyenv和virtualenv。前者用于管理不同的Python版本，后者用 于管理不同的工作环境。有了这两个工具，Python相关的版本问题将不再是问题。</p><h4 id="4-1、使用pyenv管理不同的Python版本"><a class="header-anchor" href="#4-1、使用pyenv管理不同的Python版本">¶</a>4.1、使用pyenv管理不同的Python版本</h4><p>安装不同的Python版本并不是一件容易的事情，在不同的Python版本之间来回切换更加困难，而且， 多版本并存非常容易互相干扰。因此，我们需要一个名为pyenv的工具。pyenv是一个Python版本管理 工具，它能够进行全局的Python版本切换，也可以为单个项目提供对应的Python版本。使用pyenv以 后，可以在服务器上安装多个不同的Python版本，也可以安装不同的Python实现。不同Python版本之 间的切换也非常简单。接下来我们就一起看一下pyenv的安装和使用。</p><h5 id="1、-pyenv的安装"><a class="header-anchor" href="#1、-pyenv的安装">¶</a>1、.pyenv的安装</h5><p>我们直接从GitHub下载项目到本地，然后，分别执行以下命令进行安装即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .pip]# yum -y install git</span><br><span class="line">[root@localhost .pip]# git clone https://github.com/yyuu/pyenv.git ～/.pyenv</span><br><span class="line"></span><br><span class="line">正克隆到 '～/.pyenv'...</span><br><span class="line">remote: Enumerating objects: 8, done.</span><br><span class="line">remote: Counting objects: 100% (8/8), done.</span><br><span class="line">remote: Compressing objects: 100% (8/8), done.</span><br><span class="line">remote: Total 17600 (delta 2), reused 2 (delta 0), pack-reused 17592</span><br><span class="line">接收对象中: 100% (17600/17600), 3.44 MiB | 601.00 KiB/s, done.</span><br><span class="line">处理 delta 中: 100% (11954/11954), done.</span><br><span class="line"></span><br><span class="line">[root@localhost .pip]# echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt;</span><br><span class="line">～/.bash_profile</span><br><span class="line">[root@localhost .pip]# echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt;</span><br><span class="line">～/.bash_profile</span><br><span class="line">[root@localhost .pip]# echo 'eval "$(pyenv init -)"' &gt;&gt;～/.bash_profile</span><br></pre></td></tr></table></figure><p>安装完成以后需要重新载入配置文件，或者退出以后重新登录，以使～/.bash_profile中的配置生效。 笔者一般选择使用source命令重新载入配置文件，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .pip]# source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>至此，pyenv就安装完成了，我们可以通过下面的命令验证pyenv是否正确安装并获取pyenv的帮助信 息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv --help</span><br><span class="line">Usage: pyenv &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful pyenv commands are:</span><br><span class="line">commands List all available pyenv commands</span><br><span class="line">commands List all available pyenv commands</span><br><span class="line">exec Run an executable with the selected Python version</span><br><span class="line">global Set or show the global Python version</span><br><span class="line">help Display help for a command</span><br><span class="line">hooks List hook scripts for a given pyenv command</span><br><span class="line">init Configure the shell environment for pyenv</span><br><span class="line">install Install a Python version using python-build</span><br><span class="line">local Set or show the local application-specific Python version</span><br><span class="line">prefix Display prefix for a Python version</span><br><span class="line">rehash Rehash pyenv shims (run this after installing executables)</span><br><span class="line">root Display the root directory where versions and shims are kept</span><br><span class="line">shell Set or show the shell-specific Python version</span><br><span class="line">shims List existing pyenv shims</span><br><span class="line">uninstall Uninstall a specific Python version</span><br><span class="line">version Show the current Python version and its origin</span><br><span class="line">--version Display the version of pyenv</span><br><span class="line">version-file Detect the file that sets the current pyenv version</span><br><span class="line">version-name Show the current Python version</span><br><span class="line">version-origin Explain how the current Python version is set</span><br><span class="line">versions List all Python versions available to pyenv</span><br><span class="line">whence List all Python versions that contain the given executable</span><br><span class="line">which Display the full path to an executable</span><br><span class="line"></span><br><span class="line">See `pyenv help &lt;command&gt;' for information on a specific command.</span><br><span class="line">For full documentation, see: https://github.com/pyenv/pyenv#readme</span><br></pre></td></tr></table></figure><h5 id="2、pyenv的使用"><a class="header-anchor" href="#2、pyenv的使用">¶</a>2、pyenv的使用</h5><p>我们通过pyenv的install命令，可以查看pyenv当前支持哪些Python版本，如下所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv install --list</span><br><span class="line">Available versions:</span><br><span class="line">2.1.3</span><br><span class="line">……省略部分信息</span><br><span class="line">3.8.0</span><br><span class="line">3.8-dev</span><br><span class="line">3.8.1</span><br><span class="line">3.9-dev</span><br><span class="line">……省略部分信息</span><br><span class="line">anaconda3-2018.12</span><br><span class="line">anaconda3-2019.03</span><br><span class="line">anaconda3-2019.07</span><br><span class="line">anaconda3-2019.10</span><br><span class="line">……省略部分信息</span><br></pre></td></tr></table></figure><p>由于pyenv可以安装的Python版本列表非常长，所以，这里进行了省略。读者可以在自己电脑上安装 pyenv，然后执行pyenv install --list命令进行查看。可以看到，pyenv不但可以安装不同的Python版 本，而且还可以安装不同的Python实现，也可以安装***版本的Python用以学习。</p><p>查看当前系统中包含的Python版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv versions</span><br><span class="line">* system (set by /root/.pyenv/version)</span><br></pre></td></tr></table></figure><p>使用pyenv安装不同的Python版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv install -v 3.6.0</span><br><span class="line">pyenv install -v 2.7.13</span><br></pre></td></tr></table></figure><p>再次查看当前系统中包含的Python版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv versions</span><br><span class="line">* system (set by /root/.pyenv/version)</span><br><span class="line">2.7.13</span><br><span class="line">3.8.1</span><br></pre></td></tr></table></figure><p>由于我们安装了2个Python版本，加上我们系统自身的Python，当前系统中存在3个不同的Python版 本。其中，输出结果前面的“*”表示当前正在使用的版本。我们也可以通过pyenv global选择不同的 Python版本，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv global 3.8.1</span><br><span class="line">[root@localhost ~]# pyenv versions</span><br><span class="line">system</span><br><span class="line">2.7.13</span><br><span class="line">* 3.8.1 (set by /root/.pyenv/version)</span><br><span class="line">[root@localhost ~]# python</span><br><span class="line">Python 3.8.1 (default, Jan 14 2020, 12:20:36)</span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">exit</span>()</span></span><br><span class="line">[root@localhost ~]# pyenv global 2.7.13</span><br><span class="line">[root@localhost ~]# python</span><br><span class="line">Python 2.7.13 (default, Jan 14 2020, 12:27:38)</span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>使用pyenv以后，可以快速切换Python的版本。切换Python版本以后，与版本相关的依赖也会一起切 换。因此，我们不用担心不同的版本在系统中是否会相互干扰。例如，切换Python版本以后，相应的 pip也会跟着切换，所以不用担心自己使用的pip版本和Python版本不匹配的问题，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv global 3.8.1</span><br><span class="line">[root@localhost ~]# pip --version</span><br><span class="line">pip 19.2.3 from /root/.pyenv/versions/3.8.1/lib/python3.8/site-packages/pip</span><br><span class="line">(python 3.8)</span><br></pre></td></tr></table></figure><p>如果想要删除Python版本，使用uninstall命令即可。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv uninstall 2.7.10</span><br></pre></td></tr></table></figure><h4 id="4-2、-使用virtualenv管理不同的项目"><a class="header-anchor" href="#4-2、-使用virtualenv管理不同的项目">¶</a>4.2、 使用virtualenv管理不同的项目</h4><p>virtualenv本身是一个独立的项目，用以隔离不同项目的工作环境。例如，用户lmx希望在项目A中使用 Flask 0.8这个版本，与此同时，又想在项目B中使用Flask 0.9这个版本。如果我们全局安装Flask，必然 无法满足用户的需求。这个时候，我们就可以使用virtualenv。</p><p>读者需要注意pyenv和virtualenv的区别。pyenv用以管理不同的Python版本，例如，你的系统工作时 使用Python 2.7.13，学习时使用Python 3.6.0。virtualenv用以隔离项目的工作环境，例如，项目A和 项目B都是使用Python 2.7.13，但是，项目A需要使用Flask 0.8版本，项目B需要使用Flask 0.9版本。我 们只要组合pyenv和virtualenv这两个工具，就能够构造Python和第三方库的任意版本组合，拥有很好 的灵活性，也避免了项目之间的相互干扰。</p><p>virtualenv本身是一个独立的工具，用户可以不使用pyenv而单独使用virtualenv。但是，如果你使用了 pyenv，就需要安装pyenv-virtualenv插件，而不是通过virtualenv软件使用virtualenv的功能。</p><h5 id="1、pyenv-virtualenv的安装"><a class="header-anchor" href="#1、pyenv-virtualenv的安装">¶</a>1、pyenv-virtualenv的安装</h5><p>安装和使用pyenv-virtualenv插件如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# git clone https://github.com/yyuu/pyenv-virtualenv.git</span><br><span class="line"><span class="meta">$</span><span class="bash">(pyenv root)/plugins/pyenv-virtualenv</span></span><br><span class="line">正克隆到 '/root/.pyenv/plugins/pyenv-virtualenv'...</span><br><span class="line">remote: Enumerating objects: 2064, done.</span><br><span class="line">remote: Total 2064 (delta 0), reused 0 (delta 0), pack-reused 2064</span><br><span class="line">接收对象中: 100% (2064/2064), 580.31 KiB | 264.00 KiB/s, done.</span><br><span class="line">处理 delta 中: 100% (1413/1413), done.</span><br><span class="line">[root@localhost ~]# echo 'eval "$(pyenv virtualenv-init -)"'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;~/.bash_profile</span></span><br></pre></td></tr></table></figure><p>与安装pyenv类似，安装完成以后需要重新载入配置文件，或者退出用户再登录，以使得配置文件生 效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# source ~/.bash_profile</span><br><span class="line">[root@localhost ~]# pyenv help virtualenv</span><br><span class="line">Usage: pyenv virtualenv [-f|--force] [VIRTUALENV_OPTIONS] [version]</span><br><span class="line">&lt;virtualenv-name&gt;</span><br><span class="line">pyenv virtualenv --version</span><br><span class="line">pyenv virtualenv --help</span><br><span class="line">     -f/--force Install even if the version appears to be installed</span><br><span class="line">already</span><br></pre></td></tr></table></figure><h5 id="2、pyenv-virtualenv的使用"><a class="header-anchor" href="#2、pyenv-virtualenv的使用">¶</a>2、pyenv-virtualenv的使用</h5><p>有了pyenv-virtualenv以后，我们可以为同一个Python解释器，创建多个不同的工作环境。例如，我们 新建两个工作环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv virtualenv 3.8.1 first_project</span><br><span class="line">[root@localhost ~]# pyenv virtualenv 3.8.1 second_project</span><br></pre></td></tr></table></figure><p>可以使用virtualenvs子命令查看工作环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv virtualenvs</span><br><span class="line">3.8.1/envs/first_project (created from /root/.pyenv/versions/3.8.1)</span><br><span class="line">3.8.1/envs/second_project (created from /root/.pyenv/versions/3.8.1)</span><br><span class="line">first_project (created from /root/.pyenv/versions/3.8.1)</span><br><span class="line">second_project (created from /root/.pyenv/versions/3.8.1)</span><br></pre></td></tr></table></figure><p>创建完工作环境以后，可以通过activate和deactivate子命令进入或退出一个工作环境。进入工作环境 以后，左边的提示符会显示你当前所在的工作环境，以免因为环境太多导致操作错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv activate first_project</span><br><span class="line">pyenv-virtualenv: prompt changing will be removed from future release.</span><br><span class="line">configure `export PYENV_VIRTUALENV_DISABLE_PROMPT=1' to simulate the</span><br><span class="line">behavior.</span><br><span class="line">(first_project) [root@localhost ~]# pip install flask==1.1.1</span><br><span class="line">Looking in indexes: https://pypi.douban.com/simple/</span><br><span class="line">Collecting flask</span><br><span class="line">Downloading</span><br><span class="line">https://pypi.doubanio.com/packages/9b/93/628509b8d5dc749656a9641f4caf13540e</span><br><span class="line">2cdec85276964ff8f43bbb1d3b/Flask-1.1.1-py2.py3-none-any.whl (94kB)</span><br><span class="line">|████████████████████████████████| 102kB 4.7MB/s</span><br><span class="line">……省略部分信息</span><br><span class="line">Successfully installed Jinja2-2.10.3 MarkupSafe-1.1.1 Werkzeug-0.16.0</span><br><span class="line">click-7.0 flask-1.1.1 itsdangerous-1.1.0</span><br><span class="line">(first_project) [root@localhost ~]# pyenv deactivate</span><br></pre></td></tr></table></figure><p>接下来，我们看一下在不同的工作环境安装不同的Flask版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv activate first_project</span><br><span class="line">(first_project) [root@localhost ~]# pip install flask==1.1.1</span><br><span class="line">(first_project) [root@localhost ~]# pyenv deactivate</span><br><span class="line"></span><br><span class="line">(second_project) [root@localhost ~]# pip install flask==0.10.1</span><br></pre></td></tr></table></figure><p>如果想要删除虚拟环境，则使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(first_project) [root@localhost ~]# pyenv virtualenv-delete first_project</span><br></pre></td></tr></table></figure><p>使用pyenv和python-virtualenv插件，我们就能够自由地在不同的版本之间进行切换，相比管理Python 版本，不但节省了时间，也避免了工作过程中的相互干扰。</p>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型之字典</title>
    <link href="https://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8.html"/>
    <id>https://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-27T14:41:05.001Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python数据类型之字典"><a class="header-anchor" href="#Python数据类型之字典">¶</a>Python数据类型之字典</h4><h4 id="字典的语法"><a class="header-anchor" href="#字典的语法">¶</a>字典的语法</h4><p>键值对形式，键值之间用“:”分隔，键值对包含在一个”{}“里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#之前的数据类型都是与变量所关联</span></span><br><span class="line">name = <span class="string">'bily'</span> <span class="comment">#字符串类型</span></span><br><span class="line">name = <span class="number">89</span>  <span class="comment">#数字类型</span></span><br><span class="line">key = <span class="number">88.8</span></span><br><span class="line">list = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  <span class="comment">#列表类型</span></span><br><span class="line">tuple = (<span class="number">6</span>,<span class="number">4</span>,<span class="number">68</span>)  <span class="comment">#元组</span></span><br><span class="line"><span class="comment">#字典的例子</span></span><br><span class="line"><span class="comment">#字典存放的数据更大</span></span><br><span class="line"><span class="comment">#平常查字典的时候目录和页数是对应的</span></span><br><span class="line"><span class="comment">#在python中叫做键和值</span></span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br></pre></td></tr></table></figure><p>键是唯一、无序的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>,<span class="string">'age'</span>:<span class="string">'33'</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'33'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;  <span class="comment">#后面的替换了前面的</span></span><br></pre></td></tr></table></figure><p>键值可以是数字、字符串、元组，一般用于字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="number">1</span>:<span class="number">101</span>,<span class="number">2</span>:<span class="number">102</span>&#125;</span><br><span class="line">print(dict1)</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">101</span>, <span class="number">2</span>: <span class="number">102</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="简单的字典"><a class="header-anchor" href="#简单的字典">¶</a>简单的字典</h4><p>字典的访问：字典名称[键]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义字典</span></span><br><span class="line">dict2 = &#123;<span class="string">'河北'</span>:<span class="string">'邯郸'</span>,<span class="string">'甘肃'</span>:<span class="string">'兰州'</span>,<span class="string">'四川'</span>:<span class="string">'成都'</span>&#125;</span><br><span class="line"><span class="comment">#对字典进行访问（取值）===&gt;   值=字典名称[键]</span></span><br><span class="line">hd = dict2[<span class="string">'河北'</span>]</span><br><span class="line">print(hd)</span><br><span class="line">邯郸</span><br></pre></td></tr></table></figure><p>添加键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加键值对（字典的数据）</span></span><br><span class="line">dict2[<span class="string">'山西'</span>] = <span class="string">'太原'</span></span><br><span class="line">print(dict2)</span><br><span class="line">&#123;<span class="string">'河北'</span>: <span class="string">'邯郸'</span>, <span class="string">'甘肃'</span>: <span class="string">'兰州'</span>, <span class="string">'四川'</span>: <span class="string">'成都'</span>, <span class="string">'山西'</span>: <span class="string">'太原'</span>&#125;</span><br></pre></td></tr></table></figure><p>修改字典的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改字典的值</span></span><br><span class="line">dict2[<span class="string">'河北'</span>] = <span class="string">'邢台'</span></span><br><span class="line">print(dict2)</span><br><span class="line">&#123;<span class="string">'河北'</span>: <span class="string">'邢台'</span>, <span class="string">'甘肃'</span>: <span class="string">'兰州'</span>, <span class="string">'四川'</span>: <span class="string">'成都'</span>, <span class="string">'山西'</span>: <span class="string">'太原'</span>&#125;</span><br></pre></td></tr></table></figure><p>删除键值对：del</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除字典的键值对</span></span><br><span class="line"><span class="keyword">del</span> dict2[<span class="string">'四川'</span>]</span><br><span class="line">print(dict2)</span><br><span class="line">&#123;<span class="string">'河北'</span>: <span class="string">'邢台'</span>, <span class="string">'甘肃'</span>: <span class="string">'兰州'</span>, <span class="string">'山西'</span>: <span class="string">'太原'</span>&#125;</span><br></pre></td></tr></table></figure><p>除了这个横向排序，还可以纵向排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'张三'</span>,</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'男'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="string">'20'</span>,</span><br><span class="line">    <span class="string">'phone'</span>:<span class="string">'13813812138'</span></span><br><span class="line">&#125;</span><br><span class="line">print(student)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'张三'</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>, <span class="string">'phone'</span>: <span class="string">'13813812138'</span>&#125;</span><br><span class="line"></span><br><span class="line">shell = &#123;</span><br><span class="line">    <span class="string">'pwd'</span>:<span class="string">'显示当前目录'</span>,</span><br><span class="line">    <span class="string">'cd'</span>:<span class="string">'切换目录'</span>,</span><br><span class="line">    <span class="string">'mv'</span>:<span class="string">'移动文件或目录'</span>,</span><br><span class="line">    <span class="string">'mkdir'</span>:<span class="string">'创建目录'</span>,</span><br><span class="line">    <span class="string">'cp'</span>:<span class="string">'复制文件或目录'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> shell:</span><br><span class="line">    print(i+<span class="string">'：'</span>+shell[i])</span><br><span class="line">pwd：显示当前目录</span><br><span class="line">cd：切换目录</span><br><span class="line">mv：移动文件或目录</span><br><span class="line">mkdir：创建目录</span><br><span class="line">cp：复制文件或目录</span><br></pre></td></tr></table></figure><h4 id="遍历字典"><a class="header-anchor" href="#遍历字典">¶</a>遍历字典</h4><p>遍历所有的键值对：</p><p>key</p><p>value</p><p>items()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个字典</span></span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line"><span class="comment">#遍历字典：键值对的集合、键的集合、值的集合</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dict.items():</span><br><span class="line">    print(key+<span class="string">":"</span>+value)</span><br><span class="line">name:老周</span><br><span class="line">age:<span class="number">29</span></span><br><span class="line">job:程序员</span><br><span class="line"><span class="comment">#字典常用的函数</span></span><br><span class="line">print(dict.items())</span><br><span class="line">print(dict.keys())</span><br><span class="line">print(dict.values())</span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'老周'</span>), (<span class="string">'age'</span>, <span class="string">'29'</span>), (<span class="string">'job'</span>, <span class="string">'程序员'</span>)])</span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'job'</span>])</span><br><span class="line">dict_values([<span class="string">'老周'</span>, <span class="string">'29'</span>, <span class="string">'程序员'</span>])</span><br></pre></td></tr></table></figure><p>按顺序遍历字典中的所有的键：sorteed()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将字典的键排序</span></span><br><span class="line">print(sorted(dict1.keys()))</span><br><span class="line">print(sorted(dict1.values()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> sorted(dict1.keys()):</span><br><span class="line">    print(info,end=<span class="string">" "</span>)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> sorted(dict1.values()):</span><br><span class="line">    print(info,end=<span class="string">" "</span>)</span><br><span class="line">[<span class="string">'age'</span>, <span class="string">'job'</span>, <span class="string">'name'</span>]</span><br><span class="line">[<span class="string">'29'</span>, <span class="string">'程序员'</span>, <span class="string">'老周'</span>]</span><br><span class="line">age job name </span><br><span class="line"></span><br><span class="line"><span class="number">29</span> 程序员 老周</span><br></pre></td></tr></table></figure><p>遍历字典中所有的值：values()</p><p><strong>其他方法（扩展）</strong></p><p>计算字典元素个数，即键的总数：len(dict)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字典元素的个数</span></span><br><span class="line">print(len(dict))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>返回一个字典的浅复制：dict.copy()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个空字典</span></span><br><span class="line">dict1 = &#123;&#125;</span><br><span class="line"><span class="comment">#复制字典</span></span><br><span class="line">dict1 = dict.copy()</span><br><span class="line">print(dict1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br></pre></td></tr></table></figure><p>返回并删除字典中的最后一对键和值：popitem()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">print(dict.popitem())</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br><span class="line">(<span class="string">'job'</span>, <span class="string">'程序员'</span>)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>&#125;</span><br><span class="line"><span class="comment">#删除指定的值</span></span><br><span class="line">print(dict.pop(<span class="string">'age'</span>))</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br><span class="line"><span class="number">29</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br></pre></td></tr></table></figure><p>删除字典内所有元素：dict(clear)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict.clear()</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="字典的嵌套"><a class="header-anchor" href="#字典的嵌套">¶</a>字典的嵌套</h4><p>列表里嵌套字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义字典</span></span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">dict1 = &#123;<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line"><span class="comment">#列表里嵌套字典</span></span><br><span class="line">list = [dict,dict1,dict2]</span><br><span class="line">print(list)</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;]</span><br></pre></td></tr></table></figure><p>字典里嵌套列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict3 = &#123;<span class="string">'pet'</span>:[<span class="string">'cat'</span>,<span class="string">'dog'</span>,<span class="string">'duck'</span>]&#125;</span><br><span class="line">print(dict3</span><br><span class="line">&#123;<span class="string">'pet'</span>: [<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'duck'</span>]&#125;</span><br></pre></td></tr></table></figure><p>字典里嵌套字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dict4 = &#123;</span><br><span class="line">    <span class="string">'age'</span>:&#123;<span class="string">'girl'</span>:<span class="string">'18'</span>,<span class="string">'boy'</span>:<span class="string">'20'</span>&#125;,</span><br><span class="line">    <span class="string">'job'</span>:&#123;<span class="string">'man'</span>:<span class="string">'IT'</span>,<span class="string">'women'</span>:<span class="string">'db'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(dict4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dict4.items():</span><br><span class="line">    print(<span class="string">'key:'</span>+key,end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> value.items():</span><br><span class="line">        print(v)</span><br><span class="line">&#123;<span class="string">'age'</span>: &#123;<span class="string">'girl'</span>: <span class="string">'18'</span>, <span class="string">'boy'</span>: <span class="string">'20'</span>&#125;, <span class="string">'job'</span>: &#123;<span class="string">'man'</span>: <span class="string">'IT'</span>, <span class="string">'women'</span>: <span class="string">'db'</span>&#125;&#125;</span><br><span class="line">key:age (<span class="string">'girl'</span>, <span class="string">'18'</span>)</span><br><span class="line">(<span class="string">'boy'</span>, <span class="string">'20'</span>)</span><br><span class="line">key:job (<span class="string">'man'</span>, <span class="string">'IT'</span>)</span><br><span class="line">(<span class="string">'women'</span>, <span class="string">'db'</span>)</span><br></pre></td></tr></table></figure><h4 id="练习"><a class="header-anchor" href="#练习">¶</a>练习</h4><p>1、创建两个字典来表示老师，然后将这两个字典存储到一个名为person的列表中。遍历这个列表，将其中每个老师的信息都打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">teacher1 = &#123;</span><br><span class="line">    <span class="string">'语文'</span>:<span class="string">'张三'</span>,</span><br><span class="line">    <span class="string">'数学'</span>:<span class="string">'李四'</span>,</span><br><span class="line">    <span class="string">'英语'</span>:<span class="string">'王五'</span>,</span><br><span class="line">&#125;</span><br><span class="line">teacher2 = &#123;</span><br><span class="line">    <span class="string">'物理'</span>:<span class="string">'赵六'</span>,</span><br><span class="line">    <span class="string">'历史'</span>:<span class="string">'葛七'</span>,</span><br><span class="line">    <span class="string">'政治'</span>:<span class="string">'周八'</span></span><br><span class="line">&#125;</span><br><span class="line">person = [teacher1,teacher2]</span><br><span class="line"><span class="keyword">for</span> teacher <span class="keyword">in</span> person:</span><br><span class="line">    print(teacher)</span><br><span class="line">&#123;<span class="string">'语文'</span>: <span class="string">'张三'</span>, <span class="string">'数学'</span>: <span class="string">'李四'</span>, <span class="string">'英语'</span>: <span class="string">'王五'</span>&#125;</span><br><span class="line">&#123;<span class="string">'物理'</span>: <span class="string">'赵六'</span>, <span class="string">'历史'</span>: <span class="string">'葛七'</span>, <span class="string">'政治'</span>: <span class="string">'周八'</span>&#125;</span><br></pre></td></tr></table></figure><p>2、创建多个字典，每个字典都使用一种宠物的名字命名；在每个字典中，包含宠物的类型和主人的名字。将这些字典存储在一个名为pets的列表中，再遍历该列表，将宠物的信息都打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">dog = &#123;</span><br><span class="line">    <span class="string">'小型犬'</span>:<span class="string">'贵宾犬'</span>,</span><br><span class="line">    <span class="string">'中型犬'</span>:<span class="string">'柯基犬'</span>,</span><br><span class="line">    <span class="string">'大型犬'</span>:<span class="string">'金毛犬'</span></span><br><span class="line">&#125;</span><br><span class="line">cat = &#123;</span><br><span class="line">    <span class="string">'小型'</span>:<span class="string">'新加坡猫'</span>,</span><br><span class="line">    <span class="string">'中型'</span>:<span class="string">'波斯猫'</span>,</span><br><span class="line">    <span class="string">'大型'</span>:<span class="string">'沙特尔猫'</span></span><br><span class="line">&#125;</span><br><span class="line">pig = &#123;</span><br><span class="line">    <span class="string">'华北型'</span>:<span class="string">'东北民猪'</span>,</span><br><span class="line">    <span class="string">'华南型'</span>:<span class="string">'海南猪'</span>,</span><br><span class="line">    <span class="string">'江海型'</span>:<span class="string">'太湖猪'</span></span><br><span class="line">&#125;</span><br><span class="line">pets = [dog,cat,pig]</span><br><span class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">    print(pet)</span><br><span class="line">&#123;<span class="string">'小型犬'</span>: <span class="string">'贵宾犬'</span>, <span class="string">'中型犬'</span>: <span class="string">'柯基犬'</span>, <span class="string">'大型犬'</span>: <span class="string">'金毛犬'</span>&#125;</span><br><span class="line">&#123;<span class="string">'小型'</span>: <span class="string">'新加坡猫'</span>, <span class="string">'中型'</span>: <span class="string">'波斯猫'</span>, <span class="string">'大型'</span>: <span class="string">'沙特尔猫'</span>&#125;</span><br><span class="line">&#123;<span class="string">'华北型'</span>: <span class="string">'东北民猪'</span>, <span class="string">'华南型'</span>: <span class="string">'海南猪'</span>, <span class="string">'江海型'</span>: <span class="string">'太湖猪'</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="https://pdxblog.top/Python%E5%87%BD%E6%95%B0.html"/>
    <id>https://pdxblog.top/Python%E5%87%BD%E6%95%B0.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a class="header-anchor" href="#函数">¶</a>函数</h3><h4 id="1、为什么要使用函数"><a class="header-anchor" href="#1、为什么要使用函数">¶</a>1、为什么要使用函数</h4><p>函数中的代码一次编写，所处运行</p><p>函数可以让代码复用，减少代码冗余</p><h4 id="2、定义函数"><a class="header-anchor" href="#2、定义函数">¶</a>2、定义函数</h4><p>关键字：def</p><p>函数名称右侧有小括号，结尾处有冒号</p><p>函数内第一行通常书写注释，表明该函数的意义</p><p>注释后空一行，开始写代码块</p><p>函数结束后，空两行</p><p>函数调用后空一行，再执行别的代码</p><h4 id="函数类型"><a class="header-anchor" href="#函数类型">¶</a>函数类型</h4><h5 id="无参函数"><a class="header-anchor" href="#无参函数">¶</a>无参函数</h5><h5 id="带参函数"><a class="header-anchor" href="#带参函数">¶</a>带参函数</h5><blockquote><p>注意事项：调用函数时，实参传递的个数要与形参保持一致</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python编写简单的学生管理系统</title>
    <link href="https://pdxblog.top/Python%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://pdxblog.top/Python%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.118Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python编写简单的学生管理系统"><a class="header-anchor" href="#Python编写简单的学生管理系统">¶</a>Python编写简单的学生管理系统</h4><blockquote><p>一共两个文件，其中一个定义函数，另一个是主程序，调用函数，运行程序</p></blockquote><p><strong><a href="http://CMS.py" target="_blank" rel="noopener">CMS.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">编写“学生信息管理系统”，要求如下：</span></span><br><span class="line"><span class="string">必须使用自定义函数，完成对程序的模块化</span></span><br><span class="line"><span class="string">学生信息至少包含：姓名、年龄、学号，除此以外可以适当添加</span></span><br><span class="line"><span class="string">必须完成的功能：添加、删除、修改、查询、退出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 定义一个列表用来存储多个学生信息</span></span><br><span class="line">stuList = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义系统菜单显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">displayMenu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 完成显示系统菜单的功能</span></span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">"学 生 信 息 管 理 系 统 "</span>)</span><br><span class="line">    print(<span class="string">"1、添加学生信息"</span>)</span><br><span class="line">    print(<span class="string">"2、删除学生信息"</span>)</span><br><span class="line">    print(<span class="string">"3、修改学生信息"</span>)</span><br><span class="line">    print(<span class="string">"4、查询学生信息"</span>)</span><br><span class="line">    print(<span class="string">"5、退出学生信息管理系统"</span>)</span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNewStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 完成添加学生信息的功能</span></span><br><span class="line">    name = input(<span class="string">"请输入学生的姓名："</span>)</span><br><span class="line">    stuId = input(<span class="string">"请输入学生的学号："</span>)</span><br><span class="line">    age = input(<span class="string">"请输入学生的年龄："</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个字典用来存储每个学生的信息</span></span><br><span class="line">    stuDict = &#123;&#125;</span><br><span class="line">    stuDict[<span class="string">'name'</span>] = name</span><br><span class="line">    stuDict[<span class="string">'stuId'</span>] = stuId</span><br><span class="line">    stuDict[<span class="string">'age'</span>] = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 将每个学生的信息添加到列表中</span></span><br><span class="line">    stuList.append(stuDict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成删除学生信息的功能</span></span><br><span class="line">    delName = input(<span class="string">"请输入你要删除的学生姓名："</span>)</span><br><span class="line">    delFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> tempStu <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> delName == tempStu[<span class="string">'name'</span>]:</span><br><span class="line">            delName = stuList.index(tempStu)  <span class="comment"># 获取要删除的学生所在列表中的索引</span></span><br><span class="line">            <span class="keyword">del</span> stuList[delName]  <span class="comment"># 按索引删除</span></span><br><span class="line">            delFlag = <span class="number">1</span>  <span class="comment"># 删除成功</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> delFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"没有此人，请中心输入！！！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reviseStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成修改学生信息的功能</span></span><br><span class="line">    reviseName = input(<span class="string">"请输入你要修改信息的学生姓名："</span>)</span><br><span class="line">    reviseFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> tempStuDict <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> reviseName == tempStuDict[<span class="string">'name'</span>]:</span><br><span class="line">            <span class="comment"># 修改学生的信息</span></span><br><span class="line">            newStuId = input(<span class="string">"请输入要修改后学生的学号："</span>)</span><br><span class="line">            newAge = input(<span class="string">"请输入要修改后学生的年龄："</span>)</span><br><span class="line">            tempStuDict[<span class="string">'stuId'</span>] = newStuId</span><br><span class="line">            tempStuDict[<span class="string">'age'</span>] = newAge</span><br><span class="line">            reviseFlag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> reviseFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"没有此人，请重新输入"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inquireStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成查询学生信息的功能</span></span><br><span class="line">    inquireName = input(<span class="string">"请输入你要查询的学生的姓名："</span>)</span><br><span class="line">    inquireFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> inquireName == temp[<span class="string">'name'</span>]:</span><br><span class="line">            print(<span class="string">"%s\t%s\t%s"</span> % (temp[<span class="string">'name'</span>], temp[<span class="string">'stuId'</span>], temp[<span class="string">'age'</span>]))</span><br><span class="line">            inquireFlag = <span class="number">1</span>  <span class="comment"># 表示查询成功</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> inquireFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"查无此人..."</span>)</span><br></pre></td></tr></table></figure><p><strong>test_student.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">测试学生信息管理系统的功能</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> student_sys.CMS <span class="keyword">as</span> stu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数：程序从这里开始运行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 菜单显示</span></span><br><span class="line">    <span class="comment"># 1、提示用户选择功能</span></span><br><span class="line">    stu.displayMenu()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 2、获取用户的输入</span></span><br><span class="line">        key = int(input(<span class="string">"请输入你选择的功能序号："</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key == <span class="number">1</span>:</span><br><span class="line">            stu.addNewStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">2</span>:</span><br><span class="line">            stu.delStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">3</span>:</span><br><span class="line">            stu.reviseStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">4</span>:</span><br><span class="line">            stu.inquireStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">5</span>:</span><br><span class="line">            print(<span class="string">'退出程序！！！'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入！！！只能输入1-5的数字！！！"</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用主函数，运行程序</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">****************************************</span><br><span class="line">学 生 信 息 管 理 系 统 </span><br><span class="line"><span class="number">1</span>、添加学生信息</span><br><span class="line"><span class="number">2</span>、删除学生信息</span><br><span class="line"><span class="number">3</span>、修改学生信息</span><br><span class="line"><span class="number">4</span>、查询学生信息</span><br><span class="line"><span class="number">5</span>、退出学生信息管理系统</span><br><span class="line">****************************************</span><br><span class="line">请输入你选择的功能序号：<span class="number">1</span></span><br><span class="line">请输入学生的姓名：john</span><br><span class="line">请输入学生的学号：<span class="number">003</span></span><br><span class="line">请输入学生的年龄：<span class="number">18</span></span><br><span class="line"></span><br><span class="line">请输入你选择的功能序号：<span class="number">4</span></span><br><span class="line">请输入你要查询的学生的姓名：john</span><br><span class="line">john<span class="number">003</span><span class="number">18</span></span><br><span class="line"></span><br><span class="line">请输入你选择的功能序号：<span class="number">5</span></span><br><span class="line">退出程序！！！</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python小练习</title>
    <link href="https://pdxblog.top/Python%E5%B0%8F%E7%BB%83%E4%B9%A0.html"/>
    <id>https://pdxblog.top/Python%E5%B0%8F%E7%BB%83%E4%B9%A0.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.113Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1）猜拳游戏"><a class="header-anchor" href="#1）猜拳游戏">¶</a>1）猜拳游戏</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">猜拳游戏：根据用户输入的数字，分别给出提示：“猜大了”或“猜小了”或“猜对了”，只有3次机会，否则退出程序</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">num = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">time = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> time &lt;= <span class="number">3</span>:</span><br><span class="line">    guess = int(input(<span class="string">'请输入你猜的数字：'</span>))</span><br><span class="line">    <span class="keyword">if</span> guess &lt; num:</span><br><span class="line">        print(<span class="string">'猜小了！！！'</span>)</span><br><span class="line">        time += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> guess &gt; num:</span><br><span class="line">        print(<span class="string">'猜大了！！！'</span>)</span><br><span class="line">        time += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'恭喜你，猜对了！！！'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">f'移动三次机会，现在是第<span class="subst">&#123;time&#125;</span>次！！！'</span>)</span><br><span class="line">    <span class="keyword">if</span> time == <span class="number">3</span>:</span><br><span class="line">        quiz = input(<span class="string">'三次都没对，是否继续（y/n）'</span>)</span><br><span class="line">        <span class="keyword">if</span> quiz == <span class="string">'y'</span>:</span><br><span class="line">            time = <span class="number">0</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> quiz == <span class="string">'n'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">请输入你猜的数字：<span class="number">7</span></span><br><span class="line">猜小了！！！</span><br><span class="line">移动三次机会，现在是第<span class="number">1</span>次！！！</span><br><span class="line">请输入你猜的数字：<span class="number">10</span></span><br><span class="line">恭喜你，猜对了！！！</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="2）跑马灯"><a class="header-anchor" href="#2）跑马灯">¶</a>2）跑马灯</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">跑马灯特效</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    content = <span class="string">'武汉加油，中国加油'</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        os.system(<span class="string">'cls'</span>)</span><br><span class="line">        print(content)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        content = content[<span class="number">1</span>:] + content[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line">加油，中国加油武汉</span><br><span class="line">油，中国加油武汉加</span><br><span class="line">，中国加油武汉加油</span><br><span class="line">中国加油武汉加油，</span><br><span class="line">国加油武汉加油，中</span><br><span class="line">加油武汉加油，中国</span><br><span class="line">油武汉加油，中国加</span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line">加油，中国加油武汉</span><br><span class="line">油，中国加油武汉加</span><br><span class="line">，中国加油武汉加油</span><br><span class="line">中国加油武汉加油，</span><br><span class="line">国加油武汉加油，中</span><br><span class="line">加油武汉加油，中国</span><br><span class="line">油武汉加油，中国加</span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">-1</span></span><br></pre></td></tr></table></figure><h5 id="3）幸运数"><a class="header-anchor" href="#3）幸运数">¶</a>3）幸运数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入一个4位数，如果各个数字之和大于20，则次数为幸运数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lucky_numbers</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># num = int(input('请输入一个4位数：'))</span></span><br><span class="line">    <span class="comment"># print('您输入的是：' + str(num))</span></span><br><span class="line">    <span class="comment"># 分解四位数，获取各位数字</span></span><br><span class="line">    <span class="comment"># 获取个位数字</span></span><br><span class="line">    ge_wei = num % <span class="number">10</span></span><br><span class="line">    shi_wei = int(num % <span class="number">100</span> / <span class="number">10</span>)</span><br><span class="line">    bai_wei = int(num / <span class="number">100</span> % <span class="number">10</span>)</span><br><span class="line">    qian_wei = int(num / <span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 求四个数值的和，并进行判断，如果大于20，则输出提示：是幸运数</span></span><br><span class="line">    <span class="keyword">if</span> (ge_wei + shi_wei + bai_wei + qian_wei) &gt; <span class="number">20</span>:</span><br><span class="line">        print(<span class="string">'是幸运数字'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'不是幸运数字,谢谢参与'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    num = int(input(<span class="string">'请输入一个4位数：'</span>))</span><br><span class="line">    print(<span class="string">'您输入的是：'</span> + str(num))</span><br><span class="line">    lucky_numbers(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">请输入一个<span class="number">4</span>位数：<span class="number">6666</span></span><br><span class="line">您输入的是：<span class="number">6666</span></span><br><span class="line">是幸运数字</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="4）温度格式转换"><a class="header-anchor" href="#4）温度格式转换">¶</a>4）温度格式转换</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用while实现：输出摄氏温度与华氏温度的对照表，要求它从摄氏温度0度到250度，每隔20度为一项，</span></span><br><span class="line"><span class="comment"># 对照表中的条目不超过10条。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 转换关系：华氏温度 = 摄氏温度 * 9 / 5.0 + 32</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 循环操作：计算摄氏温度，并输出对照条目</span></span><br><span class="line"><span class="comment"># 循环条件：</span></span><br><span class="line"><span class="comment"># 条目&lt;=10 &amp;&amp; 摄氏温度 &lt;= 250</span></span><br><span class="line"></span><br><span class="line">celsius = <span class="number">0</span></span><br><span class="line">Fahrenheit = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> <span class="keyword">and</span> celsius &lt;= <span class="number">250</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    celsius = celsius + <span class="number">20</span></span><br><span class="line">    Fahrenheit = celsius * <span class="number">9</span> / <span class="number">5.0</span> + <span class="number">32</span></span><br><span class="line">    print(<span class="string">'摄氏温度：'</span>, celsius, <span class="string">'华氏温度：'</span>, Fahrenheit, end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">摄氏温度： <span class="number">20</span> 华氏温度： <span class="number">68.0</span> </span><br><span class="line">摄氏温度： <span class="number">40</span> 华氏温度： <span class="number">104.0</span> </span><br><span class="line">摄氏温度： <span class="number">60</span> 华氏温度： <span class="number">140.0</span> </span><br><span class="line">摄氏温度： <span class="number">80</span> 华氏温度： <span class="number">176.0</span> </span><br><span class="line">摄氏温度： <span class="number">100</span> 华氏温度： <span class="number">212.0</span> </span><br><span class="line">摄氏温度： <span class="number">120</span> 华氏温度： <span class="number">248.0</span> </span><br><span class="line">摄氏温度： <span class="number">140</span> 华氏温度： <span class="number">284.0</span> </span><br><span class="line">摄氏温度： <span class="number">160</span> 华氏温度： <span class="number">320.0</span> </span><br><span class="line">摄氏温度： <span class="number">180</span> 华氏温度： <span class="number">356.0</span> </span><br><span class="line">摄氏温度： <span class="number">200</span> 华氏温度： <span class="number">392.0</span> </span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之if语句</title>
    <link href="https://pdxblog.top/Python%E4%B9%8Bif%E8%AF%AD%E5%8F%A5.html"/>
    <id>https://pdxblog.top/Python%E4%B9%8Bif%E8%AF%AD%E5%8F%A5.html</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2020-03-13T11:48:20.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python之if语句"><a class="header-anchor" href="#Python之if语句">¶</a>Python之if语句</h3><p><strong>应用场景</strong></p><p>编程时经常需要检查一列条件并根据此条件决定采取什么措施</p><p><strong>选择条件的实例：简单的if结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果天气晴朗，我们去室外散步；否则继续宅在家里</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">如果 天气晴朗:</span></span><br><span class="line"><span class="string">    我们去室外散步</span></span><br><span class="line"><span class="string">否则:</span></span><br><span class="line"><span class="string">    继续宅在家里</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">state = <span class="string">'晴朗'</span></span><br><span class="line"><span class="keyword">if</span> state == <span class="string">'晴朗'</span>:</span><br><span class="line">    print(<span class="string">'室外散步'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'宅在家里'</span>)</span><br><span class="line">室外散步</span><br></pre></td></tr></table></figure><p><strong>条件表达测试布尔表达式</strong></p><blockquote><p>比较运算符：（==、!=、&gt;、&lt;、&gt;=、&lt;=）</p><p>逻辑运算符：(and、or)</p><p>成员运算符：（in、not in）</p></blockquote><p><strong>if语句结构</strong></p><p>使用不同的条件做不同的事情</p><blockquote><p>简单的if语句</p><p>if-else语句</p><p>if-elif-else结构</p><p>多重if结构</p><p>注意事项：else代码也不是必须的</p></blockquote><p><strong>if语句在列表中的应用</strong></p><blockquote><p>检查元素</p><p>确定列表是不空的</p><p>使用多个列表</p></blockquote><p><strong>条件表达测试布尔表达式</strong></p><p><strong>比较运算符</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#比较运算符在条件表达式的应用：ATM/客服电话(请输入1，请输入2....)</span></span><br><span class="line"><span class="comment">#==</span></span><br><span class="line">key = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> key == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'存款'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'取款'</span>)</span><br><span class="line">存款</span><br><span class="line"><span class="comment">#！=</span></span><br><span class="line"><span class="keyword">if</span> key != <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'不存款'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'存款'</span>)</span><br><span class="line">存款</span><br><span class="line"><span class="comment">#&gt;=</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"允许进入网吧"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'未成年人禁止进入'</span>)</span><br><span class="line">允许进入网吧</span><br><span class="line"><span class="comment">#其他运算符都是一个道理</span></span><br></pre></td></tr></table></figure><p><strong>逻逻辑运算符：and、or</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#and</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">50</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">and</span> money &gt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">抱歉  <span class="comment">#and两边的条件必须都得成立</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">or</span> money &gt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">欢迎光临   <span class="comment">#or两边的条件只需要满足一个就行</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">id_hard = <span class="literal">True</span> <span class="comment">#布尔值</span></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span> <span class="keyword">or</span> money &gt;= <span class="number">100</span>) <span class="keyword">and</span> id_hard:  <span class="comment">#对于布尔值（True/or）可以省略</span></span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">欢迎光临</span><br></pre></td></tr></table></figure><p>总结and和or的区别：</p><blockquote><p>and两边的条件必须都得成立</p><p>or两边的条件只需要满足一个就行</p></blockquote><p><strong>成员运算符：in、not in</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义列表</span></span><br><span class="line"><span class="comment">#in</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">不存在</span><br><span class="line"><span class="comment">#在列表中加一个kety查看效果</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>,<span class="string">'kety'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">不存在</span><br><span class="line"><span class="comment">#因为添加的kety是小写，而定义的变量是大写的Kety，对于这种情况可以采用忽略大小写转换的方法</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>,<span class="string">'kety'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name.lower() <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">存在</span><br><span class="line"><span class="comment">#not in</span></span><br><span class="line"><span class="keyword">if</span> name.upper() <span class="keyword">not</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'no'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'yes'</span>)</span><br><span class="line">no</span><br></pre></td></tr></table></figure><p>条件测试的表达是的结果就是布尔值，要么是True，要么是False，不能用一个等值条件来做</p><p><strong>if语句结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单的if</span></span><br><span class="line">age = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line">婴儿</span><br><span class="line"><span class="comment">#if-else</span></span><br><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">2</span> <span class="keyword">and</span> age &lt;= <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'蹒跚学步'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line">蹒跚学步</span><br><span class="line"><span class="comment">#if-elif-else</span></span><br><span class="line">age = <span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">2</span> <span class="keyword">and</span> age &lt;= <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'蹒跚学步'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">4</span> <span class="keyword">and</span> age &lt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'上幼儿园'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'其他'</span>)</span><br><span class="line">其他</span><br><span class="line"><span class="comment">#else代码不是必须的，如果去掉else，是没有输出结果的</span></span><br></pre></td></tr></table></figure><p>如果在符合一个条件之后里面又有一个条件该怎么表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#男女学生参加100米赛跑，如果在10秒内跑完的，进入决赛；</span></span><br><span class="line"><span class="comment">#进入决赛，分男子组合进行比赛</span></span><br><span class="line"><span class="comment">#多重if结构</span></span><br><span class="line">second = <span class="number">6</span></span><br><span class="line">gender = <span class="string">'男'</span></span><br><span class="line"><span class="keyword">if</span> second &lt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">'进入决赛'</span>)</span><br><span class="line">    <span class="keyword">if</span> gender == <span class="string">'男'</span>:</span><br><span class="line">        print(<span class="string">'进入男子组'</span>)</span><br><span class="line">    <span class="keyword">elif</span> gender == <span class="string">'女'</span>:</span><br><span class="line">        print(<span class="string">'进入女子组'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'重在参与，弘扬体育精神'</span>)</span><br><span class="line">进入决赛</span><br><span class="line">进入男子组</span><br></pre></td></tr></table></figure><p><strong>if语句在列表中的应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="keyword">if</span> f == <span class="string">'pear'</span>:</span><br><span class="line">        print(<span class="string">'做个梨罐头'</span>)</span><br><span class="line">    <span class="keyword">elif</span> f == <span class="string">'orange'</span>:</span><br><span class="line">        print(<span class="string">'做句子罐头'</span>)</span><br><span class="line">    <span class="keyword">elif</span> f == <span class="string">'apple'</span>:</span><br><span class="line">        print(<span class="string">'做苹果罐头'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'做沙拉'</span>)</span><br><span class="line">做苹果罐头</span><br><span class="line">做沙拉</span><br><span class="line">做个梨罐头</span><br><span class="line">做句子罐头  <span class="comment">#最后结果的顺序是列表内的顺序</span></span><br><span class="line">fruits = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'pear'</span>,<span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">if</span> len(fruits) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'没有水果'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'开始做水果罐头了'</span>)</span><br><span class="line">    <span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">        print(fruit,end=<span class="string">" "</span>)</span><br><span class="line">开始做水果罐头了</span><br><span class="line">apple banana pear orange</span><br></pre></td></tr></table></figure><h3 id="练习"><a class="header-anchor" href="#练习">¶</a>练习</h3><p><strong>1、求100以内数字的偶数之和与奇数之和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#偶数之和</span></span><br><span class="line">print(sum(range(<span class="number">2</span>,<span class="number">101</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="comment">#奇数之和</span></span><br><span class="line">print(sum(range(<span class="number">1</span>,<span class="number">101</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="number">2550</span></span><br><span class="line"><span class="number">2500</span></span><br></pre></td></tr></table></figure><p><strong>2、输出100以内7的倍数的数字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">        print(i,end=<span class="string">" "</span>)</span><br><span class="line"> <span class="number">7</span> <span class="number">14</span> <span class="number">21</span> <span class="number">28</span> <span class="number">35</span> <span class="number">42</span> <span class="number">49</span> <span class="number">56</span> <span class="number">63</span> <span class="number">70</span> <span class="number">77</span> <span class="number">84</span> <span class="number">91</span> <span class="number">98</span></span><br></pre></td></tr></table></figure><p><strong>3、打印直角三角形，奇数用*号代替，偶数用#号代替</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span> <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">            print(<span class="string">'*'</span>,end=<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'#'</span>,end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># </span></span><br><span class="line">* <span class="comment"># * </span></span><br><span class="line">* <span class="comment"># * # </span></span><br><span class="line">* <span class="comment"># * # * </span></span><br><span class="line">* <span class="comment"># * # * # </span></span><br><span class="line">* <span class="comment"># * # * # * </span></span><br><span class="line">* <span class="comment"># * # * # * # </span></span><br><span class="line">* <span class="comment"># * # * # * # *</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型之列表的进阶操作</title>
    <link href="https://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html"/>
    <id>https://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2020-03-13T11:48:20.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python数据类型之列表的进阶操作"><a class="header-anchor" href="#Python数据类型之列表的进阶操作">¶</a>Python数据类型之列表的进阶操作</h3><p><strong>遍历</strong></p><p>重复性的内容需要按照步骤，分步式的读取出来</p><p>对文件内容已经有相似结构的循环读取</p><blockquote><ol><li>for循环</li><li>魔法推导式</li><li>常见的错误：缩进错误、遗漏冒号</li></ol></blockquote><p><strong>创建数值列表</strong></p><blockquote><ol><li><p>range(参数1，参数2，参数3)：包头不包尾</p><p>​参数1：起始值（包含自己）</p><p>​参数2：终止值（不包含自己）</p><p>​参数3：步长（间隔数）</p></li><li><p>创建数字列表</p></li><li><p>数字列表的简单统计计算{最大值：max()、最小值：min()、总和：sum() }</p></li></ol></blockquote><p><strong>切片</strong></p><p>把一段数据进行分割</p><blockquote><ol><li><p>遍历切片</p></li><li><p>复制列表(把某一个列表中的数据给别的一个，同样的制造一份出来)</p></li></ol></blockquote><p><strong>元组</strong></p><blockquote><ol><li><p>元组与列表的区别（列表的值可以修改，元组的值不可修改）</p></li><li><p>定义元组</p></li><li><p>修改元组变量</p></li></ol></blockquote><h4 id="遍历列表"><a class="header-anchor" href="#遍历列表">¶</a>遍历列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个列表</span></span><br><span class="line">names = [<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"赵六"</span>,<span class="string">"田七"</span>]</span><br><span class="line">zhang_san = names[<span class="number">0</span>]</span><br><span class="line">li_si = names[<span class="number">1</span>]</span><br><span class="line">wang_wu = names[<span class="number">2</span>]</span><br><span class="line">print(zhang_san+<span class="string">" "</span>+li_si+<span class="string">" "</span>+wang_wu)</span><br><span class="line">张三 李四 王五</span><br><span class="line"><span class="comment">#想要读取某一个值，这样就很麻烦</span></span><br><span class="line"><span class="comment">#使用for循环来读取，重复的有规律的读取内容</span></span><br></pre></td></tr></table></figure><p><strong>for循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name,end=<span class="string">" "</span>)</span><br><span class="line">张三 李四 王五 赵六 田七</span><br><span class="line"><span class="comment">#如果是英文的名字，还可以进行一些操作，比如说大小写转换</span></span><br><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2:</span><br><span class="line">    print(name.title())</span><br><span class="line">Anlen</span><br><span class="line">Bob</span><br></pre></td></tr></table></figure><p><strong>魔法推导式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[name <span class="keyword">for</span> name <span class="keyword">in</span> names2]</span><br><span class="line">-----------------------------------------------------------------------------------------[<span class="string">'anlen'</span>, <span class="string">'bob'</span>]</span><br></pre></td></tr></table></figure><p><strong>常见的错误:</strong></p><p><strong>缩进错误</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2:</span><br><span class="line">print(name.title())  <span class="comment">#print没有缩进</span></span><br><span class="line">  File <span class="string">"&lt;ipython-input-12-89d8b78a3789&gt;"</span>, line <span class="number">3</span></span><br><span class="line">    print(name.title())</span><br><span class="line">    ^</span><br><span class="line">IndentationError: expected an indented bloc  <span class="comment">#提示缩进错误</span></span><br></pre></td></tr></table></figure><p><strong>遗漏冒号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2   <span class="comment">#遗漏冒号</span></span><br><span class="line">    print(name.title())</span><br><span class="line">  File <span class="string">"&lt;ipython-input-13-ee6eafbd451b&gt;"</span>, line <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names2</span><br><span class="line">                      ^</span><br><span class="line">SyntaxError: invalid syntax   <span class="comment">#提示语法错误</span></span><br></pre></td></tr></table></figure><h4 id="创建数值列表"><a class="header-anchor" href="#创建数值列表">¶</a>创建数值列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#循环输出1到10</span></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#这样会很麻烦，使用range()就会很方便</span></span><br></pre></td></tr></table></figure><p><strong>range(参数1，参数2，参数3)：包头不包尾</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#输出1-10之间的偶数</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>):  <span class="comment">#cong2开始每次加2</span></span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="comment">#输出1-10之间的奇数</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):  <span class="comment">#从1开始每次加2</span></span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="comment">#输出奇数的平方</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    print(num**<span class="number">2</span>,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">9</span> <span class="number">25</span> <span class="number">49</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><p><strong>创建数字列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">print(numbers)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p><strong>数字列表的简单计算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数字列表的最大值、最小值、总和</span></span><br><span class="line">print(max(numbers))</span><br><span class="line">print(min(numbers))</span><br><span class="line">print(sum(numbers))</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure><h4 id="切片"><a class="header-anchor" href="#切片">¶</a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个列表</span></span><br><span class="line">pets = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"duck"</span>,<span class="string">"pig"</span>]</span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><p><strong>把数据进行分割，截取特定的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取开头</span></span><br><span class="line">pets[<span class="number">0</span>]  </span><br><span class="line"><span class="string">'cat'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#中间截取</span></span><br><span class="line">pets[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="string">'dog'</span>, <span class="string">'duck'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#全部截取</span></span><br><span class="line">pets[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#取最后</span></span><br><span class="line">pets[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'pig'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从开头到结尾</span></span><br><span class="line">pets[<span class="number">0</span>:]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从中间某一个到结尾</span></span><br><span class="line">pets[<span class="number">1</span>:]</span><br><span class="line">[<span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br></pre></td></tr></table></figure><p><strong>遍历切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> pets[<span class="number">-3</span>:]:</span><br><span class="line">    print(pet,end=<span class="string">" "</span>)</span><br><span class="line">dog duck pig</span><br></pre></td></tr></table></figure><p><strong>复制列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">games = [<span class="string">'王者'</span>,<span class="string">'吃鸡'</span>,<span class="string">'英雄联盟'</span>]</span><br><span class="line"><span class="comment">#friend_games = ['王者','吃鸡']  //这样代码创重复，是不可取的</span></span><br><span class="line">friend_games = games[:<span class="number">2</span>]</span><br><span class="line">print(<span class="string">'我喜欢的游戏有:'</span>+str(games))</span><br><span class="line">print(<span class="string">'我朋友喜欢的游戏有:'</span>+str(friend_games)</span><br><span class="line">我喜欢的游戏有:[<span class="string">'王者'</span>, <span class="string">'吃鸡'</span>, <span class="string">'英雄联盟'</span>]</span><br><span class="line">我朋友喜欢的游戏有:[<span class="string">'王者'</span>, <span class="string">'吃鸡'</span>]</span><br></pre></td></tr></table></figure><h4 id="元组"><a class="header-anchor" href="#元组">¶</a>元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义列表</span></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">print(nums)</span><br><span class="line"><span class="comment">#定义元组</span></span><br><span class="line">numbers = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">print(numbers)</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-1</span><span class="number">-9</span>b5931007d67&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">5</span> <span class="comment">#定义元组</span></span><br><span class="line">      <span class="number">6</span> numbers = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">----&gt; 7 numbers[0] = 10</span><br><span class="line">      <span class="number">8</span> print(numbers[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment  <span class="comment">#tuple是只读，而不支持写</span></span><br><span class="line">     <span class="comment">#证明元组的值是不能被修改的</span></span><br><span class="line"><span class="comment">#但它的访问形式和列表一样</span></span><br><span class="line">print(nums[<span class="number">0</span>])</span><br><span class="line">print(numbers[<span class="number">0</span>])</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>给元组变量赋值，打包给它换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(numbers)</span><br><span class="line">numbers = (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(numbers)</span><br><span class="line">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>但是有些地方的值是不允许改变的，也不能改变的，比如（性别），这就可以使用元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sex = (<span class="string">"男"</span>,<span class="string">"女"</span>)</span><br><span class="line">print(sex)</span><br><span class="line">(<span class="string">'男'</span>, <span class="string">'女'</span>)   <span class="comment">#这个值就是固定的，不能被改，也没法该</span></span><br></pre></td></tr></table></figure><p>在日常生活中，要确定内容是否要进行二次修改来决定使用元组，还是列表</p><h4 id="练习"><a class="header-anchor" href="#练习">¶</a>练习</h4><p><strong>批量生成50个C类IP–192.168.1.x</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pre = <span class="string">'192.168.1.'</span></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> list(range(<span class="number">1</span>,<span class="number">51</span>)):</span><br><span class="line">    print(pre+str(ip),end= <span class="string">"        "</span>)</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.7</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.8</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.9</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.13</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.15</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.16</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.17</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.18</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.19</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.20</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.21</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.22</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.23</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.24</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.25</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.26</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.27</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.28</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.29</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.30</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.31</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.32</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.33</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.34</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.35</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.36</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.37</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.38</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.39</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.40</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.41</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.42</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.43</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.44</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.45</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.46</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.47</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.48</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.49</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.50</span></span><br></pre></td></tr></table></figure><p><strong>for的双重循环使用</strong></p><p>使用口诀：</p><blockquote><p>外层循环控制行数</p><p>内层循环控制列数</p><p>外层循环执行1次，内层循环执行1轮</p></blockquote><p><strong>打印数字直角三角形</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        print(j+<span class="number">1</span>,end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="number">1234567</span></span><br><span class="line"><span class="number">12345678</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p><strong>打印九九乘法表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        print(str(j+<span class="number">1</span>)+<span class="string">"x"</span>+str(i)+<span class="string">"="</span>+str(i*(j+<span class="number">1</span>)),end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="number">1</span>x1=<span class="number">1</span> </span><br><span class="line"><span class="number">1</span>x2=<span class="number">2</span> <span class="number">2</span>x2=<span class="number">4</span> </span><br><span class="line"><span class="number">1</span>x3=<span class="number">3</span> <span class="number">2</span>x3=<span class="number">6</span> <span class="number">3</span>x3=<span class="number">9</span> </span><br><span class="line"><span class="number">1</span>x4=<span class="number">4</span> <span class="number">2</span>x4=<span class="number">8</span> <span class="number">3</span>x4=<span class="number">12</span> <span class="number">4</span>x4=<span class="number">16</span> </span><br><span class="line"><span class="number">1</span>x5=<span class="number">5</span> <span class="number">2</span>x5=<span class="number">10</span> <span class="number">3</span>x5=<span class="number">15</span> <span class="number">4</span>x5=<span class="number">20</span> <span class="number">5</span>x5=<span class="number">25</span> </span><br><span class="line"><span class="number">1</span>x6=<span class="number">6</span> <span class="number">2</span>x6=<span class="number">12</span> <span class="number">3</span>x6=<span class="number">18</span> <span class="number">4</span>x6=<span class="number">24</span> <span class="number">5</span>x6=<span class="number">30</span> <span class="number">6</span>x6=<span class="number">36</span> </span><br><span class="line"><span class="number">1</span>x7=<span class="number">7</span> <span class="number">2</span>x7=<span class="number">14</span> <span class="number">3</span>x7=<span class="number">21</span> <span class="number">4</span>x7=<span class="number">28</span> <span class="number">5</span>x7=<span class="number">35</span> <span class="number">6</span>x7=<span class="number">42</span> <span class="number">7</span>x7=<span class="number">49</span> </span><br><span class="line"><span class="number">1</span>x8=<span class="number">8</span> <span class="number">2</span>x8=<span class="number">16</span> <span class="number">3</span>x8=<span class="number">24</span> <span class="number">4</span>x8=<span class="number">32</span> <span class="number">5</span>x8=<span class="number">40</span> <span class="number">6</span>x8=<span class="number">48</span> <span class="number">7</span>x8=<span class="number">56</span> <span class="number">8</span>x8=<span class="number">64</span> </span><br><span class="line"><span class="number">1</span>x9=<span class="number">9</span> <span class="number">2</span>x9=<span class="number">18</span> <span class="number">3</span>x9=<span class="number">27</span> <span class="number">4</span>x9=<span class="number">36</span> <span class="number">5</span>x9=<span class="number">45</span> <span class="number">6</span>x9=<span class="number">54</span> <span class="number">7</span>x9=<span class="number">63</span> <span class="number">8</span>x9=<span class="number">72</span> <span class="number">9</span>x9=<span class="number">81</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
</feed>
