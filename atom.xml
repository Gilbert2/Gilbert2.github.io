<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maisyの博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pdxblog.top/"/>
  <updated>2020-07-11T11:38:10.977Z</updated>
  <id>https://pdxblog.top/</id>
  
  <author>
    <name>Maisy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Keepalived+mysql双主来实现MySQL-HA</title>
    <link href="https://pdxblog.top/Keepalived+mysql%E5%8F%8C%E4%B8%BB%E6%9D%A5%E5%AE%9E%E7%8E%B0MySQL-HA.html"/>
    <id>https://pdxblog.top/Keepalived+mysql%E5%8F%8C%E4%B8%BB%E6%9D%A5%E5%AE%9E%E7%8E%B0MySQL-HA.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:10.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Keepalived-mysql双主来实现MySQL-HA"><a class="header-anchor" href="#Keepalived-mysql双主来实现MySQL-HA">¶</a>Keepalived+mysql双主来实现MySQL-HA</h2><p>生产环境中一台mysql主机存在单点故障，所以我们要确保mysql的高可用性，即两台MySQL服务器如果其中有<br>一台MySQL服务器挂掉后，另外一台能立马接替其进行工作。</p><p>MySQL的高可用方案一般有如下几种：keepalived+双主，MHA，PXC，MMM，Heartbeat+DRBD等，比较常用的是keepalived+双主，MHA和PXC。</p><p>本节主要介绍了利用 keepalived 实现 MySQL 数据库的高可用。</p><p>Keepalived+mysql双主来实现MySQL-HA，我们必须保证两台MySQL数据库的数据完全一样，基本思路是两台MySQL互为主从关系，通过Keepalived配置虚拟IP，实现当其中的一台MySQL数据库宕机后，应用能够自动切换到另外一台MySQL数据库，保证系统的高可用。</p><h3 id="一、实验环境"><a class="header-anchor" href="#一、实验环境">¶</a>一、实验环境</h3><table><thead><tr><th>操作系统</th><th>CentOS 7</th></tr></thead><tbody><tr><td>数据库版本</td><td>V5.7</td></tr><tr><td>master A地址</td><td>192.168.206.130</td></tr><tr><td>master B地址</td><td>192.168.206.131</td></tr><tr><td>安装目录</td><td>在线安装</td></tr><tr><td>数据目录</td><td>/var/lib/mysql</td></tr></tbody></table><p>注意下面几点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 要保证同步服务期间之间的网络联通。即能相互ping通，能使用对方授权信息连接到对方数据库（防火墙开放3306端口）。</span><br><span class="line">2. 关闭selinux。</span><br><span class="line">3. 同步前，双方数据库中需要同步的数据要保持一致。这样，同步环境实现后，再次更新的数据就会如期同步了。</span><br></pre></td></tr></table></figure><h3 id="二、MySQL复制"><a class="header-anchor" href="#二、MySQL复制">¶</a>二、MySQL复制</h3><h4 id="1、MySQL支持哪些复制"><a class="header-anchor" href="#1、MySQL支持哪些复制">¶</a>1、MySQL支持哪些复制</h4><h5 id="（1）基于语句的复制"><a class="header-anchor" href="#（1）基于语句的复制">¶</a>（1）基于语句的复制</h5><p>在主服务器上执行的sql语句，在从服务器上执行同样的语句。mysql默认采用基于语句的复制，效率比较高。一旦发现没法精确复制时，会自动选择基于行的复制。</p><h5 id="（2）基于行的复制"><a class="header-anchor" href="#（2）基于行的复制">¶</a>（2）基于行的复制</h5><p>把改变的内容复制过去，而不是把命令在从服务器上执行一遍，从mysql 5.0开始支持。</p><h5 id="（3）混合类型的复制"><a class="header-anchor" href="#（3）混合类型的复制">¶</a>（3）混合类型的复制</h5><p>默认采用基于语句的复制，一旦发现基于语句的无法精确复制时，就会采用基于行的复制。</p><h4 id="2、MySQL复制解决的问题"><a class="header-anchor" href="#2、MySQL复制解决的问题">¶</a>2、MySQL复制解决的问题</h4><ul><li>数据分布（data distribution）</li><li>负载平衡（load balancing）</li><li>数据备份（backup），保证数据安全</li><li>高可用性与容错行（high availability and failover）</li><li>实现读写分离，缓解数据库压力</li></ul><h4 id="3、MySQL主从复制原理"><a class="header-anchor" href="#3、MySQL主从复制原理">¶</a>3、MySQL主从复制原理</h4><p>master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时，则将其改变写入二进制日志中；slave服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变。如果发生改变，则开始一个I/O Thread请求master二进制事件，同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志 中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/O Thread和SQL Thread将进入睡眠状态，等待下一次被唤醒。</p><p><strong>注意几点：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）master将操作语句记录到binlog日志中，然后授予slave远程连接的权限（master一定要开启binlog二进制日志功能；通常为了数据安全考虑，slave也开启binlog功能）。</span><br><span class="line">（2）-slave开启两个线程：IO线程和SQL线程。其中：IO线程负责读取master的binlog内容到中继日志relay log里；SQL线程负责从relay log日志里读出binlog内容，并更新到slave的数据库里，这样就能保证slave数据和 master数据保持一致了。</span><br><span class="line">（3）Mysql复制至少需要两个Mysql的服务，当然Mysql服务可以分布在不同的服务器上，也可以在一台服务器上启动多个服务。</span><br><span class="line">（4）Mysql复制最好确保master和slave服务器上的Mysql版本相同（如果不能满足版本一致，那么要保证master主节点的版本低于slave从节点的版本）。</span><br><span class="line">（5）master和slave两节点间时间需同步。</span><br></pre></td></tr></table></figure><h4 id="4、MySQL复制流程"><a class="header-anchor" href="#4、MySQL复制流程">¶</a>4、MySQL复制流程</h4><p>Mysql复制的流程图如下：<br><img data-src="https://img-blog.csdnimg.cn/20200711180118885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>如上图所示：</p><p>Mysql复制过程的第一部分就是master记录二进制日志。在每个事务更新数据完成之前，master在二日志记录这些改变。MySQL将事务串行的写入二进制日志，即使事务中的语句都是交叉执行的。在事件写入二进制日志完成后，master通知存储引擎提交事务。</p><p>第二部分就是slave将master的binary log拷贝到它自己的中继日志。首先，slave开始一个工作线程——I/O线程。I/O线程在master上打开一个普通的连接，然后开始binlog dump process。Binlog dump process从master的二进制日志中读取事件，如果已经跟上master，它会睡眠并等待master产生新的事件。I/O线程将这些事件写入中继日志。</p><p>SQL slave thread（SQL从线程）处理该过程的最后一步。SQL线程从中继日志读取事件，并重放其中的事件而更新slave的数据，使其与master中的数据一致。只要该线程与I/O线程保持一致，中继日志通常会位于OS的缓存中，所以中继日志的开销很小。</p><p>此外，在master中也有一个工作线程：和其它MySQL的连接一样，slave在master中打开一个连接也会使得master开始一个线程。复制过程有一个很重要的限制——复制在slave上是串行化的，也就是说master上的并行更新操作不能在slave上并行操作。</p><h4 id="5、MySQL复制的模式"><a class="header-anchor" href="#5、MySQL复制的模式">¶</a>5、MySQL复制的模式</h4><h5 id="（1）主从复制"><a class="header-anchor" href="#（1）主从复制">¶</a>（1）主从复制</h5><p>主库授权从库远程连接，读取binlog日志并更新到本地数据库的过程；主库写数据后，从库会自动同步过来（从库跟着主库变）。</p><h5 id="（2）主主复制"><a class="header-anchor" href="#（2）主主复制">¶</a>（2）主主复制</h5><p>主从相互授权连接，读取对方binlog日志并更新到本地数据库的过程；只要对方数据改变，自己就跟着改变。</p><h4 id="6、MySQL主从复制优点"><a class="header-anchor" href="#6、MySQL主从复制优点">¶</a>6、MySQL主从复制优点</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）在从服务器可以执行查询工作(即我们常说的读功能)，降低主服务器压力;（主库写，从库读，降压）</span><br><span class="line">（2）在从主服务器进行备份，避免备份期间影响主服务器服务;（确保数据安全）</span><br><span class="line">（3）当主服务器出现问题时，可以切换到从服务器。（提升性能）</span><br></pre></td></tr></table></figure><h4 id="7、MySQL主从复制工作流程细节"><a class="header-anchor" href="#7、MySQL主从复制工作流程细节">¶</a>7、MySQL主从复制工作流程细节</h4><p>（1）MySQL支持单向、异步复制，复制过程中一个服务器充当主服务器，而一个或多个其它服务器充当从服务器。</p><p>MySQL复制基于主服务器在二进制日志中跟踪所有对数据库的更改(更新、删除等等)。因此，要进行复制，必须在主服务器上启用二进制日志。每个从服务器从主服务器接收主服务器上已经记录到其二进制日志的保存的更新。当一个从服务器连接主服务器时，它通知主服务器定位到从服务器在日志中读取的最后一次成功更新的位置。从服务器接收从那时起发生的任何更新，并在本机上执行相同的更新。然后封锁并等待主服务器通知新的更新。从服务器执行备份不会干扰主服务器，在备份过程中主服务器可以继续处理更新。</p><p>（2）MySQL使用3个线程来执行复制功能，其中两个线程(Sql线程和IO线程)在从服务器，另外一个线程(IO线程)在主服务器。</p><p>当发出START SLAVE时，从服务器创建一个I/O线程，以连接主服务器并让它发送记录在其二进制日志中的语句。主服务器创建一个线程将二进制日志中的内容发送到从服务器。该线程可以即为主服务器上SHOW PROCESSLIST的输出中的Binlog Dump线程。从服务器I/O线程读取主服务器Binlog Dump线程发送的内容并将该数据拷贝到从服务器数据目录中的本地文件中，即中继日志。第3个线程是SQL线程，由从服务器创建，用于读取中继日志并执行日志中包含的更新。在从服务器上，读取和执行更新语句被分成两个独立的任务。当从服务器启动时，其I/O线程可以很快地从主服务器索取所有二进制日志内容，即使SQL线程执行更新的远远滞后。</p><h4 id="8、总结"><a class="header-anchor" href="#8、总结">¶</a>8、总结</h4><h5 id="（1）主从数据完成同步的过程"><a class="header-anchor" href="#（1）主从数据完成同步的过程">¶</a>（1）主从数据完成同步的过程</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）在Slave 服务器上执行sart slave命令开启主从复制开关，开始进行主从复制。</span><br><span class="line">2）此时，Slave服务器的IO线程会通过在master上已经授权的复制用户权限请求连接master服务器，并请求从执行binlog日志文件的指定位置（日志文件名和位置就是在配置主从复制服务时执行change master命令指定的）之后开始发送binlog日志内容。</span><br><span class="line">3）Master服务器接收到来自Slave服务器的IO线程的请求后，其上负责复制的IO线程会根据Slave服务器的IO线程请求的信息分批读取指定binlog日志文件指定位置之后的binlog日志信息，然后返回给Slave端的IO线程。返回的信息中除了binlog日志内容外，还有在Master服务器端记录的IO线程。返回的信息中除了binlog中的下一个指定更新位置。</span><br><span class="line">4）当Slave服务器的IO线程获取到Master服务器上IO线程发送的日志内容、日志文件及位置点后，会将binlog日志内容依次写到Slave端自身的Relay Log（即中继日志）文件（Mysql-relay-bin.xxx）的最末端，并将新的binlog文件名和位置记录到master-info文件中，以便下一次读取master端新binlog日志时能告诉Master服务器从新binlog日志的指定文件及位置开始读取新的binlog日志内容。</span><br><span class="line">5）Slave服务器端的SQL线程会实时检测本地Relay Log 中IO线程新增的日志内容，然后及时把Relay LOG 文件中的内容解析成sql语句，并在自身Slave服务器上按解析SQL语句的位置顺序执行应用这样sql语句，并在relay-log.info中记录当前应用中继日志的文件名和位置点。</span><br></pre></td></tr></table></figure><h5 id="（2）主从复制条件"><a class="header-anchor" href="#（2）主从复制条件">¶</a>（2）主从复制条件</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）开启Binlog功能</span><br><span class="line">2）主库要建立账号</span><br><span class="line">3）从库要配置master.info（CHANGE MASTER to...相当于配置密码文件和Master的相关信息）</span><br><span class="line">4）start slave 开启复制功能</span><br></pre></td></tr></table></figure><h5 id="（3）需要了解的"><a class="header-anchor" href="#（3）需要了解的">¶</a>（3）需要了解的</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）3个线程，主库IO，从库IO和SQL及作用</span><br><span class="line">2）master.info（从库）作用</span><br><span class="line">3）relay-log 作用</span><br><span class="line">4）异步复制</span><br><span class="line">5）binlog作用（如果需要级联需要开启Binlog）</span><br></pre></td></tr></table></figure><h5 id="（4）需要注意的"><a class="header-anchor" href="#（4）需要注意的">¶</a>（4）需要注意的</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）主从复制是异步的逻辑的SQL语句级的复制</span><br><span class="line">2）复制时，主库有一个I/O线程，从库有两个线程，I/O和SQL线程</span><br><span class="line">3）实现主从复制的必要条件是主库要开启记录binlog功能</span><br><span class="line">4）作为复制的所有Mysql节点的server-id都不能相同</span><br><span class="line">5）binlog文件只记录对数据库有更改的SQL语句（来自主库内容的变更），不记录任何查询（select，show）语句</span><br></pre></td></tr></table></figure><h3 id="三、配置两台MySQL主从复制"><a class="header-anchor" href="#三、配置两台MySQL主从复制">¶</a>三、配置两台MySQL主从复制</h3><h4 id="1、主从复制实现过程"><a class="header-anchor" href="#1、主从复制实现过程">¶</a>1、主从复制实现过程</h4><h5 id="（1）master配置"><a class="header-anchor" href="#（1）master配置">¶</a>（1）master配置</h5><h6 id="1）配置master数据库的my-cnf文件"><a class="header-anchor" href="#1）配置master数据库的my-cnf文件">¶</a>1）配置master数据库的my.cnf文件</h6><p>在[mysqld]配置区域添加下面内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span> </span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span>        <span class="comment">#数据库唯一ID，主从的标识号绝对不能重复。</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin    <span class="comment">#开启bin-log，并指定文件目录和文件名前缀</span></span><br><span class="line"><span class="attr">binlog-do-db</span>=liting　  <span class="comment">#需要同步liting数据库。如果是多个同步库，就以此格式另写几行即可。如果不指明对某个具体库同步，就去掉此行，表示同步所有库（除了ignore忽略的库）。</span></span><br><span class="line"><span class="attr">binlog-ignore-db</span>=mysql  <span class="comment">#不同步mysql系统数据库。如果是多个不同步库，就以此格式另写几行；也可以在一行，中间逗号隔开。</span></span><br><span class="line"><span class="attr">sync_binlog</span> = <span class="number">1</span>      <span class="comment">#确保binlog日志写入后与硬盘同步</span></span><br><span class="line"><span class="attr">binlog_checksum</span> = none  <span class="comment">#跳过现有的采用checksum的事件，mysql5.6.5以后的版本中binlog_checksum=crc32,而低版本都是binlog_checksum=none</span></span><br><span class="line"><span class="attr">binlog_format</span> = mixed   <span class="comment">#bin-log日志文件格式，设置为MIXED可以防止主键重复。</span></span><br></pre></td></tr></table></figure><p>温馨提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在主服务器上最重要的二进制日志设置是sync_binlog，这使得mysql在每次提交事务的时候把二进制日志的内容同步到磁盘上，即使服务器崩溃也会把事件写入日志中。</span><br><span class="line">sync_binlog这个参数是对于MySQL系统来说是至关重要的，他不仅影响到Binlog对MySQL所带来的性能损耗，而且还影响到MySQL中数据的完整性。对于&quot;sync_binlog&quot;参数的各种设置的说明如下：</span><br><span class="line">sync_binlog&#x3D;0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。</span><br><span class="line">sync_binlog&#x3D;n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。  </span><br><span class="line">在MySQL中系统默认的设置是sync_binlog&#x3D;0，也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。而当设置为“1”的时候，是最安全但是性能损耗最大的设置。因为当设置为1的时候，即使系统Crash，也最多丢失binlog_cache中未完成的一个事务，对实际数据没有任何实质性影响。  </span><br><span class="line">从以往经验和相关测试来看，对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。</span><br></pre></td></tr></table></figure><h6 id="2）保证master与slave数据库一致"><a class="header-anchor" href="#2）保证master与slave数据库一致">¶</a>2）保证master与slave数据库一致</h6><p>导出master数据库多余slave数据库中的数据，然后导入到slave数据库中。保证双方在同步环境实现前的数据一致。</p><blockquote><p>注意：新建环境可忽略此步骤</p></blockquote><p>导出数据库之前先锁定数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 数据库只读锁定命令，防止导出数据库的时候有数据写入。unlock tables命令解除锁定</span><br><span class="line">mysql&gt; flush tables with read lock;</span><br></pre></td></tr></table></figure><p>导出master数据库中需要同步的库(master数据库的root用户登陆密码：1234)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mysqldump -uroot liting -p1234 &gt;/opt/liting.sql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将导出的sql文件上传到slave机器上</span></span><br><span class="line">[root@master ~]# rsync -e "ssh -p22" -avpgolr /opt/liting.sql 192.168.0.104:/opt/</span><br></pre></td></tr></table></figure><h6 id="3）设置数据同步权限"><a class="header-anchor" href="#3）设置数据同步权限">¶</a>3）设置数据同步权限</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave,replication client on *.* to repl@&#39;192.168.0.104&#39; identified by &quot;repl123&quot;;  #只允许192.168.0.104使用repl，且密码为&quot;repl123&quot;连接主库做数据同步</span><br><span class="line">  Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">  </span><br><span class="line">  #若要所有网段则设置repl@&#39;%&#39; ；部分网段：repl@&#39;192.168.0.%&#39;</span><br><span class="line">  mysql&gt; flush privileges;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>温馨提示：</p><blockquote><p>权限查看方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show grants;</span><br><span class="line">mysql&gt; show grants for repl@&#39;192.168.0.104&#39;;</span><br></pre></td></tr></table></figure><h6 id="4）查看主服务器master状态"><a class="header-anchor" href="#4）查看主服务器master状态">¶</a>4）查看主服务器master状态</h6><p>注意File与Position项，从服务器需要这两项参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File       | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000007 | 120    |  liting   |     mysql   |          |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="（2）slave配置"><a class="header-anchor" href="#（2）slave配置">¶</a>（2）slave配置</h5><p>下面是slave数据库上的操作：</p><h6 id="1）设置slave数据库的my-cnf文件"><a class="header-anchor" href="#1）设置slave数据库的my-cnf文件">¶</a>1）设置slave数据库的my.cnf文件</h6><p>在[mysqld]配置区域添加下面内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">2</span>   <span class="comment">#设置从服务器id，必须于主服务器不同</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin   <span class="comment">#启动MySQ二进制日志系统</span></span><br><span class="line"><span class="attr">replicate-do-db</span>=liting  <span class="comment">#需要同步的数据库名。如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span></span><br><span class="line"><span class="attr">replicate-ignore-db</span>=mysql  <span class="comment">#不同步test数据库</span></span><br><span class="line"><span class="attr">slave-skip-errors</span> = all   <span class="comment">#跳过所有的错误，继续执行复制操作</span></span><br></pre></td></tr></table></figure><p>温馨提示：</p><blockquote><p>当只针对某些库的某张表进行同步时，如下，只同步liting库的haha表和test库的heihei表：</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">replicate-do-db</span> = liting</span><br><span class="line"><span class="attr">replicate-wild-do-table</span> = liting.haha    ``//``当只同步几个或少数表时，可以这样设置。注意这要跟上面的库指定配合使用；</span><br><span class="line"><span class="attr">replicate-do-db</span> = test</span><br><span class="line"><span class="attr">replicate-wild-do-table</span> = test.heihei   ``//``如果同步的库的表比较多时，就不能这样一一指定了，就把这个选项配置去掉，直接根据指定的库进行同步。</span><br></pre></td></tr></table></figure><h6 id="2）保证master与slave数据库一致-v2"><a class="header-anchor" href="#2）保证master与slave数据库一致-v2">¶</a>2）保证master与slave数据库一致</h6><p>在slave数据库中导入从master传过来的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先创建一个liting空库，否则下面导入数据时会报错说此库不存在。</span><br><span class="line">mysql&gt; CREATE DATABASE liting CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">mysql&gt; use liting;</span><br><span class="line"></span><br><span class="line"># 导入master中多余的数据。</span><br><span class="line">mysql&gt; source &#x2F;opt&#x2F;liting.sql;</span><br></pre></td></tr></table></figure><h6 id="3）配置主从同步指令"><a class="header-anchor" href="#3）配置主从同步指令">¶</a>3）配置主从同步指令</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave;  #执行同步前，要先关闭slave</span><br><span class="line">mysql&gt; change master to master_host&#x3D;&#39;192.168.0.103&#39;,master_user&#x3D;&#39;repl&#39;,master_password&#x3D;&#39;repl123&#39;,master_log_file&#x3D;&#39;mysql-bin.000007&#39;,master_log_pos&#x3D;120;</span><br><span class="line">  </span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">.......</span><br><span class="line">   Slave_IO_Running: Yes</span><br><span class="line">   Slave_SQL_Running: Yes</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如上，当IO和SQL线程的状态均为Yes，则表示主从已实现同步了！</p><h4 id="2、测试"><a class="header-anchor" href="#2、测试">¶</a>2、测试</h4><p>下面测试下Mysql主从同步的效果，在master主数据库上写入新数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use liting;</span><br><span class="line">mysql&gt;create table if not exists haha (id int(10) PRIMARY KEY AUTO_INCREMENT,name varchar(50) NOT NULL);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">mysql&gt; insert into huanqiu.haha values(100,&#39;anhui&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>然后在slave数据库上查看，发现master上新写入的数据已经同步过来了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from liting.haha;</span><br><span class="line">+-----+-----------+</span><br><span class="line">| id  | name  |</span><br><span class="line">+-----+-----------+</span><br><span class="line">| 100 | anhui  |</span><br><span class="line">+-----+-----------+</span><br><span class="line">1 rows in set(0.00 sec)</span><br></pre></td></tr></table></figure><p>至此，主从同步环境已经实现！</p><h3 id="四、配置两台MySQL主主复制"><a class="header-anchor" href="#四、配置两台MySQL主主复制">¶</a>四、配置两台MySQL主主复制</h3><p>根据上面的主从环境部署，master和slave已经实现同步，即在master上写入新数据，自动同步到slave。而从库只能读不能写，一旦从库有写入数据，就会造成主从数据不一致！</p><p>下面就说下Mysql主主复制环境，在slave上更新数据时，master也能自动同步过来。</p><h4 id="1、温馨提示"><a class="header-anchor" href="#1、温馨提示">¶</a>1、温馨提示</h4><p>在做主主同步前，提醒下需要特别注意的一个问题：</p><p>主主复制和主从复制有一些区别，因为多主中都可以对服务器有写权限，所以设计到自增长重复问题，例如：<br>出现的问题（多主自增长ID重复）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）首先在A和B两个库上创建test表结构;</span><br><span class="line">2）停掉A，在B上对数据表test(存在自增长属性的ID字段)执行插入操作，返回插入ID为1;</span><br><span class="line">3）然后停掉B，在A上对数据表test(存在自增长属性的ID字段)执行插入操作，返回的插入ID也是1;</span><br><span class="line">4）然后同时启动A,B，就会出现主键ID重复</span><br></pre></td></tr></table></figure><h4 id="2、解决方法"><a class="header-anchor" href="#2、解决方法">¶</a>2、解决方法</h4><p>只要保证两台服务器上的数据库里插入的自增长数据不同就可以了。</p><p>如：A插入奇数ID，B插入偶数ID，当然如果服务器多的话，还可以自定义算法，只要不同就可以了。</p><p>在下面例子中，在两台主主服务器上加入参数，以实现奇偶插入！</p><blockquote><p>记住：在做主主同步时需要设置自增长的两个相关配置，如下：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_increment_offset   表示自增长字段从那个数开始，取值范围是1 .. 65535。这个就是序号。如果有n台mysql机器，则从第一台开始分为设1，2...n</span><br><span class="line">auto_increment_increment  表示自增长字段每次递增的量，其默认值是1，取值范围是1 .. 65535。如果有n台mysql机器，这个值就设置为n。</span><br></pre></td></tr></table></figure><p>在主主同步配置时，两台服务器的自增长参数设置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_increment_increment   增长量都配置为2</span><br><span class="line">auto_increment_offset    分别配置为1和2。这是序号，第一台从1开始，第二台就是2，以此类推.....</span><br></pre></td></tr></table></figure><p>这样才可以避免两台服务器同时做更新时自增长字段的值之间发生冲突。（针对的是有自增长属性的字段）</p><h4 id="3、主主同步实现操作过程"><a class="header-anchor" href="#3、主主同步实现操作过程">¶</a>3、主主同步实现操作过程</h4><h5 id="（1）master配置-v2"><a class="header-anchor" href="#（1）master配置-v2">¶</a>（1）master配置</h5><h6 id="1）配置master数据库的my-cnf文件-v2"><a class="header-anchor" href="#1）配置master数据库的my-cnf文件-v2">¶</a>1）配置master数据库的my.cnf文件</h6><p>在[mysqld]配置区域添加下面内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">server<span class="literal">-id</span> = <span class="number">1</span>        </span><br><span class="line">log<span class="literal">-bin</span> = mysql<span class="literal">-bin</span>  </span><br><span class="line">binlog<span class="literal">-ignore</span><span class="literal">-db</span> = mysql,information_schema</span><br><span class="line">sync_binlog = <span class="number">1</span></span><br><span class="line">binlog_checksum = none</span><br><span class="line">binlog_format = mixed</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">auto<span class="literal">-increment</span><span class="literal">-increment</span> = <span class="number">2</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">auto<span class="literal">-increment</span><span class="literal">-offset</span> = <span class="number">1</span>   </span><br><span class="line">slave<span class="literal">-skip</span><span class="literal">-errors</span> = all</span><br></pre></td></tr></table></figure><h6 id="2）重启MySQL"><a class="header-anchor" href="#2）重启MySQL">¶</a>2）重启MySQL</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl restart mysqld</span><br></pre></td></tr></table></figure><h6 id="3）设置数据同步授权"><a class="header-anchor" href="#3）设置数据同步授权">¶</a>3）设置数据同步授权</h6><p>防火墙开启3306端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">[root@master ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>要确保对方机器能使用下面权限连接到本机mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password_check_user_name    | OFF    |</span><br><span class="line">| validate_password_dictionary_file    |        |</span><br><span class="line">| validate_password_length             | 8      |</span><br><span class="line">| validate_password_mixed_case_count   | 1      |</span><br><span class="line">| validate_password_number_count       | 1      |</span><br><span class="line">| validate_password_policy             | MEDIUM |</span><br><span class="line">| validate_password_special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_policy&#x3D;LOW;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_length&#x3D;6;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant replication slave,replication client on *.* to repl@&#39;192.168.206.131&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>最好将库锁住，仅仅允许读，以保证数据一致性；待主主同步环境部署后再解锁；锁住后，就不能往表里写数据，但是重启mysql服务后就会自动解锁！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 注意该参数设置后，如果自己同步对方数据，同步前一定要记得先解锁！</span><br><span class="line">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+--------------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB         | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+--------------------------+-------------------+</span><br><span class="line">| mysql-bin.000002 |      613 |              | mysql,information_schema |                   |</span><br><span class="line">+------------------+----------+--------------+--------------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="（2）slave配置-v2"><a class="header-anchor" href="#（2）slave配置-v2">¶</a>（2）slave配置</h5><p>如果是克隆的mysql，需要修改uuid，不能与master的uuid相同。如下所示：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@slave ~]# vim /var/lib/mysql/auto.cnf</span><br><span class="line"></span><br><span class="line">[auto]</span><br><span class="line">server-uuid=5e007fd8-afb0-11ea-93a9-000c29bfd16d</span><br></pre></td></tr></table></figure><h6 id="1）配置slave数据库的my-cnf文件"><a class="header-anchor" href="#1）配置slave数据库的my-cnf文件">¶</a>1）配置slave数据库的my.cnf文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@slave ~]# vim /etc/my.cnf</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">server-id= 2    </span><br><span class="line">log-bin = mysql-bin </span><br><span class="line">binlog-ignore-db = mysql,information_schema</span><br><span class="line">sync_binlog = 1</span><br><span class="line">binlog_checksum = none</span><br><span class="line">binlog_format = mixed</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">auto-increment-increment = 2  </span><br><span class="line"><span class="meta">#</span></span><br><span class="line">auto-increment-offset = 2  </span><br><span class="line">slave-skip-errors = all</span><br></pre></td></tr></table></figure><h6 id="2）重启MySQL-v2"><a class="header-anchor" href="#2）重启MySQL-v2">¶</a>2）重启MySQL</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slave ~]# systemctl restart mysqld</span><br></pre></td></tr></table></figure><h6 id="3）设置数据同步授权-v2"><a class="header-anchor" href="#3）设置数据同步授权-v2">¶</a>3）设置数据同步授权</h6><p>防火墙开启3306端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slave ~]# firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">[root@slave ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>要确保对方机器能使用下面权限连接到本机mysql。</p><p>同理，slave也要授权给master机器远程同步数据的权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password_check_user_name    | OFF    |</span><br><span class="line">| validate_password_dictionary_file    |        |</span><br><span class="line">| validate_password_length             | 8      |</span><br><span class="line">| validate_password_mixed_case_count   | 1      |</span><br><span class="line">| validate_password_number_count       | 1      |</span><br><span class="line">| validate_password_policy             | MEDIUM |</span><br><span class="line">| validate_password_special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_policy&#x3D;LOW;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_length&#x3D;6;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant replication slave,replication client on *.* to repl@&#39;192.168.206.130&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+--------------------------+------------------         -+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB         | Executed_Gtid_Set          |</span><br><span class="line">+------------------+----------+--------------+--------------------------+------------------         -+</span><br><span class="line">| mysql-bin.000001 |      613 |              | mysql,information_schema |                            |</span><br><span class="line">+------------------+----------+--------------+--------------------------+------------------         -+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="4、测试"><a class="header-anchor" href="#4、测试">¶</a>4、测试</h4><h5 id="（1）主主双向同步"><a class="header-anchor" href="#（1）主主双向同步">¶</a>（1）主主双向同步</h5><h6 id="1）slave同步master"><a class="header-anchor" href="#1）slave同步master">¶</a>1）slave同步master</h6><p>确保slave上要同步的数据，提前在master上存在，最好双方数据保持一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#先解锁，将对方数据同步到自己的数据库中</span><br><span class="line">mysql&gt; unlock tables;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host&#x3D;&#39;192.168.206.130&#39;,master_user&#x3D;&#39;repl&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000001&#39;,master_log_pos&#x3D;150;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.206.130</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">            </span><br><span class="line">              ......</span><br><span class="line">              </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: 5e007fd8-afb0-11ea-93a9-000c29bfd16c</span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br></pre></td></tr></table></figure><p>这样就实现了slave－&gt;master的同步环境。</p><h6 id="2）master同步slave"><a class="header-anchor" href="#2）master同步slave">¶</a>2）master同步slave</h6><p>确保slave上要同步的数据，提前在master上存在，最好双方数据保持一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host&#x3D;&#39;192.168.206.131&#39;,master_user&#x3D;&#39;repl&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000001&#39;,master_log_pos&#x3D;150;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.206.131</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">......</span><br><span class="line">                  Master_UUID: 5e007fd8-afb0-11ea-93a9-000c29bfd16d</span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br></pre></td></tr></table></figure><p>这样就实现了master－&gt;slave的同步环境。至此，主主双向同步环境已经实现！</p><h5 id="（2）主主同步"><a class="header-anchor" href="#（2）主主同步">¶</a>（2）主主同步</h5><h6 id="1）在master上写入新数据"><a class="header-anchor" href="#1）在master上写入新数据">¶</a>1）在master上写入新数据</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database student;</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use student;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table grade(id int);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into grade values(1),(2),(3);</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from grade;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h6 id="2）在slave数据库中查看"><a class="header-anchor" href="#2）在slave数据库中查看">¶</a>2）在slave数据库中查看</h6><p>发现master新写入的数据已经同步过来了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| student            |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use student;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * from grade;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h6 id="3）-在slave上删除数据"><a class="header-anchor" href="#3）-在slave上删除数据">¶</a>3） 在slave上删除数据</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from grade where id&#x3D;1;</span><br><span class="line">Query OK, 1 row affected (0.35 sec)</span><br></pre></td></tr></table></figure><h6 id="4）在master数据库中查看"><a class="header-anchor" href="#4）在master数据库中查看">¶</a>4）在master数据库中查看</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysql&gt; select * from grade;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>以上，主主同步实现。</p><h3 id="五、Keepalived高可用"><a class="header-anchor" href="#五、Keepalived高可用">¶</a>五、Keepalived高可用</h3><p>高可用：两台业务系统启动着相同的服务，如果有一台故障，另一台自动接管,我们将将这个称之为高可用。<br><img data-src="https://img-blog.csdnimg.cn/20200711180436128.png" alt></p><h4 id="1、Keepalived简介"><a class="header-anchor" href="#1、Keepalived简介">¶</a>1、Keepalived简介</h4><p>keepalived是集群管理中保证集群高可用的一个软件解决方案，其功能类似于heartbeat，用来防止单点故障 keepalived是以VRRP协议为实现基础的，VRRP全称Virtual RouterRedundancy Protocol，即虚拟路由冗余协议。</p><h4 id="2、Keepalived工作原理"><a class="header-anchor" href="#2、Keepalived工作原理">¶</a>2、Keepalived工作原理</h4><p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip，master会发组播（组播地址为224.0.0.18），当backup收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p><h4 id="3、Keepalived主要模块"><a class="header-anchor" href="#3、Keepalived主要模块">¶</a>3、Keepalived主要模块</h4><p>keepalived主要有三个模块，分别是core 、check和vrrp。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。</span><br><span class="line">(2)check负责健康检查，包括常见的各种检查方式。</span><br><span class="line">(3)vrrp模块是来实现VRRP协议的。</span><br></pre></td></tr></table></figure><h4 id="4、keepalived的安装配置"><a class="header-anchor" href="#4、keepalived的安装配置">¶</a>4、keepalived的安装配置</h4><h5 id="（1）安装keepalived"><a class="header-anchor" href="#（1）安装keepalived">¶</a>（1）安装keepalived</h5><p>在master1和master2上安装软件包keepalived，安装keepalived软件包与服务控制</p><p>在编译安装Keepalived之前，必须先安装内核开发包kernel-devel以及openssl-devel、popt-devel等支持库。</p><p><strong>在两台master上进行如下操作：</strong></p><h6 id="1）下载Keepalived"><a class="header-anchor" href="#1）下载Keepalived">¶</a>1）下载Keepalived</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># wget https://www.keepalived.org/software/keepalived-2.0.20.tar.gz</span></span><br></pre></td></tr></table></figure><h6 id="2）安装依赖库"><a class="header-anchor" href="#2）安装依赖库">¶</a>2）安装依赖库</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# yum -y install kernel-devel openssl-devel popt-devel gcc</span><br></pre></td></tr></table></figure><h6 id="3）解压"><a class="header-anchor" href="#3）解压">¶</a>3）解压</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# tar zxf keepalived-2.0.20.tar.gz</span><br></pre></td></tr></table></figure><h6 id="4）安装"><a class="header-anchor" href="#4）安装">¶</a>4）安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# cd keepalived-2.0.20/</span><br><span class="line">[root@192 keepalived-2.0.20]# ./configure --prefix=/ &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h6 id="5）使用keepalived服务"><a class="header-anchor" href="#5）使用keepalived服务">¶</a>5）使用keepalived服务</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable keepalived</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure><h6 id="6）创建防火墙规则"><a class="header-anchor" href="#6）创建防火墙规则">¶</a>6）创建防火墙规则</h6><p>若开启了防火墙，需要关闭防火墙或创建规则。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --direct --permanent --add-rule ipv4 filter OUTPUT 0 --in-interface ens33 --destination 224.0.0.18 --protocol vrrp -j ACCEPT</span><br><span class="line"></span><br><span class="line">firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --in-interface ens33 --destination 224.0.0.18 --protocol vrrp -j ACCEPT</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h5 id="（2）修改Keepalived配置文件"><a class="header-anchor" href="#（2）修改Keepalived配置文件">¶</a>（2）修改Keepalived配置文件</h5><h6 id="1）配置区域"><a class="header-anchor" href="#1）配置区域">¶</a>1）配置区域</h6><p>keepalived只有一个配置文件keepalived.conf，里面主要包括以下几个配置区域：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）global_defs：主要是配置故障发生时的通知对象以及机器标识。</span><br><span class="line">（2）vrrp_instance：用来定义对外提供服务的VIP区域及其相关属性。</span><br><span class="line">（3）virtual_server：虚拟服务器定义</span><br></pre></td></tr></table></figure><h6 id="2）配置说明"><a class="header-anchor" href="#2）配置说明">¶</a>2）配置说明</h6><p>keepalived.conf文件配置内容如下：</p><blockquote><p>vim /etc/keepalived/keepalived.conf</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived //!表示注释</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">router_id MYSQL-1 //表示运行keepalived服务器的一个标识</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line"><span class="comment"># 指定keepalived的角色, 两台配置此处均是BACKUP,设为BACKUP将根据优先级决定主或从</span></span><br><span class="line">state BACKUP</span><br><span class="line"><span class="comment"># 指定HA监测网络的接口</span></span><br><span class="line">interface ens33</span><br><span class="line"><span class="comment"># 虚拟路由标识，这个标识是一个数字(取值在0-255之间,用来区分多个instance的VRRP组播)，</span></span><br><span class="line"><span class="comment"># 同一个vrrp实例使用唯一的标识,确保和master2相同，同网内不同集群此项必须不同,否则发生冲突。</span></span><br><span class="line">virtual_router_id 51</span><br><span class="line"><span class="comment"># 用来选举master的，要成为master，该项取值范围是1-255（在此范围之外会被识别成默认值100）,</span></span><br><span class="line"><span class="comment"># 此处master2上设置为50</span></span><br><span class="line">priority 100</span><br><span class="line"><span class="comment"># 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）</span></span><br><span class="line">advert_int 1</span><br><span class="line"><span class="comment"># 不抢占，即允许一个priority比较低的节点作为master，即使有priority更高的节点启动</span></span><br><span class="line">nopreempt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）</span></span><br><span class="line">authentication &#123; </span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># VIP区域，指定vip地址</span></span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.206.100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置虚拟服务器，需要指定虚拟IP地址和服务端口，IP与端口之间用空格隔开</span></span><br><span class="line">virtual_server 192.168.206.100 3306 &#123;</span><br><span class="line"><span class="comment"># 设置运行情况检查时间，单位是秒</span></span><br><span class="line">delay_loop 2 </span><br><span class="line"><span class="comment"># 设置后端调度算法，这里设置为rr，即轮询算法</span></span><br><span class="line">lb_algo rr</span><br><span class="line"><span class="comment"># 设置LVS实现负载均衡的机制，有NAT、TUN、DR三个模式可选</span></span><br><span class="line">lb_kind DR </span><br><span class="line"><span class="comment"># 会话保持时间，单位是秒。</span></span><br><span class="line"><span class="comment"># 这个选项对动态网页是非常有用的，为集群系统中的session共享提供了一个很好的解决方案。</span></span><br><span class="line"><span class="comment"># 有了这个会话保持功能，用户的请求会被一直分发到某个服务节点，直到超过这个会话的保持时间。</span></span><br><span class="line">persistence_timeout 60</span><br><span class="line"><span class="comment"># 指定转发协议类型，有TCP和UDP两种</span></span><br><span class="line">protocol TCP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置服务节点1，需要指定real server的真实IP地址和端口，IP与端口之间用空格隔开</span></span><br><span class="line"><span class="comment"># 注：master 2上此处改为192.168.206.130(即master2本机ip)</span></span><br><span class="line">real_server 192.168.206.130 3306 &#123;</span><br><span class="line"><span class="comment"># 配置服务节点的权值，权值大小用数字表示，数字越大，权值越高，</span></span><br><span class="line"><span class="comment"># 设置权值大小为了区分不同性能的服务器</span></span><br><span class="line">weight 3</span><br><span class="line"><span class="comment"># 检测到realserver的mysql服务down后执行的脚本</span></span><br><span class="line">notify_down /etc/keepalived/bin/mysql.sh</span><br><span class="line"></span><br><span class="line">TCP_CHECK &#123;</span><br><span class="line"><span class="comment"># 连接超时时间</span></span><br><span class="line">connect_timeout 3</span><br><span class="line"><span class="comment"># 重连次数</span></span><br><span class="line">nb_get_retry 3 </span><br><span class="line"><span class="comment"># 重连间隔时间</span></span><br><span class="line">delay_before_retry 3 </span><br><span class="line"><span class="comment"># 健康检查端口</span></span><br><span class="line">connect_port 3306 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3）master1的配置"><a class="header-anchor" href="#3）master1的配置">¶</a>3）master1的配置</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id mysql-1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.206.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.206.100 3306 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    persistence_timeout 60</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.206.130 3306 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        notify_down /etc/keepalived/bin/mysql.sh</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">                connect_port 3306</span><br><span class="line">                connect_timeout 3</span><br><span class="line">                retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@master1 ~]# systemctl start keepalived</span><br></pre></td></tr></table></figure><h6 id="4）master2的配置"><a class="header-anchor" href="#4）master2的配置">¶</a>4）master2的配置</h6><p>将master1配置好的文件复制给master，稍加修改即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# scp /etc/keepalived/keepalived.conf root@192.168.206.131:/etc/keepalived/</span><br><span class="line"></span><br><span class="line">[root@master2 ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id mysql-2# 此处需要修改</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 50 # 此处需要修改</span><br><span class="line">    advert_int 1</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.206.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.206.100 3306 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    persistence_timeout 60</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.206.131 3306 &#123; # 修改为本机的ip</span><br><span class="line">        weight 1</span><br><span class="line">        notify_down /etc/keepalived/bin/mysql.sh</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">                connect_port 3306</span><br><span class="line">                connect_timeout 3</span><br><span class="line">                retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@master2 ~]# systemctl start keepalived</span><br></pre></td></tr></table></figure><h5 id="（3）编写检测脚本"><a class="header-anchor" href="#（3）编写检测脚本">¶</a>（3）编写检测脚本</h5><p><strong>在两台master上进行如下操作：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# mkdir /etc/keepalived/bin</span><br><span class="line">[root@master1 ~]# vim /etc/keepalived/bin/mysql.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">pkill keepalived</span><br><span class="line"></span><br><span class="line">[root@master1 ~]# chmod +x /etc/keepalived/bin/mysql.sh</span><br></pre></td></tr></table></figure><p>master1 和master2 上都添加此检测脚本，作用是当 mysql 停止工作时自动关闭本机的keepalived，从而实现将故障机器踢出（因每台机器上keepalived 只添加了本机为 realserver）。</p><p>当 mysqld 正常启动起来后，要手动启动 keepalived 服务。</p><h5 id="（4）测试"><a class="header-anchor" href="#（4）测试">¶</a>（4）测试</h5><h6 id="1）测试一"><a class="header-anchor" href="#1）测试一">¶</a>1）测试一</h6><p>在master1和master2分别执行ip addr show dev ens33命令查看master1和 master2对VIP（群集虚拟IP）的控制权。</p><p><strong>master1主的查看结果：</strong><br><img data-src="https://img-blog.csdnimg.cn/20200711180525890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p><strong>master2主的查看结果：</strong><br><img data-src="https://img-blog.csdnimg.cn/20200711180538496.png" alt></p><p>从上图可以看出master1 是主服务器，master2 为备用服务器。</p><h6 id="2）测试二"><a class="header-anchor" href="#2）测试二">¶</a>2）测试二</h6><p>停止MySQL服务，看keepalived健康检查程序是否会触发我们编写的脚本。</p><blockquote><p>停止master1主机的mysql服务</p></blockquote><p><strong>master1主的查看结果：</strong><br><img data-src="https://img-blog.csdnimg.cn/20200711180617153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p><strong>master2主的查看结果：</strong><br><img data-src="https://img-blog.csdnimg.cn/20200711180624896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>这说明在主服务上停止MySQL服务，触发了我们编写的脚本，进行自动故障切换。</p><h6 id="3）MySQL-远程登录测试"><a class="header-anchor" href="#3）MySQL-远程登录测试">¶</a>3）MySQL 远程登录测试</h6><p>我们找一台安装有MySQL 客户端，然后登录 VIP，看是否能登录。</p><p>在登录的两台 MySQL 服务器都要授权允许从远程登录。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@master2 ~]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 83</span><br><span class="line">Server version: 5.7.30-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_policy&#x3D;LOW;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_length&#x3D;4;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;1234&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>在客户端上测试登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# mysql -uroot -p -h 192.168.206.100 -P3306</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;server_id&#39;;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200711181159188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>上图显示说明在客户端访问 VIP 地址，由 master1 主机提供响应的，因为 master1 当前是主服务器，将 master1 的 mysql 服务停止，在客户端执行 show variableslike‘server_id’;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# systemctl stop mysqld</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;server_id&#39;;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200711180740796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>上图显示说明在客户端的查询请求是由 master2 主机响应的，故障切换成功。</p><h3 id="六、Keepalived使用总结"><a class="header-anchor" href="#六、Keepalived使用总结">¶</a>六、Keepalived使用总结</h3><p>Keepalived+mysql双主一般来说，中小型规模的时候，采用这种架构是最省事的。 在master节点发生故障后，利用keepalived的高可用机制实现快速切换到备用节点。</p><p><strong>在这个方案里，有几个需要注意的地方：</strong></p><p>1、采用 keepalived 作为高可用方案时，两个节点最好都设置成 BACKUP模式，避免因为意外情况下（比如 脑裂）相互抢占导致往两个节点写入相同数据而引发冲突；</p><p>2、把两个节点的 auto_increment_increment（自增步长）和 auto_increment_offset（自增起始值）设成不同值。其目的是为了避免master 节点意外宕机时，可能会有部分 binlog 未能及时复制到slave上被应用，从而会导致slave新写入数据的自增值和原先master上冲突了，因此一开始就使其错开；当然了，如果有合适的容错机制能解决主从自增ID 冲突的话，也可以不这么做；</p><p>3、slave 节点服务器配置不要太差，否则更容易导致复制延迟。作为热备节点的 slave服务器，硬件配置不能低于 master 节点；</p><p>4、如果对延迟问题很敏感的话，可考虑使用 MariaDB 分支版本，或者直接上线 MySQL 5.7 最新版本，利用多线程复制的方式可以很大程度降低复制延迟。</p>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL+MMM高可用</title>
    <link href="https://pdxblog.top/MySQL+MMM%E9%AB%98%E5%8F%AF%E7%94%A8.html"/>
    <id>https://pdxblog.top/MySQL+MMM%E9%AB%98%E5%8F%AF%E7%94%A8.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:10.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-MMM高可用"><a class="header-anchor" href="#MySQL-MMM高可用">¶</a>MySQL+MMM高可用</h2><h3 id="一、环境简述"><a class="header-anchor" href="#一、环境简述">¶</a>一、环境简述</h3><h4 id="1、工作逻辑图"><a class="header-anchor" href="#1、工作逻辑图">¶</a>1、工作逻辑图</h4><p><a href="https://s3.51cto.com/wyfs02/M00/11/E2/wKiom1LiE0TjqodPAAFe12iPcoM036.jpg" target="_blank" rel="noopener"><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMy41MWN0by5jb20vd3lmczAyL00wMC8xMS9FMi93S2lvbTFMaUUwVGpxb2RQQUFGZTEyaVBjb00wMzYuanBn?x-oss-process=image/format,png" alt="wKiom1LiE0TjqodPAAFe12iPcoM036.jpg"></a></p><h4 id="2、MySQL-MMM优缺点"><a class="header-anchor" href="#2、MySQL-MMM优缺点">¶</a>2、MySQL-MMM优缺点</h4><p>优点：高可用性，扩展性好，出现故障自动切换，对于主主同步，在同一时间只提供一台数据库写操作，保证的数据的一致性。</p><p>缺点：Monitor节点是单点，可以结合Keepalived实现高可用。</p><h4 id="3、MySQL-MMM工作原理"><a class="header-anchor" href="#3、MySQL-MMM工作原理">¶</a>3、MySQL-MMM工作原理</h4><p>MMM(Master-Master replication managerfor Mysql，Mysql主主复制管理器)是一套灵活的脚本程序，基于perl实现，用来对mysql replication进行监控和故障迁移，并能管理mysql Master-Master复制的配置(同一时间只有一个节点是可写的)。</p><p>mmm_mond：监控进程，负责所有的监控工作，决定和处理所有节点角色活动。此脚本需要在监管机上运行。</p><p>mmm_agentd：运行在每个mysql服务器上的代理进程，完成监控的探针工作和执行简单的远端服务设置。此脚本需要在被监管机上运行。</p><p>mmm_control：一个简单的脚本，提供管理mmm_mond进程的命令。</p><p>mysql-mmm的监管端会提供多个虚拟IP（VIP），包括一个可写VIP，多个可读VIP，通过监管的管理，这些IP会绑定在可用mysql之上，当某一台mysql宕机时，监管会将VIP迁移至其他mysql。</p><p>在整个监管过程中，需要在mysql中添加相关授权用户，以便让mysql可以支持监理机的维护。授权的用户包括一个mmm_monitor用户和一个mmm_agent用户，如果想使用mmm的备份工具则还要添加一个mmm_tools用户。</p><h4 id="4、需求描述"><a class="header-anchor" href="#4、需求描述">¶</a>4、需求描述</h4><p>操作系统：CentOS 7.8</p><p>数据库：MySQL 5.7</p><p>MMM：MySQL-MMM 2.2.1</p><p>数据库分配：</p><table><thead><tr><th><strong>function</strong></th><th><strong>ip</strong></th><th><strong>hostname</strong></th><th><strong>server id</strong></th></tr></thead><tbody><tr><td>monitoring host</td><td>192.168.206.120</td><td>monitor</td><td>无</td></tr><tr><td>master 1</td><td>192.168.206.121</td><td>master1</td><td>1</td></tr><tr><td>master 2</td><td>192.168.206.122</td><td>master2</td><td>2</td></tr><tr><td>slave 1</td><td>192.168.206.123</td><td>slave1</td><td>3</td></tr><tr><td>slave 2</td><td>192.168.206.124</td><td>slave2</td><td>4</td></tr></tbody></table><p>虚拟IP地址（VIP）：</p><table><thead><tr><th><strong>ip</strong></th><th><strong>role</strong></th></tr></thead><tbody><tr><td>192.168.0.211</td><td>writer</td></tr><tr><td>192.168.0.212</td><td>reader</td></tr><tr><td>192.168.0.213</td><td>reader</td></tr></tbody></table><p>数据库同步需要的用户：</p><table><thead><tr><th><strong>function</strong></th><th><strong>description</strong></th><th><strong>privileges</strong></th></tr></thead><tbody><tr><td>monitor user</td><td>mmm监控用于对mysql服务器进程健康检查</td><td>REPLICATION  CLIENT</td></tr><tr><td>agent user</td><td>mmm代理用来更改只读模式，复制的主服务器等</td><td>SUPER,  REPLICATION CLIENT, PROCESS</td></tr><tr><td>replication user</td><td>用于复制</td><td>REPLICATION SLAVE</td></tr></tbody></table><h3 id="二、4台服务器安装MySQL并配置"><a class="header-anchor" href="#二、4台服务器安装MySQL并配置">¶</a>二、4台服务器安装MySQL并配置</h3><h4 id="1、通用配置"><a class="header-anchor" href="#1、通用配置">¶</a>1、通用配置</h4><p>在这个步骤中，可以先在1台mysql服务器（192.168.206.121）上进行以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# vi /etc/my.cnf   #添加如下</span><br><span class="line">[mysqld]</span><br><span class="line">binlog-do-db=test           #需要记录二进制日志的数据库，多个用逗号隔开</span><br><span class="line">binlog-ignore-db=mysql，information_schema  #不需要记录二进制日志的数据库，多个用逗号隔开</span><br><span class="line">auto_increment_increment=2  #字段一次递增多少</span><br><span class="line">auto_increment_offset=1     #自增字段的起始值，值设置不同</span><br><span class="line">replicate-do-db=test        #同步的数据库，多个写多行</span><br><span class="line">replicate-ignore-db = information_schema #不同步的数据库，多个写多行</span><br><span class="line">server_id = 1               #每台设置不同</span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">log_slave_updates           #当一个主故障，另一个立即接管</span><br><span class="line">sync-binlog=1               #每条自动更新，安全性高，默认是0</span><br><span class="line">[root@master1 ~]# systemctl restart mysqld</span><br></pre></td></tr></table></figure><h4 id="2、修改配置"><a class="header-anchor" href="#2、修改配置">¶</a>2、修改配置</h4><p>按照第一台服务器克隆出3台，分别修改以下信息：</p><h5 id="（1）网卡的IP"><a class="header-anchor" href="#（1）网卡的IP">¶</a>（1）网卡的IP</h5><h5 id="（2）mysql的UUID"><a class="header-anchor" href="#（2）mysql的UUID">¶</a>（2）mysql的UUID</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/mysql/autoconf</span><br></pre></td></tr></table></figure><h5 id="（3）my-cnf文件"><a class="header-anchor" href="#（3）my-cnf文件">¶</a>（3）my.cnf文件</h5><p>关于mysql的配置，只需要在master1的基础上修改个别参数的值即可。</p><h6 id="1）master2"><a class="header-anchor" href="#1）master2">¶</a>1）master2</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_increment_offset</span>=<span class="number">2</span><span class="comment">#自增字段的起始值，值设置不同</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="number">2</span><span class="comment">#每台设置不同</span></span><br></pre></td></tr></table></figure><h6 id="2）slave1和slave2"><a class="header-anchor" href="#2）slave1和slave2">¶</a>2）slave1和slave2</h6><p>删除以下2项：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_increment_increment</span>=<span class="number">2</span>  <span class="comment">#字段一次递增多少</span></span><br><span class="line"><span class="attr">auto_increment_offset</span>=<span class="number">1</span>     <span class="comment">#自增字段的起始值，值设置不同</span></span><br></pre></td></tr></table></figure><p>server_id分别设置为3和4</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slave1</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="number">3</span><span class="comment">#每台设置不同</span></span><br><span class="line"><span class="comment"># slave2</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="number">4</span><span class="comment">#每台设置不同</span></span><br></pre></td></tr></table></figure><p>修改完毕之后别忘了重启mysql服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h3 id="三、配置master1和master2主主同步"><a class="header-anchor" href="#三、配置master1和master2主主同步">¶</a>三、配置master1和master2主主同步</h3><h4 id="1、先查看下log-bin日志和pos值位置"><a class="header-anchor" href="#1、先查看下log-bin日志和pos值位置">¶</a>1、先查看下log bin日志和pos值位置</h4><h6 id="（1）master1"><a class="header-anchor" href="#（1）master1">¶</a>（1）master1</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# mysql -uroot -p</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show master status;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200711175219538.png" alt></p><h6 id="（2）master2"><a class="header-anchor" href="#（2）master2">¶</a>（2）master2</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master2 ~]# mysql -uroot -p</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show master status;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200711175231970.png" alt></p><h4 id="2、配置主主同步"><a class="header-anchor" href="#2、配置主主同步">¶</a>2、配置主主同步</h4><h5 id="（1）master1配置"><a class="header-anchor" href="#（1）master1配置">¶</a>（1）master1配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_policy=0;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_length=6;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant replication slave on *.* to <span class="string">'repl'</span>@<span class="string">'192.168.206.%'</span> identified by <span class="string">'123456'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> stop slave;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> change master to master_host=<span class="string">'192.168.206.122'</span>,master_user=<span class="string">'repl'</span>,master_password=<span class="string">'123456'</span>,master_log_file=<span class="string">'mysql-bin.000001'</span>,master_log_pos=154;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br></pre></td></tr></table></figure><h5 id="（2）master2配置"><a class="header-anchor" href="#（2）master2配置">¶</a>（2）master2配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_policy=0;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_length=6;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant replication slave on *.* to <span class="string">'repl'</span>@<span class="string">'192.168.206.%'</span> identified by <span class="string">'123456'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> stop slave;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> change master to master_host=<span class="string">'192.168.206.121'</span>,master_user=<span class="string">'repl'</span>,master_password=<span class="string">'123456'</span>,master_log_file=<span class="string">'mysql-bin.000001'</span>,master_log_pos=154;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br></pre></td></tr></table></figure><h5 id="（3）测试主主同步"><a class="header-anchor" href="#（3）测试主主同步">¶</a>（3）测试主主同步</h5><p>主主同步配置完毕，查看同步状态Slave_IO和Slave_SQL是YES说明主主同步成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200711175256541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>如果Slave_IO_Running和Slave_SQL_Running都为yes，那么主从就已经配置OK了。</p><h6 id="1）在master1上增加数据"><a class="header-anchor" href="#1）在master1上增加数据">¶</a>1）在master1上增加数据</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test;</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">mysql&gt; create table grade(id int);</span><br><span class="line">mysql&gt; insert into grade values(1),(2),(3);</span><br></pre></td></tr></table></figure><h6 id="2）在master2上查看是否数据同步"><a class="header-anchor" href="#2）在master2上查看是否数据同步">¶</a>2）在master2上查看是否数据同步</h6><p><img data-src="https://img-blog.csdnimg.cn/20200711175352659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>可以看到已经成功同步过去，同样在master2插入到grade表数据，也能同步过去。我们的双主就成功了，开始做主从复制。</p><h5 id="（4）可能出现的错误"><a class="header-anchor" href="#（4）可能出现的错误">¶</a>（4）可能出现的错误</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;Client requested master to start replication from position &gt; file size&#39;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset slave;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><h3 id="四、配置slave1和slave2做为master1的从库"><a class="header-anchor" href="#四、配置slave1和slave2做为master1的从库">¶</a>四、配置slave1和slave2做为master1的从库</h3><h4 id="1、先看下master1状态值"><a class="header-anchor" href="#1、先看下master1状态值">¶</a>1、先看下master1状态值</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711175420932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、配置主从库"><a class="header-anchor" href="#2、配置主从库">¶</a>2、配置主从库</h4><h5 id="（1）在slave1和slave2分别修改权限"><a class="header-anchor" href="#（1）在slave1和slave2分别修改权限">¶</a>（1）在slave1和slave2分别修改权限</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host&#x3D;&#39;192.168.206.121&#39;,master_user&#x3D;&#39;repl&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000001&#39;,master_log_pos&#x3D;759;</span><br></pre></td></tr></table></figure><h5 id="（2）在slave1和slave2查看结果"><a class="header-anchor" href="#（2）在slave1和slave2查看结果">¶</a>（2）在slave1和slave2查看结果</h5><p><img data-src="https://img-blog.csdnimg.cn/20200711175441667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>如上图所示，说明主从复制成功。但是数据没过来，这是因为主从复制原理只同步配置完后的增删改记录，以前的数据是不能同步的。我们可以把主的数据库备份了，然后在送数据库还原。</p><h4 id="3、还原数据库"><a class="header-anchor" href="#3、还原数据库">¶</a>3、还原数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# mysqldump -uroot -p123456 test &gt; test.sql</span><br><span class="line">[root@master1 ~]# scp test.sql root@192.168.206.123:/root/</span><br><span class="line">[root@master1 ~]# scp test.sql root@192.168.206.124:/root/</span><br><span class="line"></span><br><span class="line">[root@slave1 ~]# mysql -uroot -p -e "create database test;"</span><br><span class="line">[root@slave1 ~]# mysql -uroot -p test &lt;test.sql</span><br><span class="line"></span><br><span class="line">[root@slave2 ~]# mysql -uroot -p -e "create database test;"</span><br><span class="line">[root@slave2 ~]# mysql -uroot -p test &lt;test.sql</span><br></pre></td></tr></table></figure><h3 id="五、MySQL-MMM安装配置"><a class="header-anchor" href="#五、MySQL-MMM安装配置">¶</a>五、MySQL-MMM安装配置</h3><p>CentOS默认没有mysql-mmm软件包，官方推荐使用epel的网络源，五台都安装epel：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line">rpm -ivh http://mirrors.ustc.edu.cn/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y install perl-* libart_lgpl.x86_64 rrdtool.x86_64 rrdtool-perl.x86_64</span><br></pre></td></tr></table></figure><h4 id="1、monitor节点安装"><a class="header-anchor" href="#1、monitor节点安装">¶</a>1、monitor节点安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-mmm-monitor</span><br></pre></td></tr></table></figure><h4 id="2、四台db节点安装"><a class="header-anchor" href="#2、四台db节点安装">¶</a>2、四台db节点安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-mmm-agent</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200711175452434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="3、在四台db节点授权monitor访问"><a class="header-anchor" href="#3、在四台db节点授权monitor访问">¶</a>3、在四台db节点授权monitor访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_policy=0;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_length=6;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监听帐号，是MMM监控服务器用来对MySQL服务器做健康检查的</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant replication client on *.* to <span class="string">'mmm_monitor'</span>@<span class="string">'192.168.206.%'</span> identified by <span class="string">'123456'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 代理帐号，是MMM代理用来变成只读模式和同步master等的</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant super,process,replication client on *.* to <span class="string">'mmm_agent'</span>@<span class="string">'192.168.206.%'</span> identified by <span class="string">'123456'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure><h4 id="4、修改mmm-common-conf文件（5台相同）"><a class="header-anchor" href="#4、修改mmm-common-conf文件（5台相同）">¶</a>4、修改mmm_common.conf文件（5台相同）</h4><h5 id="（1）配置示例说明"><a class="header-anchor" href="#（1）配置示例说明">¶</a>（1）配置示例说明</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@monitor ~]# vim /etc/mysql-mmm/mmm_common.conf</span><br><span class="line">active_master_role      writer    #积极的master角色的标示，所有的db服务器要开启read_only参数，对于writer服务器监控代理会自动将read_only属性关闭。</span><br><span class="line"></span><br><span class="line">&lt;host default&gt;</span><br><span class="line">    cluster_interface       eth0 #群集的网络接口</span><br><span class="line">    pid_path                /var/run/mysql-mmm/mmm_agentd.pid　　#pid路径</span><br><span class="line">    bin_path                /usr/libexec/mysql-mmm/　　#可执行文件路径</span><br><span class="line">    replication_user        replication　　　　#复制用户</span><br><span class="line">    replication_password    123456　　　　　　#复制用户密码</span><br><span class="line">    agent_user              mmm_agent　　　　#代理用户</span><br><span class="line">    agent_password          123456　　　　　　#代理用户密码</span><br><span class="line">&lt;/host&gt;</span><br><span class="line"></span><br><span class="line">&lt;host master-db1&gt;　　 #master-db1的host名称</span><br><span class="line">    ip      192.168.1.11　　 #master-db1的ip</span><br><span class="line">    mode    master      　　#角色属性，master代表是主</span><br><span class="line">    peer    master-db2　　 #与master-db1对等的服务器的host名，也就是master-db2的服务器host名</span><br><span class="line">&lt;/host&gt;</span><br><span class="line"></span><br><span class="line">&lt;host master-db2&gt;　　 #和master-db1的概念一样</span><br><span class="line">    ip      192.168.1.12</span><br><span class="line">    mode    master</span><br><span class="line">    peer    master-db1</span><br><span class="line">&lt;/host&gt;</span><br><span class="line"></span><br><span class="line">&lt;host slave-db1&gt; 　　　　#从库的host名,如果存在多个从库可以重复一样的配置</span><br><span class="line">    ip      192.168.1.13　　　　#从的ip</span><br><span class="line">    mode    slave  　　　　#slave的角色属性代表当前host是从</span><br><span class="line">&lt;/host&gt;</span><br><span class="line"></span><br><span class="line">&lt;host slave-db2&gt; 　　　　 #和slave-db1的概念一样</span><br><span class="line">    ip      192.168.1.14</span><br><span class="line">    mode    slave</span><br><span class="line">&lt;/host&gt;</span><br><span class="line">&lt;role writer&gt; 　　　　 #writer角色配置</span><br><span class="line">    hosts   master-db1, master-db2 　　#能进行写操作的服务器的host名，如果不想切换写操作这里可以只配置master,这样也可以避免因为网络延时而进行write的切换，但是一旦master出现故障那么当前的MMM就没有writer了只有对外的read操作。</span><br><span class="line">    ips     192.168.1.250　　　　#对外提供的写操作的虚拟IP</span><br><span class="line">    mode    exclusive　　　　#exclusive代表只允许存在一个主，也就是只能提供一个写的IP</span><br><span class="line">&lt;/role&gt;</span><br><span class="line"></span><br><span class="line">&lt;role reader&gt; 　　#read角色配置</span><br><span class="line">    hosts   master-db1, master-db2, slave-db1, slave-db2　　　　#对外提供读操作的服务器的host名,当然这里也可以把master加进来</span><br><span class="line">    ips     192.168.1.251, 192.168.1.252, 192.168.1.253, 192.168.1.254　　　　#对外提供读操作的虚拟ip，这三个ip和host不是一一对应的,并且ips也hosts的数目也可以不相同，如果这样配置的话其中一个hosts会分配两个ip</span><br><span class="line">    mode    balanced</span><br><span class="line">&lt;/role&gt;</span><br></pre></td></tr></table></figure><h5 id="（2）实际配置参数"><a class="header-anchor" href="#（2）实际配置参数">¶</a>（2）实际配置参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@monitor ~]# mkdir /etc/mysql-mmm</span><br><span class="line">[root@monitor ~]# vim /etc/mysql-mmm/mmm_common.conf</span><br><span class="line">active_master_role      writer</span><br><span class="line"></span><br><span class="line">&lt;host default&gt;</span><br><span class="line">        cluster_interface       ens33</span><br><span class="line">        pid_path                /var/run/mysql-mmm/mmm_agentd.pid</span><br><span class="line">        bin_path                /usr/libexec/mysql-mmm</span><br><span class="line">        replication_user        repl</span><br><span class="line">        replecation_password    123456</span><br><span class="line">        agent_user              mmm_agent</span><br><span class="line">        agent_password          123456</span><br><span class="line">&lt;host&gt;</span><br><span class="line"></span><br><span class="line">&lt;host master1&gt;</span><br><span class="line">        ip      192.168.206.121</span><br><span class="line">        mode    master</span><br><span class="line">        peer    master2</span><br><span class="line">&lt;host&gt;</span><br><span class="line"></span><br><span class="line">&lt;host master2&gt;</span><br><span class="line">        ip      192.168.206.122</span><br><span class="line">        mode    master</span><br><span class="line">        peer    master1</span><br><span class="line">&lt;host&gt;</span><br><span class="line"></span><br><span class="line">&lt;host slave1&gt;</span><br><span class="line">        ip      192.168.206.123</span><br><span class="line">        mode    slave</span><br><span class="line">&lt;host&gt;</span><br><span class="line"></span><br><span class="line">&lt;host slave2&gt;</span><br><span class="line">        ip      192.168.206.124</span><br><span class="line">        mode    slave</span><br><span class="line">&lt;host&gt;</span><br><span class="line"></span><br><span class="line">&lt;role writer&gt;</span><br><span class="line">        hosts   master1,master2</span><br><span class="line">        ips     192.168.206.250</span><br><span class="line">        mode    exclusive</span><br><span class="line">&lt;role&gt;</span><br><span class="line"></span><br><span class="line">&lt;role reader&gt;</span><br><span class="line">        hosts   master1,master2,slave1,slave2</span><br><span class="line">        ips     192.168.206.251, 192.168.206.252, 192.168.206.253, 192.168.206.254</span><br><span class="line">        mode    balanced</span><br><span class="line">&lt;role&gt;</span><br></pre></td></tr></table></figure><h5 id="（3）通过scp命令传送到其他4台"><a class="header-anchor" href="#（3）通过scp命令传送到其他4台">¶</a>（3）通过scp命令传送到其他4台</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@monitor ~]# scp -r /etc/mysql-mmm/ root@192.168.206.121:/etc</span><br><span class="line">[root@monitor ~]# scp -r /etc/mysql-mmm/ root@192.168.206.122:/etc</span><br><span class="line">[root@monitor ~]# scp -r /etc/mysql-mmm/ root@192.168.206.123:/etc</span><br><span class="line">[root@monitor ~]# scp -r /etc/mysql-mmm/ root@192.168.206.124:/etc</span><br></pre></td></tr></table></figure><h4 id="5、修改4台db代理端mmm-agent-conf文件"><a class="header-anchor" href="#5、修改4台db代理端mmm-agent-conf文件">¶</a>5、修改4台db代理端mmm_agent.conf文件</h4><p>在所有的MySQL上修改mmm_agent.conf，只需要修改master-db1这里，是哪台就改成哪台，这里只给出master1的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master2 ~]# vim /etc/mysql-mmm/mmm_agent.conf</span><br><span class="line"></span><br><span class="line">include mmm_common.conf</span><br><span class="line">this</span><br></pre></td></tr></table></figure><h4 id="6、修改管理端mmm-mon-conf文件"><a class="header-anchor" href="#6、修改管理端mmm-mon-conf文件">¶</a>6、修改管理端mmm_mon.conf文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@monitor ~]# vim /etc/mysql-mmm/mmm_mon.conf</span><br><span class="line">include mmm_common.conf</span><br><span class="line"></span><br><span class="line">&lt;monitor&gt;</span><br><span class="line">        ip              192.168.206.120</span><br><span class="line">        pid_path        /var/run/mysql-mmm/mmm_mond.pid</span><br><span class="line">        bin_path        /usr/libexec/mysql-mmm</span><br><span class="line">        status_path     /var/lib/mysql-mmm/mmm_mond.status</span><br><span class="line">        ping_ips        192.168.206.121.192.168.206.122,192.168.206.123,192.168.206.124</span><br><span class="line">        auto_set_online 60#恢复后自动设置在线的时间</span><br><span class="line">&lt;monitor&gt;</span><br><span class="line"></span><br><span class="line">&lt;host default&gt;</span><br><span class="line">        monitor_user            mmm_monitor</span><br><span class="line">        monitor_password        123456</span><br><span class="line">&lt;host&gt;</span><br><span class="line"></span><br><span class="line">debug   0</span><br></pre></td></tr></table></figure><h3 id="六、启动MySQL-MMM"><a class="header-anchor" href="#六、启动MySQL-MMM">¶</a>六、启动MySQL-MMM</h3><h4 id="1、db代理端启动"><a class="header-anchor" href="#1、db代理端启动">¶</a>1、db代理端启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db1 ~]# /etc/init.d/mysql-mmm-agent start</span><br><span class="line">[root@db1 ~]# chkconfigmysql-mmm-agent on</span><br></pre></td></tr></table></figure><h4 id="2、monitor管理端启动"><a class="header-anchor" href="#2、monitor管理端启动">¶</a>2、monitor管理端启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@monitor ~]# /etc/init.d/mysql-mmm-monitor start</span><br><span class="line">[root@monitor ~]# chkconfigmysql-mmm-monitor on</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基本操作</title>
    <link href="https://pdxblog.top/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
    <id>https://pdxblog.top/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:11.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL基本操作"><a class="header-anchor" href="#MySQL基本操作">¶</a>MySQL基本操作</h2><h3 id="一、结构化查询语言"><a class="header-anchor" href="#一、结构化查询语言">¶</a>一、结构化查询语言</h3><h4 id="1、SQL"><a class="header-anchor" href="#1、SQL">¶</a>1、SQL</h4><p>SQL的含义是结构化查询语句（Structured Query Languate），是对数据库进行查询和修改操作的语言。</p><h4 id="2、T-SQL"><a class="header-anchor" href="#2、T-SQL">¶</a>2、T-SQL</h4><p>T-SQL ：Transact-SQL</p><p>T-SQL是SQL的增强版，对功能进行了扩充：如变量说明、流程控制、功能函数。</p><h4 id="3、SQL的组成"><a class="header-anchor" href="#3、SQL的组成">¶</a>3、SQL的组成</h4><table><thead><tr><th>名称</th><th>解释</th><th>命令举例</th></tr></thead><tbody><tr><td>DML  (数据操作语言)</td><td>用来操作数据库中所包含的数据</td><td>INSERT、UPDATE、DELETE</td></tr><tr><td>DDL  (数据定义语言)</td><td>用于创建和删除数据库对象等操作</td><td>CREATE、DROP、ALTER</td></tr><tr><td>DQL  (数据查询语言)</td><td>用来对数据库中的数据进行查询</td><td>SELECT</td></tr><tr><td>DCL  (数据控制语言)</td><td>用来控制数据库组件的存取许可、存取权限等</td><td>GRANT、COMMIT、ROLLBACK</td></tr></tbody></table><h3 id="二、MySQL常用数据类型"><a class="header-anchor" href="#二、MySQL常用数据类型">¶</a>二、MySQL常用数据类型</h3><h4 id="1、数值类型"><a class="header-anchor" href="#1、数值类型">¶</a>1、数值类型</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711174006289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>数值类型的属性：</p><blockquote><p>UNSIGNED</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标识为无符号数</span><br></pre></td></tr></table></figure><blockquote><p>ZEROFILL</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">宽度（位数）不足，以0填充</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create database &#96;school&#96;;</span><br><span class="line">use &#96;school&#96;;</span><br><span class="line">create table &#96;student&#96;(</span><br><span class="line">&#96;sid&#96; INT(4) ZEROFILL</span><br><span class="line">);</span><br><span class="line"># 查看表结构</span><br><span class="line">desc student;</span><br><span class="line"># 插入数据</span><br><span class="line">insert into &#96;student&#96; VALUE(12),(123),(1234);</span><br></pre></td></tr></table></figure><p>数据显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from &#96;student&#96;;</span><br><span class="line">+------+</span><br><span class="line">| sid  |</span><br><span class="line">+------+</span><br><span class="line">| 0012 |</span><br><span class="line">| 0123 |</span><br><span class="line">| 1234 |</span><br><span class="line">+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2、字符串类型"><a class="header-anchor" href="#2、字符串类型">¶</a>2、字符串类型</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711174042537.png" alt></p><h4 id="3、日期类型"><a class="header-anchor" href="#3、日期类型">¶</a>3、日期类型</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711174050746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><blockquote><p>若某日期字段默认值为当前日期，一般设置为TIMESTAMP类型</p></blockquote><h3 id="三、MySQL建库、建表"><a class="header-anchor" href="#三、MySQL建库、建表">¶</a>三、MySQL建库、建表</h3><h4 id="1、创建数据库"><a class="header-anchor" href="#1、创建数据库">¶</a>1、创建数据库</h4><p>创建数据库是在系统磁盘上划分⼀块区域用于数据的存储和管理，如果管理员在设置权限的时候为用户创建了数据库，则可以直接使用，否则，需要自己创建数据库。</p><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS]  数据库名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建myschool数据库</span><br><span class="line">create database myschool;</span><br></pre></td></tr></table></figure><p>IF NOT EXISTS：在创建数据库之前进行判断，只有该数据库目前尚不存在时才能执行操作。</p><p>此选项可以用来避免数据库已经存在而重复创建的错误。</p><h4 id="2、创建表"><a class="header-anchor" href="#2、创建表">¶</a>2、创建表</h4><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS]  表名 (</span><br><span class="line">    字段1 数据类型 [字段属性|约束][索引][注释],</span><br><span class="line">      ……</span><br><span class="line">     字段n 数据类型 [字段属性|约束][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#创建学生表</span><br><span class="line">CREATE TABLE &#96;student&#96;（</span><br><span class="line">    &#96;studentNo&#96; INT(4)  PRIMARY KEY,</span><br><span class="line">     &#96; name&#96; CHAR(10),</span><br><span class="line">     ……）;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">多字段使用逗号分隔</span><br><span class="line">保留字用撇号括起来</span><br><span class="line">单行注释：#……</span><br><span class="line">多行注释：/*……*/</span><br></pre></td></tr></table></figure><h5 id="（1）字段的约束及属性"><a class="header-anchor" href="#（1）字段的约束及属性">¶</a>（1）字段的约束及属性</h5><p><img data-src="https://img-blog.csdnimg.cn/20200711174117987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h6 id="主键"><a class="header-anchor" href="#主键">¶</a>主键</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student（</span><br><span class="line">      &#96;studentNo&#96; INT(4)  PRIMARY KEY,</span><br><span class="line">      ……）;</span><br></pre></td></tr></table></figure><h6 id="注释"><a class="header-anchor" href="#注释">¶</a>注释</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test (</span><br><span class="line">    &#96;id&#96; int(11) UNSIGNED COMMENT ‘编号’</span><br><span class="line">)COMMENT&#x3D;&#39;测试表’ ;</span><br></pre></td></tr></table></figure><h6 id="设置字符集编码"><a class="header-anchor" href="#设置字符集编码">¶</a>设置字符集编码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] 表名（</span><br><span class="line">     #省略代码</span><br><span class="line">）CHARSET &#x3D; 字符集名;</span><br></pre></td></tr></table></figure><h5 id="（2）在myschool数据库中创建学生表"><a class="header-anchor" href="#（2）在myschool数据库中创建学生表">¶</a>（2）在myschool数据库中创建学生表</h5><p><img data-src="https://img-blog.csdnimg.cn/20200711174140743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">use myschool;</span><br><span class="line">create table student(</span><br><span class="line">&#96;studentNo&#96; int(4) not null comment &#39;学号&#39; primary key,</span><br><span class="line">&#96;loginPwd&#96; varchar(20) not null comment &#39;密码&#39;,</span><br><span class="line">&#96;studentName&#96; varchar(50) not null comment &#39;姓名&#39;,</span><br><span class="line">&#96;sex&#96; char(2) not null default &#39;男&#39; comment &#39;性别&#39;,</span><br><span class="line">&#96;gradeID&#96; int(4) unsigned comment &#39;年级编号&#39;,</span><br><span class="line">&#96;phone&#96; varchar(50) comment &#39;电话&#39;,</span><br><span class="line">&#96;address&#96; varchar(255) default &#39;地址不详&#39; comment &#39;地址&#39;,</span><br><span class="line">&#96;bornDate&#96; datetime comment &#39;出生日期&#39;,</span><br><span class="line">&#96;email&#96; varchar(50) comment &#39;邮件账号&#39;,</span><br><span class="line">&#96;identityCard&#96; varchar(18) comment &#39;身份证号&#39; unique key</span><br><span class="line">)charset&#x3D;&#39;utf8&#39; comment&#x3D;&#39;学生表&#39;;</span><br></pre></td></tr></table></figure><h4 id="3、查看表"><a class="header-anchor" href="#3、查看表">¶</a>3、查看表</h4><p>（1）查看表是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use myschool;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>（2）查看表定义</p><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br><span class="line">或</span><br><span class="line">describe 表名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use myschool;</span><br><span class="line">desc &#96;student&#96;;</span><br></pre></td></tr></table></figure><h4 id="4、删除表"><a class="header-anchor" href="#4、删除表">¶</a>4、删除表</h4><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table [if exists] 表名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use myschool;</span><br><span class="line">drop table if exists &#96;student&#96;;</span><br></pre></td></tr></table></figure><p>在删除表之前，先使用<code>if exists</code>语句验证表是否存在。</p><h4 id="5、删除数据库"><a class="header-anchor" href="#5、删除数据库">¶</a>5、删除数据库</h4><p>删除数据库是将已经存在的数据库从磁盘空间上清除，清除之后，数据库中的所有数据也将一起被删除。</p><p>删除数据库语句和创建数据库的命令相似，MySQL中删除数据库的基本语法格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists 数据库名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists myschool;</span><br></pre></td></tr></table></figure><h4 id="6、上机练习"><a class="header-anchor" href="#6、上机练习">¶</a>6、上机练习</h4><p>（1）myschool数据库中创建科目表(subject)<br><img data-src="https://img-blog.csdnimg.cn/20200711174211476.png" alt><br>（2）myschool数据库中创建成绩表（result）<br><img data-src="https://img-blog.csdnimg.cn/20200711174217872.png" alt></p><h3 id="四、MySQL的存储引擎"><a class="header-anchor" href="#四、MySQL的存储引擎">¶</a>四、MySQL的存储引擎</h3><h4 id="1、存储引擎简介"><a class="header-anchor" href="#1、存储引擎简介">¶</a>1、存储引擎简介</h4><p>数据库存储引擎是数据库底层软件组件，数据库管理系统（DBMS）使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能。使用不同的存储引擎，还可以获得特定的功能。</p><p>现在许多不同的数据库管理系统都支持多种不同的数据引擎。MySQL的核心就是存储引擎。</p><h4 id="2、存储引擎的类型"><a class="header-anchor" href="#2、存储引擎的类型">¶</a>2、存储引擎的类型</h4><p>mysql有多种存储引擎，它们分别为：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MyISAM</span><br><span class="line">InnoDB</span><br><span class="line">MERGE</span><br><span class="line">MEMORY</span><br><span class="line">EXAMPLE</span><br><span class="line">FEDERATED</span><br><span class="line">ARCHIVE</span><br><span class="line">CSV</span><br><span class="line">BLACKHOLE</span><br></pre></td></tr></table></figure><h4 id="3、存储引擎的主要区别"><a class="header-anchor" href="#3、存储引擎的主要区别">¶</a>3、存储引擎的主要区别</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711174242794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h5 id="（1）MyISAM-存储引擎特点"><a class="header-anchor" href="#（1）MyISAM-存储引擎特点">¶</a>（1）MyISAM 存储引擎特点</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL 5.5 之前使用 MyISAM 引擎，MySQL 5.5 之后使用 InnoDB 引擎</span><br><span class="line">MyISAM 引擎读取速度较快，占用资源相对较少，不支持事务，不支持外键约束，但支持全文索引</span><br><span class="line">读写互相阻塞，也就是说读数据的时候你就不能写数据，写数据的时候你就不能读数据</span><br><span class="line">MyISAM 引擎只能缓存索引，而不能缓存数据</span><br></pre></td></tr></table></figure><h5 id="（2）InnoDB-存储引擎特点"><a class="header-anchor" href="#（2）InnoDB-存储引擎特点">¶</a>（2）InnoDB 存储引擎特点</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事务型数据库的首选引擎，支持事务安全表，支持行锁定和外键，MySQL5.5.5 版本之后，InnoDB作为默认存储引擎</span><br><span class="line">具有提交、回滚和崩溃恢复能力的事务安全存储引擎，能处理巨大数据量，性能及效率高，完全支持外键完整性约束</span><br><span class="line">具有非常高效的缓存特性，能缓存索引也能缓存数据，对硬件要求比较高</span><br><span class="line">使用InnoDB时，将在MySQL数据目录下创建一个名为ibdata1的10MB大小的自动扩展数据⽂文件，以及两个名为 ib_logfile0 和 ib_logfile1 的 5MB ⼤大⼩小的日志⽂文件</span><br></pre></td></tr></table></figure><h5 id="（3）Memory-存储引擎特点"><a class="header-anchor" href="#（3）Memory-存储引擎特点">¶</a>（3）Memory 存储引擎特点</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Memory存储引擎将表中的数据存储到内存中，为查询和引用其他表数据提供快速访问</span><br><span class="line">Memory存储引擎执行 HASH 和 BTREE 索引，不支持 BLOB 和 TEXT 列，支持AUTO_INCREMENT 列和对可包含 NULL 值得列的索引</span><br><span class="line">当不再需要 Memory 表的内容时，要释放被 Memory 表使用的内存，应该执行DELETE FROM 或 TRUNCATE TABLE ，或者删除整个表</span><br></pre></td></tr></table></figure><h4 id="4、存储引擎适用场合"><a class="header-anchor" href="#4、存储引擎适用场合">¶</a>4、存储引擎适用场合</h4><h5 id="（1）MyISAM-适⽤用场景"><a class="header-anchor" href="#（1）MyISAM-适⽤用场景">¶</a>（1）MyISAM 适⽤用场景</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不需要事务支持的业务，例如：转账就不行</span><br><span class="line">适用于读数据比较多的业务，不适用于读写频繁的业务</span><br><span class="line">并发相对较低、数据修改相对较少的业务</span><br><span class="line">硬件资源比较差的机器可以考虑使用 MyISAM 引擎</span><br></pre></td></tr></table></figure><h5 id="（2）InnoDB-适⽤用场景"><a class="header-anchor" href="#（2）InnoDB-适⽤用场景">¶</a>（2）InnoDB 适⽤用场景</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要事务⽀持的业务、⾼并发的业务</span><br><span class="line">数据更新较为频繁的场景，⽐如：BBS、SNS、微博等</span><br><span class="line">数据⼀致性要求较⾼的业务，⽐如：充值转账、银⾏卡转账</span><br></pre></td></tr></table></figure><h5 id="（3）总结"><a class="header-anchor" href="#（3）总结">¶</a>（3）总结</h5><p>使用MyISAM:   不需事务，空间小，以查询访问为主<br>使用InnoDB:     多删除、更新操作，安全性高，事务处理及并发控制</p><h4 id="5、查看当前默认存储引擎"><a class="header-anchor" href="#5、查看当前默认存储引擎">¶</a>5、查看当前默认存储引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%storage_engine&#39;;</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| Variable_name                    | Value  |</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| default_storage_engine           | InnoDB |</span><br><span class="line">| default_tmp_storage_engine       | InnoDB |</span><br><span class="line">| internal_tmp_disk_storage_engine | InnoDB |</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">3 rows in set, 1 warning (0.02 sec)</span><br></pre></td></tr></table></figure><h4 id="6、修改默认存储引擎"><a class="header-anchor" href="#6、修改默认存储引擎">¶</a>6、修改默认存储引擎</h4><h5 id="（1）MySQL-5-5"><a class="header-anchor" href="#（1）MySQL-5-5">¶</a>（1）MySQL 5.5</h5><p>修改my.ini配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_storage_engine&#x3D;InnoDB</span><br></pre></td></tr></table></figure><h5 id="（2）MySQL-5-7"><a class="header-anchor" href="#（2）MySQL-5-7">¶</a>（2）MySQL 5.7</h5><p>最简单的方法，就是通过命令直接修改表的存储引擎，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 ENGINE &#x3D; 引擎名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student ENGINE &#x3D; InnoDB;</span><br></pre></td></tr></table></figure><h4 id="7、设置表的存储引擎"><a class="header-anchor" href="#7、设置表的存储引擎">¶</a>7、设置表的存储引擎</h4><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">    #省略代码</span><br><span class="line">)ENGINE&#x3D;存储引擎;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;myisam&#96; (</span><br><span class="line">   id  INT(4)</span><br><span class="line">)ENGINE&#x3D;MyISAM;</span><br></pre></td></tr></table></figure><h3 id="五、MySQL补充知识"><a class="header-anchor" href="#五、MySQL补充知识">¶</a>五、MySQL补充知识</h3><p>在mysql中，每个数据库最多可创建20亿个表，一个表允许定义1024列，每行的最大长度为8092字节（不包括⽂本和图像类型的长度）。</p><p>当表中定义有varchar、nvarchar或varbinary类型列时，如果向表中插入的数据行超过8092字节时，将导致语句失败，并产生错误信息。</p><p>SQL Server对每个表中行的数量没有直接限制，但它受数据库存储空间的限制。每个数据库的最大空间1048516TB，所以一个表可用的最大空间为1048516TB减去数据库类系统表和其它数据库对象所占用的空间。理论上无限大，就看你硬盘够不够大，大多数情况是你的硬盘不够。</p>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL高级查询</title>
    <link href="https://pdxblog.top/MySQL%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2.html"/>
    <id>https://pdxblog.top/MySQL%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:11.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL高级查询"><a class="header-anchor" href="#MySQL高级查询">¶</a>MySQL高级查询</h2><p>本章将介绍如何修改表结构和数据的增删改查，以及mysql中常用的函数和运算符的使用方法。</p><h3 id="一、DDL语句（修改表结构）"><a class="header-anchor" href="#一、DDL语句（修改表结构）">¶</a>一、DDL语句（修改表结构）</h3><h4 id="1、修改表"><a class="header-anchor" href="#1、修改表">¶</a>1、修改表</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 修改表名</span><br><span class="line">alter table 旧表名 rename 新表名;</span><br><span class="line"></span><br><span class="line"># 添加字段</span><br><span class="line">alter table 表名 add 字段名 数据类型[属性];</span><br><span class="line"></span><br><span class="line"># 修改字段</span><br><span class="line">alter table 表名 CHANGE 原字段名 新字段名 数据类型[属性];</span><br><span class="line"></span><br><span class="line"># 删除字段</span><br><span class="line">alter table 表名 drop 字段名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists &#96;ttt&#96;;</span><br><span class="line"># 创建表</span><br><span class="line">create table &#96;ttt&#96;(</span><br><span class="line">&#96;sid&#96; int(4) not null auto_increment primary key,</span><br><span class="line">    &#96;sname&#96; varchar(20) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 修改表名</span><br><span class="line">alter table teacher rename ttt;</span><br><span class="line"></span><br><span class="line"># 添加字段</span><br><span class="line">alter table ttt add &#96;sex&#96; char(2);</span><br><span class="line"></span><br><span class="line"># 修改字段</span><br><span class="line">alter table ttt CHANGE &#96;sex&#96; &#96;gender&#96; char(2);</span><br><span class="line"></span><br><span class="line"># 删除字段</span><br><span class="line">alter table ttt drop gender;</span><br></pre></td></tr></table></figure><h4 id="2、添加主键"><a class="header-anchor" href="#2、添加主键">¶</a>2、添加主键</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add CONSTRAINT 主键名</span><br><span class="line">PRIMARY KEY 表名(主键字段);</span><br></pre></td></tr></table></figure><p>如何设置grade表中gradeID字段为主键？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table grade(</span><br><span class="line">&#96;gradeID&#96; int(4) not null,</span><br><span class="line">&#96;gradeName&#96; varchar(20) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alter table grade add CONSTRAINT pk_grade</span><br><span class="line">PRIMARY KEY grage(&#96;gradeID&#96;);</span><br></pre></td></tr></table></figure><h4 id="3、添加外键"><a class="header-anchor" href="#3、添加外键">¶</a>3、添加外键</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 ADD CONSTRAINT 外键名              FOREIGN KEY（外键字段）</span><br><span class="line">REFERENCES 关联表名（关联字段）;</span><br></pre></td></tr></table></figure><p>如何将student表的gradeId字段和grade表的gradeId字段建立外键关联？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table student add CONSTRAINT fk_student_grade</span><br><span class="line">FOREIGN KEY(&#96;gradeID&#96;)</span><br><span class="line">REFERENCES &#96;grade&#96;(&#96;gradeID&#96;);</span><br></pre></td></tr></table></figure><h4 id="4、小结"><a class="header-anchor" href="#4、小结">¶</a>4、小结</h4><p>阅读以下代码，哪些SQL语句可以实现修改表？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）ALTER TABLE mybook RENAME book;</span><br><span class="line">2）ALTER TABLE book ADD author  varchar(10) NOT NULL;</span><br><span class="line">3）ALTER TABLE &#96;book&#96; ADD   &#96;pk_book&#96;  PRIMARY KEY &#96;book&#96;(&#96;bookId&#96;);</span><br><span class="line">4）ALTER TABLE &#96;book&#96; DROP &#96;author &#96;;</span><br></pre></td></tr></table></figure><blockquote><p>除了第3个，其他SQL语句都可以实现修改表。</p></blockquote><h4 id="5、上机练习"><a class="header-anchor" href="#5、上机练习">¶</a>5、上机练习</h4><h5 id="（1）创建数据表并实现对表的修改操作"><a class="header-anchor" href="#（1）创建数据表并实现对表的修改操作">¶</a>（1）创建数据表并实现对表的修改操作</h5><table><thead><tr><th>字段名称</th><th>字段说明</th><th>数据类型</th><th>长度</th><th>属性</th></tr></thead><tbody><tr><td>number</td><td>序号</td><td>INT</td><td>4</td><td>自增列</td></tr><tr><td>name</td><td>姓名</td><td>VARCHAR</td><td>50</td><td>非空</td></tr><tr><td>sex</td><td>性别</td><td>CHAR</td><td>2</td><td></td></tr><tr><td>bornDate</td><td>出生日期</td><td>DATETIME</td><td></td><td></td></tr></tbody></table><p>需求说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在test数据库中创建person表</span><br><span class="line">将表名修改为tb_person</span><br><span class="line">删除出生日期字段</span><br><span class="line">添加出生日期字段，数据类型为DATE类型</span><br><span class="line">修改序号字段名（number）为id，类型为BIGINT类型</span><br></pre></td></tr></table></figure><h5 id="（2）添加成绩表主外键"><a class="header-anchor" href="#（2）添加成绩表主外键">¶</a>（2）添加成绩表主外键</h5><p>result表需要添加的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主键约束：学号、课程编号和日期构成组合主键</span><br><span class="line">外键约束：主表student和从表result通过studentNo字段建立主外键关联</span><br></pre></td></tr></table></figure><h3 id="二、DML语句（增删改）"><a class="header-anchor" href="#二、DML语句（增删改）">¶</a>二、DML语句（增删改）</h3><h4 id="1、插入单条数据记录"><a class="header-anchor" href="#1、插入单条数据记录">¶</a>1、插入单条数据记录</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名 [(字段名列表)] VALUES (值列表);</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字段名是可选的，如省略则依次插入所有字段</span><br><span class="line">多个列表和多个值之间使用逗号分隔</span><br><span class="line">值列表和字段名列表一一对应</span><br><span class="line">如插入的是表中部分数据，字段名列表必填</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;student&#96;(&#96;loginPwd&#96;,&#96;studentName&#96;,&#96;gradeId&#96;,&#96;phone&#96;,&#96;bornDate&#96;)</span><br><span class="line">VALUES(&#39;123&#39;,&#39;黄小平&#39;,1,&#39;13956799999&#39;,&#39;1996-5-8&#39;);</span><br></pre></td></tr></table></figure><h4 id="2、插入多条数据记录"><a class="header-anchor" href="#2、插入多条数据记录">¶</a>2、插入多条数据记录</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 新表（字段名列表）</span><br><span class="line">VALUES(值列表1),(值列表2),……,(值列表n);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;subject&#96;(&#96;subjectName&#96;,&#96;classHour&#96;,&#96;gradeID&#96;)</span><br><span class="line">VALUES(&#39;Logic Java&#39;,220,1),(&#39;HTML&#39;,160,1),(&#39;Java OOP&#39;,230,2);</span><br></pre></td></tr></table></figure><p>经验：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为避免表结构发生变化引发的错误，建议插入数据时写明具体字段名！</span><br></pre></td></tr></table></figure><h4 id="3、将查询结果插入新表"><a class="header-anchor" href="#3、将查询结果插入新表">¶</a>3、将查询结果插入新表</h4><h5 id="（1）事先创建新表且与插入数据字段相符"><a class="header-anchor" href="#（1）事先创建新表且与插入数据字段相符">¶</a>（1）事先创建新表且与插入数据字段相符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 新表（字段1,字段2……） </span><br><span class="line">SELECT字段1，字段2……</span><br><span class="line">FROM 原表;</span><br></pre></td></tr></table></figure><h5 id="（2）无需事先创建新表"><a class="header-anchor" href="#（2）无需事先创建新表">¶</a>（2）无需事先创建新表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 新表（</span><br><span class="line">SELECT 字段1，字段2……</span><br><span class="line">FROM 原表）;</span><br></pre></td></tr></table></figure><p>（3）练习</p><p>编写SQL语句实现从学生表提取姓名、手机号两列数据存储到通讯录表中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;phoneList&#96;(</span><br><span class="line">    SELECT &#96;studentName&#96;,&#96;phone&#96;</span><br><span class="line">    FROM &#96;student&#96;);</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如新表已存在，将会报错！</span><br></pre></td></tr></table></figure><h4 id="4、更新数据记录"><a class="header-anchor" href="#4、更新数据记录">¶</a>4、更新数据记录</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 </span><br><span class="line">SET 字段1&#x3D;值1,字段2&#x3D;值2,…,字段n&#x3D;值n </span><br><span class="line">[WHERE 条件];</span><br></pre></td></tr></table></figure><h4 id="5、删除数据记录"><a class="header-anchor" href="#5、删除数据记录">¶</a>5、删除数据记录</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE条件];</span><br><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE语句删除后将重置自增列，表结构及其字段、约束、索引保持不变，执行速度比DELETE语句快</span><br></pre></td></tr></table></figure><h4 id="6、小结"><a class="header-anchor" href="#6、小结">¶</a>6、小结</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL中如何使用一条INSERT语句插入多条数据？</span><br><span class="line">MySQL中将查询结果集插入新表的两种方式是什么？两者的区别是什么？</span><br><span class="line">删除数据时使用DELETE和TRUNCATE的区别是什么？</span><br></pre></td></tr></table></figure><h3 id="三、DQL语句（查询）"><a class="header-anchor" href="#三、DQL语句（查询）">¶</a>三、DQL语句（查询）</h3><h4 id="1、通用查询"><a class="header-anchor" href="#1、通用查询">¶</a>1、通用查询</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT  &lt;字段名列表&gt;</span><br><span class="line">FROM  &lt;表名或视图&gt;</span><br><span class="line">[WHERE  &lt;查询条件&gt;]</span><br><span class="line">[GROUP BY &lt;分组的字段名&gt;]</span><br><span class="line">[HAVING &lt;条件&gt;]</span><br><span class="line">[ORDER BY &lt;排序的字段名&gt; [ASC 或 DESC]]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#96;studentNo&#96;,&#96;studentName&#96;,&#96;phone&#96;,&#96;address&#96;,&#96;bornDate&#96; </span><br><span class="line">FROM &#96;student&#96;</span><br><span class="line">WHERE &#96;gradeId&#96; &#x3D; 1</span><br><span class="line">ORDER BY studentNo;</span><br></pre></td></tr></table></figure><h4 id="2、LIMIT子句"><a class="header-anchor" href="#2、LIMIT子句">¶</a>2、LIMIT子句</h4><p>MySQL查询语句中使用LIMIT子句限制结果集。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT  &lt;字段名列表&gt;</span><br><span class="line">FROM  &lt;表名或视图&gt;</span><br><span class="line">[WHERE  &lt;查询条件&gt;]</span><br><span class="line">[GROUP BY &lt;分组的字段名&gt;]</span><br><span class="line">[ORDER BY  &lt;排序的列名&gt; [ASC 或 DESC]]</span><br><span class="line">[LIMIT [位置偏移量, ]行数];</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#96;studentNo&#96;,&#96;studentName&#96;,&#96;phone&#96;,&#96;address&#96;,&#96;bornDate&#96; </span><br><span class="line">FROM &#96;student&#96;</span><br><span class="line">WHERE &#96;gradeId&#96; &#x3D; 1</span><br><span class="line">ORDER BY studentNo</span><br><span class="line">LIMIT 4,4  </span><br><span class="line">#从第5条开始显示4条</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用LIMIT子句时，注意第1条记录的位置是0！</span><br></pre></td></tr></table></figure><h4 id="3、常用函数"><a class="header-anchor" href="#3、常用函数">¶</a>3、常用函数</h4><h5 id="（1）聚合函数"><a class="header-anchor" href="#（1）聚合函数">¶</a>（1）聚合函数</h5><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>count()</td><td>返回某字段的行数</td></tr><tr><td>avg()</td><td>返回某字段的平均值</td></tr><tr><td>max()</td><td>返回某字段的最大值</td></tr><tr><td>min()</td><td>返回某字段的最小值</td></tr><tr><td>sum()</td><td>返回某字段的和</td></tr></tbody></table><h5 id="（2）字符串函数"><a class="header-anchor" href="#（2）字符串函数">¶</a>（2）字符串函数</h5><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>LENGTH(str)</td><td>计算字符串长度</td><td>SELECT LENGTH(‘date’);</td></tr><tr><td>CONCAT(str1,str2,…)</td><td>字符串合并</td><td>select CONCAT(‘a’,‘b’,‘c’)</td></tr><tr><td>INSERT(str,pos,len,newstr)</td><td>字符串替换</td><td>select INSERT(‘old string’,1,3,‘letter’)</td></tr><tr><td>LOWER(str)</td><td>将字符串转换为小写</td><td>select LOWER(‘A’)</td></tr><tr><td>UPPER(str)</td><td>将字符串转换为大写</td><td>select UPPER(‘a’)</td></tr><tr><td>LEFT(s,n)</td><td>返回字符串 s 开始的最左边 n 个字符</td><td>SELECT LEFT(‘hello’,2);</td></tr><tr><td>RIGHT(s,n)</td><td>返回字符串 s 开始的最右边 n 个字符</td><td>SELECT RIGHT(‘hello word!’,5);</td></tr><tr><td>LPAD(s1,len,s2)</td><td>返回字符串 s1 ，其左边由字符串 s2填充到 len 字符长度，如果 s1 的长度大于 len ，则返回值被缩短至 len 长度</td><td>SELECT RPAD(‘hello’,4,’?’);</td></tr><tr><td>RPAD(s1,len,s2)</td><td>返回字符串 s1 ，其右边由字符串 s2 填充到 len 字符长度，如果 s1 的长度大于 len ，则返回值被缩短至 len 长度</td><td>SELECT RPAD(‘hello’,10,’?’);</td></tr><tr><td>LTRIM(s)</td><td>用于删除字符串 s 左侧的空格</td><td>SELECT LTRIM(’ book ');</td></tr><tr><td>RTRIM(s)</td><td>用于删除字符串 s 右侧的空格</td><td>SELECT RTRIM(’ book ');</td></tr><tr><td>TRIM(s)</td><td>用于删除字符串 s 两侧的空格</td><td>SELECT TRIM(’ book ');</td></tr><tr><td>TRIM(s1 FROM s)</td><td>删除指定字符串的函数</td><td>SELECT TRIM(‘xy’ FROM ‘xyxyabcxy’);</td></tr><tr><td>REPEAT(s,n)</td><td>用于重复字符串 s ，n 表示重复多少次</td><td>SELECT REPEAT(‘mysql’,3);</td></tr><tr><td>SPACE(n)</td><td>用于返回 n 个空格</td><td>SELECT SPACE(20);</td></tr><tr><td>REPLACE(s,s1,s2)</td><td>使用字符串 s2 替换字符串 s 中所有的字符串 s1</td><td>SELECT REPLACE(‘<a href="http://xxx.mysql.com" target="_blank" rel="noopener">xxx.mysql.com</a>’, ‘x’, ‘w’);</td></tr><tr><td>STRCMP(s1,s2)</td><td>用于比较字符串 s1 和 s2 的大小，若所有字符串相同则返回 0 ，若第一个字符串大于第二个字符串则返回 1 ，若第一个字符串小于第二个字符串则返回 -1</td><td>SELECT STRCMP(‘txt’, ‘txt2’), STRCMP(‘txt’, ‘txt’);</td></tr><tr><td>SUBSTRING(str,num,len)</td><td>获取指定位置的子字符串</td><td>select SUBSTRING(‘JavaMysqlOracle’,5,5);</td></tr><tr><td>MID(s,n,len)</td><td>用于获取指定位置的子字符串</td><td>SELECT MID(‘breakfast’,5);</td></tr><tr><td>LOCATE(str1,str)</td><td>返回字符串 str1 在字符串 str 中的开始位置</td><td>SELECT LOCATE(‘ball’, ‘football’);</td></tr><tr><td>POSITION(str1 IN str)</td><td>返回字符串 str1 在字符串 str 中的开始位置</td><td>SELECT POSITION(‘ball’ IN ‘football’);</td></tr><tr><td>INSTR(str, str1)</td><td>返回子字符串 str1 在字符串 str 中的开始位置</td><td>SELECT INSTR(‘football’, ‘ball’);</td></tr><tr><td>REVERSE(s)</td><td>将字符串 s 反转</td><td>SELECT REVERSE(‘abcd’);</td></tr><tr><td>ELT(n, s1, s2, s3, …)</td><td>返回第 n 个字符串，如果 n超出范围则返回 NULL</td><td>SELECT ELT(3, ‘a’, ‘b’, ‘c’, ‘d’);</td></tr><tr><td>FIELD(s, s1, s2, …)</td><td>返回字符串 s 在列表 s1, s2, … 中的位置，如果不存在字符串 s 则返回 0 ，如果字符串 s 是 NULL 也返回 0</td><td>SELECT FIELD(‘hi’, ‘hihi’, ‘hey’, ‘hi’, ‘bas’);</td></tr><tr><td>FIND_IN_SET(s1, s2)</td><td>返回字符串 s1 在字符串列表 s2中的位置</td><td>SELECT FIND_IN_SET(‘hi’, ‘hihi,hey,hi,bas’);</td></tr></tbody></table><h5 id="（3）时间日期函数"><a class="header-anchor" href="#（3）时间日期函数">¶</a>（3）时间日期函数</h5><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>CURDATE()</td><td>获取当前日期</td><td>select CURDATE();</td></tr><tr><td>CURTIME()</td><td>获取当前时间</td><td>select CURTIME();</td></tr><tr><td>CURRENT_TIMESTAMP() 、<br>.LOCALTIME() 、NOW() 、SYSDATE()<br>CURRENT_TIMESTAMP()</td><td>获取当前日期和时间</td><td>select NOW();</td></tr><tr><td>UNIX_TIMESTAMP()</td><td>获取 UNIX 格式的时间戳</td><td>SELECT UNIX_TIMESTAMP();</td></tr><tr><td>FROM_UNIXTIME()</td><td>将 UNIX 格式的时间戳转换为普通格式的时间</td><td>SELECT FROM_UNIXTIME(‘1495542689’);</td></tr><tr><td>UTC_DATE() UTC_DATE()</td><td>获取当前 UTC (世界标准时间) 日期值</td><td>SELECT UTC_DATE();</td></tr><tr><td>UTC_TIME() UTC_TIME()</td><td>获取当前 UTC (世界标准时间) 时间值</td><td>SELECT UTC_TIME();</td></tr><tr><td>YEAR(date)</td><td>返回日期date的年份</td><td>select YEAR(NOW());</td></tr><tr><td>QUARTER(date)</td><td>返回日期date为一年中第几季度</td><td>select QUARTER(NOW());</td></tr><tr><td>MONTH(date)</td><td>返回日期date的月份</td><td>select MONTH(NOW());</td></tr><tr><td>WEEK(date)</td><td>返回日期date为一年中第几周</td><td>select WEEK(NOW());</td></tr><tr><td>DAY(date)</td><td>返回日期date的日期</td><td>select DAY(NOW());</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回 date 是一年中的第几天，一年有 365 天</td><td>SELECT DAYOFYEAR(‘2017-05-23’);</td></tr><tr><td>DAYOFMONTH(date)</td><td>计算 date 是一个月中的第几天</td><td>SELECT DAYOFMONTH(‘2017-05-23’);</td></tr><tr><td>HOUR(time)</td><td>返回日期date的小时</td><td>select HOUR(NOW());</td></tr><tr><td>MINUTE(time)</td><td>返回日期date的分钟</td><td>select MINUTE(NOW());</td></tr><tr><td>SECOND(time)</td><td>返回日期date的秒</td><td>select SECOND(NOW());</td></tr><tr><td>TIME_TO_SEC(time)</td><td>将 time 转换为秒钟，公式为 &quot; 小时3600 + 分钟60 + 秒 &quot;</td><td>SELECT TIME_TO_SEC(‘23:23:00’);</td></tr><tr><td>SEC_TO_TIME(time)</td><td>将秒值转换为时间格式</td><td>SELECT SEC_TO_TIME(‘84180’);</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回日期date的date1和date2间隔的天数</td><td>select DATEDIFF(NOW(),‘2020-06-07’);</td></tr><tr><td>ADDDATE(date,n)</td><td>计算日期date加上n天以后在日期</td><td>select ADDDATE(NOW(),3);</td></tr><tr><td>DATE_FORMAT(date, format)</td><td>格式化日期，即根据 format 指定的格式显示 date 值</td><td>SELECT DATE_FORMAT(‘1997-10-04 22:23:00’, ‘%W %M %Y’);</td></tr><tr><td>TIME_FORMAT(time, format)</td><td>格式化时间，即根据 format 指定的格式显示 time 值</td><td>SELECT TIME_FORMAT(‘16:00:00’, ‘%H %k %I’);</td></tr><tr><td>GET_FORMAT()</td><td>指定值类型和格式化类型，然后会显示成格式字符串</td><td>SELECT DATE_FORMAT(‘2000-10-05 22:23:00’, GET_FORMAT(DATE,‘USA’));</td></tr></tbody></table><p>参考内容：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%d该月日期，数字形式（00..31） </span></span><br><span class="line"><span class="comment">%e该月日期，数字形式（0..31） </span></span><br><span class="line"><span class="comment">%f微秒（000000...999999） </span></span><br><span class="line"><span class="comment">%H以2位数表示24小时（00..23） </span></span><br><span class="line"><span class="comment">%h,%I 以2位数表示12小时（01..12） </span></span><br><span class="line"><span class="comment">%i分钟，数字形式（00-59） </span></span><br><span class="line"><span class="comment">%j一年中的天数（001-366） </span></span><br><span class="line"><span class="comment">%k以24小时（0-23） </span></span><br><span class="line"><span class="comment">%l以12小时（0..12） </span></span><br><span class="line"><span class="comment">%M月份名称（january..December） </span></span><br><span class="line"><span class="comment">%m月份数字形式（00..12） </span></span><br><span class="line"><span class="comment">%p上午（AM）或下午（PM） </span></span><br><span class="line"><span class="comment">%r时间，12小时制（小时hh：分钟mm：秒钟ss后面加AM或PM）</span></span><br><span class="line"><span class="comment">%S,%s以2位数形式表示秒（00..59） </span></span><br><span class="line"><span class="comment">%T时间，24小时制（小时hh：分钟mm：秒数ss） </span></span><br><span class="line"><span class="comment">%U周（00..53），其中周日为每周的第一天 </span></span><br><span class="line"><span class="comment">%u周（00..53），其中周一为每周的第一天 </span></span><br><span class="line"><span class="comment">%V周（01..53），其中周日为每周的第一天，和%X一起使用 </span></span><br><span class="line"><span class="comment">%v周（01..53），其中周一为每周的第一天，和%x一起使用 </span></span><br><span class="line"><span class="comment">%W工作日名称（周日..周六）</span></span><br><span class="line"><span class="comment">%w一周中的每日（0=周日..6=周六） </span></span><br><span class="line"><span class="comment">%X该周的年份，其中周日为每周的第一天；数字形式4位数，和%V同时使用 </span></span><br><span class="line"><span class="comment">%x该周的年份，其中周一为每周的第一天；数字形式4位数，和%v同时使用 </span></span><br><span class="line"><span class="comment">%Y4位数形式表示年份 </span></span><br><span class="line"><span class="comment">%y2位数形式表示年份 </span></span><br><span class="line"><span class="comment">%% “%”文字字符</span></span><br></pre></td></tr></table></figure><h5 id="（4）数学函数"><a class="header-anchor" href="#（4）数学函数">¶</a>（4）数学函数</h5><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>ABS(x)</td><td>绝对值函数</td><td>SELECT ABS(-2);</td></tr><tr><td>PI()</td><td>返回圆周率的函数</td><td>SELECT PI();</td></tr><tr><td>SQRT(x)</td><td>平方根函数，返回非负数二次方根</td><td>SELECT SQRT(9);</td></tr><tr><td>CEIL(x)</td><td>向上取整</td><td>SELECT CEIL(2.1);</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td><td>SELECT FLOOR(2.5);</td></tr><tr><td>RAND(x)</td><td>返回一个随机浮点值，范围在 0 ~ 1 之间</td><td>SELECT RAND();</td></tr><tr><td>ROUND(x)</td><td>对x进行四舍五入</td><td>SELECT ROUND(-1.34);</td></tr><tr><td>ROUND(x,y)</td><td>对x进行四舍五入，并且保留小数点后y位</td><td>SELECT ROUND(1.37,1);</td></tr><tr><td>TRUNCATE(x,y)</td><td>对x进行截取，结果保留小数点后y位</td><td>SELECT TRUNCATE(1.31,1);</td></tr><tr><td>POW(x,y)</td><td>返回 x 的 y 次方的结果</td><td>SELECT POW(2,4);</td></tr></tbody></table><h5 id="（5）系统信息函数"><a class="header-anchor" href="#（5）系统信息函数">¶</a>（5）系统信息函数</h5><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>VERSION()</td><td>获取 MySQL 版本号</td><td>SELECT VERSION();</td></tr><tr><td>CHARSET(str)</td><td>查看字符串 str 的字符集</td><td>SELECT CHARSET(‘abc’);</td></tr><tr><td>COLLATION(str)</td><td>查看字符串 str 的字符排列方式</td><td>SELECT COLLATION(‘abc’);</td></tr><tr><td>LAST_INSERT_ID()</td><td>获取最后一个自动生成的ID 值</td><td>SELECT LAST_INSERT_ID();</td></tr><tr><td>USER() 、<br>CURRENT_USER() 、<br>SYSTEM_USER()</td><td>返回当前登录的用户及主机名</td><td>SELECT USER();<br>SELECT CURRENT_USER();<br>SELECT SYSTEM_USER();</td></tr><tr><td>CONNECTION_ID()</td><td>查看当前用户的连接数的ID</td><td>SELECT CONNECTION_ID();</td></tr><tr><td>DATABASE()、SCHEMA()</td><td>查看当前使用的数据库</td><td>SELECT DATABASE();<br>SELECT SCHEMA();</td></tr><tr><td>SHOW PROCESSLIST</td><td>查看当前用户的连接信息</td><td>SHOW PROCESSLIST;</td></tr></tbody></table><blockquote><p>CONNECTION_ID()函数的参数</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. Id ：用户登录 MySQL 时，系统分配的连接 id</span><br><span class="line">2. User ：当前连接的用户</span><br><span class="line">3. Host ：显示这个语句是从哪个 IP 的哪个端口上发出的，可以用来追踪出现问题语句的用户</span><br><span class="line">4. db ：显示这个进程目前连接的是哪个数据库</span><br><span class="line">5. Command ：显示当前连接执行的命令，一般取值为休眠(Sleep)、查询(Query)、连接(Connect)</span><br><span class="line">6. Time ：显示这个状态持续的时间，单位是秒</span><br><span class="line">7. State ：显示使用当前连接的 SQL 语句的状态</span><br><span class="line">8. Info ：显示这个 SQL 语句</span><br></pre></td></tr></table></figure><h5 id="（6）条件判断函数"><a class="header-anchor" href="#（6）条件判断函数">¶</a>（6）条件判断函数</h5><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>IF() IF(expr, v1, v2)</td><td>如果表达式 expr 为 TRUE ，则返回值为 v1 ，否则返回 v2</td><td>SELECT IF(1&gt;2, 2, 3);</td></tr><tr><td>IFNULL() IFNULL(v1, v2)</td><td>如果 v1 不为 NULL ，则返回值为 v1 ；如果 v1 为 NULL ，则返回值为 v2</td><td>SELECT IFNULL(1,2), IFNULL(NULL,10);</td></tr><tr><td>CASE expr WHEN v1 THEN r1 [WHEN v2 THEN r2] [ELSE rn] END</td><td>如果 expr 等于某个 vn，则返回对应位置 THEN 后面的结果，如果与所有值都不相等，则返回 ELSE 后面的 rn</td><td>SELECT CASE 2 WHEN 1 THEN ‘one’ WHEN 2 THEN ‘two’ ELSE ‘more’ END;</td></tr></tbody></table><h5 id="（7）加密-解密函数"><a class="header-anchor" href="#（7）加密-解密函数">¶</a>（7）加密/解密函数</h5><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>PASSWORD(str)</td><td>从明文密码 str 计算并返回加密后的密码字符串，当参数为 NULL 时，返回 NULL</td><td>SELECT PASSWORD(‘newpwd’);</td></tr><tr><td>MD5(str)</td><td>为字符串 str 算出一个 MD5 128 比特校验值</td><td>SELECT MD5(‘newpwd’);</td></tr><tr><td>ENCODE(str, pswd_str)</td><td>使用 pswd_str 作为密码，加密 str</td><td>SELECT ENCODE(‘secret’, ‘newpwd’);</td></tr><tr><td>DECODE(crypt_str, pswd_str)</td><td>使用 pswd_str 作为密码，解密加密字符串 crypt_str</td><td>SELECT DECODE(ENCODE(‘secret’,‘cry’), ‘cry’);</td></tr></tbody></table><h5 id="（8）其它函数"><a class="header-anchor" href="#（8）其它函数">¶</a>（8）其它函数</h5><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>FORMAT(x, n)</td><td>将数字 x 格式化，并以四舍五入的方式保留小数点后 n 位，结果以字符串的形式返回</td><td>SELECT FORMAT(1.23456, 4);</td></tr><tr><td>CONV()</td><td>不同进制数之间的转换</td><td>SELECT CONV(‘a’,16,2), # 将16进制的a转换为2进制<br>SELECT CONV(15,10,2), # 将10进制的15转换为2进制<br>SELECT CONV(15,10,8), # 将10进制的15转换为8进制<br>SELECT CONV(15,10,16); # 将10进制的15转换为16进制</td></tr><tr><td>INET_ATON(expr)</td><td>将网络地址转换为一个代表该地址数值的整数</td><td>SELECT INET_ATON(‘192.168.1.1’);</td></tr><tr><td>GET_LOCK(str, timeout)</td><td>使用字符串 str 来得到一个锁，持续时间 timeout 秒<br>1. 若成功得到锁，则返回 1<br>2. 若操作超时，则返回 0<br>3. 若发生错误，则返回 NULL</td><td>SELECT GET_LOCK(‘lock1’, 10);</td></tr><tr><td>RELEASE_LOCAK(str)</td><td>用于解开被 GET_LOCK() 获取的，用字符串 str 所命名的锁<br>1. 若锁被解开，则返回 1<br>2. 若该线程尚未创建锁，则返回 0<br>3. 若命名的锁不存在，则返回 NULL<br>4. 若该锁从未被 GET_LOCK() 的调用获取，或锁已经被提前解开，则该锁不存在</td><td>SELECT RELEASE_LOCK(‘lock1’);</td></tr><tr><td>IS_FREE_LOCK(str)</td><td>检查名为 str 的锁是否可以使用<br>1. 若锁可以使用，则返回 1<br>2. 若锁正在被使用，则返回 0<br>3. 若出现错误，则返回 NULL</td><td>SELECT IS_FREE_LOCK(‘lock1’);</td></tr><tr><td>IS_USED_LOCK(str)</td><td>检查名为 str 的锁是否正在被使用，若被封锁，则返回使用该锁的客户端的连接标识<br>符，否则返回 NULL</td><td>SELECT IS_USED_LOCK(‘lock1’);</td></tr><tr><td>BENCHMARK(count, expr)</td><td>用于重复 count 次执行表达式 expr<br>1. 可以用于计算 MySQL 处理表达式的速度<br>2. 可以在 MySQL 客户端内部报告语句执行的时间</td><td>SELECT PASSWORD(‘newpwd’);<br>SELECT BENCHMARK( 500000, PASSWORD(‘newpwd’) );</td></tr><tr><td>CONVERT(… USING …)</td><td>用于改变字符串的默认字符集<br>默认是utf8字符集</td><td>SELECT CHARSET(‘abc’);<br>SELECT CHARSET(CONVERT(‘abc’ USING latin1));</td></tr><tr><td>CONVERT(x, type)</td><td>将一个数据类型的值转换为另一个数据类型的值</td><td>SELECT CONVERT(100, CHAR(2));</td></tr></tbody></table><h4 id="4、运算符"><a class="header-anchor" href="#4、运算符">¶</a>4、运算符</h4><h5 id="（1）算术运算符"><a class="header-anchor" href="#（1）算术运算符">¶</a>（1）算术运算符</h5><table><thead><tr><th>运算符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>select 1+2;</td></tr><tr><td>-</td><td>减法</td><td>select 1-2;</td></tr><tr><td>*</td><td>乘法</td><td>select 2*5;</td></tr><tr><td>/或DIV</td><td>除法</td><td>select 9/3; 或 select 9 DIV 3;</td></tr><tr><td>%或MOD</td><td>取余</td><td>select 9%2; 或 select 9 MOD 2;</td></tr></tbody></table><h5 id="（2）比较运算符"><a class="header-anchor" href="#（2）比较运算符">¶</a>（2）比较运算符</h5><p>SELECT 语句中的条件语句经常要使用比较运算符。</p><p>通过这些比较运算符，可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">描述</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;&gt;, !=</td><td style="text-align:left">不等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BETWEEN</td><td style="text-align:left">在两值之间</td><td style="text-align:left">&gt;=min&amp;&amp;&lt;=max</td></tr><tr><td style="text-align:left">NOT BETWEEN</td><td style="text-align:left">不在两值之间</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IN</td><td style="text-align:left">在集合中</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">NOT IN</td><td style="text-align:left">不在集合中</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;=&gt;</td><td style="text-align:left">严格比较两个NULL值是否相等</td><td style="text-align:left">两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0</td></tr><tr><td style="text-align:left">LIKE</td><td style="text-align:left">模糊匹配</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">REGEXP 或 RLIKE</td><td style="text-align:left">正则式匹配</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IS NULL</td><td style="text-align:left">为空</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IS NOT NULL</td><td style="text-align:left">不为空</td><td style="text-align:left"></td></tr></tbody></table><h6 id="1）等于"><a class="header-anchor" href="#1）等于">¶</a>1）等于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&#x3D;3;</span><br><span class="line">+-----+</span><br><span class="line">| 2&#x3D;3 |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select NULL &#x3D; NULL;</span><br><span class="line">+-------------+</span><br><span class="line">| NULL &#x3D; NULL |</span><br><span class="line">+-------------+</span><br><span class="line">|        NULL |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><h6 id="2）不等于"><a class="header-anchor" href="#2）不等于">¶</a>2）不等于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;&gt;3;</span><br><span class="line">+------+</span><br><span class="line">| 2&lt;&gt;3 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h6 id="3）安全等于"><a class="header-anchor" href="#3）安全等于">¶</a>3）安全等于</h6><p>与 <strong>=</strong> 的区别在于当两个操作码均为 NULL 时，其所得值为 1 而不为 NULL，而当一个操作码为 NULL 时，其所得值为 0而不为 NULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;&#x3D;&gt;3;</span><br><span class="line">+-------+</span><br><span class="line">| 2&lt;&#x3D;&gt;3 |</span><br><span class="line">+-------+</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select null&#x3D;null;</span><br><span class="line">+-----------+</span><br><span class="line">| null&#x3D;null |</span><br><span class="line">+-----------+</span><br><span class="line">|      NULL |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql&gt; select null&lt;&#x3D;&gt;null;</span><br><span class="line">+-------------+</span><br><span class="line">| null&lt;&#x3D;&gt;null |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><h6 id="4）小于"><a class="header-anchor" href="#4）小于">¶</a>4）小于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;3;</span><br><span class="line">+-----+</span><br><span class="line">| 2&lt;3 |</span><br><span class="line">+-----+</span><br><span class="line">|   1 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><h6 id="5）小于等于"><a class="header-anchor" href="#5）小于等于">¶</a>5）小于等于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;&#x3D;3;</span><br><span class="line">+------+</span><br><span class="line">| 2&lt;&#x3D;3 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h6 id="6）大于"><a class="header-anchor" href="#6）大于">¶</a>6）大于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&gt;3;</span><br><span class="line">+-----+</span><br><span class="line">| 2&gt;3 |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><h6 id="7）大于等于"><a class="header-anchor" href="#7）大于等于">¶</a>7）大于等于</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&gt;&#x3D;3;</span><br><span class="line">+------+</span><br><span class="line">| 2&gt;&#x3D;3 |</span><br><span class="line">+------+</span><br><span class="line">|    0 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h6 id="8）BETWEEN"><a class="header-anchor" href="#8）BETWEEN">¶</a>8）BETWEEN</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 5 between 1 and 10;</span><br><span class="line">+--------------------+</span><br><span class="line">| 5 between 1 and 10 |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><h6 id="9）IN"><a class="header-anchor" href="#9）IN">¶</a>9）IN</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 5 in (1,2,3,4,5);</span><br><span class="line">+------------------+</span><br><span class="line">| 5 in (1,2,3,4,5) |</span><br><span class="line">+------------------+</span><br><span class="line">|                1 |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><h6 id="10）NOT-IN"><a class="header-anchor" href="#10）NOT-IN">¶</a>10）NOT IN</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 5 not in (1,2,3,4,5);</span><br><span class="line">+----------------------+</span><br><span class="line">| 5 not in (1,2,3,4,5) |</span><br><span class="line">+----------------------+</span><br><span class="line">|                    0 |</span><br><span class="line">+----------------------+</span><br></pre></td></tr></table></figure><h6 id="11）IS-NULL"><a class="header-anchor" href="#11）IS-NULL">¶</a>11）IS NULL</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select null is NULL;</span><br><span class="line">+--------------+</span><br><span class="line">| null is NULL |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#39;a&#39; is NULL;</span><br><span class="line">+-------------+</span><br><span class="line">| &#39;a&#39; is NULL |</span><br><span class="line">+-------------+</span><br><span class="line">|           0 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><h6 id="12）IS-NOT-NULL"><a class="header-anchor" href="#12）IS-NOT-NULL">¶</a>12）IS NOT NULL</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select null IS NOT NULL;</span><br><span class="line">+------------------+</span><br><span class="line">| null IS NOT NULL |</span><br><span class="line">+------------------+</span><br><span class="line">|                0 |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql&gt; select &#39;a&#39; IS NOT NULL;</span><br><span class="line">+-----------------+</span><br><span class="line">| &#39;a&#39; IS NOT NULL |</span><br><span class="line">+-----------------+</span><br><span class="line">|               1 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><h6 id="13、LIKE"><a class="header-anchor" href="#13、LIKE">¶</a>13、LIKE</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select &#39;12345&#39; like &#39;12%&#39;;</span><br><span class="line">+--------------------+</span><br><span class="line">| &#39;12345&#39; like &#39;12%&#39; |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#39;12345&#39; like &#39;12_&#39;;</span><br><span class="line">+--------------------+</span><br><span class="line">| &#39;12345&#39; like &#39;12_&#39; |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  0 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><h6 id="14、REGEXP"><a class="header-anchor" href="#14、REGEXP">¶</a>14、REGEXP</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select &#39;beijing&#39; REGEXP &#39;jing&#39;;</span><br><span class="line">+-------------------------+</span><br><span class="line">| &#39;beijing&#39; REGEXP &#39;jing&#39; |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                       1 |</span><br><span class="line">+-------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#39;beijing&#39; REGEXP &#39;xi&#39;;</span><br><span class="line">+-----------------------+</span><br><span class="line">| &#39;beijing&#39; REGEXP &#39;xi&#39; |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     0 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><h5 id="（3）逻辑运算符"><a class="header-anchor" href="#（3）逻辑运算符">¶</a>（3）逻辑运算符</h5><p>逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。</p><table><thead><tr><th style="text-align:left">运算符号</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">NOT 或 !</td><td style="text-align:left">逻辑非</td></tr><tr><td style="text-align:left">AND</td><td style="text-align:left">逻辑与</td></tr><tr><td style="text-align:left">OR</td><td style="text-align:left">逻辑或</td></tr><tr><td style="text-align:left">XOR</td><td style="text-align:left">逻辑异或</td></tr></tbody></table><h6 id="1）与"><a class="header-anchor" href="#1）与">¶</a>1）与</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2 and 0;</span><br><span class="line">+---------+</span><br><span class="line">| 2 and 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql&gt; select 2 and 1;   </span><br><span class="line">+---------+     </span><br><span class="line">| 2 and 1 |      </span><br><span class="line">+---------+      </span><br><span class="line">|       1 |      </span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><h6 id="2）或"><a class="header-anchor" href="#2）或">¶</a>2）或</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2 or 0;</span><br><span class="line">+--------+</span><br><span class="line">| 2 or 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2 or 1;</span><br><span class="line">+--------+</span><br><span class="line">| 2 or 1 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 0 or 0;</span><br><span class="line">+--------+</span><br><span class="line">| 0 or 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      0 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 || 0;</span><br><span class="line">+--------+</span><br><span class="line">| 1 || 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><h6 id="3）非"><a class="header-anchor" href="#3）非">¶</a>3）非</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select not 1;</span><br><span class="line">+-------+</span><br><span class="line">| not 1 |</span><br><span class="line">+-------+</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select !0;</span><br><span class="line">+----+</span><br><span class="line">| !0 |</span><br><span class="line">+----+</span><br><span class="line">|  1 |</span><br><span class="line">+----+</span><br></pre></td></tr></table></figure><h6 id="4）异或"><a class="header-anchor" href="#4）异或">¶</a>4）异或</h6><p>当任意一个操作数为NULL时,返回值为NULL，对于非NULL的操作数,如果两个的逻辑真假值相异，则返回结果为1，否则为0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1 xor 1;</span><br><span class="line">+---------+</span><br><span class="line">| 1 xor 1 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 0 xor 0;</span><br><span class="line">+---------+</span><br><span class="line">| 0 xor 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 xor 0;</span><br><span class="line">+---------+</span><br><span class="line">| 1 xor 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select null or 1;</span><br><span class="line">+-----------+</span><br><span class="line">| null or 1 |</span><br><span class="line">+-----------+</span><br><span class="line">|         1 |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 ^ 0;</span><br><span class="line">+-------+</span><br><span class="line">| 1 ^ 0 |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><h5 id="（4）位运算符"><a class="header-anchor" href="#（4）位运算符">¶</a>（4）位运算符</h5><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><table><thead><tr><th style="text-align:left">运算符号</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">按位或</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">取反</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移</td></tr></tbody></table><h6 id="1）按位与"><a class="header-anchor" href="#1）按位与">¶</a>1）按位与</h6><p>对应的二进制位都为 1 ，则该位的运算结果为 1 ，否则为 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3&amp;5;</span><br><span class="line">+-----+</span><br><span class="line">| 3&amp;5 |</span><br><span class="line">+-----+</span><br><span class="line">|   1 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><h6 id="2）按位或"><a class="header-anchor" href="#2）按位或">¶</a>2）按位或</h6><p>对应的二进制位有一个或两个为 1 ，则该位的运算结果为 1 ，否则为 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT 10 | 15 , 9 | 4 | 2 ;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| 10 | 15 | 9 | 4 | 2 | # 10的二进制为1010,15的二进制为1111，按位或运算之后结果为</span><br><span class="line">1111，即15</span><br><span class="line">+---------+-----------+ # 9的二进制为1001,4为0100,2的二进制为0010，按位或运算之后</span><br><span class="line">1111</span><br><span class="line">| 15 | 15 |</span><br><span class="line">+---------+-----------+</span><br></pre></td></tr></table></figure><h6 id="3）按位异或"><a class="header-anchor" href="#3）按位异或">¶</a>3）按位异或</h6><p>对应的二进制位不相同时，结果为 1，否则为 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3^5;</span><br><span class="line">+-----+</span><br><span class="line">| 3^5 |</span><br><span class="line">+-----+</span><br><span class="line">|   6 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><h6 id="4）按位取反"><a class="header-anchor" href="#4）按位取反">¶</a>4）按位取反</h6><p>将对应的二进制数逐位反转，即 1 取反后变 0 ，0 取反后变 1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ~18446744073709551612;</span><br><span class="line">+-----------------------+</span><br><span class="line">| ~18446744073709551612 |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     3 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><h6 id="5）按位右移"><a class="header-anchor" href="#5）按位右移">¶</a>5）按位右移</h6><p>使指定的二进制位都右移指定的位数，右移指定位之后，右边低位的数值将被移出<br>并丢弃，左边高位空出的职位用 0 补齐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3&gt;&gt;1;</span><br><span class="line">+------+</span><br><span class="line">| 3&gt;&gt;1 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h6 id="6）按位左移"><a class="header-anchor" href="#6）按位左移">¶</a>6）按位左移</h6><p>使指定的二进制位都左移指定的位数，左移指定位之后，左边高位的数值将被移出<br>并丢弃，右边低位空出的位置用 0 补齐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3&lt;&lt;1;</span><br><span class="line">+------+</span><br><span class="line">| 3&lt;&lt;1 |</span><br><span class="line">+------+</span><br><span class="line">|    6 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h5 id="（5）运算符优先级"><a class="header-anchor" href="#（5）运算符优先级">¶</a>（5）运算符优先级</h5><p>最低优先级为： <strong>:=</strong>。<br><img data-src="https://img-blog.csdnimg.cn/20200711174430202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>最高优先级为： <strong>!</strong>、<strong>BINARY</strong>、 <strong>COLLATE</strong>。</p>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-MHA高可用方案</title>
    <link href="https://pdxblog.top/MySQL-MHA%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88.html"/>
    <id>https://pdxblog.top/MySQL-MHA%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:10.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-MHA高可用方案"><a class="header-anchor" href="#MySQL-MHA高可用方案">¶</a>MySQL-MHA高可用方案</h2><h3 id="一、MHA简介"><a class="header-anchor" href="#一、MHA简介">¶</a>一、MHA简介</h3><p>MHA（Master High Availability）目前在MySQL高可用方面是一个相对成熟的解决方案，它由日本DeNA公司youshimaton（现就职于Facebook公司）开发，是一套优秀的作为MySQL高可用性环境下故障切换和主从提升的高可用软件。在MySQL故障切换过程中，MHA能做到在0~30秒之内自动完成数据库的故障切换操作，并且在进行故障切换的过程中，MHA能在最大程度上保证数据的一致性，以达到真正意义上的高可用。</p><p>MHA里有两个角色一个是MHA Node（数据节点）另一个是MHA Manager（管理节点）。 MHA Manager可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台slave节点上。MHA Node运行在每台<br>MySQL服务器上，MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将最新数据的slave提升为新的master，然后将所有其他的slave重新指向新的master。整个故障转移过程对应用程序完全透明。</p><p>在MHA自动故障切换过程中，MHA试图从宕机的主服务器上保存二进制日志，最大程度的保证数据的不丢失，但这并不总是可行的。例如，如果主服务器硬件故障或无法通过ssh访问，MHA没法保存二进制日志，只进行故障转移而丢失了最新的数据。使用MySQL 5.5的半同步复制，可以大大降低数据丢失的风险。MHA可以与半同步复制结合起来。如果只有一个slave已经收到了最新的二进制日志，MHA可以将最新的二进制日志应用于其他所有的slave服务器上，因此可以保证所有节点的数据一致性。</p><blockquote><p>注：从MySQL5.5开始，MySQL以插件的形式支持半同步复制。</p></blockquote><p><strong>如何理解半同步呢？首先我们来看看异步，全同步的概念。</strong></p><h4 id="1、异步复制（Asynchronous-replication）"><a class="header-anchor" href="#1、异步复制（Asynchronous-replication）">¶</a>1、异步复制（Asynchronous replication）</h4><p>MySQL默认的复制即是异步的，主库在执行完客户端提交的事务后会立即将结果返给给客户端，并不关心从库是否已经接收并处理，这样就会有一个问题，主如果crash掉了，此时主上已经提交的事务可能并没有传到从上，如果此时，强行将从提升为主，可能导致新主上的数据不完整。</p><h4 id="2、全同步复制（Fully-synchronous-replication）"><a class="header-anchor" href="#2、全同步复制（Fully-synchronous-replication）">¶</a>2、全同步复制（Fully synchronous replication）</h4><p>指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的性能必然会收到严重的影响。</p><h4 id="3、半同步复制（Semisynchronous-replication）"><a class="header-anchor" href="#3、半同步复制（Semisynchronous-replication）">¶</a>3、半同步复制（Semisynchronous replication）</h4><p>介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端。相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP/IP往返的时间。所以，半同步复制最好在低延时的网络中使用。</p><h4 id="4、异步与半同步异同"><a class="header-anchor" href="#4、异步与半同步异同">¶</a>4、异步与半同步异同</h4><p>默认情况下MySQL的复制是异步的，Master上所有的更新操作写入Binlog之后并不确保所有的更新都被复制到Slave之上。异步操作虽然效率高，但是在Master/Slave出现问题的时候，存在很高数据不同步的风险，甚至可能丢失数据。</p><p>MySQL5.5引入半同步复制功能的目的是为了保证在master出问题的时候，至少有一台Slave的数据是完整的。在超时的情况下也可以临时转入异步复制，保障业务的正常使用，直到一台salve追赶上之后，继续切换到半同步模式。</p><h4 id="5、MHA工作原理"><a class="header-anchor" href="#5、MHA工作原理">¶</a>5、MHA工作原理</h4><p>相较于其它HA软件，MHA的目的在于维持MySQL Replication中Master库的高可用性，其最大特点是可以修复多个Slave之间的差异日志，最终使所有Slave保持数据一致，然后从中选择一个充当新的Master，并将其它Slave指向它。</p><ul><li><p>从宕机崩溃的master保存二进制日志事件(binlogevents)。</p></li><li><p>识别含有最新更新的slave。</p></li><li><p>应用差异的中继日志(relay log)到其它slave。</p></li><li><p>应用从master保存的二进制日志事件(binlogevents)。</p></li><li><p>提升一个slave为新master。 -使其它的slave连接新的master进行复制。</p></li></ul><p>目前MHA主要支持一主多从的架构，要搭建MHA,要求一个复制集群中必须最少有三台数据库服务器，一主二从，即一台充当master，一台充当备用master，另外一台充当从库，因为至少需要三台服务器。</p><h3 id="二、搭建实验环境"><a class="header-anchor" href="#二、搭建实验环境">¶</a>二、搭建实验环境</h3><p>接下来部署MHA，具体的搭建环境如下：</p><table><thead><tr><th>角色</th><th>IP地址</th><th>主机名</th><th>server id</th><th>类型</th><th>OS</th></tr></thead><tbody><tr><td>Manager</td><td>192.168.206.200</td><td>manager</td><td></td><td>管理节点</td><td>centos 7.8</td></tr><tr><td>Master</td><td>192.168.206.201</td><td>maser</td><td>1</td><td>主MySQL（写入）</td><td>centos 7.8</td></tr><tr><td>CandidateMaster</td><td>192.168.206.202</td><td>c-master</td><td>2</td><td>从MySQL（读）</td><td>centos 7.8</td></tr><tr><td>slave</td><td>192.168.206.203</td><td>slave</td><td>3</td><td>从MySQL（读）</td><td>centos 7.8</td></tr></tbody></table><p>其中master对外提供写服务，备选master（实际的slave，主机名m3）提供读服务，slave也提供相关的读服务，一旦master宕机，将会把备选master提升为新的master，slave指向新的master，manager作为管理服务器。</p><h3 id="三、基础环境准备"><a class="header-anchor" href="#三、基础环境准备">¶</a>三、基础环境准备</h3><h4 id="1、基础配置"><a class="header-anchor" href="#1、基础配置">¶</a>1、基础配置</h4><p>在配置好IP地址和主机名后，检查selinux、防火墙设置，关闭 selinux ，防火墙服务，以便后期主从同步不出错。</p><blockquote><p>注：时间要同步</p></blockquote><h4 id="2、-在4台机器都配置epel源"><a class="header-anchor" href="#2、-在4台机器都配置epel源">¶</a>2、 在4台机器都配置epel源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装epel源</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载阿里开源镜像的epel源文件</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除系统yum缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新生成新的yum缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h4 id="3、建立ssh无交互登录环境"><a class="header-anchor" href="#3、建立ssh无交互登录环境">¶</a>3、建立ssh无交互登录环境</h4><h5 id="（1）Manager主机"><a class="header-anchor" href="#（1）Manager主机">¶</a>（1）Manager主机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# ssh-keygen </span><br><span class="line">[root@manager ~]# for i in 1 2 3;do ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.206.20$i;done</span><br></pre></td></tr></table></figure><h5 id="（2）Candidate-master主机"><a class="header-anchor" href="#（2）Candidate-master主机">¶</a>（2）Candidate master主机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-master ~]# ssh-keygen </span><br><span class="line">[root@slave-master ~]# for i in 1 2 3;do ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.206.20$i;done</span><br></pre></td></tr></table></figure><h5 id="（3）master主机"><a class="header-anchor" href="#（3）master主机">¶</a>（3）master主机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ssh-keygen </span><br><span class="line">[root@master ~]# for i in 1 2 3;do ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.206.20$i;done</span><br></pre></td></tr></table></figure><h5 id="（4）slave主机"><a class="header-anchor" href="#（4）slave主机">¶</a>（4）slave主机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slave ~]# ssh-keygen </span><br><span class="line">[root@slave ~]# for i in 1 2 3;do ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.206.20$i;done</span><br></pre></td></tr></table></figure><h4 id="4、测试ssh无交互登录"><a class="header-anchor" href="#4、测试ssh无交互登录">¶</a>4、测试ssh无交互登录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# ssh root@192.168.206.201</span><br><span class="line">Last login: Tue Jul  7 16:24:46 2020 from 192.168.206.1</span><br><span class="line">[root@master ~]# exit</span><br><span class="line">登出</span><br><span class="line">Connection to 192.168.206.201 closed.</span><br><span class="line">[root@manager ~]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其它服务器测试省略</span></span><br></pre></td></tr></table></figure><h4 id="5、配置hosts环境"><a class="header-anchor" href="#5、配置hosts环境">¶</a>5、配置hosts环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# vim /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将4台服务器的ip和对应的主机名添加到下面</span></span><br><span class="line">192.168.206.200manager</span><br><span class="line">192.168.206.201master</span><br><span class="line">192.168.206.202slave-master</span><br><span class="line">192.168.206.203slave</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每台服务器的hosts文件都一样</span></span><br><span class="line">[root@manager ~]# scp /etc/hosts root@192.168.206.201:/etc/hosts</span><br><span class="line">hosts                                        100%  256   139.0KB/s   00:00    </span><br><span class="line">[root@manager ~]# scp /etc/hosts root@192.168.206.202:/etc/hosts</span><br><span class="line">hosts                                        100%  256   208.7KB/s   00:00    </span><br><span class="line">[root@manager ~]# scp /etc/hosts root@192.168.206.203:/etc/hosts</span><br><span class="line">hosts                                        100%  256   236.3KB/s   00:00</span><br></pre></td></tr></table></figure><h3 id="四、配置mysql半同步复制"><a class="header-anchor" href="#四、配置mysql半同步复制">¶</a>四、配置mysql半同步复制</h3><p>为了尽可能的减少主库硬件损坏宕机造成的数据丢失，因此在配置MHA的同时建议配置成MySQL的半同步复制。</p><blockquote><p>注：mysql半同步插件是由谷歌提供，具体位置/usr/local/mysql/lib/plugin/下，一个是master用的semisync_master.so，一个是slave用的semisync_slave.so。</p></blockquote><p>下面我们就来具体配置一下，如果不清楚Plugin的目录，用如下命令查找：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%plugin_dir%&#39;;</span><br><span class="line">+---------------+------------------------------+</span><br><span class="line">| Variable_name | Value                        |</span><br><span class="line">+---------------+------------------------------+</span><br><span class="line">| plugin_dir    | &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;lib&#x2F;plugin&#x2F; |</span><br><span class="line">+---------------+------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="1、主从节点安装插件"><a class="header-anchor" href="#1、主从节点安装插件">¶</a>1、主从节点安装插件</h4><h5 id="（1）分别在主从节点上安装相关的插件"><a class="header-anchor" href="#（1）分别在主从节点上安装相关的插件">¶</a>（1）分别在主从节点上安装相关的插件</h5><blockquote><p>master</p><p>Candicate master</p><p>slave</p></blockquote><p>在MySQL上安装插件需要数据库支持动态载入，检查是否支持，用如下命令检测：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%have_dynamic%&#39;;</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Variable_name        | Value |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| have_dynamic_loading | YES   |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>所有mysql数据库服务器，安装半同步插件(semisync_master.so,semisync_slave.so)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; install plugin rpl_semi_sync_master soname &#39;semisync_master.so&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.24 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; install plugin rpl_semi_sync_slave soname &#39;semisync_slave.so&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure><p>其他mysql主机采用同样的方法安装。</p><h5 id="（2）检查Plugin是否已正确安装"><a class="header-anchor" href="#（2）检查Plugin是否已正确安装">¶</a>（2）检查Plugin是否已正确安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show plugins;</span><br><span class="line">或</span><br><span class="line">mysql&gt; select plugin_name from information_schema.plugins;</span><br></pre></td></tr></table></figure><h5 id="（3）查看半同步相关信息"><a class="header-anchor" href="#（3）查看半同步相关信息">¶</a>（3）查看半同步相关信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%rpl_semi_sync%&#39;;</span><br><span class="line">+-------------------------------------------+------------+</span><br><span class="line">| Variable_name                             | Value      |</span><br><span class="line">+-------------------------------------------+------------+</span><br><span class="line">| rpl_semi_sync_master_enabled              | OFF        |</span><br><span class="line">| rpl_semi_sync_master_timeout              | 10000      |</span><br><span class="line">| rpl_semi_sync_master_trace_level          | 32         |</span><br><span class="line">| rpl_semi_sync_master_wait_for_slave_count | 1          |</span><br><span class="line">| rpl_semi_sync_master_wait_no_slave        | ON         |</span><br><span class="line">| rpl_semi_sync_master_wait_point           | AFTER_SYNC |</span><br><span class="line">| rpl_semi_sync_slave_enabled               | OFF        |</span><br><span class="line">| rpl_semi_sync_slave_trace_level           | 32         |</span><br><span class="line">+-------------------------------------------+------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>上图可以看到半同复制插件已经安装，只是还没有启用，所以是off。</p><h4 id="2、修改my-cnf文件"><a class="header-anchor" href="#2、修改my-cnf文件">¶</a>2、修改my.cnf文件</h4><blockquote><p>注：若主MYSQL服务器已经存在，只是后期才搭建从MYSQL服务器，在置配数据同步前应先将主<br>MYSQL服务器的要同步的数据库拷贝到从MYSQL服务器上（如先在主MYSQL上备份数据库，再用备份<br>在从MYSQL服务器上恢复）</p></blockquote><h5 id="（1）master主机"><a class="header-anchor" href="#（1）master主机">¶</a>（1）master主机</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br><span class="line"><span class="attr">binlog_format</span>=mixed</span><br><span class="line"><span class="attr">log-bin-index</span>=mysql-bin.index</span><br><span class="line"><span class="attr">rpl_semi_sync_master_enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">rpl_semi_sync_master_timeout</span>=<span class="number">1000</span></span><br><span class="line"><span class="attr">rpl_semi_sync_slave_enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">relay_log_purge</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">relay-log</span>=relay-bin</span><br><span class="line"><span class="attr">relay-log-index</span>=slave-relay-bin.index</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>rpl_semi_sync_master_enabled=1 1表是启用，0表示关闭</p><p>rpl_semi_sync_master_timeout=10000：毫秒单位 ，该参数主服务器等待确认消息10秒后，不再等待，变为异步方式。</p></blockquote><h5 id="（2）Candidate-master主机-v2"><a class="header-anchor" href="#（2）Candidate-master主机-v2">¶</a>（2）Candidate master主机</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server-id</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br><span class="line"><span class="attr">binlog_format</span>=mixed</span><br><span class="line"><span class="attr">log-bin-index</span>=mysql-bin.index</span><br><span class="line"><span class="attr">rpl_semi_sync_master_enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">rpl_semi_sync_master_timeout</span>=<span class="number">10000</span></span><br><span class="line"><span class="attr">rpl_semi_sync_slave_enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">relay_log_purge</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">relay-log</span> = relay-bin</span><br><span class="line"><span class="attr">relay-log-index</span> = slave-relay-bin.index</span><br></pre></td></tr></table></figure><blockquote><p>注：relay_log_purge=0，禁止 SQL 线程在执行完一个 relay log 后自动将其删除，对于MHA场景下，对<br>于某些滞后从库的恢复依赖于其他从库的relay log，因此采取禁用自动删除功能</p></blockquote><h5 id="（3）slave主机"><a class="header-anchor" href="#（3）slave主机">¶</a>（3）slave主机</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server-id</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br><span class="line"><span class="attr">relay-log</span> = relay-bin</span><br><span class="line"><span class="attr">relay-log-index</span> = slave-relay-bin.index</span><br><span class="line"><span class="attr">read_only</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">rpl_semi_sync_slave_enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="（4）查看半同步相关信息"><a class="header-anchor" href="#（4）查看半同步相关信息">¶</a>（4）查看半同步相关信息</h5><p>在所有服务器上重启mysql服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>进入mysql，查看半同步相关信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%rpl_semi_sync%&#39;;</span><br><span class="line">+-------------------------------------------+------------+</span><br><span class="line">| Variable_name                             | Value      |</span><br><span class="line">+-------------------------------------------+------------+</span><br><span class="line">| rpl_semi_sync_master_enabled              | ON         |</span><br><span class="line">| rpl_semi_sync_master_timeout              | 1000       |</span><br><span class="line">| rpl_semi_sync_master_trace_level          | 32         |</span><br><span class="line">| rpl_semi_sync_master_wait_for_slave_count | 1          |</span><br><span class="line">| rpl_semi_sync_master_wait_no_slave        | ON         |</span><br><span class="line">| rpl_semi_sync_master_wait_point           | AFTER_SYNC |</span><br><span class="line">| rpl_semi_sync_slave_enabled               | ON         |</span><br><span class="line">| rpl_semi_sync_slave_trace_level           | 32         |</span><br><span class="line">+-------------------------------------------+------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h5 id="（5）查看半同步状态"><a class="header-anchor" href="#（5）查看半同步状态">¶</a>（5）查看半同步状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &#39;%rpl_semi_sync%&#39;;</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_master_clients               | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_times              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | 0     |</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | 0     |</span><br><span class="line">| Rpl_semi_sync_slave_status                 | OFF   |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">15 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>有几个状态参数值得关注的：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpl_semi_sync_master_status ：显示主服务是异步复制模式还是半同步复制模式</span><br><span class="line">rpl_semi_sync_master_clients ：显示有多少个从服务器配置为半同步复制模式</span><br><span class="line">rpl_semi_sync_master_yes_tx ：显示从服务器确认成功提交的数量</span><br><span class="line">rpl_semi_sync_master_no_tx ：显示从服务器确认不成功提交的数量</span><br><span class="line">rpl_semi_sync_master_tx_avg_wait_time ：事务因开启 semi_sync ，平均需要额外等待的时间</span><br><span class="line">rpl_semi_sync_master_net_avg_wait_time ：事务进入等待队列后，到网络平均等待时间</span><br></pre></td></tr></table></figure><h4 id="3、配置主从同步"><a class="header-anchor" href="#3、配置主从同步">¶</a>3、配置主从同步</h4><h5 id="（1）master主机-v2"><a class="header-anchor" href="#（1）master主机-v2">¶</a>（1）master主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant replication slave on *.* to mharep@&#39;192.168.206.%&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (1.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to manager@&#39;192.168.206.%&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.22 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      746 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>第一条grant命令是创建一个用于主从复制的帐号，在master和candicate master的主机上创建即可。</p><p>第二条grant命令是创建MHA管理账号，所有mysql服务器上都需要执行。MHA会在配置文件里要求能远程登录到数据库，所以要进行必要的赋权。</p><h5 id="（2）Candidate-master主机-v3"><a class="header-anchor" href="#（2）Candidate-master主机-v3">¶</a>（2）Candidate master主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant replication slave on *.* to mharep@&#39;192.168.206.%&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (10.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to manager@&#39;192.168.206.%&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host&#x3D;&#39;192.168.206.201&#39;,master_port&#x3D;3306,master_user&#x3D;&#39;mharep&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000001&#39;,master_log_pos&#x3D;746;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.206.201</span><br><span class="line">                  Master_User: mharep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>查看从的状态，以下两个值必须为yes，代表从服务器能正常连接主服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running:Yes</span><br><span class="line">Slave_SQL_Running:Yes</span><br></pre></td></tr></table></figure><h5 id="（3）slave主机-v2"><a class="header-anchor" href="#（3）slave主机-v2">¶</a>（3）slave主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to manager@&#39;192.168.206.%&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host&#x3D;&#39;192.168.206.201&#39;,master_port&#x3D;3306,master_user&#x3D;&#39;mharep&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000001&#39;,master_log_pos&#x3D;746;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.206.201</span><br><span class="line">                  Master_User: mharep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>查看从的状态，以下两个值必须为yes，代表从服务器能正常连接主服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running:Yes</span><br><span class="line">Slave_SQL_Running:Yes</span><br></pre></td></tr></table></figure><h5 id="（4）查看master服务器的半同步状态"><a class="header-anchor" href="#（4）查看master服务器的半同步状态">¶</a>（4）查看master服务器的半同步状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &#39;%rpl_semi_sync%&#39;;</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_master_clients               | 2     |</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_times              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | 0     |</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | 0     |</span><br><span class="line">| Rpl_semi_sync_slave_status                 | OFF   |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">15 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>rpl_semi_sync_master_clients ：显示有2个从服务器配置为半同步复制模式。</p><h3 id="五、配置mysql-mha"><a class="header-anchor" href="#五、配置mysql-mha">¶</a>五、配置mysql-mha</h3><p>mha包括manager节点和data节点：</p><ul><li><p>data节点：包括原有的MySQL复制结构中的主机，至少3台，即1主2从，当masterfailover后，还能保证主从结构；只需安装node包。</p></li><li><p>manager节点：运行监控脚本，负责monitoring 和 auto-failover；需要安装node包和manager包。</p></li></ul><h4 id="1、-在所有主机上安装mha所依赖的软件包"><a class="header-anchor" href="#1、-在所有主机上安装mha所依赖的软件包">¶</a>1、 在所有主机上安装mha所依赖的软件包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Config-IniFiles ncftp perl-Params-Validate perl-CPAN perl-Test-Mock-LWP.noarch perl-LWP-Authen-Negotiate.noarch perl-devel perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><h4 id="2、-安装mha4mysql-node"><a class="header-anchor" href="#2、-安装mha4mysql-node">¶</a>2、 安装mha4mysql-node</h4><blockquote><p>需要2个管理节点（4台服务器）都安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mha4mysql-node-0.58.tar.gz</span><br><span class="line">cd mha4mysql-node-0.58/</span><br><span class="line">perl Makefile.PL</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>在3台数据库节点只要安装mha4mysql-node。</p><h4 id="3、安装mha4mysql-manager"><a class="header-anchor" href="#3、安装mha4mysql-manager">¶</a>3、安装mha4mysql-manager</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mha4mysql-manager-0.58.tar.gz </span><br><span class="line">cd mha4mysql-manager-0.58/</span><br><span class="line">perl Makefile.PL</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>在管理节点需要mha4mysql-node和mha4mysql-manager都安装。</p><p>根据提示输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@manager mha4mysql-manager-0.58]# mkdir /etc/masterha</span><br><span class="line">[root@manager mha4mysql-manager-0.58]# mkdir -p /masterha/app1</span><br><span class="line">[root@manager mha4mysql-manager-0.58]# mkdir /scripts</span><br><span class="line">[root@manager mha4mysql-manager-0.58]# cp samples/conf/* /etc/masterha/</span><br><span class="line">[root@manager mha4mysql-manager-0.58]# cp samples/scripts/* /scripts/</span><br></pre></td></tr></table></figure><h4 id="4、配置mha"><a class="header-anchor" href="#4、配置mha">¶</a>4、配置mha</h4><p>与绝大多数Linux应用程序类似，MHA的正确使用依赖于合理的配置文件。MHA的配置文件与mysql的my.cnf文件配置相似，采取的是param=value的方式来配置。配置文件位于管理节点，通常包括每一个mysql server的主机名、mysql用户名、密码、工作目录等等。</p><h5 id="（1）编辑mha配置文件"><a class="header-anchor" href="#（1）编辑mha配置文件">¶</a>（1）编辑mha配置文件</h5><p>编辑/etc/masterha/app1.conf，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[server default]</span></span><br><span class="line"><span class="attr">manager_workdir</span>=/masterha/app1</span><br><span class="line"><span class="attr">manager_log</span>=/masterha/app1/manager.log</span><br><span class="line"><span class="attr">user</span>=manager</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">ssh_user</span>=root</span><br><span class="line"><span class="attr">repl_user</span>=mharep</span><br><span class="line"><span class="attr">repl_password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">ping_interval</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[server1]</span></span><br><span class="line"><span class="attr">hostname</span>=<span class="number">192.168</span>.<span class="number">206.201</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">master_binlog_dir</span>=/usr/local/mysql/data</span><br><span class="line"><span class="attr">candidate_master</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[server2]</span></span><br><span class="line"><span class="attr">hostname</span>=<span class="number">192.168</span>.<span class="number">206.202</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">master_binlog_dir</span>=/usr/local/mysql/data</span><br><span class="line"><span class="attr">candidate_master</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[server3]</span></span><br><span class="line"><span class="attr">hostname</span>=<span class="number">192.168</span>.<span class="number">206.203</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">master_binlog_dir</span>=/usr/local/mysql/data</span><br><span class="line"><span class="attr">no_master</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>保存并退出。</p><h5 id="（2）配关配置项的解释"><a class="header-anchor" href="#（2）配关配置项的解释">¶</a>（2）配关配置项的解释</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">manager_workdir=/masterha/app1 //设置manager的工作目录</span><br><span class="line"></span><br><span class="line">manager_log=/masterha/app1/manager.log //设置manager的日志 </span><br><span class="line"></span><br><span class="line">user=manager //设置监控用户manager</span><br><span class="line"></span><br><span class="line">password=123456 //监控用户manager的密码</span><br><span class="line"></span><br><span class="line">ssh_user=root //ssh连接用户 </span><br><span class="line"></span><br><span class="line">repl_user=mharep //主从复制用户</span><br><span class="line"></span><br><span class="line">repl_password=123.abc //主从复制用户密码</span><br><span class="line"></span><br><span class="line">ping_interval=1 //设置监控主库，发送ping包的时间间隔，默认是3秒，尝试三次没有回应的时候自动进行railover</span><br><span class="line"></span><br><span class="line">master_binlog_dir=/usr/local/mysql/data //设置master 保存binlog的位置，以便MHA可以找到master的日志，我这里的也就是mysql的数据目录 </span><br><span class="line"></span><br><span class="line">candidate_master=1 //设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库。</span><br></pre></td></tr></table></figure><h5 id="（3）SSH-有效性验证"><a class="header-anchor" href="#（3）SSH-有效性验证">¶</a>（3）SSH 有效性验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# masterha_check_ssh --global_conf=/etc/masterha/masterha_default.cnf --conf=/etc/masterha/app1.cnf</span><br><span class="line">Tue Jul  7 18:53:32 2020 - [info] Reading default configuration from /etc/masterha/masterha_default.cnf..</span><br><span class="line">Tue Jul  7 18:53:32 2020 - [info] Reading application default configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Tue Jul  7 18:53:32 2020 - [info] Reading server configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Tue Jul  7 18:53:32 2020 - [info] Starting SSH connection tests..</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug] </span><br><span class="line">Tue Jul  7 18:53:32 2020 - [debug]  Connecting via SSH from root@192.168.206.201(192.168.206.201:22) to root@192.168.206.202(192.168.206.202:22)..</span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]  Connecting via SSH from root@192.168.206.201(192.168.206.201:22) to root@192.168.206.203(192.168.206.203:22)..</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:35 2020 - [debug] </span><br><span class="line">Tue Jul  7 18:53:32 2020 - [debug]  Connecting via SSH from root@192.168.206.202(192.168.206.202:22) to root@192.168.206.201(192.168.206.201:22)..</span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]  Connecting via SSH from root@192.168.206.202(192.168.206.202:22) to root@192.168.206.203(192.168.206.203:22)..</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:35 2020 - [debug] </span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]  Connecting via SSH from root@192.168.206.203(192.168.206.203:22) to root@192.168.206.201(192.168.206.201:22)..</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug]  Connecting via SSH from root@192.168.206.203(192.168.206.203:22) to root@192.168.206.202(192.168.206.202:22)..</span><br><span class="line">Tue Jul  7 18:53:35 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:35 2020 - [info] All SSH connection tests passed successfully.</span><br></pre></td></tr></table></figure><h5 id="（4）集群复制的有效性验证"><a class="header-anchor" href="#（4）集群复制的有效性验证">¶</a>（4）集群复制的有效性验证</h5><blockquote><p>mysql必须都启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# masterha_check_ssh --global_conf=/etc/masterha/masterha_default.cnf --conf=/etc/masterha/app1.cnf</span><br><span class="line">Tue Jul  7 18:53:32 2020 - [info] Reading default configuration from /etc/masterha/masterha_default.cnf..</span><br><span class="line">Tue Jul  7 18:53:32 2020 - [info] Reading application default configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Tue Jul  7 18:53:32 2020 - [info] Reading server configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Tue Jul  7 18:53:32 2020 - [info] Starting SSH connection tests..</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug] </span><br><span class="line">Tue Jul  7 18:53:32 2020 - [debug]  Connecting via SSH from root@192.168.206.201(192.168.206.201:22) to root@192.168.206.202(192.168.206.202:22)..</span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]  Connecting via SSH from root@192.168.206.201(192.168.206.201:22) to root@192.168.206.203(192.168.206.203:22)..</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:35 2020 - [debug] </span><br><span class="line">Tue Jul  7 18:53:32 2020 - [debug]  Connecting via SSH from root@192.168.206.202(192.168.206.202:22) to root@192.168.206.201(192.168.206.201:22)..</span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]  Connecting via SSH from root@192.168.206.202(192.168.206.202:22) to root@192.168.206.203(192.168.206.203:22)..</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:35 2020 - [debug] </span><br><span class="line">Tue Jul  7 18:53:33 2020 - [debug]  Connecting via SSH from root@192.168.206.203(192.168.206.203:22) to root@192.168.206.201(192.168.206.201:22)..</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:34 2020 - [debug]  Connecting via SSH from root@192.168.206.203(192.168.206.203:22) to root@192.168.206.202(192.168.206.202:22)..</span><br><span class="line">Tue Jul  7 18:53:35 2020 - [debug]   ok.</span><br><span class="line">Tue Jul  7 18:53:35 2020 - [info] All SSH connection tests passed successfully.</span><br><span class="line"></span><br><span class="line">[root@manager ~]# masterha_check_repl --global_conf=/etc/masterha/masterha_default.cnf --conf=/etc/masterha/app1.cnf</span><br><span class="line">Tue Jul  7 18:56:57 2020 - [info] Reading default configuration from /etc/masterha/masterha_default.cnf..</span><br><span class="line">Tue Jul  7 18:56:58 2020 - [info] Reading application default configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Tue Jul  7 18:56:58 2020 - [info] Reading server configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Tue Jul  7 18:56:58 2020 - [info] MHA::MasterMonitor version 0.58.</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] GTID failover mode = 0</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] Dead Servers:</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] Alive Servers:</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]   192.168.206.201(192.168.206.201:3306)</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]   192.168.206.202(192.168.206.202:3306)</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]   192.168.206.203(192.168.206.203:3306)</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] Alive Slaves:</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]   192.168.206.202(192.168.206.202:3306)  Version=5.7.22-log (oldest major version between slaves) log-bin:enabled</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]     Replicating from 192.168.206.201(192.168.206.201:3306)</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]     Primary candidate for the new Master (candidate_master is set)</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]   192.168.206.203(192.168.206.203:3306)  Version=5.7.22-log (oldest major version between slaves) log-bin:enabled</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]     Replicating from 192.168.206.201(192.168.206.201:3306)</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]     Not candidate for the new Master (no_master is set)</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] Current Alive Master: 192.168.206.201(192.168.206.201:3306)</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] Checking slave configurations..</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]  read_only=1 is not set on slave 192.168.206.202(192.168.206.202:3306).</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [warning]  relay_log_purge=0 is not set on slave 192.168.206.203(192.168.206.203:3306).</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] Checking replication filtering settings..</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]  binlog_do_db= , binlog_ignore_db= </span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info]  Replication filtering check ok.</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] GTID (with auto-pos) is not supported</span><br><span class="line">Tue Jul  7 18:56:59 2020 - [info] Starting SSH connection tests..</span><br><span class="line">Tue Jul  7 18:57:02 2020 - [info] All SSH connection tests passed successfully.</span><br><span class="line">Tue Jul  7 18:57:02 2020 - [info] Checking MHA Node version..</span><br><span class="line">Tue Jul  7 18:57:03 2020 - [info]  Version check ok.</span><br><span class="line">Tue Jul  7 18:57:03 2020 - [info] Checking SSH publickey authentication settings on the current master..</span><br><span class="line">Tue Jul  7 18:57:04 2020 - [info] HealthCheck: SSH to 192.168.206.201 is reachable.</span><br><span class="line">Tue Jul  7 18:57:04 2020 - [info] Master MHA Node version is 0.58.</span><br><span class="line">Tue Jul  7 18:57:04 2020 - [info] Checking recovery script configurations on 192.168.206.201(192.168.206.201:3306)..</span><br><span class="line">Tue Jul  7 18:57:04 2020 - [info]   Executing command: save_binary_logs --command=test --start_pos=4 --binlog_dir=/usr/local/mysql/data --output_file=/data/log/masterha/save_binary_logs_test --manager_version=0.58 --start_file=mysql-bin.000001 </span><br><span class="line">Tue Jul  7 18:57:04 2020 - [info]   Connecting to root@192.168.206.201(192.168.206.201:22).. </span><br><span class="line">  Creating /data/log/masterha if not exists.. Creating directory /data/log/masterha.. done.</span><br><span class="line">   ok.</span><br><span class="line">  Checking output directory is accessible or not..</span><br><span class="line">   ok.</span><br><span class="line">  Binlog found at /usr/local/mysql/data, up to mysql-bin.000001</span><br><span class="line">Tue Jul  7 18:57:05 2020 - [info] Binlog setting check done.</span><br><span class="line">Tue Jul  7 18:57:05 2020 - [info] Checking SSH publickey authentication and checking recovery script configurations on all alive slave servers..</span><br><span class="line">Tue Jul  7 18:57:05 2020 - [info]   Executing command : apply_diff_relay_logs --command=test --slave_user='manager' --slave_host=192.168.206.202 --slave_ip=192.168.206.202 --slave_port=3306 --workdir=/data/log/masterha --target_version=5.7.22-log --manager_version=0.58 --relay_log_info=/usr/local/mysql/data/relay-log.info  --relay_dir=/usr/local/mysql/data/  --slave_pass=xxx</span><br><span class="line">Tue Jul  7 18:57:05 2020 - [info]   Connecting to root@192.168.206.202(192.168.206.202:22).. </span><br><span class="line">Creating directory /data/log/masterha.. done.</span><br><span class="line">  Checking slave recovery environment settings..</span><br><span class="line">    Opening /usr/local/mysql/data/relay-log.info ... ok.</span><br><span class="line">    Relay log found at /usr/local/mysql/data, up to relay-bin.000003</span><br><span class="line">    Temporary relay log file is /usr/local/mysql/data/relay-bin.000003</span><br><span class="line">    Checking if super_read_only is defined and turned on.. not present or turned off, ignoring.</span><br><span class="line">    Testing mysql connection and privileges..</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line"> done.</span><br><span class="line">    Testing mysqlbinlog output.. done.</span><br><span class="line">    Cleaning up test file(s).. done.</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info]   Executing command : apply_diff_relay_logs --command=test --slave_user='manager' --slave_host=192.168.206.203 --slave_ip=192.168.206.203 --slave_port=3306 --workdir=/data/log/masterha --target_version=5.7.22-log --manager_version=0.58 --relay_log_info=/usr/local/mysql/data/relay-log.info  --relay_dir=/usr/local/mysql/data/  --slave_pass=xxx</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info]   Connecting to root@192.168.206.203(192.168.206.203:22).. </span><br><span class="line">Creating directory /data/log/masterha.. done.</span><br><span class="line">  Checking slave recovery environment settings..</span><br><span class="line">    Opening /usr/local/mysql/data/relay-log.info ... ok.</span><br><span class="line">    Relay log found at /usr/local/mysql/data, up to relay-bin.000003</span><br><span class="line">    Temporary relay log file is /usr/local/mysql/data/relay-bin.000003</span><br><span class="line">    Checking if super_read_only is defined and turned on.. not present or turned off, ignoring.</span><br><span class="line">    Testing mysql connection and privileges..</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line"> done.</span><br><span class="line">    Testing mysqlbinlog output.. done.</span><br><span class="line">    Cleaning up test file(s).. done.</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info] Slaves settings check done.</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info] </span><br><span class="line">192.168.206.201(192.168.206.201:3306) (current master)</span><br><span class="line"> +--192.168.206.202(192.168.206.202:3306)</span><br><span class="line"> +--192.168.206.203(192.168.206.203:3306)</span><br><span class="line"></span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info] Checking replication health on 192.168.206.202..</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info]  ok.</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info] Checking replication health on 192.168.206.203..</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info]  ok.</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [warning] master_ip_failover_script is not defined.</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [warning] shutdown_script is not defined.</span><br><span class="line">Tue Jul  7 18:57:06 2020 - [info] Got exit code 0 (Not master dead).</span><br><span class="line"></span><br><span class="line">MySQL Replication Health is OK.</span><br></pre></td></tr></table></figure><p>验证成功的话会自动识别出所有服务器和主从状况。</p><p>注：在验证时，若遇到这个错误：Can’t exec “mysqlbinlog” … 解决方法是在所有服务器上执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/mysql/bin/* /usr/local/bin/</span><br></pre></td></tr></table></figure><h5 id="（5）启动-manager"><a class="header-anchor" href="#（5）启动-manager">¶</a>（5）启动 manager</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# nohup masterha_manager --conf=/etc/masterha/app1.cnf&amp; &gt;/tmp/mha_manager.log &amp;</span><br><span class="line">[1] 55707</span><br><span class="line">[root@manager ~]# nohup: 忽略输入并把输出追加到"nohup.out"</span><br></pre></td></tr></table></figure><blockquote><p>注：在应用Unix/Linux时，我们一般想让某个程序在后台运行，于是我们将常会用 &amp; 在程序结尾来让程<br>序自动运行。比如我们要运行mysql在后台： /usr/local/mysql/bin/mysqld_safe –user=mysql &amp;。可是<br>有很多程序并不想mysqld一样，这样我们就需要nohup命令，</p></blockquote><h5 id="（6）状态检查"><a class="header-anchor" href="#（6）状态检查">¶</a>（6）状态检查</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# masterha_check_status --conf=/etc/masterha/app1.cnf</span><br><span class="line">app1 (pid:55707) is running(0:PING_OK), master:192.168.206.201</span><br></pre></td></tr></table></figure><h5 id="（7）故障转移验证-自动failover"><a class="header-anchor" href="#（7）故障转移验证-自动failover">¶</a>（7）故障转移验证(自动failover)</h5><p>master dead后，MHA当时已经开启，候选Master库（Slave）会自动failover为Master。</p><p>验证的方式是先停掉 master（192.168.206.201），因为之前的配置文件中，把Candicate master(192.168.206.202)作为了候选人，那么就到 slave(192.168.206.203) 上查看 master 的 IP 是否变为了 slave-master 的 IP。</p><h6 id="1）停掉-master"><a class="header-anchor" href="#1）停掉-master">¶</a>1）停掉 master</h6><p>在master（192.168.206.201） 上把 mysql 停掉。</p><h6 id="2）查看-MHA-日志"><a class="header-anchor" href="#2）查看-MHA-日志">¶</a>2）查看 MHA 日志</h6><p>上面的配置文件中指定了日志位置为/masterha/app1/manager.log。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# cat /masterha/app1/manager.log</span><br><span class="line">----- Failover Report -----</span><br><span class="line"></span><br><span class="line">app1: MySQL Master failover 192.168.206.201(192.168.206.201:3306) to 192.168.206.202(192.168.206.202:3306) succeeded</span><br><span class="line"></span><br><span class="line">Master 192.168.206.201(192.168.206.201:3306) is down!</span><br><span class="line"></span><br><span class="line">Check MHA Manager logs at manager:/masterha/app1/manager.log for details.</span><br><span class="line"></span><br><span class="line">Started automated(non-interactive) failover.</span><br><span class="line">The latest slave 192.168.206.202(192.168.206.202:3306) has all relay logs for recovery.</span><br><span class="line">Selected 192.168.206.202(192.168.206.202:3306) as a new master.</span><br><span class="line">192.168.206.202(192.168.206.202:3306): OK: Applying all logs succeeded.</span><br><span class="line">192.168.206.203(192.168.206.203:3306): This host has the latest relay log events.</span><br><span class="line">Generating relay diff files from the latest slave succeeded.</span><br><span class="line">192.168.206.203(192.168.206.203:3306): OK: Applying all logs succeeded. Slave started, replicating from 192.168.206.202(192.168.206.202:3306)</span><br><span class="line">192.168.206.202(192.168.206.202:3306): Resetting slave info succeeded.</span><br><span class="line">Master failover to 192.168.206.202(192.168.206.202:3306) completed successfully.</span><br></pre></td></tr></table></figure><p>从日志信息中可以看到 master failover 已经成功了，并可以看出故障转移的大体流程</p><h6 id="3）检查-slave的复制"><a class="header-anchor" href="#3）检查-slave的复制">¶</a>3）检查 slave的复制</h6><p>登录 slave（192.168.206.203） 的Mysql，查看 slave 状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.206.202</span><br><span class="line">                  Master_User: mharep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>可以看到 master 的 IP 现在为 192.168.206.202，已经切换到和192.168.206.202同步了。</p><p>本来是和192.168.206.201同步的，说明 MHA 已经把Candicate master(192.168.206.202) 提升为了新的 master，IO线程和SQL线程也正确运行，MHA搭建成功。</p><h3 id="六、MHA-Manager端日常主要操作步骤"><a class="header-anchor" href="#六、MHA-Manager端日常主要操作步骤">¶</a>六、MHA Manager端日常主要操作步骤</h3><h4 id="1、检查是否有下列文件，有则删除。"><a class="header-anchor" href="#1、检查是否有下列文件，有则删除。">¶</a>1、检查是否有下列文件，有则删除。</h4><p>发生主从切换后，MHAmanager服务会自动停掉，且在manager_workdir（/masterha/app1）目录下面生成文件app1.failover.complete。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# ll /masterha/app1/</span><br><span class="line">总用量 24</span><br><span class="line">-rw-r--r--. 1 root root     0 7月   7 19:07 app1.failover.complete</span><br><span class="line">-rw-r--r--. 1 root root 22192 7月   7 19:07 manager.log</span><br></pre></td></tr></table></figure><p>若要启动MHA，必须先确保无此文件， 如果有这个提示，那么删除此文件。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[error]</span><br><span class="line">[/usr/share/perl5/vendor_perl/MHA/MasterFailover.pm, ln298] </span><br><span class="line">Last failover was done at 2015/01/09 10:00:47.Current time is too early to do failover again. If you want to do failover, manually remove /masterha/app1/app1.failover.complete and run this script again.</span><br></pre></td></tr></table></figure><h4 id="2、检查MHA复制检查"><a class="header-anchor" href="#2、检查MHA复制检查">¶</a>2、检查MHA复制检查</h4><p>需要把master设置成candidate的从服务器</p><h5 id="（1）查看candidate的从服务器（192-168-206-202）的二进制日志"><a class="header-anchor" href="#（1）查看candidate的从服务器（192-168-206-202）的二进制日志">¶</a>（1）查看candidate的从服务器（192.168.206.202）的二进制日志</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">             File: mysql-bin.000004</span><br><span class="line">         Position: 154</span><br></pre></td></tr></table></figure><h5 id="（2）将master服务器设置为candidate的从服务器"><a class="header-anchor" href="#（2）将master服务器设置为candidate的从服务器">¶</a>（2）将master服务器设置为candidate的从服务器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl start mysqld</span><br><span class="line">[root@master ~]# mysql -uroot -p</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host&#x3D;&#39;192.168.206.202&#39;,master_port&#x3D;3306,master_user&#x3D;&#39;mharep&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000004&#39;,master_log_pos&#x3D;154;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# masterha_check_repl --conf=/etc/masterha/app1.cnf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略部分输出信息</span></span><br><span class="line"></span><br><span class="line">Tue Jul  7 19:31:44 2020 - [info] Slaves settings check done.</span><br><span class="line">Tue Jul  7 19:31:44 2020 - [info] </span><br><span class="line">192.168.206.202(192.168.206.202:3306) (current master)</span><br><span class="line"> +--192.168.206.201(192.168.206.201:3306)</span><br><span class="line"> +--192.168.206.203(192.168.206.203:3306)</span><br><span class="line"></span><br><span class="line">Tue Jul  7 19:31:44 2020 - [info] Checking replication health on 192.168.206.201..</span><br><span class="line">Tue Jul  7 19:31:44 2020 - [info]  ok.</span><br><span class="line">Tue Jul  7 19:31:44 2020 - [info] Checking replication health on 192.168.206.203..</span><br><span class="line">Tue Jul  7 19:31:44 2020 - [info]  ok.</span><br><span class="line">Tue Jul  7 19:31:44 2020 - [warning] master_ip_failover_script is not defined.</span><br><span class="line">Tue Jul  7 19:31:44 2020 - [warning] shutdown_script is not defined.</span><br><span class="line">Tue Jul  7 19:31:44 2020 - [info] Got exit code 0 (Not master dead).</span><br><span class="line"></span><br><span class="line">MySQL Replication Health is OK.</span><br></pre></td></tr></table></figure><h4 id="3、停止MHA"><a class="header-anchor" href="#3、停止MHA">¶</a>3、停止MHA</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterha_stop --conf=/etc/masterha/app1.cnf</span><br></pre></td></tr></table></figure><h4 id="4、启动MHA"><a class="header-anchor" href="#4、启动MHA">¶</a>4、启动MHA</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf=/etc/masterha/app1.cnf &amp;&gt;/tmp/mha_manager.log &amp;</span><br></pre></td></tr></table></figure><p>当有slave 节点宕掉时，默认是启动不了的，加上 --ignore_fail_on_start 即使有节点宕掉也能启动MHA，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf=/etc/masterha/app1.cnf --ignore_fail_on_start &amp; &gt;/tmp/mha_manager.log &amp;</span><br></pre></td></tr></table></figure><h4 id="5、检查状态"><a class="header-anchor" href="#5、检查状态">¶</a>5、检查状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_status --conf=/etc/masterha /app1.cnf</span><br></pre></td></tr></table></figure><h4 id="6、检查日志"><a class="header-anchor" href="#6、检查日志">¶</a>6、检查日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /masterha/app1/manager.log</span><br></pre></td></tr></table></figure><h4 id="7、主从切换后续工作"><a class="header-anchor" href="#7、主从切换后续工作">¶</a>7、主从切换后续工作</h4><h5 id="（1）重构"><a class="header-anchor" href="#（1）重构">¶</a>（1）重构</h5><p>重构就是你的主挂了，切换到Candidate master上，Candidate master变成了主</p><h5 id="（2）重构的两种方案"><a class="header-anchor" href="#（2）重构的两种方案">¶</a>（2）重构的两种方案</h5><p>1）原主库修复成一个新的slave 主库切换后，把原主库修复成新从库，然后重新执行以上5步。</p><p>2）原主库数据文件完整的情况下，可通过以下方式找出最后执行的CHANGE MASTER命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# grep "CHANGE MASTER TO MASTER" /masterha/app1/manager.log | tail -1</span><br><span class="line">Tue Jul  7 19:07:08 2020 - [info]  All other slaves should start replication from here. Statement should be: CHANGE MASTER TO MASTER_HOST='192.168.206.202', MASTER_PORT=3306, MASTER_LOG_FILE='mysql-bin.000004', MASTER_LOG_POS=154, MASTER_USER='mharep', MASTER_PASSWORD='xxx';</span><br><span class="line"></span><br><span class="line">[root@manager ~]# mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO MASTER_HOST=<span class="string">'192.168.206.202'</span>, MASTER_PORT=3306, MASTER_LOG_FILE=<span class="string">'mysql-bin.000004'</span>, MASTER_LOG_POS=154, MASTER_USER=<span class="string">'mharep'</span>, MASTER_PASSWORD=<span class="string">'123456'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                Slave_IO_State: Waiting for master to send event</span><br><span class="line">                Master_Host: 192.168.18.6</span><br><span class="line">                Master_User: mharep</span><br><span class="line">                Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">                Master_Log_File: mysql-bin.000002</span><br><span class="line">                Read_Master_Log_Pos: 154</span><br><span class="line">                Relay_Log_File: relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">                Relay_Master_Log_File: mysql-bin.000002</span><br><span class="line">                Slave_IO_Running: Yes</span><br><span class="line">                Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>3）启动manager</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# nohup masterha_manager --conf=/etc/masterha/app1.cnf&amp; &gt;/tmp/mha_manager.log &amp;</span><br><span class="line">[1] 55707</span><br><span class="line"></span><br><span class="line">[root@manager ~]# masterha_check_status --conf=/etc/masterha/app1.cnf</span><br><span class="line">app1 (pid:55707) is running(0:PING_OK), master:192.168.206.201</span><br></pre></td></tr></table></figure><p>注意：如果正常，会显示&quot;PING_OK&quot;，否则会显示&quot;NOT_RUNNING&quot;，这代表MHA监控没有开启。</p><p>定期删除中继日志 在配置主从复制中，slave上设置了参数relay_log_purge=0，所以slave节点需要定期删除中<br>继日志，建议每个slave节点删除中继日志的时间错开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">corntab -e</span><br><span class="line">0 5 * * * /usr/local/bin/purge_relay_logs - -user=root --password=pwd123 --port=3306 --disable_relay_log_purge &gt;&gt; /var/log/purge_relay.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="七、配置VIP"><a class="header-anchor" href="#七、配置VIP">¶</a>七、配置VIP</h3><p>vip配置可以采用两种方式，一种通过keepalived的方式管理虚拟ip的浮动；另外一种通过脚本方式启动虚拟ip<br>的方式（即不需要keepalived或者heartbeat类似的软件）。</p><h4 id="1、keepalived方式管理虚拟ip"><a class="header-anchor" href="#1、keepalived方式管理虚拟ip">¶</a>1、keepalived方式管理虚拟ip</h4><h5 id="（1）keepalived配置"><a class="header-anchor" href="#（1）keepalived配置">¶</a>（1）keepalived配置</h5><p>下载软件并在master（192.168.206.201）和备选master（192.168.206.202）上安装软件包keepalived。</p><p>在编译安装Keepalived之前，必须先安装内核开发包kernel-devel以及openssl-devel、popt-devel等支持库。</p><h6 id="1）下载Keepalived"><a class="header-anchor" href="#1）下载Keepalived">¶</a>1）下载Keepalived</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.keepalived.org/software/keepalived<span class="literal">-2</span>.<span class="number">0.20</span>.tar.gz</span><br></pre></td></tr></table></figure><h6 id="2）安装依赖库"><a class="header-anchor" href="#2）安装依赖库">¶</a>2）安装依赖库</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install kernel-devel openssl-devel popt-devel gcc</span><br></pre></td></tr></table></figure><h6 id="3）解压"><a class="header-anchor" href="#3）解压">¶</a>3）解压</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf keepalived-2.0.20.tar.gz</span><br></pre></td></tr></table></figure><h6 id="4）安装"><a class="header-anchor" href="#4）安装">¶</a>4）安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd keepalived-2.0.20/</span><br><span class="line">./configure --prefix=/ &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h6 id="5）使用keepalived服务"><a class="header-anchor" href="#5）使用keepalived服务">¶</a>5）使用keepalived服务</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable keepalived</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure><h6 id="6）创建防火墙规则"><a class="header-anchor" href="#6）创建防火墙规则">¶</a>6）创建防火墙规则</h6><p>若开启了防火墙，需要关闭防火墙或创建规则。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --direct --permanent --add-rule ipv4 filter OUTPUT 0 --in-interface ens33 --destination 224.0.0.18 --protocol vrrp -j ACCEPT</span><br><span class="line"></span><br><span class="line">firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --in-interface ens33 --destination 224.0.0.18 --protocol vrrp -j ACCEPT</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h5 id="（2）修改Keepalived的配置文件"><a class="header-anchor" href="#（2）修改Keepalived的配置文件">¶</a>（2）修改Keepalived的配置文件</h5><blockquote><p>vim /etc/keepalived/keepalived.conf</p></blockquote><h6 id="1）在master上配置"><a class="header-anchor" href="#1）在master上配置">¶</a>1）在master上配置</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id mysql-1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.206.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2）在备选master上配置"><a class="header-anchor" href="#2）在备选master上配置">¶</a>2）在备选master上配置</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id mysql-2# 此处需要修改</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 50 # 此处需要修改</span><br><span class="line">    advert_int 1</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.206.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3）在master上启动并查看日志"><a class="header-anchor" href="#3）在master上启动并查看日志">¶</a>3）在master上启动并查看日志</h6><blockquote><p>注意：需启动keepalived服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@master keepalived-2.0.20]# systemctl start keepalived.service </span><br><span class="line">[root@master keepalived-2.0.20]# ps -ef | grep keep</span><br><span class="line">gdm        1977   1813  0 03:52 ?        00:00:00 /usr/libexec/gsd-housekeeping</span><br><span class="line">gdm       59162  58971  0 05:51 ?        00:00:00 /usr/libexec/gsd-housekeeping</span><br><span class="line">root     113268      1  0 14:54 ?        00:00:00 //sbin/keepalived -D</span><br><span class="line">root     113270 113268  1 14:54 ?        00:00:00 //sbin/keepalived -D</span><br><span class="line">root     113292  92137  0 14:55 pts/0    00:00:00 grep --color=auto keep</span><br><span class="line"></span><br><span class="line">[root@master keepalived-2.0.20]# ip a | grep 100</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    inet 192.168.206.100/32 scope global ens33</span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略部分输出信息</span></span><br><span class="line"></span><br><span class="line">[root@master keepalived-2.0.20]# tail -f /var/log/messages </span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略部分输出信息</span></span><br><span class="line">Jul  8 14:57:31 master avahi-daemon[740]: Registering new address record for 192.168.206.100 on ens33.IPv4.</span><br><span class="line">Jul  8 14:57:31 master avahi-daemon[740]: Registering new address record for 192.168.206.201 on ens33.IPv4.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略部分输出信息</span></span><br></pre></td></tr></table></figure><p>发现已经将虚拟ip 192.168.206.100绑定了网卡ens33上。</p><h6 id="4）在备选master上启动并查看日志"><a class="header-anchor" href="#4）在备选master上启动并查看日志">¶</a>4）在备选master上启动并查看日志</h6><p>在另外一台服务器，候选master上启动keepalived服务，并观察</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-master keepalived-2.0.20]# systemctl start keepalived.service </span><br><span class="line"></span><br><span class="line">[root@slave-master keepalived-2.0.20]# tail -f /var/log/messages </span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略部分输出信息</span></span><br><span class="line">Jul  8 15:01:16 slave-master Keepalived_vrrp[111159]: Assigned address 192.168.206.202 for interface ens33</span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略部分输出信息</span></span><br></pre></td></tr></table></figure><p>从上面的信息可以看到keepalived已经配置成功。</p><p><strong>注意：</strong> 上面两台服务器的keepalived都设置为了BACKUP模式，在keepalived中2种模式，分别是master-backup模式和backup-&gt;backup模式。这两种模式有很大区别。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 在master-&gt;backup模式下，一旦主库宕机，虚拟ip会自动漂移到从库，当主库修复后，keepalived启动后，还会把虚拟ip抢占过来，即使设置了非抢占模式（nopreempt）抢占ip的动作也会发生。</span><br><span class="line">2. 在backup-&gt;backup模式下，当主库宕机后虚拟ip会自动漂移到从库上，当原主库恢复和keepalived服务启动后，并不会抢占新主的虚拟ip，即使是优先级高于从库的优先级别，也不会发生抢占。</span><br></pre></td></tr></table></figure><p>为了减少ip漂移次数，通常是把修复好的主库当做新的备库。</p><h5 id="（3）MHA引入keepalived"><a class="header-anchor" href="#（3）MHA引入keepalived">¶</a>（3）MHA引入keepalived</h5><blockquote><p>MySQL服务进程挂掉时通过MHA 停止keepalived</p></blockquote><p>要想把keepalived服务引入MHA，我们只需要修改切换时触发的脚本文件master_ip_failover即可，在该脚本中添加在master发生宕机时对keepalived的处理。</p><p>编辑脚本/scripts/master_ip_failover，修改后如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line">use strict;</span><br><span class="line">use warnings FATAL =&gt; 'all';</span><br><span class="line"></span><br><span class="line">use Getopt::Long;</span><br><span class="line"></span><br><span class="line">my (</span><br><span class="line"><span class="meta">  $</span><span class="bash"><span class="built_in">command</span>,        <span class="variable">$ssh_user</span>,         <span class="variable">$orig_master_host</span>,</span></span><br><span class="line"><span class="meta">  $</span><span class="bash">orig_master_ip, <span class="variable">$orig_master_port</span>, <span class="variable">$new_master_host</span>,</span></span><br><span class="line"><span class="meta">  $</span><span class="bash">new_master_ip,  <span class="variable">$new_master_port</span>,  <span class="variable">$new_master_user</span>,</span></span><br><span class="line"><span class="meta">  $</span><span class="bash">new_master_password</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">my $vip="192.168.206.100";</span><br><span class="line">my $ssh_start_vip="systemctl start keepalived.service";</span><br><span class="line">my $ssh_stop_vip="systemctl stop keepalived.service";</span><br><span class="line"></span><br><span class="line">GetOptions(</span><br><span class="line">  'command=s'             =&gt; \$command,</span><br><span class="line">  'ssh_user=s'            =&gt; \$ssh_user,</span><br><span class="line">  'orig_master_host=s'    =&gt; \$orig_master_host,</span><br><span class="line">  'orig_master_ip=s'      =&gt; \$orig_master_ip,</span><br><span class="line">  'orig_master_port=i'    =&gt; \$orig_master_port,</span><br><span class="line">  'new_master_host=s'     =&gt; \$new_master_host,</span><br><span class="line">  'new_master_ip=s'       =&gt; \$new_master_ip,</span><br><span class="line">  'new_master_port=i'     =&gt; \$new_master_port,</span><br><span class="line">  'new_master_user=s'     =&gt; \$new_master_user,</span><br><span class="line">  'new_master_password=s' =&gt; \$new_master_password,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">exit &amp;main();</span><br><span class="line"></span><br><span class="line">sub main &#123;</span><br><span class="line"></span><br><span class="line">  print "\n\nIN SCRIPT TEST====$ssh_stop_vip==$ssh_start_vip===\n\n";</span><br><span class="line"></span><br><span class="line">  if ( $command eq "stop" || $command eq "stopssh" ) &#123;</span><br><span class="line"></span><br><span class="line">    my $exit_code = 1;</span><br><span class="line">    eval &#123;</span><br><span class="line">      print "Disabling the VIP on old master: $orig_master_host \n";</span><br><span class="line">      &amp;stop_vip();</span><br><span class="line">      $exit_code = 0;</span><br><span class="line">    &#125;;</span><br><span class="line">    if ($@) &#123;</span><br><span class="line">      warn "Got Error: $@\n";</span><br><span class="line">      exit $exit_code;</span><br><span class="line">    &#125;</span><br><span class="line">    exit $exit_code;</span><br><span class="line">  &#125;</span><br><span class="line">  elsif ( $command eq "start" ) &#123;</span><br><span class="line"></span><br><span class="line">    my $exit_code = 10;</span><br><span class="line">      $exit_code = 0;</span><br><span class="line">    &#125;;</span><br><span class="line">    if ($@) &#123;</span><br><span class="line">      warn $@;</span><br><span class="line">      exit $exit_code;</span><br><span class="line">    &#125;</span><br><span class="line">    exit $exit_code;</span><br><span class="line">    #'ssh $ssh_user\@cluster1 \" $ssh_start_vip \"';</span><br><span class="line">    exit 0;</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    &amp;usage();</span><br><span class="line">    exit 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub start_vip()&#123;</span><br><span class="line"> `ssh $ssh_user\@$new_master_host \" $ssh_start_vip \"`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub stop_vip()&#123;</span><br><span class="line">  return 0 unless ($ssh_user);</span><br><span class="line"> `ssh $ssh_user\@$new_master_host \" $ssh_start_vip \"`;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">sub usage &#123;</span><br><span class="line">  print</span><br><span class="line">"Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在已经修改这个脚本了，接下来我们在/etc/masterha/app1.cnf 中调用故障切换脚本 停止MHA：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">masterha_stop --conf=/etc/masterha/app1.cnf</span></span><br></pre></td></tr></table></figure><p>在配置文件/etc/masterha/app1.cnf 中启用下面的参数(在[server default下面添加])</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master_ip_failover_script=/scripts/master_ip_failover</span><br></pre></td></tr></table></figure><h5 id="（4）启动MHA："><a class="header-anchor" href="#（4）启动MHA：">¶</a>（4）启动MHA：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">nohup masterha_manager --conf=/etc/masterha/app1.cnf &amp;&gt;/tmp/mha_manager.log &amp;</span></span><br></pre></td></tr></table></figure><h5 id="（5）检查状态"><a class="header-anchor" href="#（5）检查状态">¶</a>（5）检查状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos1 ~]# masterha_check_status --conf=/etc/masterha/app1.cnf</span><br><span class="line">app1 (pid:12047) is running(0:PING_OK), master:192.168.206.202</span><br></pre></td></tr></table></figure><p>再检查集群状态，看是否会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos1 ~]# masterha_check_repl --conf=/etc/masterha/app1.cnf</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] Slaves settings check done.</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info]</span><br><span class="line">192.168.1.102(192.168.1.102:3306) (current master)</span><br><span class="line">+--192.168.206.202(192.168.206.202:3306)</span><br><span class="line">+--192.168.206.203(192.168.206.203:3306)</span><br><span class="line"></span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] Checking replication health on 192.168.206.202..</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] ok.</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] Checking replication health on 192.168.206.203..</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] ok.</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] Checking master_ip_failover_script status:</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] /scripts/master_ip_failover --command=status -</span><br><span class="line">-ssh_user=root --orig_master_host=192.168.206.201 --orig_master_ip=192.168.206.201 --</span><br><span class="line">orig_master_port=3306</span><br><span class="line"></span><br><span class="line">Checking the Status of the script.. OK</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] OK.</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [warning] shutdown_script is not defined.</span><br><span class="line">Fri Sep 30 23:05:10 2016 - [info] Got exit code 0 (Not master dead).</span><br><span class="line"></span><br><span class="line">MySQL Replication Health is OK.</span><br></pre></td></tr></table></figure><h5 id="（6）测试"><a class="header-anchor" href="#（6）测试">¶</a>（6）测试</h5><p>在master上停掉mysql服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl stop mysqld [ OK ]</span></span><br></pre></td></tr></table></figure><p>到slave(192.168.206.202)查看slave的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Slave_IO_State: Waiting for master to send event</span><br><span class="line">Master_Host: 192.168.206.200</span><br><span class="line">Master_User: mharep</span><br><span class="line">Master_Port: 3306</span><br><span class="line">  Connect_Retry: 60</span><br><span class="line">Master_Log_File: mysql-bin.000004</span><br><span class="line">Read_Master_Log_Pos: 154</span><br><span class="line">  Relay_Log_File: relay-bin.000002</span><br><span class="line"> Relay_Log_Pos: 320</span><br><span class="line">Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line"> Slave_IO_Running: Yes</span><br><span class="line"> Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>从上图可以看出slave指向了新的master服务器（192.168.206.200） 查看VIP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 keepalived]# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default</span><br><span class="line">qlen 1000</span><br><span class="line">link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">inet 127.0.0.1/8 scope host lo</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">inet6 ::1/128 scope host</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP</span><br><span class="line">group default qlen 1000</span><br><span class="line">link/ether 00:0c:29:ce:ea:e9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">inet 192.168.206.200/24 brd 192.168.206.255 scope global noprefixroute ens33</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">inet 192.168.206.100/24 brd 192.168.206.255 scope global secondary ens33:0</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">inet6 fe80::8afe:8575:3294:65a2/64 scope link tentative noprefixroute</span><br><span class="line">dadfailed</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">inet6 fe80::1d3d:dd62:8adb:c689/64 scope link tentative noprefixroute</span><br><span class="line">dadfailed</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">inet6 fe80::77a5:d0c0:a955:c7f3/64 scope link noprefixroute</span><br><span class="line">valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>从上图可以看到master2(原来的master)释放了VIP，master1(新的master)接管了VIP地址 主从切换后续工作 主库切换后，把原主库修复成新从库，相关操作请参考前面相关操作。 为了防止脑裂发生，推荐生产环境采用脚本的方式来管理虚拟ip，而不是使用keepalived来完成。到此为止，基本MHA集群已经配置完毕</p><h5 id="（7）总结"><a class="header-anchor" href="#（7）总结">¶</a>（7）总结</h5><blockquote><p>MHA软件由两部分组成，Manager工具包和Node工具包，具体的说明如下。 Manager工具包主要包括以下几个工具： masterha_check_ssh 检查MHA的SSH配置状况 masterha_check_repl 检查MySQL复制状况masterha_manger 启动MHA masterha_check_status 检测当前MHA运行状态masterha_master_monitor 检测master是否宕机 masterha_master_switch 控制故障转移（自动或者手动） masterha_conf_host 添加或删除置的server信息Node工具包（这些工具通常由MHA Manager的脚本触发，无需人为操作）主要包括以下几个工具： save_binary_logs 保存和复制master的二进制日志 apply_diff_relay_logs 识别差异的中继日志事件并将其差异的事件应用于其他的slave filter_mysqlbinlog 去除不必要的ROLLBACK事件（MHA已不再使用这个工具）purge_relay_logs 清除中继日志（不会阻塞SQL线程）</p></blockquote><h5 id="（8）mysql必备技能掌握"><a class="header-anchor" href="#（8）mysql必备技能掌握">¶</a>（8）mysql必备技能掌握</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、MySQL架构:对mysql的架构，整体有个印象，才能不断的加深对mysql的理解和后继的学习。 </span><br><span class="line"></span><br><span class="line">2、用各种姿势备份MySQL数据库 数据备份是DBA或运维工程师日常工作之一，如果让你来备份，你会用什么方式备份，在时间时间备份，使用什么策略备份 </span><br><span class="line"></span><br><span class="line">3、mysql主从复制及读写分离 mysql的主从复制及读写分离是DBA必备技能之一 </span><br><span class="line"></span><br><span class="line">4、MySQL/MariaDB数据库基于SSL实现主从复制 加强主从复制的安全性 </span><br><span class="line"></span><br><span class="line">5、MySQL高可用 数据的高可用如何保证 </span><br><span class="line"></span><br><span class="line">6、数据库Sharding的基本思想和切分策略 随着数据量的不断攀升，从性能和可维护的角度，需要进行一些Sharding，也就是数据库的切分，有垂直切分和水平切分 </span><br><span class="line"></span><br><span class="line">7、MySQL/MariaDB 性能调整和优化技巧 掌握优化思路和技巧，对数据库的不断优化是一项长期工程</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>XtraBacup备份与恢复</title>
    <link href="https://pdxblog.top/XtraBacup%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D.html"/>
    <id>https://pdxblog.top/XtraBacup%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:11.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XtraBacup备份与恢复"><a class="header-anchor" href="#XtraBacup备份与恢复">¶</a>XtraBacup备份与恢复</h2><h3 id="一、XtraBacup简介"><a class="header-anchor" href="#一、XtraBacup简介">¶</a>一、XtraBacup简介</h3><p>MySQL冷备、mysqldump、MySQL热拷贝都无法实现对数据库进行增量备份。在实际生产环境中增量备份是非常实用的，如果数据大于50G或100G，存储空间足够的情况下，可以每天进行完整备份，如果每天产生的数据量较大，需要定制数据备份策略。例如每周实用完整备份，周一到周六实用增量备份。而Percona-Xtrabackup就是为了实现增量备份而出现的一款主流备份工具，XtraBacup有2个工具，分别是xtrabakup、innobakupe。</p><p>Percona-xtrabackup是 Percona公司开发的一个用于MySQL数据库物理热备的备份工具，支持MySQL、Percona server和MariaDB，开源免费，是目前较为受欢迎的主流备份工具。xtrabackup只能备份innoDB和xtraDB两种数据引擎的表，而不能备份MyISAM数据表。</p><h3 id="二、XtraBacup优点"><a class="header-anchor" href="#二、XtraBacup优点">¶</a>二、XtraBacup优点</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（1）备份速度快，物理备份可靠</span><br><span class="line">（2）备份过程不会打断正在执行的事务（无需锁表）</span><br><span class="line">（3）能够基于压缩等功能节约磁盘空间和流量</span><br><span class="line">（4）自动备份校验</span><br><span class="line">（5）还原速度快</span><br><span class="line">（6）可以流传将备份传输到另外一台机器上</span><br><span class="line">（7）在不增加服务器负载的情况备份数据</span><br></pre></td></tr></table></figure><h3 id="三、Xtrabackup备份原理"><a class="header-anchor" href="#三、Xtrabackup备份原理">¶</a>三、Xtrabackup备份原理</h3><h4 id="1、Xtrabackup备份流程图"><a class="header-anchor" href="#1、Xtrabackup备份流程图">¶</a>1、Xtrabackup备份流程图</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711173552112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（1）innobackupex启动后，会先fork一个进程，用于启动xtrabackup，然后等待xtrabackup备份ibd数据文件；</span><br><span class="line">（2）xtrabackup在备份innoDB数据是，有2种线程：redo拷贝线程和ibd数据拷贝线程。xtrabackup进程开始执行后，会启动一个redo拷贝的线程，用于从最新的checkpoint点开始顺序拷贝redo.log；再启动ibd数据拷贝线程，进行拷贝ibd数据。这里是先启动redo拷贝线程的。在此阶段，innobackupex进行处于等待状态（等待文件被创建）</span><br><span class="line">（3）xtrabackup拷贝完成ibd数据文件后，会通知innobackupex（通过创建文件），同时xtrabackup进入等待状态（redo线程依旧在拷贝redo.log）</span><br><span class="line">（4）innobackupex收到xtrabackup通知后哦，执行FLUSH TABLES WITH READ LOCK（FTWRL），取得一致性位点，然后开始备份非InnoDB文件（如frm、MYD、MYI、CSV、opt、par等格式的文件），在拷贝非InnoDB文件的过程当中，数据库处于全局只读状态。</span><br><span class="line">（5）当innobackup拷贝完所有的非InnoDB文件后，会通知xtrabackup，通知完成后，进入等待状态；</span><br><span class="line">（6）xtrabackup收到innobackupex备份完成的通知后，会停止redo拷贝线程，然后通知innobackupex，redo.log文件拷贝完成；</span><br><span class="line">（7）innobackupex收到redo.log备份完成后，就进行解锁操作，执行：UNLOCK TABLES；</span><br><span class="line">（8）最后innbackupex和xtrabackup进程各自释放资源，写备份元数据信息等，innobackupex等xtrabackup子进程结束后退出。</span><br></pre></td></tr></table></figure><h4 id="2、XtraBackup的备份原理"><a class="header-anchor" href="#2、XtraBackup的备份原理">¶</a>2、XtraBackup的备份原理</h4><p>在InnoDB内部会维护一个redo日志文件，我们也可以叫做事务日志文件（transaction log，事务日志）。事务日志会存储每一个InnoDB表数据的记录修改。当InnoDB启动时，InnoDB会检查数据文件和事务日志，并执行两个步骤：它应用已经提交的事务日志到数据文件，并将修改过但没有提交的数据进行回滚操作。 XtraBacup在启动时会记住log sequence number（LSN），并且复制所有的数据文件。复制过程需要一些时间，所以这期间如果数据文件有改动，那么将会使数据库处于一个不同的时间点。这时，XtraBacup会运行一个后台进程，用于监视事务日志，并从事务日志复制最新的修改。XtraBacup必须持续的做这个操作，是因为事务日志是会轮转重复的写入，并且事务日志可以被重用。所以XtraBacup自启动开始，就不停的将事务日志中每个数据文件的修改都记录下来。这就是XtraBacup的备份过程。</p><h4 id="3、XtraBackup命令行工具"><a class="header-anchor" href="#3、XtraBackup命令行工具">¶</a>3、XtraBackup命令行工具</h4><p>XtraBackup中主要包含两个命令行工具：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）xtrabackup：专用于备份InnoDB和XtraDB引擎的数据，不能备份其他类型的表，也不能备份数据表结构；</span><br><span class="line">（2）innobackupex：这是一个perl脚本，在执行过程中会调用xtrabackup命令，这样用该命令既可以实现备份InnoDB，也可以备份MyISAM引擎的对象。</span><br></pre></td></tr></table></figure><p>常用选项:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--host     指定主机</span><br><span class="line">--user     指定用户名</span><br><span class="line">--password    指定密码</span><br><span class="line">--port     指定端口</span><br><span class="line">--databases     指定数据库</span><br><span class="line"></span><br><span class="line">--incremental    创建增量备份</span><br><span class="line">--incremental-basedir   指定包含完全备份的目录</span><br><span class="line">--incremental-dir      指定包含增量备份的目录 </span><br><span class="line"></span><br><span class="line">--apply-log        对备份进行预处理操作             </span><br><span class="line">    一般情况下，在备份完成后，数据尚且不能用于恢复操作，因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。因此，此时数据文件仍处理不一致状态。“准备”的主要作用正是通过回滚未提交的事务及同步已经提交的事务至数据文件也使得数据文件处于一致性状态。</span><br><span class="line">--redo-only      不回滚未提交事务</span><br><span class="line">--copy-back     恢复备份目录</span><br></pre></td></tr></table></figure><p>使用innobackupex备份时，其会调用xtrabackup备份所有的InnoDB表，复制所有关于表结构定义的相关文件(.frm)、以及MyISAM、MERGE、CSV和ARCHIVE表的相关文件，同时还会备份触发器和数据库配置信息相关的文件，这些文件会被保存到一个以时间命名的目录当中。在备份的同时，innobackupex还会在备份目录中创建如下文件：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1)xtrabackup_checkpoints -- 备份类型(如完全或增量)、备份状态(如是否已经为prepared状态)和LSN(日志序列号)范围信息：</span><br><span class="line">每个InnoDB页(通常为16k大小)都会包含一个日志序列号，即LSN，LSN是整个数据库系统的系统版本号，每个页面相关的LSN能够表明此页面最近是如何发生改变的。</span><br><span class="line">(2)xtrabackup_binlog_info  --  mysql服务器当前正在使用的二进制日志文件及备份这一刻位置二进制日志时间的位置。</span><br><span class="line">(3)xtrabackup_binlog_pos_innodb  --  二进制日志文件及用于InnoDB或XtraDB表的二进制日志文件的当前position。</span><br><span class="line">(4)xtrabackup_binary  --  备份中用到的xtrabackup的可执行文件；</span><br><span class="line">(5)backup-my.cnf  --  备份命令用到的配置选项信息：</span><br><span class="line">在使用innobackupex进行备份时，还可以使用--no-timestamp选项来阻止命令自动创建一个以时间命名的目录：如此一来，innobackupex命令将会创建一个BACKUP-DIR目录来存储备份数据。</span><br></pre></td></tr></table></figure><p>如果要使用一个最小权限的用户进行备份，则可基于如下命令创建此类用户：如果要使用一个最小权限的用户进行备份，则可基于如下命令创建此类用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">mysql&gt; CREATE USER &#39;bkpuser&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line"># 回收此用户所有权限</span><br><span class="line">mysql&gt; REVOKE ALL PRIVILEGES,GRANT OPTION FROM &#39;bkpuser&#39;;</span><br><span class="line"># 授权刷新、锁定表、用户查看服务器状态</span><br><span class="line">mysql&gt; GRANT RELOAD,LOCK TABLES,RELICATION CLIENT ON *.* TO &#39;bkpuser&#39;@&#39;localhost&#39;;</span><br><span class="line"># 刷新授权表</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><blockquote><p>注意：备份时需启动MySQL,恢复时需关闭MySQL,清空mysql数据目录且不能重新初始化，恢复数据后应该立即进行一次完全备份。</p></blockquote><h3 id="四、XtraBackup安装"><a class="header-anchor" href="#四、XtraBackup安装">¶</a>四、XtraBackup安装</h3><p>下载地址：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.percona.com/downloads/Percona-XtraBackup-2.4/LATEST/</span><br></pre></td></tr></table></figure><p>可以选择rpm包方式安装，也可以下载源码包编译安装，这里直接采用rpm包的方式进行安装。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># yum install -y percona-xtrabackup-24-2.4.9-1.el7.x86_64.rpm</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># rpm -qa |grep xtrabackup</span></span><br><span class="line">percona<span class="literal">-xtrabackup</span><span class="literal">-24</span><span class="literal">-2</span>.<span class="number">4.9</span><span class="literal">-1</span>.el7.x86_64</span><br></pre></td></tr></table></figure><h3 id="五、XtraBackup完全备份与恢复"><a class="header-anchor" href="#五、XtraBackup完全备份与恢复">¶</a>五、XtraBackup完全备份与恢复</h3><p>命令行语法格式：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">备份：</span><br><span class="line">innobackupex --user=DBUSER --password=DBUSERPASS --defaults-file=/etc/my.cnf /path/to/BACKUP-DIR/</span><br><span class="line"></span><br><span class="line">恢复：</span><br><span class="line">innobackupex --apply-log /backups/2018-07-30_11-04-55/</span><br><span class="line">innobackupex --copy-back --defaults-file=/etc/my.cnf  /backups/2018-07-30_11-04-55/</span><br></pre></td></tr></table></figure><h4 id="1、准备-prepare-一个完全备份"><a class="header-anchor" href="#1、准备-prepare-一个完全备份">¶</a>1、准备(prepare)一个完全备份</h4><p>一般情况下，在备份完成后，数据尚且不能用于恢复操作，因为备份的数据中可能会包含尚未提交的事务或者已经提交但尚未同步至数据文件中的事务。因此，此时数据文件仍处于不一致状态。&quot;准备&quot;的主要作用正是通过回滚未提交的事务及同步已经提交的事务至数据文件也使用得数据文件处于一致性状态。</p><p>innobackupex命令的–apply-log选项可用于实现上述功能，如下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># innobackupex --apply-log &#x2F;path&#x2F;to&#x2F;BACKUP-DIR</span><br><span class="line">如果执行正确，其最后输出的几行信息通常如下：</span><br><span class="line"></span><br><span class="line">120407 09:01:04 innobackupex: completed OK!</span><br></pre></td></tr></table></figure><p>在实现&quot;准备&quot;的过程中，innobackupex通常还可以使用–user-memory选项来指定其可以使用的内存的大小，默认为100M。如果有足够的内存空间可用，可以多划分一些内存给prepare的过程，以提高其完成备份的速度。</p><h4 id="2、从一个完全备份中恢复数据"><a class="header-anchor" href="#2、从一个完全备份中恢复数据">¶</a>2、从一个完全备份中恢复数据</h4><p>注意：恢复不用启动MySQL</p><p>innobackupex命令的–copy-back选项用于恢复操作，其通过复制所有数据相关的文件至mysql服务器DATADIR目录中来执行恢复过程。innobackupex通过backup-my.cnf来获取DATADIR目录的相关信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># innobackupex --copy-back &#x2F;path&#x2F;to&#x2F;BACKUP-DIR</span><br></pre></td></tr></table></figure><p>当数据恢复至DATADIR目录以后，还需要确保所有的数据文件的属主和属组均为正确的用户，如mysql，否则，在启动mysqld之前还需要事先修改数据文件的属主和属组。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chown -R mysql.mysql &#x2F;mydata&#x2F;data&#x2F;</span><br></pre></td></tr></table></figure><h4 id="3、实战练习"><a class="header-anchor" href="#3、实战练习">¶</a>3、实战练习</h4><h5 id="（1）准备测试环境"><a class="header-anchor" href="#（1）准备测试环境">¶</a>（1）准备测试环境</h5><p>测试环境准备 创建一个测试数据库，并创建一张表输入几行数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test2;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use test2;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table yy(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into yy values(1,&#39;tomcat1&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into yy values(2,&#39;tomcat2&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="（2）全量备份"><a class="header-anchor" href="#（2）全量备份">¶</a>（2）全量备份</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# innobackupex --user&#x3D;root --password&#x3D;1234 --host&#x3D;127.0.0.1 &#x2F;backups&#x2F;</span><br><span class="line">200628 16:31:18 innobackupex: Starting the backup operation</span><br><span class="line"></span><br><span class="line">IMPORTANT: Please check that the backup run completes successfully.</span><br><span class="line">           At the end of a successful backup run innobackupex</span><br><span class="line">           prints &quot;completed OK!&quot;.</span><br><span class="line"></span><br><span class="line">200628 16:31:18  version_check Connecting to MySQL server with DSN &#39;dbi:mysql:;mysql_read_default_group&#x3D;xtrabackup;host&#x3D;127.0.0.1&#39; as &#39;root&#39;  (using password: YES).</span><br><span class="line">200628 16:31:18  version_check Connected to MySQL server</span><br><span class="line"></span><br><span class="line"># 省略部分输出信息</span><br><span class="line"></span><br><span class="line">200628 16:31:21 [00] Writing &#x2F;backups&#x2F;2020-06-28_16-31-18&#x2F;backup-my.cnf</span><br><span class="line">200628 16:31:21 [00]        ...done</span><br><span class="line">200628 16:31:21 [00] Writing &#x2F;backups&#x2F;2020-06-28_16-31-18&#x2F;xtrabackup_info</span><br><span class="line">200628 16:31:21 [00]        ...done</span><br><span class="line">xtrabackup: Transaction log of lsn (2637610) to (2637619) was copied.</span><br><span class="line">200628 16:31:21 completed OK!</span><br></pre></td></tr></table></figure><h5 id="（3）查看完全备份文件"><a class="header-anchor" href="#（3）查看完全备份文件">¶</a>（3）查看完全备份文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# ll &#x2F;backups&#x2F;</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-x---. 6 root root 206 6月  28 16:31 2020-06-28_16-31-18</span><br><span class="line">[root@192 ~]# ll &#x2F;backups&#x2F;2020-06-28_16-31-18&#x2F;</span><br><span class="line">总用量 12336</span><br><span class="line">-rw-r-----. 1 root root      424 6月  28 16:31 backup-my.cnf</span><br><span class="line">-rw-r-----. 1 root root      425 6月  28 16:31 ib_buffer_pool</span><br><span class="line">-rw-r-----. 1 root root 12582912 6月  28 16:31 ibdata1</span><br><span class="line">drwxr-x---. 2 root root     4096 6月  28 16:31 mysql</span><br><span class="line">drwxr-x---. 2 root root     8192 6月  28 16:31 performance_schema</span><br><span class="line">drwxr-x---. 2 root root     8192 6月  28 16:31 sys</span><br><span class="line">drwxr-x---. 2 root root       48 6月  28 16:31 test2</span><br><span class="line">-rw-r-----. 1 root root      113 6月  28 16:31 xtrabackup_checkpoints</span><br><span class="line">-rw-r-----. 1 root root      435 6月  28 16:31 xtrabackup_info</span><br><span class="line">-rw-r-----. 1 root root     2560 6月  28 16:31 xtrabackup_logfile</span><br></pre></td></tr></table></figure><h5 id="（4）模拟完全恢复"><a class="header-anchor" href="#（4）模拟完全恢复">¶</a>（4）模拟完全恢复</h5><h6 id="1）完全备份"><a class="header-anchor" href="#1）完全备份">¶</a>1）完全备份</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># innobackupex --user=root --password=1234 /backups/</span></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">43</span>:<span class="number">32</span> innobackupex: Starting the backup operation</span><br><span class="line"></span><br><span class="line">IMPORTANT: Please check that the backup run completes successfully.</span><br><span class="line">           At the <span class="keyword">end</span> of a successful backup run innobackupex</span><br><span class="line">           prints <span class="string">"completed OK!"</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分输出信息</span></span><br><span class="line"></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">43</span>:<span class="number">34</span> [<span class="number">00</span>] Writing /backups/<span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_20</span><span class="literal">-43</span><span class="literal">-32</span>/xtrabackup_info</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">43</span>:<span class="number">34</span> [<span class="number">00</span>]        ...done</span><br><span class="line">xtrabackup: Transaction log of lsn (<span class="number">2630081</span>) to (<span class="number">2630090</span>) was copied.</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">43</span>:<span class="number">34</span> completed OK!</span><br></pre></td></tr></table></figure><h6 id="2）删除数据库目录下的所有文件"><a class="header-anchor" href="#2）删除数据库目录下的所有文件">¶</a>2）删除数据库目录下的所有文件</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># rm -rf /var/lib/mysql/*</span></span><br></pre></td></tr></table></figure><h6 id="3）准备恢复"><a class="header-anchor" href="#3）准备恢复">¶</a>3）准备恢复</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># innobackupex --apply-log --redo-only /backups/2020-06-28_20-43-32</span></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">48</span>:<span class="number">37</span> innobackupex: Starting the apply<span class="literal">-log</span> operation</span><br><span class="line"></span><br><span class="line">IMPORTANT: Please check that the apply<span class="literal">-log</span> run completes successfully.</span><br><span class="line">           At the <span class="keyword">end</span> of a successful apply<span class="literal">-log</span> run innobackupex</span><br><span class="line">           prints <span class="string">"completed OK!"</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分输出信息</span></span><br><span class="line"></span><br><span class="line">xtrabackup: starting shutdown with innodb_fast_shutdown = <span class="number">1</span></span><br><span class="line">InnoDB: Starting shutdown...</span><br><span class="line">InnoDB: Shutdown completed; log sequence number <span class="number">2630099</span></span><br><span class="line">InnoDB: Number of pools: <span class="number">1</span></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">48</span>:<span class="number">39</span> completed OK!</span><br></pre></td></tr></table></figure><h6 id="4）完全恢复"><a class="header-anchor" href="#4）完全恢复">¶</a>4）完全恢复</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># innobackupex --user=root --password=1234 --copy-back /backups/2020-06-28_20-43-32</span></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">52</span>:<span class="number">55</span> innobackupex: Starting the <span class="built_in">copy-back</span> operation</span><br><span class="line"></span><br><span class="line">IMPORTANT: Please check that the <span class="built_in">copy-back</span> run completes successfully.</span><br><span class="line">           At the <span class="keyword">end</span> of a successful <span class="built_in">copy-back</span> run innobackupex</span><br><span class="line">           prints <span class="string">"completed OK!"</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分输出信息</span></span><br><span class="line"></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">52</span>:<span class="number">56</span> [<span class="number">01</span>] Copying ./ib_buffer_pool to /var/lib/mysql/ib_buffer_pool</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">52</span>:<span class="number">56</span> [<span class="number">01</span>]        ...done</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">52</span>:<span class="number">56</span> [<span class="number">01</span>] Copying ./xtrabackup_info to /var/lib/mysql/xtrabackup_info</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">52</span>:<span class="number">56</span> [<span class="number">01</span>]        ...done</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">52</span>:<span class="number">56</span> completed OK!</span><br></pre></td></tr></table></figure><h6 id="5）更改mysql目录属性"><a class="header-anchor" href="#5）更改mysql目录属性">¶</a>5）更改mysql目录属性</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># chown -R mysql.mysql /var/lib/mysql/</span></span><br></pre></td></tr></table></figure><h6 id="6）启动mysql"><a class="header-anchor" href="#6）启动mysql">¶</a>6）启动mysql</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># mysql -uroot -p -e "show databases;"</span></span><br><span class="line">Enter password: </span><br><span class="line">ERROR <span class="number">2002</span> (HY000): Can<span class="string">'t connect to local MySQL server through socket '</span>/var/lib/mysql/mysql.sock<span class="string">' (2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 如果发生以上错误，查看mysql进程的pid，结束mysql，再启动mysql即可。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@192 ~]# ps -aux | grep mysql</span></span><br><span class="line"><span class="string">mysql     77011  0.1  9.0 1319504 169428 ?      Sl   19:28   0:07 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span></span><br><span class="line"><span class="string">root      77053  0.0  0.0 135604  1820 pts/3    S+   19:30   0:00 mysql -uroot -p</span></span><br><span class="line"><span class="string">root      77193  0.0  0.1 135604  1880 pts/2    S+   19:37   0:00 mysql -uroot -p</span></span><br><span class="line"><span class="string">root      80486  0.0  0.0 112724   988 pts/4    S+   20:56   0:00 grep --color=auto mysql</span></span><br><span class="line"><span class="string">[root@192 ~]# kill -9 77011</span></span><br><span class="line"><span class="string">[root@192 ~]# systemctl start mysqld</span></span><br><span class="line"><span class="string">[root@192 ~]# ps -aux | grep mysql</span></span><br><span class="line"><span class="string">root      77053  0.0  0.0 135604  1820 pts/3    S+   19:30   0:00 mysql -uroot -p</span></span><br><span class="line"><span class="string">root      77193  0.0  0.1 135604  1880 pts/2    S+   19:37   0:00 mysql -uroot -p</span></span><br><span class="line"><span class="string">mysql     80514 30.8  9.0 1122096 168328 ?      Sl   20:57   0:01 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span></span><br><span class="line"><span class="string">root      80558  0.0  0.0 112724   988 pts/4    S+   20:57   0:00 grep --color=auto mysql</span></span><br></pre></td></tr></table></figure><h6 id="7）查看数据是否恢复"><a class="header-anchor" href="#7）查看数据是否恢复">¶</a>7）查看数据是否恢复</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># mysql -uroot -p -e "show databases;"</span></span><br><span class="line">Enter password: </span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><h3 id="六、XtraBacup增量备份与恢复"><a class="header-anchor" href="#六、XtraBacup增量备份与恢复">¶</a>六、XtraBacup增量备份与恢复</h3><h4 id="1、XtraBacup的增量备份原理"><a class="header-anchor" href="#1、XtraBacup的增量备份原理">¶</a>1、XtraBacup的增量备份原理</h4><p>使用innobackupex进行增量备份，每个InnoDB的页面都会包含一个LSN信息，每当相关的数据发生改变，相关的页面的LSN就会自动增长。这正是InnoDB表可以进行增量备份的基础，即innobackupex通过备份上次完全备份之后发生改变的页面来实现。</p><p>在进行增量备份时，首先要进行一次全量备份，第一次增量备份是基于全备的，之后的增量备份都是基于上一次的增量备份的，以此类推。</p><p>要实现第一次增量备份，可以使用下面的命令进行：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">基于全量备份的增量备份与恢复</span><br><span class="line">做一次增量备份（基于当前最新的全量备份）</span><br><span class="line">innobackupex --user=root --password=root --defaults-file=/etc/my.cnf --incremental /backups/ --incremental-basedir=/backups/2018-07-30_11-01-37</span><br><span class="line">1. 准备基于全量</span><br><span class="line">innobackupex --user=root --password=root --defaults-file=/etc/my.cnf --apply-log --redo-only /backups/2018-07-30_11-01-37</span><br><span class="line">2. 准备基于增量</span><br><span class="line">innobackupex --user=root --password=root --defaults-file=/etc/my.cnf --apply-log --redo-only /backups/2018-07-30_11-01-37 --incremental-dir=/backups/2018-07-30_13-51-47/</span><br><span class="line">3. 恢复</span><br><span class="line">innobackupex --copy-back --defaults-file=/etc/my.cnf /opt/2017-01-05_11-04-55/</span><br><span class="line">解释：</span><br><span class="line">1. 2018-07-30_11-01-37指的是完全备份所在的目录。</span><br><span class="line">2. 2018-07-30_13-51-47指定是第一次基于2018-07-30_11-01-37增量备份的目录，其他类似以此类推，即如果有多次增量备份。每一次都要执行如上操作。</span><br></pre></td></tr></table></figure><p>需要注意的是，增量备份仅能应用于InnoDB或XtraDB表，对于MyISAM表而言，执行增量备份时其实进行的是完全备份。</p><p>“准备”(prepare)增量备份与整理完全备份有着一些不同，尤其要注意的是：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）需要在每个备份 (包括完全和各个增量备份)上，将已经提交的事务进行"重放"。"重放"之后，所有的备份数据将合并到完全备份上。</span><br><span class="line">（2）基于所有的备份将未提交的事务进行"回滚"</span><br></pre></td></tr></table></figure><h4 id="2、实战练习"><a class="header-anchor" href="#2、实战练习">¶</a>2、实战练习</h4><h5 id="（1）完全备份"><a class="header-anchor" href="#（1）完全备份">¶</a>（1）完全备份</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># innobackupex --user=root --password=1234 --host=127.0.0.1 /backups/</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># ll /backups/</span></span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">8</span> root root <span class="number">262</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">18</span>:<span class="number">17</span> <span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_18</span><span class="literal">-17</span><span class="literal">-57</span></span><br></pre></td></tr></table></figure><h5 id="（2）增量备份"><a class="header-anchor" href="#（2）增量备份">¶</a>（2）增量备份</h5><h6 id="1）准备测试环境"><a class="header-anchor" href="#1）准备测试环境">¶</a>1）准备测试环境</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use student;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; create table grade(id int);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into grade values(1),(2),(3);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from grade;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h6 id="2）增量备份"><a class="header-anchor" href="#2）增量备份">¶</a>2）增量备份</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># innobackupex --user=root --password=1234 --host=127.0.0.1 --incremental /backups/ --incremental-basedir=/backups/2020-06-28_18-17-57</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># ll /backups/</span></span><br><span class="line">总用量 <span class="number">4</span></span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">8</span> root root  <span class="number">262</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">18</span>:<span class="number">17</span> <span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_18</span><span class="literal">-17</span><span class="literal">-57</span></span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">8</span> root root <span class="number">4096</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">18</span>:<span class="number">18</span> <span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_18</span><span class="literal">-18</span><span class="literal">-38</span></span><br></pre></td></tr></table></figure><h5 id="（3）查看备份数据"><a class="header-anchor" href="#（3）查看备份数据">¶</a>（3）查看备份数据</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看全量备份的xtrabackup_checkpoints</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># cat /backups/2020-06-28_18-17-57/xtrabackup_checkpoints </span></span><br><span class="line">backup_type = full<span class="literal">-backuped</span><span class="comment">#备份类型为全量备份</span></span><br><span class="line">from_lsn = <span class="number">0</span><span class="comment">#lsn从0开始</span></span><br><span class="line">to_lsn = <span class="number">2644619</span><span class="comment">#lsn到2644619结束</span></span><br><span class="line">last_lsn = <span class="number">2644628</span></span><br><span class="line">compact = <span class="number">0</span></span><br><span class="line">recover_binlog_info = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看增量备份的xtrabackup_checkpoints</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># cat /backups/2020-06-28_18-18-38/xtrabackup_checkpoints </span></span><br><span class="line">backup_type = incremental<span class="comment">#备份类型为增量备份</span></span><br><span class="line">from_lsn = <span class="number">2644619</span><span class="comment">#lsn从2644619开始</span></span><br><span class="line">to_lsn = <span class="number">2644628</span><span class="comment">#lsn到2644628结束</span></span><br><span class="line">last_lsn = <span class="number">2644628</span></span><br><span class="line">compact = <span class="number">0</span></span><br><span class="line">recover_binlog_info = <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="（4）数据恢复"><a class="header-anchor" href="#（4）数据恢复">¶</a>（4）数据恢复</h5><h6 id="1）模拟mysql故障，删除数据目录所有数据"><a class="header-anchor" href="#1）模拟mysql故障，删除数据目录所有数据">¶</a>1）模拟mysql故障，删除数据目录所有数据</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># systemctl stop mysqld</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># rm -rf /var/lib/mysql/*</span></span><br></pre></td></tr></table></figure><h6 id="2）合并全备数据目录，确保数据的一致性"><a class="header-anchor" href="#2）合并全备数据目录，确保数据的一致性">¶</a>2）合并全备数据目录，确保数据的一致性</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># innobackupex --apply-log --redo-only /backups/2020-06-28_18-17-57</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分输出信息</span></span><br><span class="line"></span><br><span class="line">xtrabackup: starting shutdown with innodb_fast_shutdown = <span class="number">1</span></span><br><span class="line">InnoDB: Starting shutdown...</span><br><span class="line">InnoDB: Shutdown completed; log sequence number <span class="number">2644637</span></span><br><span class="line">InnoDB: Number of pools: <span class="number">1</span></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">08</span>:<span class="number">23</span> completed OK!</span><br></pre></td></tr></table></figure><h6 id="3）将增量备份数据合并到全备数据目录当中"><a class="header-anchor" href="#3）将增量备份数据合并到全备数据目录当中">¶</a>3）将增量备份数据合并到全备数据目录当中</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># innobackupex --apply-log --redo-only /backups/2020-06-28_18-17-57 --incremental-dir=/backups/2020-06-28_18-18-38</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分输出信息</span></span><br><span class="line"></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">10</span>:<span class="number">14</span> [<span class="number">01</span>] Copying /backups/<span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_18</span><span class="literal">-18</span><span class="literal">-38</span>/<span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_17</span><span class="literal">-43</span><span class="literal">-27</span>/db.opt to ./<span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_17</span><span class="literal">-43</span><span class="literal">-27</span>/db.opt</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">10</span>:<span class="number">14</span> [<span class="number">01</span>]        ...done</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">10</span>:<span class="number">14</span> [<span class="number">01</span>] Copying /backups/<span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_18</span><span class="literal">-18</span><span class="literal">-38</span>/<span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_17</span><span class="literal">-44</span><span class="literal">-04</span>/db.opt to ./<span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_17</span><span class="literal">-44</span><span class="literal">-04</span>/db.opt</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">10</span>:<span class="number">14</span> [<span class="number">01</span>]        ...done</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">10</span>:<span class="number">14</span> [<span class="number">00</span>] Copying /backups/<span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_18</span><span class="literal">-18</span><span class="literal">-38</span>//xtrabackup_info to ./xtrabackup_info</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">10</span>:<span class="number">14</span> [<span class="number">00</span>]        ...done</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">10</span>:<span class="number">14</span> completed OK!</span><br></pre></td></tr></table></figure><h6 id="4）查看数据备份类型"><a class="header-anchor" href="#4）查看数据备份类型">¶</a>4）查看数据备份类型</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># cat /backups/2020-06-28_18-17-57/xtrabackup_checkpoints </span></span><br><span class="line">backup_type = log<span class="literal">-applied</span><span class="comment">#查看到数据备份类型是增加</span></span><br><span class="line">from_lsn = <span class="number">0</span><span class="comment">#lsn从0开始</span></span><br><span class="line">to_lsn = <span class="number">2644619</span><span class="comment">#lsn结束号为最新的lsn</span></span><br><span class="line">last_lsn = <span class="number">2644628</span></span><br><span class="line">compact = <span class="number">0</span></span><br><span class="line">recover_binlog_info = <span class="number">0</span></span><br></pre></td></tr></table></figure><h6 id="5）恢复数据"><a class="header-anchor" href="#5）恢复数据">¶</a>5）恢复数据</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># innobackupex --copy-back /backups/2020-06-28_18-17-57</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分输出信息</span></span><br><span class="line"></span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">39</span> [<span class="number">01</span>] Copying ./ib_buffer_pool to /var/lib/mysql/ib_buffer_pool</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">39</span> [<span class="number">01</span>]        ...done</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">39</span> [<span class="number">01</span>] Copying ./xtrabackup_info to /var/lib/mysql/xtrabackup_info</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">39</span> [<span class="number">01</span>]        ...done</span><br><span class="line"><span class="number">200628</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">39</span> completed OK!</span><br></pre></td></tr></table></figure><h6 id="6）查看数据库目录"><a class="header-anchor" href="#6）查看数据库目录">¶</a>6）查看数据库目录</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># ll /var/lib/mysql</span></span><br><span class="line">总用量 <span class="number">12324</span></span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> root root       <span class="number">20</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> <span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_17</span><span class="literal">-43</span><span class="literal">-27</span></span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> root root       <span class="number">20</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> <span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_17</span><span class="literal">-44</span><span class="literal">-04</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root root      <span class="number">425</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> ib_buffer_pool</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root root <span class="number">12582912</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> ibdata1</span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> root root     <span class="number">4096</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> mysql</span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> root root     <span class="number">8192</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> performance_schema</span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> root root       <span class="number">84</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> student</span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> root root     <span class="number">8192</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> sys</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root root      <span class="number">507</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> xtrabackup_info</span><br></pre></td></tr></table></figure><h6 id="7）更改数据的属主属组"><a class="header-anchor" href="#7）更改数据的属主属组">¶</a>7）更改数据的属主属组</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># chown -R mysql.mysql /var/lib/mysql/</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># ll /var/lib/mysql</span></span><br><span class="line">总用量 <span class="number">12324</span></span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> mysql mysql       <span class="number">20</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> <span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_17</span><span class="literal">-43</span><span class="literal">-27</span></span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> mysql mysql       <span class="number">20</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> <span class="number">2020</span><span class="literal">-06</span><span class="literal">-28_17</span><span class="literal">-44</span><span class="literal">-04</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> mysql mysql      <span class="number">425</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> ib_buffer_pool</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> mysql mysql <span class="number">12582912</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> ibdata1</span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> mysql mysql     <span class="number">4096</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> mysql</span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> mysql mysql     <span class="number">8192</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> performance_schema</span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> mysql mysql       <span class="number">84</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> student</span><br><span class="line">drwxr<span class="literal">-x</span>---. <span class="number">2</span> mysql mysql     <span class="number">8192</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> sys</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> mysql mysql      <span class="number">507</span> <span class="number">6</span>月  <span class="number">28</span> <span class="number">20</span>:<span class="number">14</span> xtrabackup_info</span><br></pre></td></tr></table></figure><h6 id="8）启动mysql"><a class="header-anchor" href="#8）启动mysql">¶</a>8）启动mysql</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># systemctl start mysqld</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># ps -aux | grep mysqld</span></span><br><span class="line">mysql     <span class="number">83275</span>  <span class="number">4.0</span>  <span class="number">9.0</span> <span class="number">1122096</span> <span class="number">168576</span> ?      Sl   <span class="number">20</span>:<span class="number">18</span>   <span class="number">0</span>:<span class="number">02</span> /usr/sbin/mysqld -<span class="literal">-daemonize</span> -<span class="literal">-pid</span><span class="operator">-file</span>=/var/run/mysqld/mysqld.pid</span><br><span class="line">root      <span class="number">83320</span>  <span class="number">0.0</span>  <span class="number">0.0</span> <span class="number">112724</span>   <span class="number">988</span> pts/<span class="number">1</span>    S+   <span class="number">20</span>:<span class="number">19</span>   <span class="number">0</span>:<span class="number">00</span> grep -<span class="literal">-color</span>=auto mysqld</span><br></pre></td></tr></table></figure><h6 id="9）查看数据是否恢复"><a class="header-anchor" href="#9）查看数据是否恢复">¶</a>9）查看数据是否恢复</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> ~]<span class="comment"># mysql -uroot -p -e "show databases;"</span></span><br><span class="line">Enter password: </span><br><span class="line">+------------------------------+</span><br><span class="line">| Database                     |</span><br><span class="line">+------------------------------+</span><br><span class="line">| information_schema           |</span><br><span class="line">| mysql                        |</span><br><span class="line">| performance_schema           |</span><br><span class="line">| student                      |</span><br><span class="line">| sys                          |</span><br><span class="line">+------------------------------+</span><br></pre></td></tr></table></figure><h6 id="10）总结"><a class="header-anchor" href="#10）总结">¶</a>10）总结</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）增量备份需要使用参数--incremental指定需要备份到哪个目录，使用incremental-dir指定全备目录；</span><br><span class="line">（2）进行数据备份时，需要使用参数--apply-log redo-only先合并全备数据目录数据，确保全备数据目录数据的一致性；</span><br><span class="line">（3）再将增量备份数据使用参数--incremental-dir合并到全备数据当中；</span><br><span class="line">（4）最后通过最后的全备数据进行恢复数据，注意，如果有多个增量备份，需要逐一合并到全备数据当中，再进行恢复。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安装</title>
    <link href="https://pdxblog.top/mysql%E5%AE%89%E8%A3%85.html"/>
    <id>https://pdxblog.top/mysql%E5%AE%89%E8%A3%85.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:11.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL安装"><a class="header-anchor" href="#MySQL安装">¶</a>MySQL安装</h2><h3 id="一、yum方式安装MySQL-5-7"><a class="header-anchor" href="#一、yum方式安装MySQL-5-7">¶</a>一、yum方式安装MySQL 5.7</h3><p>CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL，因此安装方式较为以往有一些改变：</p><h4 id="1、下载mysql的源"><a class="header-anchor" href="#1、下载mysql的源">¶</a>1、下载mysql的源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="2、安装yum库"><a class="header-anchor" href="#2、安装yum库">¶</a>2、安装yum库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall -y mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="3、安装MySQL"><a class="header-anchor" href="#3、安装MySQL">¶</a>3、安装MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure><h4 id="4、启动MySQL服务"><a class="header-anchor" href="#4、启动MySQL服务">¶</a>4、启动MySQL服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start  mysqld</span><br><span class="line">systemctl status  mysqld</span><br></pre></td></tr></table></figure><h4 id="5、进入mysql并修改默认密码"><a class="header-anchor" href="#5、进入mysql并修改默认密码">¶</a>5、进入mysql并修改默认密码</h4><h5 id="（1）获取初始化密码"><a class="header-anchor" href="#（1）获取初始化密码">¶</a>（1）获取初始化密码</h5><p>此时MySQL已经开始正常运行，不过MySQL5.7加强了root用户的安全性，因此在第一次安装后会初始化一个随机密码，如果要想进入MySQL还得先找出root用户的密码，通过如下命令可以在日志文件中找出密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# grep "password" /var/log/mysqld.log</span><br><span class="line">2020-07-02T06:53:24.714760Z 1 [Note] A temporary password is generated for root@localhost: rfH2e?6igi%T</span><br></pre></td></tr></table></figure><h5 id="（2）登录mysql"><a class="header-anchor" href="#（2）登录mysql">¶</a>（2）登录mysql</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mysql -uroot -p</span><br></pre></td></tr></table></figure><h5 id="（3）修改原始密码"><a class="header-anchor" href="#（3）修改原始密码">¶</a>（3）修改原始密码</h5><p>输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure><p>这里有个问题，新密码设置的时候如果设置的过于简单会报错，原因是因为MySQL有密码设置的规范，具体是与validate_password_policy的值有关。</p><p>MySQL完整的初始密码规则可以通过如下命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| Variable_name                        | Value |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| validate_password_check_user_name    | ON   |</span><br><span class="line">| validate_password_dictionary_file    |       |</span><br><span class="line">| validate_password_length             | 8     |</span><br><span class="line">| validate_password_mixed_case_count   | 1     |</span><br><span class="line">| validate_password_number_count       | 1     |</span><br><span class="line">| validate_password_policy             | LOW   |</span><br><span class="line">| validate_password_special_char_count | 1     |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>密码的长度是由validate_password_length决定的，而validate_password_length的计算公式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validate_password_length &#x3D; validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</span><br></pre></td></tr></table></figure><p>通过如下命令修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy&#x3D;0;</span><br><span class="line">set global validate_password_length&#x3D;4;</span><br><span class="line"></span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure><p>然后退出后即可用新密码登录。</p><h5 id="（4）远程连接授权"><a class="header-anchor" href="#（4）远程连接授权">¶</a>（4）远程连接授权</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;your password&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h5 id="（5）开通端口（默认3306）"><a class="header-anchor" href="#（5）开通端口（默认3306）">¶</a>（5）开通端口（默认3306）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=3306/tcp</span><br></pre></td></tr></table></figure><h4 id="6、禁止yum库自动更新"><a class="header-anchor" href="#6、禁止yum库自动更新">¶</a>6、禁止yum库自动更新</h4><p>此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y remove mysql57-community-release-el7-7.noarch</span><br></pre></td></tr></table></figure><p>此时才算真的完成了。</p>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL自带工具使用介绍</title>
    <link href="https://pdxblog.top/mysql%E8%87%AA%E5%B8%A6%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D.html"/>
    <id>https://pdxblog.top/mysql%E8%87%AA%E5%B8%A6%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:11.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL自带工具使用介绍"><a class="header-anchor" href="#MySQL自带工具使用介绍">¶</a>MySQL自带工具使用介绍</h1><p>MySQL数据库不仅提供了数据库的服务器端应用程序，同时还提供了大量的客户端工具程序，如mysql，<br>mysqladmin，mysqldump等等 。</p><h3 id="1、mysql命令"><a class="header-anchor" href="#1、mysql命令">¶</a>1、mysql命令</h3><p>Mysql命令是用的最多的一个命令工具了，为用户提供一个命令行接口来操作管理MySQL 服务器，可以通过<code>mysql --help</code>来查看其详细使用方法。</p><table><thead><tr><th>选项</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>-u</td><td>指定连接数据库时使用的用户</td><td></td></tr><tr><td>-p</td><td>指定用户的密码</td><td>可以-p后面直接写密码，也可以不写，进行交互式输入密码，推荐后者</td></tr><tr><td>-h</td><td>指定要登录的主机</td><td>可选，如果为空，则登录本机</td></tr><tr><td>-P</td><td>指定要连接的端口</td><td>可选，默认是3306</td></tr><tr><td>-e</td><td>可以通过-e命令直接执行SQL语句，而不用进入数据库</td><td>免交互登录数据库执行SQL语句，通常在脚本中使用</td></tr><tr><td>-D</td><td>指定要登录到哪个库</td><td>默认不会登录到库，可以省略此选项，直接写库名</td></tr><tr><td>-E</td><td>查询到的结果以行来显示</td><td>类似于每条SQL语句后面加“\G”</td></tr><tr><td>-f</td><td>即使出现SQL错误，也强制继续</td><td>比如在不登陆数据库执行删除库的操作会有一个交互式的确认操作，可以使用此选项来避免交互式</td></tr><tr><td>-X</td><td>将查询到的数据导出位xml文件</td><td>导出的文件在windows系统中可以使用excel表格打开</td></tr><tr><td>-H</td><td>将查询到的数据导出位html文件</td><td>导出的文件在windows系统中可以使用浏览器打开</td></tr><tr><td>–prompt</td><td>定制自己的MySQL提示符显示的内容</td><td>默认登登录到MySQL后的提示符是“mysql &gt;”，可以使用该选项定制提示符</td></tr><tr><td>–tee</td><td>将操作数据库所有输入和输出的内容都记录进文件中</td><td>在一些较大维护变更的时候，为了方便被查，可以将整个操作过程中的输出信息保存到某个文件中</td></tr></tbody></table><p>这里主要介绍一些在运维过程中会用到的相关选项。</p><h4 id="（1）-e、-u、-p、-h、-P等选项的使用语法"><a class="header-anchor" href="#（1）-e、-u、-p、-h、-P等选项的使用语法">¶</a>（1）-e、-u、-p、-h、-P等选项的使用语法</h4><p>首先看看“-e, --execute=name”参数，这个参数是告诉mysql，我要执行“-e”后面的某个命令，而不是要通过mysql连接登录到MySQL Server 上面。此参数在我们写一些基本的MySQL 检查和监控的脚本中非常有用，运维mysql时经常在脚本中使用到它。</p><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql  -hhostname -Pport -uusername -ppassword  -e  相关mysql的sql语句</span><br></pre></td></tr></table></figure><p><strong>示例1：</strong></p><p>免登录执行sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost -P3306 -uroot -p mysql -e &quot;select user,host from user;&quot;</span><br><span class="line">Enter password: ****</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| user          | host      |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| bankMaster    | %         |</span><br><span class="line">| bankMaster    | 127.0.0.1 |</span><br><span class="line">| epetadmin     | localhost |</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+---------------+-----------+</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><p>通过binlog_cache_use 以及 binlog_cache_disk_use来分析设置的binlog_cache_size是否足够</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysql -uroot -p -e &quot;show status like &#39;binlog_cache%&#39;&quot;</span><br><span class="line">Enter password: </span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Binlog_cache_disk_use | 0     |</span><br><span class="line">| Binlog_cache_use      | 0     |</span><br><span class="line">+-----------------------+-------+</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><p>通过脚本创建数据库、表及对表进行增、改、删、查操作。 脚本内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># cat mysql1.sh</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">HOSTNAME&#x3D;&quot;localhost&quot;</span><br><span class="line">PORT&#x3D;&quot;3306&quot;</span><br><span class="line">USERNAME&#x3D;&quot;root&quot;</span><br><span class="line">PASSWORD&#x3D;&quot;1234&quot;</span><br><span class="line">DBNAME&#x3D;&quot;test_db&quot;</span><br><span class="line">TABLENAME&#x3D;&quot;tb1&quot;</span><br><span class="line"></span><br><span class="line">#create database</span><br><span class="line">create_db_sql&#x3D;&quot;create database if not exists $&#123;DBNAME&#125;&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; -e &quot;$&#123;create_db_sql&#125;&quot;</span><br><span class="line"></span><br><span class="line">#create table</span><br><span class="line">create_table_sql&#x3D;&quot;create table if not exists $&#123;TABLENAME&#125; (name varchar(20),id int</span><br><span class="line">default 0)&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;create_table_sql&#125;&quot;</span><br><span class="line"></span><br><span class="line">#insert data to table</span><br><span class="line">insert_sql&#x3D;&quot;insert into $&#123;TABLENAME&#125; values (&#39;tom&#39;,1)&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;insert_sql&#125;&quot;</span><br><span class="line"></span><br><span class="line">#select data</span><br><span class="line">select_sql&#x3D;&quot;select * from $&#123;TABLENAME&#125;&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;select_sql&#125;&quot;</span><br><span class="line"></span><br><span class="line">#update data</span><br><span class="line">update_sql&#x3D;&quot;update $&#123;TABLENAME&#125; set id&#x3D;3&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;update_sql&#125;&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;select_sql&#125;&quot;</span><br><span class="line"></span><br><span class="line">#delete data</span><br><span class="line">delete_sql&#x3D;&quot;delete from $&#123;TABLENAME&#125;&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;delete_sql&#125;&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;select_sql&#125;&quot;</span><br></pre></td></tr></table></figure><p>创建授予test用户可以在指定的源登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysql -uroot -p -e &quot;grant all on test_db.* to test@&#39;192.168.189.%&#39; identified by &#39;123456&#39;&quot;</span><br><span class="line">Enter password: </span><br><span class="line">[root@192 ~]# mysql -hlocalhost -P3306 -uroot -p mysql -e &quot;select host,user from user&quot;</span><br><span class="line">Enter password: </span><br><span class="line">+---------------+---------------+</span><br><span class="line">| host          | user          |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| 192.168.189.% | test          |</span><br><span class="line">| localhost     | mysql.session |</span><br><span class="line">| localhost     | mysql.sys     |</span><br><span class="line">| localhost     | root          |</span><br><span class="line">+---------------+---------------+</span><br></pre></td></tr></table></figure><p>测试test用户连接mysql服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysql -utest -p -h192.168.189.129</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 37</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h4 id="（2）-E"><a class="header-anchor" href="#（2）-E">¶</a>（2）-E</h4><p>如果在连接时候使用了“-E, --vertical”参数，登入之后的所有查询结果都将以纵列显示，效果和我们在一条<br>query 之后以“\G”结尾一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysql -utest -p -h192.168.189.129 -E</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 39</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Database: information_schema</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">Database: test_db</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysql -utest -p -X</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 40</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; use test_db;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * from tb1;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultset statement&#x3D;&quot;select * from tb1;&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;&gt;</span><br><span class="line">  &lt;row&gt;</span><br><span class="line">        &lt;field name&#x3D;&quot;name&quot;&gt;tom&lt;&#x2F;field&gt;</span><br><span class="line">        &lt;field name&#x3D;&quot;id&quot;&gt;1&lt;&#x2F;field&gt;</span><br><span class="line">  &lt;&#x2F;row&gt;</span><br><span class="line"></span><br><span class="line">  &lt;row&gt;</span><br><span class="line">        &lt;field name&#x3D;&quot;name&quot;&gt;tom&lt;&#x2F;field&gt;</span><br><span class="line">        &lt;field name&#x3D;&quot;id&quot;&gt;2&lt;&#x2F;field&gt;</span><br><span class="line">  &lt;&#x2F;row&gt;</span><br><span class="line"></span><br><span class="line">  &lt;row&gt;</span><br><span class="line">        &lt;field name&#x3D;&quot;name&quot;&gt;tom&lt;&#x2F;field&gt;</span><br><span class="line">        &lt;field name&#x3D;&quot;id&quot;&gt;3&lt;&#x2F;field&gt;</span><br><span class="line">  &lt;&#x2F;row&gt;</span><br><span class="line">&lt;&#x2F;resultset&gt;</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="（3）–prompt使用方法"><a class="header-anchor" href="#（3）–prompt使用方法">¶</a>（3）–prompt使用方法</h4><p>“–prompt=name”参数对于做运维的人来说是一个非常重要的参数选项，其主要功能是定制自己的mysql提示<br>符的显示内容。</p><p>在默认情况下，我们通过mysql登入到数据库之后，mysql的提示符只是一个很简单的内容”mysql&gt;“，没有其他任何附加信息。非常幸运的是mysql通过“–prompt=name”参数给我们提供了自定义提示信息的办法，可以通过配置显示登入的主机地址、登录用户名、当前时间、当前数据库schema，MySQL Server 的一些信息等等。</p><p>个人强烈建议将登录主机名、登录用户名和所在的schema 这三项加入提示内容，因为当大家手边管理的MySQL 越来越多，操作越来越频繁的时候，非常容易因为操作的时候没有太在意自己当前所处的环境而造成在错误的环境执行了错误的命令并造成严重后果的情况。如果我们在提示内容中加入了这几项之后，至少可以更方便的提醒自己当前所处环境，以尽量减少犯错误的概率。</p><p>个人强烈建议提示符定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;\\u@\\h : \\d \\r:\\m:\\s&gt; &quot;</span><br></pre></td></tr></table></figure><p>提示符解释：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">u</span></span> 表示用户名</span><br><span class="line"><span class="tag">\<span class="name">h</span></span> 表示主机名，</span><br><span class="line"><span class="tag">\<span class="name">d</span></span> 表示当前数据库（none表示没有在任何库中）</span><br><span class="line"><span class="tag">\<span class="name">r</span></span>小时（12小时制）</span><br><span class="line"><span class="tag">\<span class="name">R</span></span>小时（24小时制）</span><br><span class="line"><span class="tag">\<span class="name">m</span></span>分种</span><br><span class="line"><span class="tag">\<span class="name">s</span></span>秒</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysql -utest -p --prompt&#x3D;&quot;\\u@\\h: \\d \\r:\\m:\\s&gt; &quot;</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 42</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">test@localhost: (none) 04:52:32&gt; </span><br><span class="line">test@localhost: (none) 04:52:55&gt; use test_db;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">test@localhost: test_db 04:54:38&gt;</span><br></pre></td></tr></table></figure><p>上述方式每次连接都要写那些字符进行定制，非常麻烦，可以将其写入配置文件中的clinet字段下，之后再登录就可以省略了。如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">prompt&#x3D;&quot;\\u@\\h: \\d \\R:\\m:\\s&gt; &quot;</span><br><span class="line"></span><br><span class="line">[root@192 opt]# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 45</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">root@localhost: (none) 17:07:27&gt;</span><br></pre></td></tr></table></figure><h4 id="（4）–tee的使用方法"><a class="header-anchor" href="#（4）–tee的使用方法">¶</a>（4）–tee的使用方法</h4><p>“–tee=name”参数也是对运维人员非常有用的参数选项，用来告诉mysql，将所有输入和输出内容都记录进文<br>件。在我们一些较大维护变更的时候，为了方便被查，最好是将整个操作过程的所有输入和输出内容都保存下<br>来。</p><p>假如mysql命令行状态下，要进行大量的交互操作，其实可以把这些操作记录在log中进行审计，很简单<br>mysql -u root -p --tee=/path/xxxx.log</p><p>也可以在服务器上的/etc/my.cnf中的[client]加入 tee =/tmp/client_mysql.log即可.。</p><blockquote><p>注：若没有[client]就添加即可，或者在mysql&gt;提示符下执行下面的命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test@localhost: test_db 04:54:38&gt; tee &#x2F;opt&#x2F;tmp.log</span><br><span class="line">Logging to file &#39;&#x2F;opt&#x2F;tmp.log&#39;</span><br><span class="line">test@localhost: test_db 04:59:27&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| test_db            |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">test@localhost: test_db 04:59:54&gt;</span><br></pre></td></tr></table></figure><p>查看日志，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test@localhost: test_db 04:54:38&gt; tee &#x2F;opt&#x2F;tmp.log</span><br><span class="line">Logging to file &#39;&#x2F;opt&#x2F;tmp.log&#39;</span><br><span class="line">test@localhost: test_db 04:59:27&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| test_db            |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">test@localhost: test_db 04:59:54&gt;</span><br></pre></td></tr></table></figure><h3 id="2、mysqladmin命令"><a class="header-anchor" href="#2、mysqladmin命令">¶</a>2、mysqladmin命令</h3><p>mysqladmin，顾名思义，提供的功能都是与MySQL 管理相关的各种功能。如MySQL Server状态检查，各种统计信息的flush，创建/删除数据库，关闭MySQL Server 等等。mysqladmin所能做的事情，虽然大部分都可以通过mysql连接登录上MySQL Server 之后来完成，但是大部分通过mysqladmin来完成操作会更简单更方便。</p><p>mysqladmin后面可以接选项，也可以接命令，这里就不说选项了，主要说一下命令。</p><h4 id="（1）ping"><a class="header-anchor" href="#（1）ping">¶</a>（1）ping</h4><p>监测服务是否正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysqladmin -utest -p ping</span><br><span class="line">Enter password: </span><br><span class="line">mysqld is alive</span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><h4 id="（2）status"><a class="header-anchor" href="#（2）status">¶</a>（2）status</h4><p>获取mysql当前状态值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysqladmin -utest -p status</span><br><span class="line">Enter password: </span><br><span class="line">Uptime: 173569  Threads: 3  Questions: 156  Slow queries: 0  Opens: 128  Flush tables: 1  Open tables: 121  Queries per second avg: 0.000</span><br></pre></td></tr></table></figure><h4 id="（3）processlist"><a class="header-anchor" href="#（3）processlist">¶</a>（3）processlist</h4><p>获取数据库当前连接信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mysqladmin -utest -p processlist</span><br><span class="line">Enter password: </span><br><span class="line">+----+------+-----------+----+---------+------+----------+------------------+</span><br><span class="line">| Id | User | Host      | db | Command | Time | State    | Info             |</span><br><span class="line">+----+------+-----------+----+---------+------+----------+------------------+</span><br><span class="line">| 48 | test | localhost |    | Query   | 0    | starting | show processlist |</span><br><span class="line">+----+------+-----------+----+---------+------+----------+------------------+</span><br></pre></td></tr></table></figure><h4 id="（4）获取数据库当前的连接数"><a class="header-anchor" href="#（4）获取数据库当前的连接数">¶</a>（4）获取数据库当前的连接数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、mysqldump"><a class="header-anchor" href="#3、mysqldump">¶</a>3、mysqldump</h3><p>这个工具其功能就是将MySQL Server中的数据以SQL 语句的形式从数据库中dump 成文本文件。mysqldump是做为MySQL 的一种逻辑备份工具。</p><h3 id="4、mysqlbinlog"><a class="header-anchor" href="#4、mysqlbinlog">¶</a>4、mysqlbinlog</h3><p>mysqlbinlog程序的主要功能就是分析MySQL Server 所产生的二进制日志（也就是binlog）。<br>通过mysqlbinlog，我们可以解析出binlog中指定时间段或者指定日志起始和结束位置的内容解析成SQL 语句。</p><h3 id="5、Mysqlslap性能测试"><a class="header-anchor" href="#5、Mysqlslap性能测试">¶</a>5、Mysqlslap性能测试</h3><p>mysqlslap是mysql自带的基准测试工具,优点:查询数据,语法简单,灵活容易使用.该工具可以模拟多个客户端同时并发的向服务器发出查询更新,给出了性能测试数据而且提供了多种引擎的性能比较.mysqlslap为mysql性能优化前后提供了直观的验证依据,建议系统运维和DBA人员应该掌握一些常见的压力测试工具,才能准确的掌握线上数据库支撑的用户流量上限及其抗压性等问题。</p><p>这里解释一下一些常用的选项。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--concurrency代表并发数量，多个可以用逗号隔开。例如：concurrency=50,100,200</span><br><span class="line">--engines代表要测试的引擎，可以有多个，用分隔符隔开。 </span><br><span class="line">--iterations代表要运行这些测试多少次，即运行多少次后，得到结果。 </span><br><span class="line">--auto-generate-sql 代表用系统自己生成的SQL脚本来测试。 </span><br><span class="line">--auto-generate-sql-load-type 代表要测试的是读还是写还是两者混合的（read,write,update,mixed）</span><br><span class="line">--number-of-queries 代表总共要运行多少次查询。每个客户运行的查询数量可以用查询总数/并发数来计算。比如倒数第二个结果2=200/100。 </span><br><span class="line">--debug-info 代表要额外输出CPU以及内存的相关信息（注：只有在MySQL用--with-debug编译时可）。 </span><br><span class="line">--number-int-cols 代表测试表中的INTEGER类型的属性有几个。 </span><br><span class="line">--number-char-cols代表测试表的char类型字段的数量。 </span><br><span class="line">--create-schema 代表自己定义的模式（在MySQL中也就是库即创建测试的数据库）。 </span><br><span class="line">--query 代表自己的SQL脚本。 </span><br><span class="line">--only-print 如果只想打印看看SQL语句是什么，可以用这个选项。 </span><br><span class="line">--csv=name 生产CSV格式数据文件</span><br></pre></td></tr></table></figure><h4 id="（1）查看Mysql数据库默认最大连接数"><a class="header-anchor" href="#（1）查看Mysql数据库默认最大连接数">¶</a>（1）查看Mysql数据库默认最大连接数</h4><p>可以看到mysql5.7.13默认是151。注：不同版本默认最大连接数不差别。一般生产环境是不够的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%max_connections%&#39;;</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 151   |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="（2）修改MySQL数据库默认最大连接数"><a class="header-anchor" href="#（2）修改MySQL数据库默认最大连接数">¶</a>（2）修改MySQL数据库默认最大连接数</h4><h5 id="方式一："><a class="header-anchor" href="#方式一：">¶</a>方式一：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set GLOBAL max_connections &#x3D; 1024;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;%max_connections%&#39;;</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 1024  |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><h5 id="方式二："><a class="header-anchor" href="#方式二：">¶</a>方式二：</h5><p>在my.cnf[mysqld]下添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_connections&#x3D;1024</span><br></pre></td></tr></table></figure><p>重启Mysql，查看修改后的最大连接数。</p><h4 id="（3）查看Mysql默认使用的存储引擎"><a class="header-anchor" href="#（3）查看Mysql默认使用的存储引擎">¶</a>（3）查看Mysql默认使用的存储引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show engines;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | &#x2F;dev&#x2F;null storage engine (anything you write to it disappears) | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="（4）测试"><a class="header-anchor" href="#（4）测试">¶</a>（4）测试</h4><p>现在我们来看一下具体测试的例子。</p><h5 id="1）用自带的SQL脚本来测试"><a class="header-anchor" href="#1）用自带的SQL脚本来测试">¶</a>1）用自带的SQL脚本来测试</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --concurrency&#x3D;100,200 --iterations&#x3D;1 --number-int-cols&#x3D;20 --number-char-cols&#x3D;30 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type&#x3D;mixed --engine&#x3D;myisam,innodb --number-of-queries&#x3D;2000 -uroot -p1234 --verbose</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 1.459 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 1.459 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 1.459 seconds</span><br><span class="line">        Number of clients running queries: 100</span><br><span class="line">        Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 1.420 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 1.420 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 1.420 seconds</span><br><span class="line">        Number of clients running queries: 200</span><br><span class="line">        Average number of queries per client: 10</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 1.352 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 1.352 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 1.352 seconds</span><br><span class="line">        Number of clients running queries: 100</span><br><span class="line">        Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 2.330 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 2.330 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 2.330 seconds</span><br><span class="line">        Number of clients running queries: 200</span><br><span class="line">        Average number of queries per client: 10</span><br></pre></td></tr></table></figure><h6 id="测试说明"><a class="header-anchor" href="#测试说明">¶</a>测试说明</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模拟测试两次读写并发，第一次100，第二次200，自动生成SQL脚本，测试表包含20个init字段，30个char字段，每次执行2000查询请求。测试引擎分别是myisam，innodb。</span><br></pre></td></tr></table></figure><h6 id="测试结果说明"><a class="header-anchor" href="#测试结果说明">¶</a>测试结果说明</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Myisam第一次100客户端同时发起增查用1.459/s,第二次200客户端同时发起增查用1.420/s</span><br><span class="line">Innodb第一次100客户端同时发起增查用1.352/s,第二次200客户端同时发起增查用2.330/s</span><br></pre></td></tr></table></figure><h6 id="测试结论"><a class="header-anchor" href="#测试结论">¶</a>测试结论</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">由此可见MyISAM存储引擎处理性能是最好的，也是最常用的，但不支持事务。</span><br><span class="line">InonDB存储引擎提供了事务型数据引擎（ACID），在事务型引擎里使用最多的。具有事务回滚，系统修复等特点。</span><br></pre></td></tr></table></figure><h5 id="2）测试结果保存为csv文件"><a class="header-anchor" href="#2）测试结果保存为csv文件">¶</a>2）测试结果保存为csv文件</h5><p>Mysqlslap测试工具生产CSV格式数据文件并转换成图表形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --concurrency&#x3D;100,200 --iterations&#x3D;1 --number-int-cols&#x3D;20 --number-char-cols&#x3D;30 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type&#x3D;mixed --engine&#x3D;myisam,innodb --number-of-queries&#x3D;2000 -uroot -p1234 --csv&#x3D;&#x2F;opt&#x2F;mysql.csv</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">[root@192 opt]# ll</span><br><span class="line">总用量 8</span><br><span class="line">-rw-r-----. 1 root root 152 6月  18 17:54 mysql.csv</span><br><span class="line">drwxr-xr-x. 2 root root   6 10月 31 2018 rh</span><br><span class="line">-rw-r--r--. 1 root root 508 6月  18 17:14 tmp.log</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# cat mysql.csv </span><br><span class="line">myisam,mixed,0.952,0.952,0.952,100,20</span><br><span class="line">myisam,mixed,0.745,0.745,0.745,200,10</span><br><span class="line">innodb,mixed,0.953,0.953,0.953,100,20</span><br><span class="line">innodb,mixed,1.945,1.945,1.945,200,10</span><br></pre></td></tr></table></figure><h5 id="3）使用自定义sql脚本测试"><a class="header-anchor" href="#3）使用自定义sql脚本测试">¶</a>3）使用自定义sql脚本测试</h5><p>用我们自己定义的SQL 脚本或语句来测试 首先准备好要测试的数据库表，这里我们编写一个生成表的脚本去完<br>成脚本内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# vim mysql_test.sh</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">HOSTNAME&#x3D;&quot;localhost&quot;</span><br><span class="line">PORT&#x3D;&quot;3306&quot;</span><br><span class="line">USERNAME&#x3D;&quot;root&quot;</span><br><span class="line">PASSWORD&#x3D;&quot;1234&quot;</span><br><span class="line">DBNAME&#x3D;&quot;test1&quot;</span><br><span class="line">TABLENAME&#x3D;&quot;tb1&quot;</span><br><span class="line"></span><br><span class="line">#create database</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; -e &quot;drop database if exists $&#123;DBNAME&#125;&quot;</span><br><span class="line">create_db_sql&#x3D;&quot;create database if not exists $&#123;DBNAME&#125;&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; -e &quot;$&#123;create_db_sql&#125;&quot;</span><br><span class="line"></span><br><span class="line">#create table</span><br><span class="line">create_table_sql&#x3D;&quot;create table if not exists $&#123;TABLENAME&#125;(stuid int not null primary key,stuname varchar(20) not null,stusex char(1) not null,cardid varchar(20) not null,birthday datetime,entertime datetime,address varchar(100) default null)&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;create_table_sql&#125;&quot;</span><br><span class="line"></span><br><span class="line">#insert data to table</span><br><span class="line">i&#x3D;1</span><br><span class="line">while [ $i -le 2000 ]</span><br><span class="line">do</span><br><span class="line">insert_sql&#x3D;&quot;insert into $&#123;TABLENAME&#125; values ($i,&#39;zhangsan&#39;,&#39;1&#39;,&#39;1234567890123456&#39;,&#39;1999-10-10&#39;,&#39;2016-9-3&#39;,&#39;zhongguo beijingshi changpinqu&#39;)&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;insert_sql&#125;&quot;</span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">#select data</span><br><span class="line">select_sql&#x3D;&quot;select count(*) from $&#123;TABLENAME&#125;&quot;</span><br><span class="line">mysql -h $&#123;HOSTNAME&#125; -P $&#123;PORT&#125; -u $&#123;USERNAME&#125; -p$&#123;PASSWORD&#125; $&#123;DBNAME&#125; -e &quot;$&#123;select_sql&#125;&quot;</span><br></pre></td></tr></table></figure><p>授权脚本x执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# chmod +x mysql_test.sh</span><br></pre></td></tr></table></figure><p>执行脚本mysq_test.sh生成mysqlslap工具需要的测试表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# mysql_test.sh</span><br><span class="line">执行mysqlslap工具进行测试</span><br><span class="line">[root@192 opt]#  mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --concurrency&#x3D;10,20 --iterations&#x3D;1 --create-schema&#x3D;&#39;test1&#39; --query&#x3D;&#39;select * from test1.tb1&#39; --engine&#x3D;myisam,innodb --number-of-queries&#x3D;2000 -uroot -p1234 –verbose</span><br></pre></td></tr></table></figure><p>显示结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --concurrency&#x3D;10,20 --iterations&#x3D;1 --create-schema&#x3D;&#39;test1&#39; --query&#x3D;&#39;select * from test1.tb1&#39; --engine&#x3D;myisam,innodb --number-of-queries&#x3D;2000 -uroot -p1234 –verbose</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 3.261 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 3.261 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 3.261 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 200</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 3.010 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 3.010 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 3.010 seconds</span><br><span class="line">        Number of clients running queries: 20</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 3.421 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 3.421 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 3.421 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 200</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 3.252 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 3.252 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 3.252 seconds</span><br><span class="line">        Number of clients running queries: 20</span><br><span class="line">        Average number of queries per client: 100</span><br></pre></td></tr></table></figure><p>注：通过mysqlslap工具对mysql server进行压力测试，可以通过–concurrency、–number-of-queries等选项的<br>值查看每次测试的结果，通过反复测试、优化得出mysql server的最大并发数。 如果mysqlslap工具输出结果为<br>Segmentation fault (core dumped)基本表示走超出mysql server的负载。</p>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>初识MySQL</title>
    <link href="https://pdxblog.top/%E5%88%9D%E8%AF%86MySQL.html"/>
    <id>https://pdxblog.top/%E5%88%9D%E8%AF%86MySQL.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T11:38:11.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识MySQL"><a class="header-anchor" href="#初识MySQL">¶</a>初识MySQL</h2><h3 id="一、数据库基础知识"><a class="header-anchor" href="#一、数据库基础知识">¶</a>一、数据库基础知识</h3><h4 id="1、什么是数据库"><a class="header-anchor" href="#1、什么是数据库">¶</a>1、什么是数据库</h4><p>数据库的概念诞⽣生于60年前，随着信息技术和市场的快速发展，数据库技术层出不穷，随着应用的扩展和深入，数据库的数量和规模越来越大，其诞生和发展给计算机信息管理带来了一场巨大的革命。</p><p>数据库的发展大致划分为以下几个阶段：⼈⼯管理阶段、文件系统阶段、数据库系统阶段、高级数据库阶段。其种类大概有3种：层次式数据库、网络式数据库和关系式数据库。不同种类的数据库按不同的数据结构来联系和组织。</p><p>对于数据库的概念，没有一个完全固定的定义，随着数据库历史的发展，定义的内容也有很大的差异，其中一种比较普遍的观点认为，数据库（DataBase，DB）是一个长期存储在计算机内的、有组织的、有共享的、统一管理的数据集合。它是一个按数据结构来存储和管理数据的计算机软件系统。即数据库包含两层含义：保管数据的“仓库”，以及数据管理的方法和技术。</p><p>数据库的特点包括：实现数据共享，减少数据冗余；采用特定的数据类型；具有较⾼的数据独立性；具有统一的数据控制功能。</p><h4 id="2、为何需要数据库"><a class="header-anchor" href="#2、为何需要数据库">¶</a>2、为何需要数据库</h4><p><strong>存储数据的方法</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一种方法：用大脑来记住数据</span><br><span class="line">第二种方法：写在纸上</span><br><span class="line">第三种方法：写在计算机的内存中</span><br><span class="line">第四种方法：写成磁盘文件</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h4 id="3、数据库能够做什么"><a class="header-anchor" href="#3、数据库能够做什么">¶</a>3、数据库能够做什么</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">存储大量数据，方便检索和访问</span><br><span class="line">保持数据信息的一致、完整</span><br><span class="line">共享和安全</span><br><span class="line">通过组合分析，产生新的有用信息</span><br></pre></td></tr></table></figure><h4 id="4、数据库和应用程序"><a class="header-anchor" href="#4、数据库和应用程序">¶</a>4、数据库和应用程序</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711173108526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><table><thead><tr><th></th><th>应用程序</th><th>数据库</th></tr></thead><tbody><tr><td>作用</td><td>响应操作并显示结果、向数据库请求数据</td><td>存储数据、检索数据、生成新的数据</td></tr><tr><td>要求</td><td>美观、操作简单方便</td><td>统一、安全、性能等</td></tr></tbody></table><h4 id="5、时下流行的数据库"><a class="header-anchor" href="#5、时下流行的数据库">¶</a>5、时下流行的数据库</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711173209647.png" alt></p><table><thead><tr><th><strong>Oracle</strong></th><th>SqlServer</th><th>MySQL</th></tr></thead><tbody><tr><td>Oracle公司的产品</td><td>针对不同用户群体的多个版本</td><td>开放源代码</td></tr><tr><td>产品免费、服务收费</td><td>易用性好</td><td>网站应用广泛</td></tr></tbody></table><h4 id="6、数据库的基本概念"><a class="header-anchor" href="#6、数据库的基本概念">¶</a>6、数据库的基本概念</h4><p>在关系数据库中，数据库的表是一系列二维数组的集合，用来存储数据和操作数据的逻辑结构。它是由纵向的列和横向的行组成，行被称为记录，也叫作实体，是组织数据的单位；列被称为字段，每一列表示记录的一个属性，都有相应的描述信息，如数据类型、数据宽度等。</p><h5 id="（1）实体"><a class="header-anchor" href="#（1）实体">¶</a>（1）实体</h5><p><img data-src="https://img-blog.csdnimg.cn/20200711173250831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>这些客观存在的、可以被描述的事物都是“实体”。<br><img data-src="https://img-blog.csdnimg.cn/20200711173257724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、MySQL数据库"><a class="header-anchor" href="#二、MySQL数据库">¶</a>二、MySQL数据库</h3><p>MySQL是一个开放源代码的数据库管理系统（DBMS），它是由MySQL AB公司开发、发布并支持的。MySQL是一个跨平台的开源关系数据库管理系统，广泛地应用在Internet上的中小型网站公司开发中。</p><h4 id="1、MySQL的优势"><a class="header-anchor" href="#1、MySQL的优势">¶</a>1、MySQL的优势</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 运行速度快。</span><br><span class="line">2. 使用成本低：MySQL对多数个人用户来说是免费的。</span><br><span class="line">3. 容易使用：与其他大型数据库的设置和管理相比，其复杂程度较低，易于学习。</span><br><span class="line">4. 可移植性强：能够工作在众多不同的系统平台上，例如：Windows、Linux、Unix等。</span><br><span class="line">5. 支持丰富的接口：提供了用于C、C++、Java、perl、PHP、Ruby、Python等语言的API</span><br><span class="line">6. 支持查询语言：MySQL可以利用标准SQL语法和支持ODBC（开放式数据库连接）的应用程序</span><br><span class="line">7. 安全性和连续性：十分灵活和安全的权限和密码系统，允许基于主机的验证。连接到服务器器时，所有的密码传输均采用加密形式，从而保证了密码安全。并且由于Mysql是网络化的，因此可以在因特网上的任何地方访问，提高数据共享的效率。</span><br></pre></td></tr></table></figure><h4 id="2、MySQL版本"><a class="header-anchor" href="#2、MySQL版本">¶</a>2、MySQL版本</h4><p>MySQL分为2个不同的版本：</p><table><thead><tr><th>社区版（Community Server）</th><th>企业版（Enterprise Server）</th></tr></thead><tbody><tr><td>免费、开源</td><td>收费，不可自由下载</td></tr><tr><td>适合普通用户</td><td>适合对功能和安全要求高的企业用户</td></tr><tr><td></td><td>功能和服务更完善<br>它能够以很高的性价比为企业提供数据仓库应⽤，<br>支持ACID事务处理，<br>提供完整的提交、回滚、崩溃恢复和行级锁定功能。</td></tr></tbody></table><h4 id="3、MySQL的命名"><a class="header-anchor" href="#3、MySQL的命名">¶</a>3、MySQL的命名</h4><p>MySQL的命名机制由3个数字和1个后缀组成，例如mysql-5.5.13.</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第1个数字（5）是主版本号，描述了文件格式，所有版本5的发行版都有相同的文件格式。</span><br><span class="line">第2个数字（5）是发行级别，主版本号和发行级别组合在一起便构成了发行序列号</span><br><span class="line">第3个数字（13）是在此发行系列的版本号，随每次新发布版本递增，通常选择已经发行的最新版本。</span><br></pre></td></tr></table></figure><h4 id="4、MySQL的运行机制"><a class="header-anchor" href="#4、MySQL的运行机制">¶</a>4、MySQL的运行机制</h4><p><img data-src="https://img-blog.csdnimg.cn/20200711173321756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h5 id="（1）讲解思路"><a class="header-anchor" href="#（1）讲解思路">¶</a>（1）讲解思路</h5><p>就一个SQL语句，如select * from tablename  ，从支持接口进来后，进入连接池后做权限、验证等环节，然后判断是否有缓存，有则直接放回结果，否则进入SQL接口，在查询之前查询优化器进行优化，最后进行解析，查询。并通过存储引擎与文件交互。 然后再介绍MySQL的企业管理服务和工具。</p><h5 id="（2）名词解释"><a class="header-anchor" href="#（2）名词解释">¶</a>（2）名词解释</h5><p><strong>支持接口：</strong></p><p>不同的编程语言与SQL的交互</p><p><strong>连接池：</strong></p><p>管理缓冲用户连接，线程处理等需要缓存的需求</p><p><strong>SQL接口：</strong></p><p>接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL接口</p><p><strong>解析器：</strong></p><p>SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主要功能：</span><br><span class="line">1. 将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的；例如将 select * from  tablename where 1=1；分解为select、*、from、tablename、where 、1=1，并去解析。</span><br><span class="line">2. 如果在分解构成中遇到错误，那么就说明这个SQL语句是不合理的。</span><br></pre></td></tr></table></figure><p><strong>查询优化器：</strong></p><p>SQL语句在查询之前会使用查询优化器对查询进行优化，使用的是“选取-投影-联接”策略进行查询。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例： select uid,name from user where gender = 1;</span><br><span class="line">a.先根据where 语句进行选取，而不是先将表全部查询出来以后再进行gender过滤</span><br><span class="line">b.先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤</span><br><span class="line">    将这两个查询条件联接起来生成最终查询结果。</span><br></pre></td></tr></table></figure><p><strong>缓存：</strong></p><p>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。</p><p>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等。</p><p><strong>存储引擎：</strong><br>存储引擎是MySql中具体的与文件打交道的子系统。也是Mysql最具有特色的一个地方。</p><p>Mysql的存储引擎是插件式的。它根据MySql AB公司提供的文件访问层的一个抽象接口来定制一种文件访问机制（这种访问机制就叫存储引擎）。</p><p>现在有很多种存储引擎，各个存储引擎的优势各不一样，最常用的MyISAM、InnoDB、BDB。</p><p>MyISAM引擎，它查询速度快，有较好的索引优化和数据压缩技术。但是它不支持事务。</p><p>InnoDB支持事务，并且提供行级的锁定，应用也相当广泛。</p><p>Mysql也支持自己定制存储引擎，甚至一个库中不同的表使用不同的存储引擎，这些都是允许的。</p><p>MySQL5.7默认使用InnoDB存储引擎。</p><h4 id="5、MySQL安装与配置"><a class="header-anchor" href="#5、MySQL安装与配置">¶</a>5、MySQL安装与配置</h4><h5 id="（1）安装步骤（略）"><a class="header-anchor" href="#（1）安装步骤（略）">¶</a>（1）安装步骤（略）</h5><h5 id="（2）基本配置"><a class="header-anchor" href="#（2）基本配置">¶</a>（2）基本配置</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">端口号：3306</span><br><span class="line">默认字符集：utf-8</span><br><span class="line">root密码设置</span><br></pre></td></tr></table></figure><h5 id="（3）安装目录介绍"><a class="header-anchor" href="#（3）安装目录介绍">¶</a>（3）安装目录介绍</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin：</span><br><span class="line">include：</span><br><span class="line">lib：</span><br><span class="line">share：</span><br></pre></td></tr></table></figure><h5 id="（4）命令行连接MySQL"><a class="header-anchor" href="#（4）命令行连接MySQL">¶</a>（4）命令行连接MySQL</h5><h6 id="1）检查MySQL服务是否启动"><a class="header-anchor" href="#1）检查MySQL服务是否启动">¶</a>1）检查MySQL服务是否启动</h6><p>方式1：Windows服务</p><p>方式2：dos命令</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start mysql57</span><br><span class="line">net stop mysql57</span><br></pre></td></tr></table></figure><p>修改了配置文件，必须重启MySQL服务才能生效。</p><h6 id="2）连接MySQL"><a class="header-anchor" href="#2）连接MySQL">¶</a>2）连接MySQL</h6><p>语法格式：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="literal">-h</span>服务器主机地址 <span class="literal">-u</span> 用户名 <span class="literal">-p</span> 密码</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="literal">-u</span> root <span class="literal">-p</span></span><br></pre></td></tr></table></figure><p>方式1：dos命令启动</p><p>方式2：MySQL Command Line Client</p><p>默认root登录，仅输入密码。</p><h3 id="三、MySQL数据库类型"><a class="header-anchor" href="#三、MySQL数据库类型">¶</a>三、MySQL数据库类型</h3><p><img data-src="https://img-blog.csdnimg.cn/20200711173344687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="1、系统数据库"><a class="header-anchor" href="#1、系统数据库">¶</a>1、系统数据库</h4><p>安装完MySQL服务器后，MySQL会附带系统数据库，包括：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">information_schema:主要存储系统中的一些数据库对象信息，如用户表信息、字段信息、权限信息、字符集信息和分区信息等。</span><br><span class="line">performance_schema:主要存储数据库服务器性能参数</span><br><span class="line">mysql:主要存储系统的用户权限信息</span><br><span class="line">test:MySQL数据库管理系统自动创建的测试数据库，任何用户都可以使用</span><br></pre></td></tr></table></figure><h4 id="2、用户数据库"><a class="header-anchor" href="#2、用户数据库">¶</a>2、用户数据库</h4><p>用户数据库是用户根据实际需求创建的数据库。本章后面的讲解主要针对用户数据库。</p><h3 id="四、数据库基本操作"><a class="header-anchor" href="#四、数据库基本操作">¶</a>四、数据库基本操作</h3><h4 id="1、查看数据列表"><a class="header-anchor" href="#1、查看数据列表">¶</a>1、查看数据列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sakila             |</span><br><span class="line">| sys                |</span><br><span class="line">| world              |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.36 sec)</span><br></pre></td></tr></table></figure><h4 id="2、创建数据库"><a class="header-anchor" href="#2、创建数据库">¶</a>2、创建数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test;</span><br><span class="line">Query OK, 1 row affected (0.08 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sakila             |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">| world              |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3、选择数据库"><a class="header-anchor" href="#3、选择数据库">¶</a>3、选择数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h4 id="4、删除数据库"><a class="header-anchor" href="#4、删除数据库">¶</a>4、删除数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database test;</span><br><span class="line">Query OK, 0 rows affected (0.33 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sakila             |</span><br><span class="line">| sys                |</span><br><span class="line">| world              |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="五、图形化MySQL管理工具"><a class="header-anchor" href="#五、图形化MySQL管理工具">¶</a>五、图形化MySQL管理工具</h3><h4 id="1、Navicat"><a class="header-anchor" href="#1、Navicat">¶</a>1、Navicat</h4><h4 id="2、PDMan"><a class="header-anchor" href="#2、PDMan">¶</a>2、PDMan</h4>]]></content>
    
    <summary type="html">
    
      MySQL
    
    </summary>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://pdxblog.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Varnish4.0缓存代理配置</title>
    <link href="https://pdxblog.top/Varnish4.0%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.html"/>
    <id>https://pdxblog.top/Varnish4.0%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.html</id>
    <published>2020-06-30T16:00:00.000Z</published>
    <updated>2020-07-01T10:15:32.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Varnish4-0缓存代理配置"><a class="header-anchor" href="#Varnish4-0缓存代理配置">¶</a>Varnish4.0缓存代理配置</h3><h4 id="一、Varnish原理"><a class="header-anchor" href="#一、Varnish原理">¶</a>一、Varnish原理</h4><h5 id="1、Varnish简介"><a class="header-anchor" href="#1、Varnish简介">¶</a>1、Varnish简介</h5><blockquote><p>varnish 缓存是 web 应用加速器，同时也作为 http 反向缓存代理。你可以安装 varnish 在任何http 的前端，同时配置它缓存内容。与传统的 squid 相比，varnish 具有性能更高、速度更快、管理更加方便等诸多优点。有一部分企业已经在生产环境中使用其作为旧版本的 squid的替代方案，以在相同的服务器成本下提供更好的缓存效果，Varnish 更是作为 CDN 缓存服务器的可选服务之一</p></blockquote><p>根据官网的介绍，Varnish 的主要特性如下：<a href="https://www.varnish-cache.org/" target="_blank" rel="noopener">https://www.varnish-cache.org/</a></p><ul><li>缓存位置：</li></ul><blockquote><p>可以使用内存也可以使用磁盘。如果要使用磁盘的话推荐 SSD 做 RAID1</p></blockquote><ul><li>日志存储：</li></ul><blockquote><p>日志也存储在内存中。存储策略：固定大小，循环使用支持虚拟内存的使用</p><p>有精确的时间管理机制，即缓存的时间属性控制</p></blockquote><ul><li>状态引擎架构：</li></ul><blockquote><p>在不同的引擎上完成对不同的缓存和代理数据进行处理。可以通过特定的配置语言设计不同的控制语句，以决定数据在不同位置以不同方式缓存，在特定的地方对经过的报文进行特定规则的处理</p></blockquote><ul><li>缓存管理：</li></ul><blockquote><p>以二叉堆格式管理缓存数据，做到数据的及时清理</p></blockquote><h5 id="2、Varnish-与-与-Squid-的对比"><a class="header-anchor" href="#2、Varnish-与-与-Squid-的对比">¶</a>2、Varnish 与 与 Squid  的对比</h5><p>相同点：</p><blockquote><p>都是一个反向代理服务器</p><p>都是开源软件</p></blockquote><h6 id="Varnish-的优势："><a class="header-anchor" href="#Varnish-的优势：">¶</a>Varnish  的优势：</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Varnish 的稳定性很高，两者在完成相同负荷的工作时，Squid 服务器发生故障的几率要高于 Varnish，因为使用 Squid 要经常重启</span><br><span class="line"></span><br><span class="line">Varnish 访问速度更快，因为采用了“Visual Page Cache”技术，所有缓存数据都直接从内存读取，而 squid 是从硬盘读取，因而 Varnish 在访问速度方面会更快</span><br><span class="line"></span><br><span class="line">Varnish 可以支持更多的并发连接，因为 Varnish 的 TCP 连接释放要比 Squid 快，因而在高并发连接情况下可以支持更多 TCP 连接</span><br><span class="line"></span><br><span class="line">Varnish 可以通过管理端口，使用正则表达式批量的清除部分缓存，而 Squid 是做不到的；</span><br><span class="line">squid 属于是单进程使用单核 CPU，但 Varnish 是通过 fork 形式打开多进程来做处理，所以可以合理的使用所有核来处理相应的请求</span><br></pre></td></tr></table></figure><h6 id="Varnish-的劣势："><a class="header-anchor" href="#Varnish-的劣势：">¶</a>Varnish  的劣势：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">varnish 进程一旦 Crash 或者重启，缓存数据都会从内存中完全释放，此时所有请求都会发送到后端服务器，在高并发情况下，会给后端服务器造成很大压力</span><br><span class="line"></span><br><span class="line">在 varnish 使用中如果单个 url 的请求通过 HA&#x2F;F5 等负载均衡，则每次请求落在不同的varnish 服务器中，造成请求都会被穿透到后端；而且同样的请求在多台服务器上缓存，也会造成 varnish 的缓存的资源浪费，造成性能下降</span><br></pre></td></tr></table></figure><h6 id="Varnish-劣势的解决方案"><a class="header-anchor" href="#Varnish-劣势的解决方案">¶</a>Varnish  劣势的解决方案</h6><p>针对劣势一：</p><blockquote><p>在访问量很大的情况下推荐使用 varnish 的内存缓存方式启动，而且后面需要跟多台 squid/nginx 服务器。主要为了防止前面的 varnish 服 务、服务器被重启的情况下，大量请求穿透 varnish，这样 squid/nginx 可以就担当第二层 CACHE，而且也弥补了 varnish 缓存在内存中重启都会释放的问题</p></blockquote><p>针对劣势二：</p><blockquote><p>可以在负载均衡上做 url 哈希，让单个 url 请求固定请求到一台 varnish 服务器上</p></blockquote><h5 id="3、使用-varnish-作为-web-代理缓存的原理"><a class="header-anchor" href="#3、使用-varnish-作为-web-代理缓存的原理">¶</a>3、使用 varnish  作为 web  代理缓存的原理</h5><blockquote><p>varnish 是一个 http 反向代理的缓存。它从客户端接收请求然后尝试从缓存中获取数据来响应客户端的请求，如果 varnish 不能从缓存中获得数据来响应客户端，它将转发请求到后端（backend servers）,获取响应同时存储，最后交付给客户端</p><p>如果 varnish 已经缓存了某个响应，它比你传统的后端服务器的响应要快很多，所以你需要尽可能是更多的请求直接从 varnish 的缓存中获取响应</p><p>varnish 决定是缓存内容或者是从后端服务器获取响应。后端服务器能通过 http 响应头中的Cache-Control 来同步 varnish 缓存内容。在某些条件下 varnish 将不缓存内容，最常见的是使用 cookie。当一个被标记有 cookie 的客户端 web 请求，varnish 默认是不缓存。这些众多的varnish 功能特点都是可以通过写 vcl 来改变的</p></blockquote><h5 id="4、-简单架构"><a class="header-anchor" href="#4、-简单架构">¶</a>4、 简单架构</h5><p>Varnish 分为 management 进程和 child 进程</p><h6 id="Management-进程："><a class="header-anchor" href="#Management-进程：">¶</a>Management 进程：</h6><blockquote><p>对子进程进行管理，同时对 VCL 配置进行编译，并应用到不同的状态引擎</p></blockquote><h6 id="Child-进程："><a class="header-anchor" href="#Child-进程：">¶</a>Child 进程：</h6><blockquote><p>生成线程池，负责对用户请求进行处理，并通过 hash 查找返回用户结果</p></blockquote><h5 id="5、varnish-主要配置部分"><a class="header-anchor" href="#5、varnish-主要配置部分">¶</a>5、varnish  主要配置部分</h5><p>varnish 配置主要分为：</p><ul><li>后端配置</li><li>ACL 配置</li><li>probes 配置</li><li>directors 配置</li><li>核心子程序配置</li></ul><p>其中后端配置是必要的，在多台服务器中还会用到 directors 配置，核心子程序配置</p><h6 id="后端配置："><a class="header-anchor" href="#后端配置：">¶</a>后端配置：</h6><blockquote><p>即给 varnish 添加反代服务器节点，最少配置一个</p></blockquote><h6 id="ACL-配置："><a class="header-anchor" href="#ACL-配置：">¶</a>ACL 配置：</h6><blockquote><p>即给 varnish 添加访问控制列表，可以指定这些列表访问或禁止访问</p></blockquote><h6 id="probes-配置："><a class="header-anchor" href="#probes-配置：">¶</a>probes 配置：</h6><blockquote><p>即给 varnish 添加探测后端服务器是否正常的规则，方便切换或禁止对应后端服务器</p></blockquote><h6 id="directors-配置："><a class="header-anchor" href="#directors-配置：">¶</a>directors 配置：</h6><blockquote><p>即给 varnish 添加负载均衡模式管理多个后端服务器</p></blockquote><h6 id="核心子程序配置："><a class="header-anchor" href="#核心子程序配置：">¶</a>核心子程序配置：</h6><blockquote><p>即给 varnish 添加后端服务器切换，请求缓存，访问控制，错误处理等规则</p></blockquote><h5 id="6、VCL-中内置-预设变量：-变量-也叫-object-）"><a class="header-anchor" href="#6、VCL-中内置-预设变量：-变量-也叫-object-）">¶</a>6、VCL  中内置 预设变量： 变量( 也叫 object ）</h5><p><img data-src="https://img-blog.csdnimg.cn/20200701180737851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>req：</p><blockquote><p>The request object，请求到达时可用的变量(客户端发送的请求对象)</p></blockquote><p>bereq：</p><blockquote><p>The backend request object，向后端主机请求时可用的变量</p></blockquote><p>beresp：</p><blockquote><p>The backend response object，从后端主机获取内容时可用的变量(后端响应请求对象)</p></blockquote><p>resp：</p><blockquote><p>The HTTP response object，对客户端响应时可用的变量(返回给客户端的响应对象)</p></blockquote><p>obj：</p><blockquote><p>存储在内存中时对象属性相关的可用的变量(高速缓存对象，缓存后端响应请求内容)</p></blockquote><p>预设变量是系统固定的，请求进入对应的 vcl 子程序后便生成，这些变量可以方便子程序提取，当然也可以自定义一些全局变量</p><p>当前时间：</p><h6 id="now-作用：返回当前时间戳"><a class="header-anchor" href="#now-作用：返回当前时间戳">¶</a>now 作用：返回当前时间戳</h6><h6 id="客户端：（客户端基本信息）"><a class="header-anchor" href="#客户端：（客户端基本信息）">¶</a>客户端：（客户端基本信息）</h6><p>注：原 client.port 已经弃用，如果要取客户端请求端口号使用std.port(client.ip)， importstd;才可以使用 std</p><blockquote><p>client.ip：返回客户端 IP 地址</p><p>client.identity：用于装载客户端标识码</p></blockquote><h6 id="服务器：（服务器基本信息）"><a class="header-anchor" href="#服务器：（服务器基本信息）">¶</a>服务器：（服务器基本信息）</h6><p>注：原 server.port 已经弃用，如果要取服务器端口号使用std.port(server.ip)，需要 import std;才可以使用 std</p><blockquote><p>server.hostname：服务器主机名</p><p>server.identity：服务器身份标识</p><p>server.ip：返回服务器端 IP 地址</p></blockquote><h6 id="req-（客户端发送的请求对象）"><a class="header-anchor" href="#req-（客户端发送的请求对象）">¶</a>req :（客户端发送的请求对象）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">req：整个 HTTP 请求数据结构</span><br><span class="line"></span><br><span class="line">req.backend_hint：指定请求后端节点，设置后 bereq.backend 才能获取后端节点配置数据</span><br><span class="line"></span><br><span class="line">req.can_gzip：客户端是否接受 GZIP 传输编码</span><br><span class="line"></span><br><span class="line">req.hash_always_miss：是否强制不命中高速缓存，如果设置为 true，则高速缓存不会命中，一直会从后端获取新数据</span><br><span class="line"></span><br><span class="line">req.hash_ignore_busy：忽略缓存中忙碌的对象，多台缓存时可以避免死锁</span><br><span class="line"></span><br><span class="line">req.http：对应请求 HTTP 的 header</span><br><span class="line"></span><br><span class="line">req.method：请求类型（如 GET , POST）</span><br><span class="line"></span><br><span class="line">req.proto：客户端使用的 HTTP 协议版本</span><br><span class="line"></span><br><span class="line">req.restarts：重新启动次数。默认最大值是 4</span><br><span class="line"></span><br><span class="line">req.ttl：缓存有剩余时间</span><br><span class="line"></span><br><span class="line">req.url：请求的 URL</span><br><span class="line"></span><br><span class="line">req.xid：唯一 ID</span><br></pre></td></tr></table></figure><h6 id="bereq：（发送到后端的请求对象，基于-req-对象）"><a class="header-anchor" href="#bereq：（发送到后端的请求对象，基于-req-对象）">¶</a>bereq：（发送到后端的请求对象，基于 req 对象）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bereq：（发送到后端的请求对象，基于 req 对象）</span><br><span class="line"></span><br><span class="line">bereq：整个后端请求后数据结构</span><br><span class="line"></span><br><span class="line">bereq.backend：所请求后端节点配置</span><br><span class="line"></span><br><span class="line">bereq.between_bytes_timeout：从后端每接收一个字节之间的等待时间（秒）</span><br><span class="line">bereq.connect_timeout：连接后端等待时间（秒），最大等待时间</span><br><span class="line"></span><br><span class="line">bereq.first_byte_timeout：等待后端第一个字节时间（秒），最大等待时间</span><br><span class="line"></span><br><span class="line">bereq.http：对应发送到后端 HTTP 的 header 信息</span><br><span class="line"></span><br><span class="line">bereq.method：发送到后端的请求类型（如：GET , POST）</span><br><span class="line"></span><br><span class="line">bereq.proto：发送到后端的请求的 HTTP 版本</span><br><span class="line"></span><br><span class="line">bereq.retries：相同请求重试计数</span><br><span class="line"></span><br><span class="line">bereq.uncacheable：无缓存这个请求</span><br><span class="line"></span><br><span class="line">bereq.url：发送到后端请求的 URL</span><br><span class="line"></span><br><span class="line">bereq.xid：请求唯一 ID</span><br></pre></td></tr></table></figure><h6 id="beresp：（后端响应请求对象）"><a class="header-anchor" href="#beresp：（后端响应请求对象）">¶</a>beresp：（后端响应请求对象）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">beresp：整个后端响应 HTTP 数据结构</span><br><span class="line"></span><br><span class="line">beresp.backend.ip：后端响应的 IP</span><br><span class="line"></span><br><span class="line">beresp.backend.name：响应后端配置节点的 name</span><br><span class="line"></span><br><span class="line">beresp.do_gunzip：默认为 false 。缓存前解压该对象</span><br><span class="line"></span><br><span class="line">beresp.do_gzip：默认为 false 。缓存前压缩该对象</span><br><span class="line"></span><br><span class="line">beresp.grace：设置当前对象缓存过期后可额外宽限时间，用于特殊请求加大缓存时间，当并发量巨大时，不易设置过大否则会堵塞缓存，一般可设置 1m 左右，当 beresp.ttl&#x3D;0s 时该值无效</span><br><span class="line"></span><br><span class="line">beresp.http：对应的 HTTP 请求 header</span><br><span class="line"></span><br><span class="line">beresp.keep：对象缓存后带保持时间</span><br><span class="line"></span><br><span class="line">beresp.proto：响应的 HTTP 版本</span><br><span class="line"></span><br><span class="line">beresp.reason：由服务器返回的 HTTP 状态信息</span><br><span class="line"></span><br><span class="line">beresp.status：由服务器返回的状态码</span><br><span class="line"></span><br><span class="line">beresp.storage_hint：指定保存的特定存储器</span><br><span class="line"></span><br><span class="line">beresp.ttl：该对象缓存的剩余时间，指定统一缓存剩余时间。</span><br><span class="line"></span><br><span class="line">beresp.uncacheable：继承 bereq.uncacheable，是否不缓存</span><br></pre></td></tr></table></figure><h6 id="OBJ-：（高速缓存对象，缓存后端响应请求内容）"><a class="header-anchor" href="#OBJ-：（高速缓存对象，缓存后端响应请求内容）">¶</a>OBJ ：（高速缓存对象，缓存后端响应请求内容）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">obj.grace：该对象额外宽限时间</span><br><span class="line"></span><br><span class="line">obj.hits：缓存命中次数，计数器从 1 开始，当对象缓存该值为 1，一般可以用于判断是否有缓存，当前该值大于 0 时则为有缓存</span><br><span class="line"></span><br><span class="line">obj.http：对应 HTTP 的 header</span><br><span class="line"></span><br><span class="line">obj.proto：HTTP 版本</span><br><span class="line"></span><br><span class="line">obj.reason：服务器返回的 HTTP 状态信息</span><br><span class="line"></span><br><span class="line">obj.status：服务器返回的状态码</span><br><span class="line"></span><br><span class="line">obj.ttl：该对象缓存剩余时间（秒）</span><br><span class="line"></span><br><span class="line">obj.uncacheable：不缓存对象</span><br></pre></td></tr></table></figure><h6 id="resp-（返回给客户端的响应对象）"><a class="header-anchor" href="#resp-（返回给客户端的响应对象）">¶</a>resp :（返回给客户端的响应对象）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resp：整个响应 HTTP 数据结构</span><br><span class="line"></span><br><span class="line">resp.http：对应 HTTP 的 header</span><br><span class="line"></span><br><span class="line">resp.proto：编辑响应的 HTTP 协议版本</span><br><span class="line"></span><br><span class="line">resp.reason：将要返回的 HTTP 状态信息</span><br><span class="line"></span><br><span class="line">resq.status：将要返回的 HTTP 状态码</span><br></pre></td></tr></table></figure><h6 id="存储-："><a class="header-anchor" href="#存储-：">¶</a>存储 ：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">storage.&lt;name&gt;.free_space：存储可用空间（字节数）</span><br><span class="line"></span><br><span class="line">storage.&lt;name&gt;.used_space：存储已经使用空间（字节数）</span><br><span class="line"></span><br><span class="line">storage.&lt;name&gt;.happy：存储健康状态</span><br></pre></td></tr></table></figure><h5 id="7、特定功能性语句"><a class="header-anchor" href="#7、特定功能性语句">¶</a>7、特定功能性语句</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">ban(expression)：清除指定对象缓存</span><br><span class="line"></span><br><span class="line">call(subroutine)：调用子程序，如：call(name)</span><br><span class="line"></span><br><span class="line">hash_data(input)：生成 hash 键，用于制定 hash 键值生成结构，只能在 vcl_hash 子程序中使用。调用 hash_data(input) 后，即这个 hash 为当前页面的缓存 hash 键值，无需其它获取或操作，如：</span><br><span class="line">sub vcl_hash&#123;</span><br><span class="line">hash_data(client.ip);</span><br><span class="line">return(lookup);</span><br><span class="line">&#125;</span><br><span class="line">注意：return(lookup); 是默认返回值，所以可以不写</span><br><span class="line"></span><br><span class="line">new()：创建一个 vcl 对象，只能在 vcl_init 子程序中使用</span><br><span class="line"></span><br><span class="line">return()：结束当前子程序，并指定继续下一步动作，如：return (ok); 每个子程序可指定的动作均有不同</span><br><span class="line"></span><br><span class="line">rollback()：恢复 HTTP 头到原来状态，已经弃用，使用 std.rollback() 代替</span><br><span class="line"></span><br><span class="line">synthetic(STRING)：合成器，用于自定义一个响应内容，比如当请求出错时，可以返回自定义 404 内容，而不只是默认头信息，只能在 vcl_synth 与 vcl_backend_error 子程序中使用，如：</span><br><span class="line">sub vcl_synth &#123;</span><br><span class="line">//自定义内容</span><br><span class="line">synthetic (&#123;"</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span><br><span class="line">&lt;html lang="zh-cn"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="ContentType"content="text/html;charset=utf-8"/&gt;</span><br><span class="line">&lt;title&gt;error&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Error&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;这只是一个测试自定义响应异常内容&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">"&#125;);</span><br><span class="line">//只交付自定义内容</span><br><span class="line">return(deliver);</span><br><span class="line">regsub(str, regex, sub)：使用正则替换第一次出现的字符串，第一个参数为待处理字符串，第二个参数为正则表达式，第三个为替换为字符串</span><br><span class="line"></span><br><span class="line">regsuball(str, regex, sub)：使用正则替换所有匹配字符串。参数与 regsuball 相同</span><br><span class="line">具体变量详见：</span><br><span class="line">https://www.varnish-cache.org/docs/4.0/reference/vcl.html#reference-vcl</span><br></pre></td></tr></table></figure><h5 id="8、return语句"><a class="header-anchor" href="#8、return语句">¶</a>8、return语句</h5><p>return 语句是终止子程序并返回动作，所有动作都根据不同的 vcl 子程序限定来选用</p><p><a href="https://www.varnish-cache.org/docs/4.0/users-guide/vcl-built-in-subs.html" target="_blank" rel="noopener">https://www.varnish-cache.org/docs/4.0/users-guide/vcl-built-in-subs.html</a><br>语法：return(action);</p><p>常用的动作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">abandon 放弃处理，并生成一个错误</span><br><span class="line"></span><br><span class="line">deliver 交付处理</span><br><span class="line"></span><br><span class="line">fetch 从后端取出响应对象</span><br><span class="line"></span><br><span class="line">hash 哈希缓存处理</span><br><span class="line"></span><br><span class="line">lookup 查找缓存对象</span><br><span class="line"></span><br><span class="line">ok 继续执行</span><br><span class="line"></span><br><span class="line">pass 进入 pass 非缓存模式</span><br><span class="line"></span><br><span class="line">pipe 进入 pipe 非缓存模式</span><br><span class="line"></span><br><span class="line">purge 清除缓存对象，构建响应</span><br><span class="line"></span><br><span class="line">restart 重新开始</span><br><span class="line"></span><br><span class="line">retry 重试后端处理</span><br><span class="line"></span><br><span class="line">synth(status code,reason) 合成返回客户端状态信息</span><br></pre></td></tr></table></figure><h5 id="9、varnish-中内置子程序"><a class="header-anchor" href="#9、varnish-中内置子程序">¶</a>9、varnish  中内置子程序</h5><p>注：varnish 内置子程序均有自己限定的返回动作 return （动作）; 不同的动作将调用对应下一个子程序</p><h6 id="vcl-recv-子程序"><a class="header-anchor" href="#vcl-recv-子程序">¶</a>vcl_recv  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开始处理请求，通过 return (动作); 选择 varnish 处理模式，默认进入 hash 缓存模式（即return(hash);），缓存时间为配置项 default_ttl（默认为 120 秒）过期保持时间 default_grace（默认为 10 秒）。该子程序一般用于模式选择，请求对象缓存及信息修改，后端节点修改，终止请求等操作</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>synth(status code,reason); 定义响应内容</p><p>pass 进入 pass 模式，并进入 vcl_pass 子程序</p><p>pipe 进入 pipe 模式，并进入 vcl_pipe 子程序</p><p>hash 进入 hash 缓存模式，并进入 vcl_hash 子程序，默认返回值</p><p>purge 清除缓存等数据，子程序先从 vcl_hash 再到 vcl_purge</p></blockquote><h6 id="vcl-pipe-子程序"><a class="header-anchor" href="#vcl-pipe-子程序">¶</a>vcl_pipe  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipe 模式处理，该模式主要用于直接取后端响应内容返回客户端，可定义响应内容返回客户端。该子程序一般用于需要及时且不作处理的后端信息，取出后端响应内容后直接交付到客户端不进入 vcl_deliver 子程序处理</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，bereq，req，storage</p><p>写：client，bereq，req</p></blockquote><p>返回值：</p><blockquote><p>synth(status code,reason); 定义响应内容</p><p>pipe 继续 pipe 模式，进入后端 vcl_backend_fetch 子程序，默认返回值</p></blockquote><h6 id="vcl-pass-子程序"><a class="header-anchor" href="#vcl-pass-子程序">¶</a>vcl_pass  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass 模式处理，该模式类似 hash 缓存模式，仅不做缓存处理</span><br></pre></td></tr></table></figure><blockquote><p>可操作对象：（部分或全部值）<br>读：client，server，req，storage</p><p>写：client，req</p><p>返回值：</p></blockquote><blockquote><p>synth(status code,reason); 定义响应内容</p><p>fetch 继续 pass 模式，进入后端 vcl_backend_fetch 子程序，默认返回值</p></blockquote><h6 id="vcl-hit-子程序"><a class="header-anchor" href="#vcl-hit-子程序">¶</a>vcl_hit  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash 缓存模式时，存在 hash 缓存时调用，用于缓存处理，可放弃或修改缓存</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，obj，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>restart 重启请求</p><p>deliver 交付缓存内容，进入 vcl_deliver 子程序处理，默认返回值</p><p>synth(status code,reason); 定义响应内容</p></blockquote><h6 id="vcl-miss-子程序"><a class="header-anchor" href="#vcl-miss-子程序">¶</a>vcl_miss  子程序</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash 缓存模式时，不存在 hash 缓存时调用，用于判断性的选择进入后端取响应内容，可以修改为 pass 模式</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>restart 重启请求</p><p>synth(status code,reason); 定义响应内容</p><p>pass 切换到 pass 模式，进入 vcl_pass 子程序</p><p>fetch 正常取后端内容再缓存，进入 vcl_backend_fetch 子程序，默认返回值</p></blockquote><h6 id="vcl-hash-子程序"><a class="header-anchor" href="#vcl-hash-子程序">¶</a>vcl_hash  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash缓存模式，生成hash值作为缓存查找键名提取缓存内容，主要用于缓存hash键值处理，可使用 hash_data(string) 指定键值组成结构，可在同一个页面通过 IP 或 cookie 生成不同的缓存键值</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>lookup 查找缓存对象，存在缓存进入 vcl_hit 子程序，不存在缓存进入 vcl_miss 子程序，当使用了 purge 清理模式时会进入 vcl_purge 子程序，默认返回值</p></blockquote><h6 id="vcl-purge-子程序"><a class="header-anchor" href="#vcl-purge-子程序">¶</a>vcl_purge  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">清理模式，当查找到对应的缓存时清除并调用，用于请求方法清除缓存，并报告</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，storage</p><p>写：client，req</p></blockquote><p>返回值：</p><blockquote><p>synth(status code,reason); 定义响应内容</p><p>restart 重启请求</p></blockquote><h6 id="vcl-deliver-子程序"><a class="header-anchor" href="#vcl-deliver-子程序">¶</a>vcl_deliver  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端交付子程序，在 vcl_backend_response 子程序后调用（非 pipe 模式），或 vcl_hit 子程序后调用，可用于追加响应头信息，cookie 等内容</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，resp，obj，storage</p><p>写：client，req，resp</p></blockquote><p>返回值：</p><blockquote><p>deliver 正常交付后端或缓存响应内容，默认返回值</p><p>restart 重启请求</p></blockquote><h6 id="vcl-backend-fetch-子程序"><a class="header-anchor" href="#vcl-backend-fetch-子程序">¶</a>vcl_backend_fetch  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送后端请求之前调用，可用于改变请求地址或其它信息，或放弃请求</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server，bereq，storage</p><p>写：bereq</p></blockquote><p>返回值：</p><blockquote><p>fetch 正常发送请求到到后端取出响应内容，进入 vcl_backend_response 子程序，默认返回值</p><p>abandon 放弃后端请求，并生成一个错误，进入 vcl_backend_error 子程序</p></blockquote><h6 id="vcl-backend-response-子程序"><a class="header-anchor" href="#vcl-backend-response-子程序">¶</a>vcl_backend_response  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后端响应后调用，可用于修改缓存时间及缓存相关信息</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server，bereq，beresp，storage</p><p>写：bereq，beresp</p></blockquote><p>返回值：</p><blockquote><p>deliver 正常交付后端响应内容，进入 vcl_deliver 子程序，默认返回值</p><p>abandon 放弃后端请求，并生成一个错误，进入 vcl_backend_error 子程序</p><p>retry 重试后端请求，重试计数器加 1，当超过配置中 max_retries 值时会报错并进入vcl_backend_error 子程序</p></blockquote><h6 id="vcl-backend-error-子程序"><a class="header-anchor" href="#vcl-backend-error-子程序">¶</a>vcl_backend_error  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后端处理失败调用，异常页面展示效果处理，可自定义错误响应内容，或修改 beresp.status与 beresp.http.Location 重定向等</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server，bereq，beresp，storage</p><p>写：bereq，beresp</p></blockquote><p>返回值：</p><blockquote><p>deliver 只交付 sysnthetic(string) 自定义内容，默认返回后端异常标准错误内容</p><p>retry 重试后端请求，重试计数器加 1，当超过配置中 max_retries 值时会报错并进入vcl_backend_error 子程序</p></blockquote><h6 id="vcl-synth-子程序"><a class="header-anchor" href="#vcl-synth-子程序">¶</a>vcl_synth  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义响应内容。可以通过 synthetic（）和返回值 synth 调用，这里可以自定义异常显示内容，也可以修改 resp.status 与 resp.http.Location 重定向</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：client，server，req，resp，storage</p><p>写：req，resp</p></blockquote><p>返回值：</p><blockquote><p>deliver 只交付 sysnthetic(string) 自定义内容，默认返回 sysnth 异常指定状态码与错误内容</p><p>restart 重启请求</p></blockquote><h6 id="vcl-init-子程序"><a class="header-anchor" href="#vcl-init-子程序">¶</a>vcl_init  子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加载 vcl 时最先调用，用于初始化 VMODs，该子程序不参与请求处理，仅在 vcl 加载时调用一次</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server</p><p>写：无</p></blockquote><p>返回值：</p><blockquote><p>ok 正常返回，进入 vcl_recv 子程序，默认返回值</p></blockquote><h6 id="vcl-fini-子程序"><a class="header-anchor" href="#vcl-fini-子程序">¶</a>vcl_fini 子程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">卸载当前 vcl 配置时调用，用于清理 VMODs，该子程序不参与请求处理，仅在 vcl 正常丢弃后调用</span><br></pre></td></tr></table></figure><p>可操作对象：（部分或全部值）</p><blockquote><p>读：server</p><p>写：无</p></blockquote><p>返回值：</p><blockquote><p>ok 正常返回，本次 vcl 将释放，默认返回值</p></blockquote><p>varnish 子程序调用流程图，通过大部分子程序的 return 返回值进入下一步行动：<br><img data-src="https://img-blog.csdnimg.cn/2020070118081672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h5 id="10、优雅模式（Garce-mode）"><a class="header-anchor" href="#10、优雅模式（Garce-mode）">¶</a>10、优雅模式（Garce mode）</h5><p>Varnish 中的请求合并</p><p>当几个客户端请求同一个页面的时候，varnish 只发送一个请求到后端服务器，然后让其他几个请求挂起并等待返回结果；获得结果后，其它请求再复制后端的结果发送给客户端；但如果同时有数以千计的请求，那么这个等待队列将变得庞大，这将导致 2 类潜在问题：</p><p>惊群问题(thundering herd problem)，即突然释放大量的线程去复制后端返回的结果，将导致负载急速上升；没有用户喜欢等待；</p><p>故为了解决这类问题，可以配置 varnish 在缓存对象因超时失效后再保留一段时间，以给那些等待的请求返回过去的文件内容(stale content)，配置案例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (! req.backend.healthy) &#123;</span><br><span class="line"><span class="built_in">set</span> req.grace = 5m;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">set</span> req.grace = 15s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_fetch &#123;</span><br><span class="line"><span class="built_in">set</span> beresp.grace = 30m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置表示 varnish 将会将失效的缓存对象再多保留 30 分钟，此值等于最大的 req.grace值即可</p><p>而根据后端主机的健康状况，varnish 可向前端请求分别提供 5 分钟内或 15 秒内的过期内容</p><h4 id="二、安装varnish"><a class="header-anchor" href="#二、安装varnish">¶</a>二、安装varnish</h4><h5 id="1、安装依赖关系的软件包"><a class="header-anchor" href="#1、安装依赖关系的软件包">¶</a>1、安装依赖关系的软件包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@varnish ~]<span class="comment"># yum -y install autoconf automake libedit-devel libtool ncurses-devel pcre-devel pkgconfig python-docutils python-sphinx</span></span><br></pre></td></tr></table></figure><h5 id="2、安装-varnish"><a class="header-anchor" href="#2、安装-varnish">¶</a>2、安装 varnish</h5><p><a href="https://pan.baidu.com/s/1-wvFjYjz2W4c7H5XQgKyOQ" target="_blank" rel="noopener">安装包</a></p><p>提取码：h71d</p><p>varnish 的官方网址为 <a href="http://varnish-cache.org" target="_blank" rel="noopener">http://varnish-cache.org</a>，可以在这里下载最新版本的软件</p><p>注意：Varnish 网站有时会被墙</p><p>解压，进入解压目录编译安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh ~]<span class="comment"># tar zxf varnish-4.0.3.tar.gz </span></span><br><span class="line">[root@varinsh ~]<span class="comment"># cd varnish-4.0.3/</span></span><br><span class="line">[root@varinsh varnish-4.0.3]<span class="comment"># export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig</span></span><br><span class="line">[root@varinsh varnish-4.0.3]<span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line"><span class="comment"># 不指定安装路径，默认是安装在/usr/local 目录下</span></span><br></pre></td></tr></table></figure><p>注：</p><blockquote><p>./autogen.sh<br>如果从 Git 库下载的安装包时才需要运行，用于生成 configure 编译文件</p></blockquote><p>复制 vcl 文件（在编译安装目录下），如果安装目录里没有 default.vcl 文件</p><p>复制到安装目录的/usr/local/var/varnish/目录下（当然并无必需要求在哪个目录，因为正式启动时还得指定这个文件的目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh varnish-4.0.3]<span class="comment"># cp etc/example.vcl /usr/local/var/varnish/default.vcl</span></span><br></pre></td></tr></table></figure><h4 id="三、varnish-实例解析"><a class="header-anchor" href="#三、varnish-实例解析">¶</a>三、varnish  实例解析</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">varnish 配置基本上是编辑 VCL(Varnish Configuration Language) 文件,varnish 有一套自定义VCL 语法，启动时，会将配置文件编译为 C 语言，再执行</span><br><span class="line"></span><br><span class="line">varnish 4.0 开始，每个 VCL 文件必须在开始行声明它的版本“vcl 4.0;”</span><br><span class="line"></span><br><span class="line">块（子程序）由大括号分隔，语句用分号结束。所有的关键字及预设子程序名都是全小写。注释：支持 // 或 # 多行时还可以使用 /* .. */</span><br></pre></td></tr></table></figure><h5 id="1、后端服务器地址池配置及后端服务器健康检查"><a class="header-anchor" href="#1、后端服务器地址池配置及后端服务器健康检查">¶</a>1、后端服务器地址池配置及后端服务器健康检查</h5><p>varnish 有&quot;后端&quot;或者&quot;源&quot;服务器的概念。backend server 提供给 varnish 加速的内容。实际上就是给 varnish 添加可供访问的 web 服务器，如果有多台 web 服务器时，可添加多个 backend块</p><h6 id="1）后端服务器定义"><a class="header-anchor" href="#1）后端服务器定义">¶</a>1）后端服务器定义</h6><p>命令：backend。这个定义为最基本的反向入口定义，用于 varnish 连接对应的服务器，如果没有定义或定义错误则用户无法访问正常页面</p><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backend name&#123;</span><br><span class="line">.attribute = <span class="string">"value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>backend 是定义后端关键字，name 是当前后端节点的别名，多个后端节点时，name 名不能重复，否则覆盖。花括号里面定义当前节点相关的属性（键=值）。除默认节点外其它节点定义后必需有调用，否则 varnish 无法启动。后端是否正常可以通过 std.healthy(backend)判断</p></blockquote><p>支持运算符：</p><blockquote><p>= （赋值运算）</p><p>== （相等比较）</p><p>~ （匹配，可以使用正则表达式，或访问控制列表）</p><p>!~ （不匹配，可以使用正则表达式，或访问控制列表）</p><p>！ （非）</p><p>&amp;&amp; （逻辑与）</p><p>|| （逻辑或）</p></blockquote><p>属性列表：</p><p>.host=“<a href="http://xxx.xxx.xxx.xxx" target="_blank" rel="noopener">xxx.xxx.xxx.xxx</a>”;</p><blockquote><p>要转向主机（即后端主机）的 IP 或域名，必填键/值对</p></blockquote><p>.port=“8080”;</p><blockquote><p>主机连接端口号或协议名（HTTP 等），默认 80</p></blockquote><p>.host_header=’’;</p><blockquote><p>请示主机头追加内容</p></blockquote><p>.connect_timeout=1s;</p><blockquote><p>连接后端的超时时间</p></blockquote><p>.first_byte_timeout=5s;</p><blockquote><p>等待从后端返回的第一个字节时间</p></blockquote><p>.between_bytes_timeout=2s;</p><blockquote><p>每接收一个字节之间等待时间</p></blockquote><p>.probe=probe_name;</p><blockquote><p>监控后端主机的状态,指定外部监控 name 或者内部直接添加</p></blockquote><p>.max_connections=200;</p><blockquote><p>设置最大并发连接数，超过这个数后连接就会失败</p></blockquote><p>例：（下面两个例子结果是一样的，但第二个例子中更适用于集群，可以方便批量修改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">backend web&#123;</span><br><span class="line">.host=<span class="string">"192.168.31.83"</span>;</span><br><span class="line">.port=<span class="string">"80"</span>;</span><br><span class="line">.probe=&#123; <span class="comment"># 直接追加监控块.probe 是一个的参数</span></span><br><span class="line">.url=<span class="string">"/"</span>;</span><br><span class="line">.timeout=2s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line">probe web_probe&#123; <span class="comment"># 监控必需定义在前面，否则后端调用找不到监控块。</span></span><br><span class="line">.url=<span class="string">"/"</span>;</span><br><span class="line">.timeout=2s;</span><br><span class="line">&#125;</span><br><span class="line">backend web&#123;</span><br><span class="line">.host=<span class="string">"192.168.31.83"</span>;</span><br><span class="line">.port=<span class="string">"80"</span>;</span><br><span class="line">.probe=web_probe; //调用外部共用监控块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2）监视器的定义"><a class="header-anchor" href="#2）监视器的定义">¶</a>2）监视器的定义</h6><p>命令：probe 。监控可以循环访问指定的地址，通过响应时间判定服务器是否空闲或正常。这类命令非常适用于集群中某些节点服务器崩溃或负载过重，而禁止访问这台节点服务器。</p><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">probe name&#123;</span><br><span class="line">.attribute = <span class="string">"value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>probe 是定义监控关键字，name 是当前监控点的别名，多个监控节点时，name 名不能重复，否则覆盖。花括号里面定义当前节点相关的属性（键=值）。没有必填属性，因为默认值就可以正常执行操作</p></blockquote><p>属性列表：</p><p>.url=&quot;/&quot;;</p><blockquote><p>指定监控入口 URL 地址，默认为&quot;/&quot;</p></blockquote><p>.request=&quot;&quot;;</p><blockquote><p>指定监控请求入口地址，比 .url 优先级高</p></blockquote><p>.expected_response=“200”;</p><blockquote><p>请求响应代码，默认是 200</p></blockquote><p>.timeout=2s;</p><blockquote><p>请求超时时间</p></blockquote><p>.interval=5s;</p><blockquote><p>每次轮询请求间隔时间,默认为 5s</p></blockquote><p>.initial=-1;</p><blockquote><p>初始启动时以.window 轮询次数中几次良好后续才能使用这个后端服务器节点，默认为 -1 ，则轮询完 .window 所有次数良好判定为正常</p></blockquote><p>.window=8;</p><blockquote><p>指定多少轮询次数，用于判定服务器正常，默认是 8</p></blockquote><p>.threshold=3;</p><blockquote><p>必须多少次轮询正常才算该后端节点服务器正常,默认是 3</p></blockquote><p>例：创建健康监测，定义健康检查名称为 backend_healthcheck</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">probe backend_healthcheck &#123;</span><br><span class="line">.url = <span class="string">"/"</span>;</span><br><span class="line">.timeout = 1s;</span><br><span class="line">.interval = 5s;</span><br><span class="line">.window = 5;</span><br><span class="line">.threshold = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中 varnish 将每 5s 检测后端，超时设为 1s。每个检测将会发送 get /的请求。如果 5 个检测中大于 3 个是成功，varnish 就认为后端是健康的，反之，后端就有问题了</p><h6 id="3）集群负载均衡-directors："><a class="header-anchor" href="#3）集群负载均衡-directors：">¶</a>3）集群负载均衡 directors：</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">varnish 可以定义多个后端，也可以将几个后端放在一个后端集群里面已达到负载均衡的目的</span><br><span class="line"></span><br><span class="line">你也可以将几个后端组成一组后端。这个组被叫做 Directors。可以提高性能和弹性</span><br></pre></td></tr></table></figure><p>directors 是 varnish 负载均衡模块，使用前必需引入 directors 模块，directors 模块主要包含：</p><p>round_robin，random，hash，fallback 负载均衡模式</p><blockquote><p>round_robin : 循环依次逐个选择后端服务器</p><p>random ： 随机选择后端服务器，可设置每个后端权重增加随机率</p><p>hash : 通过散列随机选择对应的后端服务器且保持选择对应关系，下次则直接找对应的后端服务器</p><p>Fallback：后备</p></blockquote><p>注意：</p><blockquote><p>random，hash 有权重值设置，用于提高随机率。每个后端最好都配置监控器（后端服务器正常监测）以便 directors 自动屏蔽不正常后端而不进入均衡列中。</p></blockquote><p>这些操作需要你载入 VMOD（varnish module），然后在 vcl_init 中调用这个 VMOD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import directors; <span class="comment"># load the directors</span></span><br><span class="line">backend web1 &#123;</span><br><span class="line">.host = <span class="string">"192.168.0.10"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend web2 &#123;</span><br><span class="line">.host = <span class="string">"192.168.0.11"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化处理</span></span><br><span class="line">sub vcl_init &#123; <span class="comment"># 调用 vcl_init 初始化子程序创建后端主机组，即 directors</span></span><br><span class="line">new web_cluster = directors.round_robin(); <span class="comment"># 使用 new 关键字创建 drector 对象,使用 round_robin 算法</span></span><br><span class="line">web_cluster.add_backend(web1); <span class="comment"># 添加后端服务器节点</span></span><br><span class="line">web_cluster.add_backend(web2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始处理请求</span></span><br><span class="line">sub vcl_recv &#123; <span class="comment"># 调用 vcl_recv 子程序，用于接收和处理请求</span></span><br><span class="line"><span class="built_in">set</span> req.backend_hint = web_cluster.backend(); <span class="comment"># 选取后端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>set 命令是设置变量</p><p>unset 命令是删除变量</p><p>web_cluster.add_backend( backend , real ); 添加后端服务器节点，backend 为后端配置别名，real 为权重值，随机率计算公式：100 * (当前权重 / 总权重)</p><p>req.backend_hint 是 varnish 的预定义变量，作用是指定请求后端节点</p><p>vcl 对象需要使用 new 关键字创建，所有可创建对象都是内定的，使用前必需 import，所有new 操作只能在 vcl_init 子程序中</p></blockquote><p>扩展：varnish  将不同的 url  发送到不同的后端 server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import directors; <span class="comment"># load the directors</span></span><br><span class="line">backend web1 &#123;</span><br><span class="line">.host = <span class="string">"192.168.0.10"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend web2 &#123;</span><br><span class="line">.host = <span class="string">"192.168.0.11"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend img1 &#123;</span><br><span class="line">.host = <span class="string">"img1.lnmmp.com"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend img2 &#123;</span><br><span class="line">.host = <span class="string">"img2.lnmmp.com"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">.probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化处理</span></span><br><span class="line">sub vcl_init &#123; <span class="comment"># 调用 vcl_init 初始化子程序创建后端主机组，即 directors</span></span><br><span class="line">new web_cluster = directors.round_robin(); <span class="comment"># 使用 new 关键字创建 drector 对象,使用 round_robin 算法</span></span><br><span class="line">web_cluster.add_backend(web1); <span class="comment"># 添加后端服务器节点</span></span><br><span class="line">web_cluster.add_backend(web2);</span><br><span class="line">new img_cluster = directors.random();</span><br><span class="line">img_cluster.add_backend(img1,2); <span class="comment"># 添加后端服务器节点，并且设置权重值</span></span><br><span class="line">img_cluster.add_backend(img2,5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据不同的访问域名，分发至不同的后端主机组</span></span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (req.http.host ~ <span class="string">"(?i)^(www.)?benet.com$"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> req.http.host = <span class="string">"www.benet.com"</span>;</span><br><span class="line"><span class="built_in">set</span> req.backend_hint = web_cluster.backend(); <span class="comment"># 选取后端</span></span><br><span class="line">&#125; elsif (req.http.host ~ <span class="string">"(?i)^images.benet.com$"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> req.backend_hint = img_cluster.backend();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：中的 i 就是忽略大小写的意思。(?i)表示开启忽略大小写，而(?-i)表示关闭忽略大小写</p><h6 id="4）访问控制列表（ACL）"><a class="header-anchor" href="#4）访问控制列表（ACL）">¶</a>4）访问控制列表（ACL）</h6><p>创建一个地址列表，用于后面的判断，可以是域名或 IP 集合。这个可以用于指定某些地址请求入口，防止恶意请求等</p><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acl purgers &#123;</span><br><span class="line"><span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="string">"localhost"</span>;</span><br><span class="line">“192.168.134.0/24”</span><br><span class="line">!<span class="string">"192.168.134.1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：acl 是访问列表关键字（必需小写），name 是该列表的别名用于调用，花括号内部是地址集</p><p>注意：如果列表中包含了无法解析的主机地址，它会匹配任何地址</p><p>如果不想让它匹配可以在前添加一个 ! 符号，如上面 !“192.168.134.1”;</p><p>使用 ACL 只需要用 匹配运算符 ~ 或 !~ 如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123; <span class="comment"># PURGE 请求的处理</span></span><br><span class="line"><span class="keyword">if</span> (client.ip ~ purgers) &#123;</span><br><span class="line"><span class="built_in">return</span>(purge);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">return</span>(synth(403, <span class="string">"Access denied."</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5）缓存规则配置"><a class="header-anchor" href="#5）缓存规则配置">¶</a>5）缓存规则配置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="comment"># PURGE 请求的处理</span></span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!client.ip ~ purgers) &#123;</span><br><span class="line"><span class="built_in">return</span> (synth(405, <span class="string">"Not Allowed."</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> (purge);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> req.backend_hint = web.backend();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 php、asp 等动态内容访问请求直接发给后端服务器，不缓存。</span></span><br><span class="line"><span class="keyword">if</span> (req.url ~ <span class="string">"\.(php|asp|aspx|jsp|do|ashx|shtml)($|\?)"</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> (pass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 将非 GET 和 HEAD 访问请求直接发给后端服务器，不缓存。例如 POST 请求。</span></span><br><span class="line"><span class="keyword">if</span> (req.method != <span class="string">"GET"</span> &amp;&amp; req.method != <span class="string">"HEAD"</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> (pass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果 varnish 看到 header 中有'Authorization'头，它将 pass 请求。</span></span><br><span class="line"><span class="keyword">if</span> (req.http.Authorization) &#123;</span><br><span class="line"><span class="built_in">return</span> (pass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 带 cookie 首部的 GET 请求也缓存</span></span><br><span class="line"><span class="keyword">if</span> (req.url ~ <span class="string">"\.(css|js|html|htm|bmp|png|gif|jpg|jpeg|ico|gz|tgz|bz2|tbz|zip|rar|mp3|mp4|ogg|swf|flv)($|\?)"</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> req.http.cookie;</span><br><span class="line"><span class="built_in">return</span> (<span class="built_in">hash</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：默认情况，varnish 不缓存从后端响应的 http 头中带有 Set-Cookie 的对象。如果客户<br>端发送的请求带有 Cookie header，varnish 将忽略缓存，直接将请求传递到后端</p><p>为发往后端主机的请求添加 X-Forward-For 首部,首次访问增加 X-Forwarded-For 头信息,方<br>便后端程序获取客户端 ip，而不是 varnish 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.restarts == 0) &#123;</span><br><span class="line"><span class="keyword">if</span> (req.http.x-forwarded-for) &#123; <span class="comment"># 如果设置过此 header 则要再次附加上用逗号隔开</span></span><br><span class="line"><span class="built_in">set</span> req.http.X-Forwarded-For = req.http.X-Forwarded-For + <span class="string">", "</span> + client.ip;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment"># 如果只有一层代理的话,就无需设置了</span></span><br><span class="line"><span class="built_in">set</span> req.http.X-Forwarded-For = client.ip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明： X-Forwarded-For 是用来识别通过 HTTP 代理或负载均衡方式连接到 Web 服务器的客户<br>端最原始的 IP 地址的 HTTP 请求头字段</p><p>子程序：</p><p>子程序是一种类似 C 的函数，但是程序没有调用参数，子程序以 sub 关键字定义。在 VCL里子程序是用于管理程序</p><p>注意：所有 VCL 内置的程序都是以 vcl_ 开头，并已经预置好，在 VCL 文件中只要声明对应的内置子程序，都会在对应的流程中调用</p><h4 id="三、varnish-完整配置实例"><a class="header-anchor" href="#三、varnish-完整配置实例">¶</a>三、varnish  完整配置实例</h4><h5 id="1、拓扑环境"><a class="header-anchor" href="#1、拓扑环境">¶</a>1、拓扑环境</h5><table><thead><tr><th><strong>varnish</strong></th><th><strong>192.168.1.20</strong></th></tr></thead><tbody><tr><td><strong>web01</strong></td><td><strong>192.168.1.30</strong></td></tr><tr><td><strong>web02</strong></td><td><strong>192.168.1.40</strong></td></tr></tbody></table><p>配置 web01、web02 做为后端服务器（过程略）</p><p>确保 varnish 服务器能正常访问 web01、web02</p><p>Varnish 缓存代理服务器配置：</p><h5 id="2、vcl文件配置内容"><a class="header-anchor" href="#2、vcl文件配置内容">¶</a>2、vcl文件配置内容</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh ~]<span class="comment"># cat /usr/local/var/varnish/default.vcl </span></span><br><span class="line">vcl 4.0;</span><br><span class="line">import directors;</span><br><span class="line">import std;</span><br><span class="line">probe  backend_healthcheck &#123;</span><br><span class="line">        .url = <span class="string">"/"</span>;</span><br><span class="line">        .timeout = 1s;</span><br><span class="line">        .interval = 5s;</span><br><span class="line">        .window = 5;</span><br><span class="line">        .threshold = 3;</span><br><span class="line">&#125;</span><br><span class="line">backend web1 &#123;</span><br><span class="line">    .host = <span class="string">"192.168.1.30"</span>;</span><br><span class="line">    .port = <span class="string">"80"</span>;</span><br><span class="line">    .probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">backend web2 &#123;</span><br><span class="line">    .host = <span class="string">"192.168.1.40"</span>;</span><br><span class="line">    .port = <span class="string">"80"</span>;</span><br><span class="line">    .probe = backend_healthcheck;</span><br><span class="line">&#125;</span><br><span class="line">acl purgers &#123;</span><br><span class="line">        <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        <span class="string">"localhost"</span>;</span><br><span class="line">        <span class="string">"192.168.1.0/24"</span>;</span><br><span class="line">        !<span class="string">"192.168.1.40"</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_init &#123;  </span><br><span class="line">        new web_cluster = directors.round_robin();  </span><br><span class="line">        web_cluster.add_backend(web1);  </span><br><span class="line">        web_cluster.add_backend(web2);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line">        <span class="built_in">set</span> req.backend_hint = web_cluster.backend();</span><br><span class="line">        <span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (!client.ip ~ purgers) &#123;   </span><br><span class="line">                        <span class="built_in">return</span> (synth(405, <span class="string">"Not Allowed."</span>));   </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">return</span> (purge);</span><br><span class="line"> &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.method != <span class="string">"GET"</span> &amp;&amp; </span><br><span class="line">                req.method != <span class="string">"HEAD"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"PUT"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"POST"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"TRACE"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"OPTIONS"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"PATCH"</span> &amp;&amp;</span><br><span class="line">                req.method != <span class="string">"DELETE"</span>) &#123;</span><br><span class="line">                        <span class="built_in">return</span> (pipe);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.method != <span class="string">"GET"</span> &amp;&amp; req.method != <span class="string">"HEAD"</span>)&#123;</span><br><span class="line">                <span class="built_in">return</span> (pass);  </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.url ~ <span class="string">"\.(php|asp|aspx|jsp|do|ashx|shtml)($|\?)"</span>)&#123;</span><br><span class="line">                <span class="built_in">return</span> (pass);   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.http.Authorization) &#123;</span><br><span class="line">                <span class="built_in">return</span> (pass);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.http.Accept-Encoding) &#123;</span><br><span class="line">                <span class="keyword">if</span>  (req.url  ~ <span class="string">"\.(bmp|png|gif|jpg|jpeg|ico|gz|tgz|bz2|tbz|zip|rar|mp3|mp4|ogg|swf|flv)$"</span></span><br><span class="line">)&#123;</span><br><span class="line">                        <span class="built_in">unset</span> req.http.Accept-Encoding; </span><br><span class="line">                &#125; elseif (req.http.Accept-Encoding ~ <span class="string">"gzip"</span>) &#123;</span><br><span class="line">                        <span class="built_in">set</span> req.http.Accept-Encoding = <span class="string">"gzip"</span>; </span><br><span class="line">                &#125; elseif (req.http.Accept-Encoding ~ <span class="string">"deflate"</span>) &#123;</span><br><span class="line">                        <span class="built_in">set</span> req.http.Accept-Encoding = <span class="string">"deflate"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">unset</span> req.http.Accept-Encoding; </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">if</span>  (req.url  ~ <span class="string">"\.(css|js|html|htm|bmp|png|gif|jpg|jpeg|ico|gz|tgz|bz2|tbz|zip|rar|mp3|mp4|ogg|sw f|flv)($|\?)"</span>) &#123;</span><br><span class="line">                <span class="built_in">unset</span> req.http.cookie; </span><br><span class="line">                <span class="built_in">return</span> (<span class="built_in">hash</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.restarts == 0) &#123; </span><br><span class="line">                <span class="keyword">if</span> (req.http.X-Forwarded-For) &#123; </span><br><span class="line">                        <span class="built_in">set</span> req.http.X-Forwarded-For = req.http.X-Forwarded-For + <span class="string">", "</span> + client.ip;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">set</span> req.http.X-Forwarded-For = client.ip;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (<span class="built_in">hash</span>);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_hash &#123;</span><br><span class="line">        hash_data(req.url); </span><br><span class="line">        <span class="keyword">if</span> (req.http.host) &#123;</span><br><span class="line">        hash_data(req.http.host); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        hash_data(server.ip); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (lookup);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_hit &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123; </span><br><span class="line">        <span class="built_in">return</span> (synth(200, <span class="string">"Purged."</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (deliver);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_miss &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> (synth(404, <span class="string">"Purged."</span>)); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (fetch);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_deliver &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hits &gt; 0) &#123;</span><br><span class="line">        <span class="built_in">set</span> resp.http.X-Cache = <span class="string">"HIT"</span>; </span><br><span class="line">        <span class="built_in">set</span> resp.http.X-Cache-Hits = obj.hits; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">set</span> resp.http.X-Cache = <span class="string">"MISS"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">unset</span> resp.http.X-Powered-By; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.Server; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.X-Drupal-Cache; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.Via; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.Link; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.X-Varnish; </span><br><span class="line">        <span class="built_in">set</span> resp.http.xx_restarts_count = req.restarts; </span><br><span class="line">        <span class="built_in">set</span> resp.http.xx_Age = resp.http.Age; </span><br><span class="line">        <span class="built_in">set</span> resp.http.hit_count = obj.hits; </span><br><span class="line">        <span class="built_in">unset</span> resp.http.Age;</span><br><span class="line">        <span class="built_in">return</span> (deliver);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_pass &#123;</span><br><span class="line">        <span class="built_in">return</span> (fetch); </span><br><span class="line">&#125;</span><br><span class="line">sub vcl_backend_response &#123;</span><br><span class="line">        <span class="built_in">set</span> beresp.grace = 5m; </span><br><span class="line">        <span class="keyword">if</span> (beresp.status == 499 || beresp.status == 404 || beresp.status == 502) &#123;</span><br><span class="line">                <span class="built_in">set</span> beresp.uncacheable = <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bereq.url ~ <span class="string">"\.(php|jsp)(\?|$)"</span>) &#123;</span><br><span class="line">                <span class="built_in">set</span> beresp.uncacheable = <span class="literal">true</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bereq.url ~ <span class="string">"\.(css|js|html|htm|bmp|png|gif|jpg|jpeg|ico)($|\?)"</span>) &#123;</span><br><span class="line">                <span class="built_in">set</span> beresp.ttl = 15m; </span><br><span class="line">                <span class="built_in">unset</span> beresp.http.Set-Cookie;</span><br><span class="line">                &#125; elseif (bereq.url ~ <span class="string">"\.(gz|tgz|bz2|tbz|zip|rar|mp3|mp4|ogg|swf|flv)($|\?)"</span>) &#123;</span><br><span class="line">                        <span class="built_in">set</span> beresp.ttl = 30m; </span><br><span class="line">                        <span class="built_in">unset</span> beresp.http.Set-Cookie;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">set</span> beresp.ttl = 10m; </span><br><span class="line">                        <span class="built_in">unset</span> beresp.http.Set-Cookie;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> (deliver);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_purge &#123;</span><br><span class="line">        <span class="built_in">return</span> (synth(200,<span class="string">"success"</span>));</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_backend_error &#123;</span><br><span class="line">        <span class="keyword">if</span> (beresp.status == 500 ||</span><br><span class="line">                beresp.status == 501 ||</span><br><span class="line">                beresp.status == 502 ||</span><br><span class="line">                beresp.status == 503 ||</span><br><span class="line">                beresp.status == 504) &#123;</span><br><span class="line">                <span class="built_in">return</span> (retry); </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_fini &#123;</span><br><span class="line">        <span class="built_in">return</span> (ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、启动varnish"><a class="header-anchor" href="#3、启动varnish">¶</a>3、启动varnish</h5><p>当启动 varnish 时有两个重要的参数你必须设置: 一个是处理 http 请求的 tcp 监听端口,另一个是处理真实请求的后端 server</p><p>注：如果你使用操作系统自带的包管理工具安装的 varnish,你将在下面的文件找到启动参数:Red Hat, Centos: /etc/sysconfig/varnish</p><h6 id="1）’-a’"><a class="header-anchor" href="#1）’-a’">¶</a>1）’-a’</h6><p>‘-a’ 参数定义了 varnish 监听在哪个地址,并用该地址处理 http 请求，你可能想设置这个参数在众所周知的 http 80 端口</p><p>例子:</p><blockquote><p>-a :80<br>-a localhost:80<br>-a 192.168.1.100:8080<br>-a ‘[fe80::1]:80’<br>-a ‘0.0.0.0:8080,[::]:8081’</p></blockquote><p>如果你的 webserver 和 varnish 运行在同一台机器,你必须换一个监听地址</p><h6 id="2）’-f’"><a class="header-anchor" href="#2）’-f’">¶</a>2）’-f’</h6><blockquote><p>-f 添加 vcl 文件,-b 定义后端 serve</p><p>varnish 需要知道从哪里找到这个需要缓存的 http server.你可以用-b 参数指定,或者帮把它放在 vcl 文件中,然后使用-f 参数指定</p><p>在启动的时候使用-b 是一个快捷的方式.</p><p>-b 192.168.1.2:80</p><p>注意:如果你指定的是 name,这个 name 必须能解析成一个 IPv4 或者 IPv6 的地址如果你使用-f 参数,你启动的时候可以在-f 指定 vcl 文件</p><p>默认的 varnish 使用 100M 的内存来缓存对象,如果你想缓存更多,可以使用-s 参数</p></blockquote><p>注：Varnish 拥有大量的有用的命令行参数，建议查看其帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh ~]<span class="comment"># /usr/local/sbin/varnishd -h</span></span><br></pre></td></tr></table></figure><p>启动 varnish</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@varinsh ~]<span class="comment"># varnishd -f /usr/local/var/varnish/default.vcl -s malloc,200M -a 0.0.0.0:80[root@varinsh ~]# netstat -anput | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      13968/varnishd</span><br></pre></td></tr></table></figure><h6 id="3）访问"><a class="header-anchor" href="#3）访问">¶</a>3）访问</h6><p>现在，varnish 已经启动和运行，你可以通过 varnish 访问您的 Web 应用程序</p><p>第一次访问<br><img data-src="https://img-blog.csdnimg.cn/20200701180906611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>第二次访问<br><img data-src="https://img-blog.csdnimg.cn/20200701180924925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h6 id="4）清除缓存再次访问"><a class="header-anchor" href="#4）清除缓存再次访问">¶</a>4）清除缓存再次访问</h6><p><img data-src="https://img-blog.csdnimg.cn/20200701181019348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Nginx优化与防盗链+单机部署LNMP</title>
    <link href="https://pdxblog.top/Nginx%E4%BC%98%E5%8C%96%E4%B8%8E%E9%98%B2%E7%9B%97%E9%93%BE+%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2LNMP.html"/>
    <id>https://pdxblog.top/Nginx%E4%BC%98%E5%8C%96%E4%B8%8E%E9%98%B2%E7%9B%97%E9%93%BE+%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2LNMP.html</id>
    <published>2020-06-12T16:00:00.000Z</published>
    <updated>2020-06-13T03:39:56.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx优化与防盗链-单机部署LNMP"><a class="header-anchor" href="#Nginx优化与防盗链-单机部署LNMP">¶</a>Nginx优化与防盗链+单机部署LNMP</h3><p>Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Nginx，它的发音为“engine X”，是一个高性能的 HTTP 和反向代理服务器，同时也是一个 IMAP/POP3/SMTP 代理服务器．Nginx 是由俄罗斯人 Igor Sysoev 为俄罗斯访问量第二的 <a href="http://Rambler.ru" target="_blank" rel="noopener">Rambler.ru</a> 站点开发</p><p>Nginx 以事件驱动（epoll）的方式编写，所以有非常好的性能，同时也是一个非常高效的反<br>向代理、负载平衡。但是 Nginx 并不支持 cgi 方式运行，原因是可以减少因此带来的一些程<br>序上的漏洞。所以必须使用 FastCGI 方式来执行 PHP 程序</p><p>由于 Nginx 本身的一些优点，轻量，开源，易用，越来越多的公司使用 nginx 作为自己公司<br>的 web 应用服务器，本文详细介绍 nginx 源码安装的同时并对 nginx 进行优化配置</p><h4 id="一、Nginx的优化"><a class="header-anchor" href="#一、Nginx的优化">¶</a>一、Nginx的优化</h4><h5 id="1、编译安装前的优化"><a class="header-anchor" href="#1、编译安装前的优化">¶</a>1、编译安装前的优化</h5><p>编译前的优化主要是用来修改程序名等等，目的更改源码隐藏软件名称和版本号</p><h6 id="（1）安装-zlib-devel、pcre-devel-等依赖包"><a class="header-anchor" href="#（1）安装-zlib-devel、pcre-devel-等依赖包">¶</a>（1）安装 zlib-devel、pcre-devel 等依赖包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install gcc gcc-c++ make libtool zlib zlib-devel pcre pcre-devel openssl openssl-devel</span></span><br></pre></td></tr></table></figure><h6 id="（2）下载Nginx源码包"><a class="header-anchor" href="#（2）下载Nginx源码包">¶</a>（2）下载Nginx源码包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># wget http://nginx.org/download/nginx-1.10.2.tar.gz</span></span><br></pre></td></tr></table></figure><h6 id="（3）解压源码包"><a class="header-anchor" href="#（3）解压源码包">¶</a>（3）解压源码包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tar zxf nginx-1.10.2.tar.gz </span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd nginx-1.10.2/</span></span><br></pre></td></tr></table></figure><h6 id="（4）隐藏软件名称和版本号"><a class="header-anchor" href="#（4）隐藏软件名称和版本号">¶</a>（4）隐藏软件名称和版本号</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># vim src/core/nginx.h</span></span><br><span class="line"><span class="comment"># 此行修改的是你想要的版本</span></span><br><span class="line"><span class="comment">#define NGINX_VERSION      "1.10.2"  # 第13行</span></span><br><span class="line"><span class="comment"># 此行修改的是你想修改的软件名称</span></span><br><span class="line"><span class="comment">#define NGINX_VER          "nginx/" NGINX_VERSION  # 第14行</span></span><br></pre></td></tr></table></figure><p>修改上面的信息，即可更改 nginx 显示版本。例如：(curl –I 可看到，请求头和响应头显示)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define NGINX_VERSION      "7.0"</span></span><br><span class="line"><span class="comment">#define NGINX_VER          "IIS/" NGINX_VERSION</span></span><br></pre></td></tr></table></figure><p>修改 HTTP 头信息中的 connection 字段，防止回显具体版本号</p><p>拓展：</p><blockquote><p>通用 http 头 ，通用头包含请求和响应消息都支持的头，通用头包含 Cache-Control、<br>Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via。对通用头的扩展要求通讯双方都支持此扩展，如果存在不支持的通用头，一般将会作为实体头处理。那么也就是说有部分设备，或者是软件，能获取到 connection，部分不能，要隐藏就要彻底！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># vim src/http/ngx_http_header_filter_module.c</span></span><br><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">static char ngx_http_server_string[] = <span class="string">"Server: nginx"</span> CRLF; <span class="comment"># 第49行</span></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line">static char ngx_http_server_string[] = <span class="string">"Server: IIS"</span> CRLF;</span><br></pre></td></tr></table></figure><p>定义了 http 错误码的返回：</p><p>有时候我们页面程序出现错误，Nginx 会代我们返回相应的错误代码，回显的时候，会带上<br>nginx 和版本号，我们把他隐藏起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># vim src/http/ngx_http_special_response.c</span></span><br><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">static u_char ngx_http_error_tail[] =</span><br><span class="line"><span class="string">"&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;"</span> CRLF <span class="comment"># 第29行</span></span><br><span class="line"><span class="string">"&lt;/body&gt;"</span> CRLF</span><br><span class="line"><span class="string">"&lt;/html&gt;"</span> CRLF</span><br><span class="line">;</span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line">static u_char ngx_http_error_tail[] =</span><br><span class="line"><span class="string">"&lt;hr&gt;&lt;center&gt;IIS&lt;/center&gt;"</span> CRLF</span><br><span class="line"><span class="string">"&lt;/body&gt;"</span> CRLF</span><br><span class="line"><span class="string">"&lt;/html&gt;"</span> CRLF</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h5 id="2、安装nginx"><a class="header-anchor" href="#2、安装nginx">¶</a>2、安装nginx</h5><h6 id="（1）添加-nginx-组"><a class="header-anchor" href="#（1）添加-nginx-组">¶</a>（1）添加 nginx 组</h6><p>创建nginx运行账户nginx并加入到nginx 组，不允许 www 用户直接登录系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># groupadd nginx</span></span><br><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># useradd -g nginx nginx -s /sbin/nologin</span></span><br></pre></td></tr></table></figure><h6 id="（2）编译安装"><a class="header-anchor" href="#（2）编译安装">¶</a>（2）编译安装</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># ./configure --prefix=/usr/local/nginx1.10 \</span></span><br><span class="line">&gt;  --with-http_dav_module --with-http_stub_status_module \</span><br><span class="line">&gt;  --with-http_addition_module --with-http_sub_module \</span><br><span class="line">&gt;  --with-http_flv_module --with-http_mp4_module --with-pcre \</span><br><span class="line">&gt;  --with-http_ssl_module --with-http_gzip_static_module \</span><br><span class="line">&gt;  --user=nginx --group=nginx</span><br><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>相关选项说明：</p><p>–with-http_dav_module</p><blockquote><p>增加 PUT,DELETE,MKCOL：创建集合，COPY 和 MOVE 方法</p></blockquote><p>–with-http_stub_status_module</p><blockquote><p>获取 Nginx 的状态统计信息</p></blockquote><p>–with-http_addition_module</p><blockquote><p>作为一个输出过滤器，支持不完全缓冲，分部分相应请求</p></blockquote><p>–with-http_sub_module</p><blockquote><p>允许一些其他文本替换 Nginx 相应中的一些文本</p></blockquote><p>–with-http_flv_module</p><blockquote><p>提供支持 flv 视频文件支持</p></blockquote><p>–with-http_mp4_module</p><blockquote><p>提供支持 mp4 视频文件支持，提供伪流媒体服务端支持</p></blockquote><p>–with-http_ssl_module</p><blockquote><p>启用 ngx_http_ssl_module如果 pcre 是通过编译安装的话，例如</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf /usr/<span class="built_in">local</span>/src/pcre-8.36.tar.gz -C /usr/<span class="built_in">local</span>/src/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/pcre-8.36</span><br><span class="line"> ./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><blockquote><p>则–with-pcre=/usr/local/src/pcre-8.36</p><p>需要注意，这里指的是源码,用<code>./configure --help | grep pcre</code> 查看帮助</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># ln -s /usr/local/nginx1.10/sbin/nginx /usr/local/sbin/</span></span><br><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx1.10/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx1.10/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><h6 id="（3）启动-nginx"><a class="header-anchor" href="#（3）启动-nginx">¶</a>（3）启动 nginx</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># nginx</span></span><br><span class="line">[root@nginx nginx-1.10.2]<span class="comment"># netstat -anpt | grep nginx</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      8303/nginx: master</span><br></pre></td></tr></table></figure><h6 id="（4）测试是否隐藏了版本和软件名"><a class="header-anchor" href="#（4）测试是否隐藏了版本和软件名">¶</a>（4）测试是否隐藏了版本和软件名</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># curl -I 127.0.0.1</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: IIS/7.0</span><br><span class="line">Date: Fri, 12 Jun 2020 01:08:48 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Fri, 12 Jun 2020 00:59:55 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"5ee2d38b-264"</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h5 id="3、nginx配置项优化"><a class="header-anchor" href="#3、nginx配置项优化">¶</a>3、nginx配置项优化</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root       8303      1  0 09:07 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nginx      8304   8303  0 09:07 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure><p>在这里我们还可以看到在查看的时候，work 进程是 nginx 程序用户，但是 master 进程还是<br>root，其中，master 是监控进程，也叫主进程，work 是工作进程，部分还有 cache 相关进程，关系如图：<br><img data-src="https://img-blog.csdnimg.cn/20200613112819353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>可以直接理解为 master 是管理员，work 进程才是为用户提供服务的！</p><h6 id="（1）Nginx-运行-工作置-进程个数"><a class="header-anchor" href="#（1）Nginx-运行-工作置-进程个数">¶</a>（1）Nginx  运行 工作置 进程个数</h6><p>一般我们设置 CPU 的核心或者核心数 x2</p><p>如果不了解 cpu 的核数，可以 top 命令之后按 1 也可以看出来，也可以查看/proc/cpuinfo 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># grep ^processor /proc/cpuinfo | wc -l</span></span><br><span class="line">1</span><br><span class="line">[root@nginx ~]<span class="comment"># vim /usr/local/nginx1.10/conf/nginx.conf</span></span><br><span class="line">worker_processes  2;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br><span class="line">[root@nginx ~]<span class="comment"># ps -aux | grep nginx | grep -v grep</span></span><br><span class="line">root       8303  0.0  0.1  46028  1920 ?        Ss   09:07   0:00 nginx: master process nginx</span><br><span class="line">nginx     10242  0.0  0.2  48540  2072 ?        S    09:14   0:00 nginx: worker process</span><br><span class="line">nginx     10243  0.0  0.2  48540  2072 ?        S    09:14   0:00 nginx: worker process</span><br></pre></td></tr></table></figure><h6 id="（2）Nginx-运行-CPU-亲和力"><a class="header-anchor" href="#（2）Nginx-运行-CPU-亲和力">¶</a>（2）Nginx 运行 CPU 亲和力</h6><p>比如 4 核配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000</span><br></pre></td></tr></table></figure><p>比如 8 核配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 8;</span><br><span class="line">worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;</span><br></pre></td></tr></table></figure><p>worker_processes 最多开启 8 个，8 个以上性能提升不会再提升了，而且稳定性变得更低，<br>所以 8 个进程够用了</p><h6 id="（3）Nginx-最多可以打开文件数"><a class="header-anchor" href="#（3）Nginx-最多可以打开文件数">¶</a>（3）Nginx 最多可以打开文件数</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_rlimit_nofile 65535;</span><br></pre></td></tr></table></figure><p>这个指令是指当一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数<br>（ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不是那么均匀，所以最好与 ulimit -n的值保持一致</p><p>注：</p><p>文件资源限制的配置可以在<code>/etc/security/limits.conf</code> 设置，针对 root/user 等各个用户或者*代表所有用户来设置。</p><p>用户重新登录生效（ulimit -n）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /etc/security/limits.conf</span></span><br><span class="line">*               soft    nofile          65535</span><br><span class="line">*               hard    nofile          65535</span><br><span class="line">[root@nginx ~]<span class="comment"># ulimit -n</span></span><br><span class="line">65535</span><br></pre></td></tr></table></figure><h6 id="（4）Nginx-事件处理模型"><a class="header-anchor" href="#（4）Nginx-事件处理模型">¶</a>（4）Nginx  事件处理模型</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">    multi_accept on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx 采用 epoll 事件模型，处理效率高</p><p><code>work_connections</code> 是单个 worker 进程允许客户端最大连接数，这个数值一般根据服务器性<br>能和内存来制定，实际最大值就是 worker 进程数乘以 work_connections实际我们填入一个 65535，足够了，这些都算并发值，一个网站的并发达到这么大的数量，也算一个大站了！</p><p><code>multi_accept</code> 告诉 nginx 收到一个新连接通知后接受尽可能多的连接</p><h6 id="（5）开启高效传输模式"><a class="header-anchor" href="#（5）开启高效传输模式">¶</a>（5）开启高效传输模式</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    ......</span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br></pre></td></tr></table></figure><p>Include mime.types;</p><blockquote><p>媒体类型, include 只是一个在当前文件中包含另一个文件内容的指令</p></blockquote><p>default_type application/octet-stream;</p><blockquote><p>默认媒体类型足够</p></blockquote><p>sendfile on；</p><blockquote><p>开启高效文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来<br>输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载</p><p>注意：如果图片显示不正常把这个改成 off。</p></blockquote><p>tcp_nopush on；</p><blockquote><p>必须在 sendfile 开启模式才有效，防止网路阻塞，积极的减少网络报文段的数量（告诉 nginx 在一个数据包里发送所有头文件，而不一个接一个的发送。）</p></blockquote><h6 id="（6）连接超时时间"><a class="header-anchor" href="#（6）连接超时时间">¶</a>（6）连接超时时间</h6><p>主要目的是保护服务器资源，CPU，内存，控制连接数，因为建立连接也是需要消耗资源的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">keepalive_timeout  65;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">client_header_buffer_size 4k;</span><br><span class="line">open_file_cache max=102400 inactive=20s;</span><br><span class="line">open_file_cache_valid 30s;</span><br><span class="line">open_file_cache_min_uses 1;</span><br><span class="line">client_header_timeout 15;</span><br><span class="line">client_body_timeout 15;</span><br><span class="line">reset_timedout_connection on;</span><br><span class="line">send_timeout 15;</span><br><span class="line">server_tokens off;</span><br><span class="line">client_max_body_size 10m;</span><br></pre></td></tr></table></figure><p>keepalived_timeout</p><blockquote><p>客户端连接保持会话超时时间，超过这个时间，服务器断开这个链接</p></blockquote><p>tcp_nodelay;</p><blockquote><p>也是防止网络阻塞，不过要包涵在 keepalived 参数才有效</p></blockquote><p>client_header_buffer_size 4k;</p><blockquote><p>客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过 1k，不过由于一般系统分页都要大于 1k，所以这里设置为分页大小。分页大小可以用命令 getconf PAGESIZE 取得</p></blockquote><p>open_file_cache max=102400 inactive=20s;</p><blockquote><p>这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件<br>数一致，inactive 是指经过多长时间文件没被请求后删除缓存</p></blockquote><p>open_file_cache_valid 30s;</p><blockquote><p>这个是指多长时间检查一次缓存的有效信息</p></blockquote><p>open_file_cache_min_uses 1;</p><blockquote><p>open_file_cache 指令中的 inactive 参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在 inactive 时间内一次没被使用，它将被移除</p></blockquote><p>client_header_timeout</p><blockquote><p>设置请求头的超时时间。我们也可以把这个设置低些，如果超过这个时间没有发送任何数据，nginx 将返回 request time out 的错误</p></blockquote><p>client_body_timeout</p><blockquote><p>设置请求体的超时时间。我们也可以把这个设置低些，超过这个时间没有发送任何数据，和上面一样的错误提示</p></blockquote><p>reset_timeout_connection</p><blockquote><p>告诉 nginx 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间</p></blockquote><p>send_timeout</p><blockquote><p>响应客户端超时时间，这个超时时间仅限于两个活动之间的时间，如果超过这个时间，客户端没有任何活动，nginx 关闭连接</p></blockquote><p>server_tokens</p><blockquote><p>并不会让 nginx 执行的速度更快，但它可以关闭在错误页面中的 nginx 版本数字，这样对于安全性是有好处的</p></blockquote><p>client_max_body_size</p><blockquote><p>上传文件大小限制</p></blockquote><h6 id="（7）fastcgi-调优"><a class="header-anchor" href="#（7）fastcgi-调优">¶</a>（7）fastcgi 调优</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接上个位置继续写</span></span><br><span class="line">    fastcgi_connect_timeout 600;</span><br><span class="line">    fastcgi_send_timeout 600;</span><br><span class="line">    fastcgi_read_timeout 600;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line">    fastcgi_temp_path /usr/<span class="built_in">local</span>/nginx1.10/nginx_tmp;</span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    fastcgi_cache_path /usr/<span class="built_in">local</span>/nginx1.10/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:128m inactive=1d max_size=10g;</span><br></pre></td></tr></table></figure><blockquote><p>Cache： 写入缓存区</p><p>Buffer： 读取缓存区</p><p>Fastcgi 是静态服务和动态服务的一个接口</p></blockquote><p>fastcgi_connect_timeout 600;</p><blockquote><p>指定连接到后端 FastCGI 的超时时间</p></blockquote><p>fastcgi_send_timeout 600;</p><blockquote><p>向 FastCGI 传送请求的超时时间</p></blockquote><p>fastcgi_read_timeout 600;</p><blockquote><p>指定接收 FastCGI 应答的超时时间</p></blockquote><p>fastcgi_buffer_size 64k;</p><blockquote><p>指定读取 FastCGI 应答第一部分需要用多大的缓冲区，默认的缓冲区大小为 fastcgi_buffers 指令中的每块大小，可以将这个值设置更小</p></blockquote><p>fastcgi_buffers 4 64k;</p><blockquote><p>指定本地需要用多少和多大的缓冲区来缓冲 FastCGI 的应答请求，如果<br>一个 php 脚本所产生的页面大小为 256KB，那么会分配 4 个 64KB 的缓冲区来缓存，如果页面大小大于 256KB，那么大于 256KB 的部分会缓存到 fastcgi_temp_path 指定的路径中，但是这并不是好方法，因为内存中的数据处理速度要快于磁盘。一般这个值应该为站点中 php脚本所产生的页面大小的中间值，如果站点大部分脚本所产生的页面大小为 256KB，那么可以把这个值设置为“8 32K”、“4 64k”等</p></blockquote><p>fastcgi_busy_buffers_size 128k;</p><blockquote><p>建议设置为 fastcgi_buffers 的两倍，繁忙时候的 buffer</p></blockquote><p>fastcgi_temp_file_write_size 128k;</p><blockquote><p>在写入 fastcgi_temp_path 时将用多大的数据块，默认值是 fastcgi_buffers 的两倍，该数值设置小时若负载上来时可能报 502 Bad Gateway</p></blockquote><p>fastcgi_temp_path</p><blockquote><p>缓存临时目录</p></blockquote><p>fastcgi_intercept_errors on;</p><blockquote><p>这个指令指定是否传递 4xx 和 5xx 错误信息到客户端，或者允许nginx 使用 error_page 处理错误信息</p><p>注：静态文件不存在会返回 404 页面，但是 php 页面则返回空白页！！</p></blockquote><p>fastcgi_cache_path /usr/local/nginx1.10/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:128minactive=1d max_size=10g;</p><blockquote><p>fastcgi_cache 缓存目录，可以设置目录层级，比如 1:2 会生成<br>16*256 个子目录，cache_fastcgi 是这个缓存空间的名字，cache 是用多少内存（这样热门的<br>内容 nginx 直接放内存，提高访问速度），inactive 表示默认失效时间，如果缓存数据在失效<br>时间内没有被访问,将被删除，max_size 表示最多用多少硬盘空间</p></blockquote><p>fastcgi_cache cache_fastcgi;</p><blockquote><p>表示开启 FastCGI 缓存并为其指定一个名称。开启缓存非常有用，可以有效降低 CPU 的负载，并且防止 502 的错误放生。cache_fastcgi 为 proxy_cache_path指令创建的缓存区名称</p></blockquote><p>fastcgi_cache_valid 200 302 1h;</p><blockquote><p>用来指定应答代码的缓存时间，实例中的值表示将 200 和302 应答缓存一小时，要和 fastcgi_cache 配合使用</p></blockquote><p>fastcgi_cache_valid 301 1d;</p><blockquote><p>将 301 应答缓存一天</p></blockquote><p>fastcgi_cache_valid any 1m;</p><blockquote><p>将其他应答缓存为 1 分钟</p></blockquote><p>fastcgi_cache_min_uses 1;</p><blockquote><p>该指令用于设置经过多少次请求的相同 URL 将被缓存。fastcgi_cache_key http://$host$request_uri; #该指令用来设置web缓存的Key值,nginx根据Key值 md5 哈希存储.一般根据$host(域名)、$request_uri(请求的路径)等变量组合成proxy_cache_key</p></blockquote><p>fastcgi_pass</p><blockquote><p>指定 FastCGI 服务器监听端口与地址，可以是本机或者其它</p></blockquote><p>总结：</p><blockquote><p>nginx 的缓存功能有：proxy_cache / fastcgi_cache</p><p>proxy_cache的作用是缓存后端服务器的内容，可能是任何内容，包括静态的和动态</p><p>fastcgi_cache的作用是缓存 fastcgi 生成的内容，很多情况是 php 生成的动态的内容</p><p>proxy_cache 缓存减少了 nginx 与后端通信的次数，节省了传输时间和后端宽带</p><p>fastcgi_cache缓存减少了nginx与php的通信的次数，更减轻了php和数据库(mysql)的压力</p></blockquote><h6 id="（8）gzip调优"><a class="header-anchor" href="#（8）gzip调优">¶</a>（8）gzip调优</h6><p>使用 gzip 压缩功能，可能为我们节约带宽，加快传输速度，有更好的体验，也为我们节约<br>成本，所以说这是一个重点</p><p>Nginx 启用压缩功能需要你来 ngx_http_gzip_module 模块，apache 使用的是 mod_deflate一般我们需要压缩的内容有：文本，js，html，css，对于图片，视频，flash 什么的不压缩，同时也要注意，我们使用 gzip 的功能是需要消耗 CPU 的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip  on;</span><br><span class="line">gzip_min_length 2k;</span><br><span class="line">gzip_buffers 4 32k;</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line">gzip_comp_level 6;    gzip_types  text/plain  text/css  text/javascript  application/json  application/javascript application/x-javascript application/xml;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_proxied any;</span><br></pre></td></tr></table></figure><p>gzip on;</p><blockquote><p>开启压缩功能</p></blockquote><p>gzip_min_length 1k;</p><blockquote><p>设置允许压缩的页面最小字节数，页面字节数从 header 头的Content-Length 中获取，默认值是 0，不管页面多大都进行压缩，建议设置成大于 1K，如果小与 1K 可能会越压越大</p></blockquote><p>gzip_buffers 4 32k;</p><blockquote><p>压缩缓冲区大小，表示申请4个单位为32K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储 gzip 压缩结果</p></blockquote><p>gzip_http_version 1.1;</p><blockquote><p>压缩版本，用于设置识别 HTTP 协议版本，默认是 1.1，目前大部分浏览器已经支持 GZIP 解压，使用默认即可</p></blockquote><p>gzip_comp_level 6;</p><blockquote><p>压缩比例，用来指定 GZIP 压缩比，1 压缩比最小，处理速度最快，9 压缩比最大，传输速度快，但是处理慢，也比较消耗 CPU 资源</p></blockquote><p>gzip_types text/css text/xml application/javascript;</p><blockquote><p>用来指定压缩的类型，‘text/html’类型总是会被压缩</p><p>默认值: gzip_types text/html (默认不对 js/css 文件进行压缩)</p><p>压缩类型，匹配 MIME 类型进行压缩</p><p>不能用通配符 text/*</p><p>(无论是否指定)text/html 默认已经压缩</p><p>设置哪压缩种文本文件可参考 conf/mime.types</p></blockquote><p>gzip_vary on;</p><blockquote><p>vary header 支持，改选项可以让前端的缓存服务器缓存经过 GZIP 压缩的页面，例如用 Squid 缓存经过 nginx 压缩的数据</p></blockquote><h6 id="（9）expires-缓存调优"><a class="header-anchor" href="#（9）expires-缓存调优">¶</a>（9）expires 缓存调优</h6><p>缓存，主要针对于图片，css，js 等元素更改机会比较少的情况下使用，特别是图片，占用<br>带宽大，我们完全可以设置图片在浏览器本地缓存 365d，css，js，html 可以缓存个 10 来天，这样用户第一次打开加载慢一点，第二次，就非常快了！缓存的时候，我们需要将需要缓存的拓展名列出来， Expires 缓存配置在 server 字段里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(ico|jpe?g|gif|png|bmp|swf|flv)$ &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">    <span class="comment">#log_not_found off;</span></span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(js|css)$ &#123;</span><br><span class="line">    expires 7d;</span><br><span class="line">    log_not_found off;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：log_not_found off;是否在 error_log 中记录不存在的错误。默认是</p><p>总结：</p><p>expire 功能优点：</p><ul><li>expires 可以降低网站购买的带宽，节约成本</li><li>同时提升用户访问体验</li><li>减轻服务的压力，节约服务器成本，是 web 服务非常重要的功能</li></ul><p>expire 功能缺点：</p><ul><li>被缓存的页面或数据更新了，用户看到的可能还是旧的内容，反而影响用户体验</li></ul><p>解决办法：</p><ul><li>第一个缩短缓存时间，例如：1 天，但不彻底，除非更新频率大于 1 天；</li><li>第二个对缓存的对象改名</li></ul><p>网站不希望被缓存的内容：</p><ul><li>网站流量统计工具</li><li>更新频繁的文件</li></ul><h6 id="（10）防盗链"><a class="header-anchor" href="#（10）防盗链">¶</a>（10）防盗链</h6><p>防止别人直接从你网站引用图片等链接，消耗了你的资源和网络流量，那么我们的解决办法<br>由几种：</p><ul><li>水印，品牌宣传，你的带宽，服务器足够</li><li>防火墙，直接控制，前提是你知道 IP 来源</li><li>防盗链策略 下面的方法是直接给予 404 的错误提示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;</span><br><span class="line">    valid_referers none blocked 192.168.1.20;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="comment">#return 302 http://192.168.1.20/img/nolink.jpg;</span></span><br><span class="line">        <span class="built_in">return</span> 404;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（11）内核参数优化"><a class="header-anchor" href="#（11）内核参数优化">¶</a>（11）内核参数优化</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /etc/sysctl.conf</span></span><br><span class="line">fs.file-max = 999999</span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 10240 87380 12582912</span><br><span class="line">net.ipv4.tcp_wmem = 10240 87380 12582912</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.somaxconn = 40960</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 30</span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class="line">[root@nginx ~]<span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure><p>fs.file-max = 999999</p><blockquote><p>这个参数表示进程（比如一个 worker 进程）可以同时打开的最大句柄数，这个参数直线限制最大并发连接数，需根据实际情况配置</p></blockquote><p>net.ipv4.tcp_max_tw_buckets = 6000</p><blockquote><p>这个参数表示操作系统允许 TIME_WAIT 套接字数量的最大值，如果超过这个数字，TIME_WAIT 套接字将立刻被清除并打印警告信息。该参数默认为 180000，过多的TIME_WAIT 套接字会使 Web 服务器变慢</p><p>注：主动关闭连接的服务端会产生 TIME_WAIT 状态的连接</p></blockquote><p>net.ipv4.ip_local_port_range = 1024 65000</p><blockquote><p>允许系统打开的端口范围</p></blockquote><p>net.ipv4.tcp_tw_recycle = 1</p><blockquote><p>启用 timewait 快速回收</p></blockquote><p>net.ipv4.tcp_tw_reuse = 1</p><blockquote><p>开启重用。允许将 TIME-WAIT sockets 重新用于新的 TCP 连接。这对于服务器来说很有意义，因为服务器上总会有大量 TIME-WAIT 状态的连接</p></blockquote><p>net.ipv4.tcp_keepalive_time = 30</p><blockquote><p>这个参数表示当 keepalive 启用时，TCP 发送 keepalive 消息的频度。默认是 2 小时，若将其设置的小一些，可以更快地清理无效的连接</p></blockquote><p>net.ipv4.tcp_syncookies = 1</p><blockquote><p>开启 SYN Cookies，当出现 SYN 等待队列溢出时，启用 cookies 来处理</p></blockquote><p>net.core.somaxconn = 40960</p><blockquote><p>web 应用中 listen 函数的 backlog 默认会给我们内核参数的net.core.somaxconn 限制到 128，而 nginx 定义的 NGX_LISTEN_BACKLOG 默认为 511，所以有必要调整这个值</p><p>注：</p><p>对于一个 TCP 连接，Server 与 Client 需要通过三次握手来建立网络连接.当三次手成后,我们可以看到端口的状态由 LISTEN 转变为 ESTABLISHED,接着这条链路上就可以开始传送数据了.每一个处于监听(Listen)状态的端口,都有自己的监听队列.监听队列的长度与如somaxconn 参数和使用该端口的程序中 listen()函数有关</p><p>somaxconn参数:定义了系统中每一个端口最大的监听队列的长度,这是个全局的参数,默认值为 128，对于一个经常处理新连接的高负载 web 服务环境来说，默认的 128 太小了。大多数环境这个值建议增加到 1024 或者更多。大的侦听队列对防止拒绝服务 DoS 攻击也会有所帮助</p></blockquote><p>net.core.netdev_max_backlog = 262144</p><blockquote><p>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</p></blockquote><p>net.ipv4.tcp_max_syn_backlog = 262144</p><blockquote><p>这个参数标示 TCP 三次握手建立阶段接受 SYN 请求队列的最大长度，默认为 1024，将其设置得大一些可以使出现 Nginx 繁忙来不及 accept 新连接的情况时，Linux 不至于丢失客户端发起的连接请求</p></blockquote><p>net.ipv4.tcp_rmem = 10240 87380 12582912</p><blockquote><p>这个参数定义了 TCP 接受缓存（用于 TCP 接受滑动窗口）的最小值、默认值、最大值</p></blockquote><p>net.ipv4.tcp_wmem = 10240 87380 12582912</p><blockquote><p>这个参数定义了 TCP 发送缓存（用于 TCP 发送滑动窗口）的最小值、默认值、最大值</p></blockquote><p>net.core.rmem_default = 6291456</p><blockquote><p>这个参数表示内核套接字接受缓存区默认的大小</p></blockquote><p>net.core.wmem_default = 6291456</p><blockquote><p>这个参数表示内核套接字发送缓存区默认的大小</p></blockquote><p>net.core.rmem_max = 12582912</p><blockquote><p>这个参数表示内核套接字接受缓存区的最大大小</p></blockquote><p>net.core.wmem_max = 12582912</p><blockquote><p>这个参数表示内核套接字发送缓存区的最大大小</p></blockquote><p>net.ipv4.tcp_syncookies = 1</p><blockquote><p>该参数与性能无关，用于解决 TCP 的 SYN 攻击</p></blockquote><h6 id="（12）关于系统连接数的优化："><a class="header-anchor" href="#（12）关于系统连接数的优化：">¶</a>（12）关于系统连接数的优化：</h6><p>linux 默认值 open files 为 1024】</p><p>说明 server 只允许同时打开 1024 个文件】</p><p>使用 ulimit -a 可以查看当前系统的所有限制值，使用 ulimit -n 可以查看当前的最大打开文<br>件数</p><p>新装的 linux 默认只有 1024 ，当作负载较大的服务器时，很容易遇到 error: too many openfiles。因此，需要将其改大</p><p>在/etc/security/limits.conf 最后增加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line">* soft noproc 65535</span><br><span class="line">* hard noproc 65535</span><br></pre></td></tr></table></figure><h4 id="二、部署LNMP"><a class="header-anchor" href="#二、部署LNMP">¶</a>二、部署LNMP</h4><p><a href="https://pan.baidu.com/s/1b6dvnukVS0BBnP4Y-aeBrg" target="_blank" rel="noopener">软件连接</a></p><p>提取码：vzsu</p><h5 id="1、安装php"><a class="header-anchor" href="#1、安装php">¶</a>1、安装php</h5><h6 id="（1）解决依赖关系"><a class="header-anchor" href="#（1）解决依赖关系">¶</a>（1）解决依赖关系</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install libxml2-devel libcurl-devel openssl-devel bzip2-devel</span></span><br></pre></td></tr></table></figure><p>安装libmcypt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx libmcrypt-2.5.7]<span class="comment"># ./configure --prefix=/usr/local/libmcrypt &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h6 id="（2）编译安装php"><a class="header-anchor" href="#（2）编译安装php">¶</a>（2）编译安装php</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tar zxf php-5.6.27.tar.gz </span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd php-5.6.27/</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># ./configure --prefix=/usr/local/php5.6  --with-mysql=mysqlnd \</span></span><br><span class="line">&gt;  --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-openssl --<span class="built_in">enable</span>-fpm \</span><br><span class="line">&gt;  --<span class="built_in">enable</span>-sockets --<span class="built_in">enable</span>-sysvshm --<span class="built_in">enable</span>-mbstring --with-freetype-dir --with-jpeg-dir \</span><br><span class="line">&gt;  --with-png-dir --with-zlib --with-libxml-dir=/usr --<span class="built_in">enable</span>-xml --with-mhash \</span><br><span class="line">&gt;  --with-mcrypt=/usr/<span class="built_in">local</span>/libmcrypt --with-config-file-path=/etc \</span><br><span class="line">&gt;  --with-config-file-scan-dir=/etc/php.d --with-bz2 --<span class="built_in">enable</span>-maintainer-zts</span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h6 id="（3）提供php配置文件"><a class="header-anchor" href="#（3）提供php配置文件">¶</a>（3）提供php配置文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx php-5.6.27]<span class="comment"># cp php.ini-production /etc/php.ini</span></span><br></pre></td></tr></table></figure><h6 id="（4）为-php-fpm-提供脚本"><a class="header-anchor" href="#（4）为-php-fpm-提供脚本">¶</a>（4）为 php-fpm 提供脚本</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx php-5.6.27]<span class="comment"># cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># chmod +x /etc/init.d/php-fpm </span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># chkconfig --add php-fpm</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># chkconfig php-fpm on</span></span><br></pre></td></tr></table></figure><h6 id="（5）提供-php-fpm-配置文件并编辑"><a class="header-anchor" href="#（5）提供-php-fpm-配置文件并编辑">¶</a>（5）提供 php-fpm 配置文件并编辑</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx php-5.6.27]<span class="comment"># cp /usr/local/php5.6/etc/php-fpm.conf.default /usr/local/php5.6/etc/php-fpm.conf</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># vim /usr/local/php5.6/etc/php-fpm.conf</span></span><br><span class="line"><span class="comment"># 修改内容如下</span></span><br><span class="line">pid = run/php-fpm.pid</span><br><span class="line">listen = 0.0.0.0:9000</span><br><span class="line">pm.max_children = 50</span><br><span class="line">pm.start_servers = 5</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 35</span><br></pre></td></tr></table></figure><p>启动php-fpm服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx php-5.6.27]<span class="comment"># service php-fpm start</span></span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br><span class="line">[root@nginx php-5.6.27]<span class="comment"># netstat -anpt | grep php-fpm</span></span><br><span class="line">tcp        0      0 0.0.0.0:9000            0.0.0.0:*               LISTEN      125567/php-fpm: mas</span><br><span class="line">[root@nginx ~]<span class="comment"># firewall-cmd --permanent --add-port=9000/tcp</span></span><br><span class="line">success</span><br><span class="line">[root@nginx ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">Success</span><br></pre></td></tr></table></figure><p>在 nginx.conf 文件的 server 中添加下面内容支持 php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/local/nginx1.10/conf/nginx.conf</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location ~ .*\.(php|php5)?$ &#123;</span><br><span class="line">            root html;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">            fastcgi_cache cache_fastcgi;</span><br><span class="line">            fastcgi_cache_valid 200 302 1h;</span><br><span class="line">            fastcgi_cache_valid 301 1d;</span><br><span class="line">            fastcgi_cache_valid any 1m;</span><br><span class="line">            fastcgi_cache_min_uses 1;</span><br><span class="line">            fastcgi_cache_use_stale error timeout invalid_header http_500;</span><br><span class="line">            fastcgi_cache_key http://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>重载 nginx 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>下面是 nginx.conf 的一个完整配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># cat /usr/local/nginx1.10/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">user  nginx nginx;</span><br><span class="line">worker_processes  2;</span><br><span class="line">worker_cpu_affinity 01 10;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">    multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line">    open_file_cache max=102400 inactive=20s;</span><br><span class="line">    open_file_cache_valid 30s;</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    client_header_timeout 15;</span><br><span class="line">    client_body_timeout 15;</span><br><span class="line">    reset_timedout_connection on;</span><br><span class="line">    send_timeout 15;</span><br><span class="line">    server_tokens off;</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    fastcgi_connect_timeout 600;</span><br><span class="line">    fastcgi_send_timeout 600;</span><br><span class="line">    fastcgi_read_timeout 600;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line">    fastcgi_temp_path /usr/<span class="built_in">local</span>/nginx1.10/nginx_tmp;</span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    fastcgi_cache_path /usr/<span class="built_in">local</span>/nginx1.10/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:128m inactive=1d max_size=10g;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_min_length 2k;</span><br><span class="line">    gzip_buffers 4 32k;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_types  text/plain  text/css  text/javascript  application/json  application/javascript application/x-javascript application/xml;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;</span><br><span class="line">    valid_referers none blocked 192.168.1.20;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line"><span class="comment">#return 302 http://192.168.1.20/img/nolink.jpg;</span></span><br><span class="line"><span class="built_in">return</span> 404;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">location ~* \.(ico|jpe?g|gif|png|bmp|swf|flv)$ &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">    <span class="comment">#log_not_found off;</span></span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(js|css)$ &#123;</span><br><span class="line">    expires 7d;</span><br><span class="line">    log_not_found off;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line">location ~ .*\.(php|php5)?$ &#123;</span><br><span class="line">    root html;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">     fastcgi_index index.php;</span><br><span class="line">    include fastcgi.conf;</span><br><span class="line">    fastcgi_cache cache_fastcgi;</span><br><span class="line">    fastcgi_cache_valid 200 302 1h;</span><br><span class="line">    fastcgi_cache_valid 301 1d;</span><br><span class="line">    fastcgi_cache_valid any 1m;</span><br><span class="line">    fastcgi_cache_min_uses 1;</span><br><span class="line">    fastcgi_cache_use_stale error timeout invalid_header http_500;</span><br><span class="line">    fastcgi_cache_key http://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、验证、压力测试"><a class="header-anchor" href="#三、验证、压力测试">¶</a>三、验证、压力测试</h4><h5 id="1、验证防盗链"><a class="header-anchor" href="#1、验证防盗链">¶</a>1、验证防盗链</h5><p>使用<code>httpd</code>做为一个测试站点，192.168.1.30，在测试页上做一个超链接，链接 nginx站点的一张图片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># vim /var/www/html/index.html</span></span><br><span class="line">&lt;a href=<span class="string">"http://192.168.1.20/11.gif"</span>&gt;lianjie&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>Nginx 站点的网页目录结如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tree /usr/local/nginx1.10/html/</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx1.10/html/</span><br><span class="line">├── 11.gif</span><br><span class="line">├── 50x.html</span><br><span class="line">├── img</span><br><span class="line">│   └── nolink.jpg</span><br><span class="line">├── index.html</span><br><span class="line">└── test.php</span><br></pre></td></tr></table></figure><p>在客户端浏览器中输入192.168.1.30<br><img data-src="https://img-blog.csdnimg.cn/20200613112914586.png" alt></p><p>点击页面链接<br><img data-src="https://img-blog.csdnimg.cn/20200613112942881.png" alt></p><p>将return的404关闭，指定跳转文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">return</span> 302 http://192.168.1.20/img/nolink.jpg;</span><br><span class="line">                <span class="comment">#return 404;</span></span><br></pre></td></tr></table></figure><p>11.gif图片<br><img data-src="https://img-blog.csdnimg.cn/20200613113001613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>nolink.jpg图片<br><img data-src="https://img-blog.csdnimg.cn/20200613113033135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>根据防盗链的设置，会跳转到nolink.jpg图片<br><img data-src="https://img-blog.csdnimg.cn/20200613113056145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt>配置已经生效</p><h5 id="2、验证gzip功能"><a class="header-anchor" href="#2、验证gzip功能">¶</a>2、验证gzip功能</h5><p><img data-src="https://img-blog.csdnimg.cn/20200613113159446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>用户访问test.php文件，在上图中content-encoding:gzip表明响应给用户的数据是压缩传输</p><h5 id="3、压力测试"><a class="header-anchor" href="#3、压力测试">¶</a>3、压力测试</h5><p>安装 httpd-tools 软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install httpd-tools</span></span><br><span class="line">[root@nginx ~]<span class="comment"># ab -c 500 -n 50000 http://192.168.1.20/index.html</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.20 (be patient)</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 15000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 25000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 35000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 45000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Finished 50000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        IIS</span><br><span class="line">Server Hostname:        192.168.1.20</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.html</span><br><span class="line">Document Length:        612 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      500</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   2.544 seconds</span><br><span class="line">Complete requests:      50000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      41800000 bytes</span><br><span class="line">HTML transferred:       30600000 bytes</span><br><span class="line">Requests per second:    19657.71 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       25.435 [ms] (mean)</span><br><span class="line">Time per request:       0.051 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          16048.68 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   10   3.9     10      20</span><br><span class="line">Processing:     9   16   4.0     15      29</span><br><span class="line">Waiting:        0    8   1.0      8      12</span><br><span class="line">Total:         15   25   1.5     25      36</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     25</span><br><span class="line">  66%     26</span><br><span class="line">  75%     26</span><br><span class="line">  80%     26</span><br><span class="line">  90%     27</span><br><span class="line">  95%     28</span><br><span class="line">  98%     29</span><br><span class="line">  99%     30</span><br><span class="line"> 100%     36 (longest request)</span><br></pre></td></tr></table></figure><p>第二次压力测试，比较两次的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ab -c 1000 -n 100000 http://192.168.1.20/index.html</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.20 (be patient)</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Completed 60000 requests</span><br><span class="line">Completed 70000 requests</span><br><span class="line">Completed 80000 requests</span><br><span class="line">Completed 90000 requests</span><br><span class="line">Completed 100000 requests</span><br><span class="line">Finished 100000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        IIS</span><br><span class="line">Server Hostname:        192.168.1.20</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.html</span><br><span class="line">Document Length:        612 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   5.633 seconds</span><br><span class="line">Complete requests:      100000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      83600000 bytes</span><br><span class="line">HTML transferred:       61200000 bytes</span><br><span class="line">Requests per second:    17753.07 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       56.328 [ms] (mean)</span><br><span class="line">Time per request:       0.056 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          14493.71 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   17   8.0     17      44</span><br><span class="line">Processing:     9   39   7.9     39      69</span><br><span class="line">Waiting:        0   24   5.4     24      48</span><br><span class="line">Total:         28   56   5.9     56     101</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     56</span><br><span class="line">  66%     58</span><br><span class="line">  75%     59</span><br><span class="line">  80%     60</span><br><span class="line">  90%     62</span><br><span class="line">  95%     64</span><br><span class="line">  98%     68</span><br><span class="line">  99%     75</span><br><span class="line"> 100%    101 (longest request)</span><br></pre></td></tr></table></figure><blockquote><p>第一次：Requests per second:    19657.71 [#/sec] (mean)</p><p>第二次：Requests per second:    17753.07 [#/sec] (mean)</p></blockquote><h5 id="5、xcache加速php"><a class="header-anchor" href="#5、xcache加速php">¶</a>5、xcache加速php</h5><h6 id="（1）安装-xcache"><a class="header-anchor" href="#（1）安装-xcache">¶</a>（1）安装 xcache</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># wget http://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz</span></span><br><span class="line">[root@nginx ~]<span class="comment"># tar zxf xcache-3.2.0.tar.gz </span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd xcache-3.2.0/</span></span><br><span class="line"><span class="comment"># 用 phpize 生成 configure 配置文件</span></span><br><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># /usr/local/php5.6/bin/phpize</span></span><br><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># ./configure  --enable-xcache  --enable-xcache-coverager --enable-xcache-optimizer --with-php-config=/usr/local/php5.6/bin/php-config</span></span><br><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>安装完成之后，出现下面的界面，记住以下路径，后面会用到</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing shared extensions:     /usr/local/php5.6/lib/php/extensions/no-debug-zts-20131226/</span><br></pre></td></tr></table></figure><h6 id="（2）创建-xcache-缓存文件"><a class="header-anchor" href="#（2）创建-xcache-缓存文件">¶</a>（2）创建 xcache 缓存文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># touch /tmp/xcache</span></span><br><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># chmod 777 /tmp/xcache</span></span><br></pre></td></tr></table></figure><h6 id="（3）拷贝xcache后台管理程序到网站根目录"><a class="header-anchor" href="#（3）拷贝xcache后台管理程序到网站根目录">¶</a>（3）拷贝xcache后台管理程序到网站根目录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx xcache-3.2.0]<span class="comment"># cp -r htdocs/ /usr/local/nginx1.10/html/xcache</span></span><br></pre></td></tr></table></figure><h6 id="（4）配置-php-支持-xcache"><a class="header-anchor" href="#（4）配置-php-支持-xcache">¶</a>（4）配置 php  支持 xcache</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /etc/php.ini</span></span><br><span class="line"><span class="comment"># 最后一样添加</span></span><br><span class="line">[xcache-common]</span><br><span class="line">extension = /usr/<span class="built_in">local</span>/php5.6/lib/php/extensions/no-debug-zts-20131226/xcache.so</span><br><span class="line"><span class="comment"># 注意目录</span></span><br><span class="line">[xcache.admin]</span><br><span class="line">xcache.admin.enable_auth = Off</span><br><span class="line">[xcache]</span><br><span class="line">xcache.shm_scheme =<span class="string">"mmap"</span></span><br><span class="line">xcache.size=60M</span><br><span class="line">xcache.count =1</span><br><span class="line">xcache.slots =8K</span><br><span class="line">xcache.ttl=0</span><br><span class="line">xcache.gc_interval =0</span><br><span class="line">xcache.var_size=64M</span><br><span class="line">xcache.var_count =1</span><br><span class="line">xcache.var_slots =8K</span><br><span class="line">xcache.var_ttl=0</span><br><span class="line">xcache.var_maxttl=0</span><br><span class="line">xcache.var_gc_interval =300</span><br><span class="line">xcache.test =Off</span><br><span class="line">xcache.readonly_protection = Off</span><br><span class="line">xcache.mmap_path =<span class="string">"/tmp/xcache"</span></span><br><span class="line">xcache.coredump_directory =<span class="string">""</span></span><br><span class="line">xcache.cacher =On</span><br><span class="line">xcache.stat=On</span><br><span class="line">xcache.optimizer =Off</span><br><span class="line">[xcache.coverager]</span><br><span class="line">xcache.coverager =On</span><br><span class="line">xcache.coveragedump_directory =<span class="string">""</span></span><br></pre></td></tr></table></figure><h5 id="6、测试"><a class="header-anchor" href="#6、测试">¶</a>6、测试</h5><p>重启php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># service php-fpm restart</span></span><br><span class="line">Gracefully shutting down php-fpm . <span class="keyword">done</span></span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>浏览器打开网站根目录下面的 xcache<br><img data-src="https://img-blog.csdnimg.cn/2020061311332680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>测试对 php 动态页面的压力测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ab -c 1000 -n 100000 http://192.168.1.20/test.php</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.20 (be patient)</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Completed 60000 requests</span><br><span class="line">Completed 70000 requests</span><br><span class="line">Completed 80000 requests</span><br><span class="line">Completed 90000 requests</span><br><span class="line">Completed 100000 requests</span><br><span class="line">Finished 100000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        IIS</span><br><span class="line">Server Hostname:        192.168.1.20</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /test.php</span><br><span class="line">Document Length:        84586 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   9.496 seconds</span><br><span class="line">Complete requests:      100000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      8476300000 bytes</span><br><span class="line">HTML transferred:       8458600000 bytes</span><br><span class="line">Requests per second:    10531.17 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       94.956 [ms] (mean)</span><br><span class="line">Time per request:       0.095 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          871732.00 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   14   7.4     13      58</span><br><span class="line">Processing:    13   81  12.3     81     146</span><br><span class="line">Waiting:        2   26   9.2     25      79</span><br><span class="line">Total:         35   95  11.7     93     165</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     93</span><br><span class="line">  66%     97</span><br><span class="line">  75%    100</span><br><span class="line">  80%    103</span><br><span class="line">  90%    110</span><br><span class="line">  95%    114</span><br><span class="line">  98%    124</span><br><span class="line">  99%    130</span><br><span class="line"> 100%    165 (longest request)</span><br><span class="line"> Requests per second:    10531.17 [<span class="comment">#/sec] (mean)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理缓存服务器构建</title>
    <link href="https://pdxblog.top/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%84%E5%BB%BA.html"/>
    <id>https://pdxblog.top/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%84%E5%BB%BA.html</id>
    <published>2020-06-10T16:00:00.000Z</published>
    <updated>2020-06-11T05:32:37.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx反向代理缓存服务器构建"><a class="header-anchor" href="#Nginx反向代理缓存服务器构建">¶</a>Nginx反向代理缓存服务器构建</h3><p>代理服务可简单的分为正向代理和反向代理:</p><p>正向代理:</p><p>用于代理内部网络对 Internet 的连接请求(如 VPN/NAT),客户端指定代理服务器,并将本来要直接发送给目标Web服务器的HTTP请求先发送到代理服务器上, 然后由代理服务 器去访问 Web 服务器, 并将 Web 服务器的 Response 回传给客户端</p><p>反向代理:</p><p>与正向代理相反,如果局域网向Internet提供资源,并让Internet上的其他用户可以 访问局域网内资源, 也可以设置一个代理服务器, 它提供的服务就是反向代理. 反向代理服 务器接受来自 Internet 的连接,然后将请求转发给内部网络上的服务器,并将 Response 回传给 Internet 上请求连接的客户端</p><h4 id="一、nginx-反向代理：Web-服务器的调度器"><a class="header-anchor" href="#一、nginx-反向代理：Web-服务器的调度器">¶</a>一、nginx 反向代理：Web 服务器的调度器</h4><h5 id="1、反向代理方式"><a class="header-anchor" href="#1、反向代理方式">¶</a>1、反向代理方式</h5><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受客户端的连接请求，然后将请 求转发给网络上的 web 服务器（可能是 apache、nginx、tomcat、iis 等），并将从 web 服务 器上得到的结果返回给请求连接的客户端，此时代理服务器对外就表现为一个服务器<br><img data-src="https://img-blog.csdnimg.cn/20200611131809239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>从上图可以看出：反向代理服务器代理网站 Web 服务器接收 Http 请求，对请求进行转发。 而且nginx作为反向代理服务器可以根据用户请求的内容把请求转发给后端不同的web服务 器，例如静动分离，再例如在 nginx 上创建多个虚拟主机，这样就成功的做到了在浏览器中 输入不同域名（url）的时候访问后端的不同 web 服务器或 web 群集</p><h5 id="2、反向代理的作用"><a class="header-anchor" href="#2、反向代理的作用">¶</a>2、反向代理的作用</h5><h6 id="（1）保护网站安全："><a class="header-anchor" href="#（1）保护网站安全：">¶</a>（1）保护网站安全：</h6><p>任何来自 Internet 的请求都必须先经过代理服务器<br><img data-src="https://img-blog.csdnimg.cn/20200611131834340.png" alt></p><h6 id="（2）通过配置缓存功能加速-Web-请求："><a class="header-anchor" href="#（2）通过配置缓存功能加速-Web-请求：">¶</a>（2）通过配置缓存功能加速 Web 请求：</h6><p>可以缓存真实 Web 服务器上的某些静态资源，减轻真 实 Web 服务器的负载压力<br><img data-src="https://img-blog.csdnimg.cn/20200611131847319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h6 id="（3）实现负载均衡："><a class="header-anchor" href="#（3）实现负载均衡：">¶</a>（3）实现负载均衡：</h6><p>充当负载均衡服务器均衡地分发请求，平衡集群中各个服务器的负载压力<br><img data-src="https://img-blog.csdnimg.cn/20200611131911282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="二、什么是-nginx："><a class="header-anchor" href="#二、什么是-nginx：">¶</a>二、什么是 nginx：</h4><h5 id="1、nginx简介"><a class="header-anchor" href="#1、nginx简介">¶</a>1、nginx简介</h5><blockquote><p>Nginx 是一款轻量级的网页服务器、反向代理器以及电子邮件代理服务器。因它的稳定性、 丰富的功能集、示例配置文件和低系统资源的消耗而闻名。Nginx（发音同 engine x），它是 由俄罗斯程序员 Igor Sysoev 所开发的。起初是供俄国大型的门户网站及搜索引擎 Rambler （俄语：Рамблер）使用。此软件 BSD-like 协议下发行，可以在 UNIX、GNU/Linux、 BSD、Mac OS X、Solaris，以及 Microsoft Windows 等操作系统中运行</p></blockquote><h5 id="2、Nginx-的应用现状："><a class="header-anchor" href="#2、Nginx-的应用现状：">¶</a>2、Nginx 的应用现状：</h5><blockquote><p>Nginx 已经在俄罗斯最大的门户网站── Rambler Media（<a href="http://www.rambler.ru" target="_blank" rel="noopener">www.rambler.ru</a>）上运行，同时俄 罗斯超过 20%的虚拟主机平台采用 Nginx 作为反向代理服务器</p><p>在国内，已经有 淘宝、新浪博客、新浪播客、网易新闻、六间房、<a href="http://56.com" target="_blank" rel="noopener">56.com</a>、Discuz!、水木 社区、豆瓣、YUPOO、海内、迅雷在线 等多家网站使用 Nginx 作为 Web 服务器或反向代 理服务器</p></blockquote><h5 id="3、Nginx-的核心特点："><a class="header-anchor" href="#3、Nginx-的核心特点：">¶</a>3、Nginx 的核心特点：</h5><h6 id="（1）跨平台："><a class="header-anchor" href="#（1）跨平台：">¶</a>（1）跨平台：</h6><p>Nginx 可以在大多数 OS 编译运行，而且也有 Windows 的版本</p><h6 id="（2）配置异常简单："><a class="header-anchor" href="#（2）配置异常简单：">¶</a>（2）配置异常简单：</h6><p>非常容易上手</p><h6 id="（3）非阻塞、高并发连接："><a class="header-anchor" href="#（3）非阻塞、高并发连接：">¶</a>（3）非阻塞、高并发连接：</h6><p>官方测试能够支撑 5 万并发连接，在实际生产环境中跑到 2～3 万并发连接数。（这得益于 Nginx 使用了最新的 epoll 模型）</p><p>注：</p><blockquote><p>对于一个 Web 服务器来说，首先看一个请求的基本过程：建立连接—接收数据—发送数据， 在系统底层看来 ：上述过程（建立连接—接收数据—发送数据）在系统底层就是读写事件。</p><p>如果采用阻塞调用的方式，当读写事件没有准备好时，那么就只能等待，当前线程被挂起，等事件准备好了，才能进行读写事件。</p><p>如果采用非阻塞调用的方式：事件马上返回，告诉你事件还没准备好呢，过会再来吧。过一 会，再来检查一下事件，直到事件准备好了为止，在这期间，你就可以先去做其它事情，然 后再来看看事件好了没。虽然不阻塞了，但你得不时地过来检查一下事件的状态，你可以做 更多的事情了，但带来的开销也是不小的。非阻塞调用指在不能立刻得到结果之前，该调用 不会阻塞当前线程</p></blockquote><h6 id="（4）事件驱动："><a class="header-anchor" href="#（4）事件驱动：">¶</a>（4）事件驱动：</h6><p>通信机制采用 epoll 模型，支持更大的并发连接</p><p>阻塞通过不断检查事件的状态来判断是否进行读写操作，这样带来的开销很大，因此就有 了异步非阻塞的事件处理机制。这 种机制让你可以同时监控多个事件，调用他们是非阻塞的， 但可以设置超时时间，在超时时间之内，如果有事件准备好了，就返回。这种机制解决了上 面阻塞调用与非阻塞调用的两个问题。</p><p>以 epoll 模型为例：</p><blockquote><p>当事件没有准备好时，就放入 epoll(队列)里面。如果有事件准备好了， 那么就去处理；当事件没有准备好时，才在 epoll 里面等着。这样，我们就可以并发处理大 量的并发了，当然，这里的并发请求，是指未处理完的请求。线程只有一个，所以同时能处 理的请求当然只有一个了，只是在请求之间进行不断地切换而已，切换也是因为异步事件未 准备好，而主动让出的。这里的切换是没有任何代价，你可以理解为循环处理多个准备好的 事件。</p><p>多线程方式相比，这种事件处理方式是有很大的优势的，不需要创建线程，每个请求占用的 内存也很少，没有上下文切换， 事件处理非常的轻量级，并发数再多也不会导致无谓的资 源浪费（上下文切换）。对于 apache 服务器，每个请求会独占一个工作线程，当并发数上到 几千时，就同时有几千的线程在处理请求了。这对操作系统来说，是个不小的挑战：因为线 程带来的内存占用非常大，线程的上下文切换带来的 cpu 开销很大，自然性能就上不 去， 从而导致在高并发场景下性能下降严重</p><p>总结：通过异步非阻塞的事件处理机制，Nginx 实现由进程循环处理多个准备好的事件，从 而实现高并发和轻量级</p></blockquote><h6 id="（5）Master-Worker-结构："><a class="header-anchor" href="#（5）Master-Worker-结构：">¶</a>（5）Master/Worker 结构：</h6><p>一个 master 进程，生成一个或多个 worker 进程<br><img data-src="https://img-blog.csdnimg.cn/2020061113202580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>注：</p><blockquote><p>Master-Worker 设计模式主要包含两个主要组件 Master 和 Worker，Master 维护着 Worker 队列，将请求下发到多个 Worker 并行执行，Worker 主要进行实际逻辑计算，并将结果返回 给 Maste</p><p>nginx 采用这种进程模型有什么好处？采用独立的进程，可以让互相之间不会影响，一个进 程退出后，其它进程还在工作，服务不会中断，Master 进程则很快重新启动新的 Worker进程。当然，Worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 Worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险</p></blockquote><h6 id="（6）内存消耗小："><a class="header-anchor" href="#（6）内存消耗小：">¶</a>（6）内存消耗小：</h6><p>处理大并发的请求内存消耗非常小。在 3 万并发连接下，开启的 10 个 Nginx 进程才消耗 150M 内存（15M*10=150M）</p><h6 id="（7）内置的健康检查功能："><a class="header-anchor" href="#（7）内置的健康检查功能：">¶</a>（7）内置的健康检查功能：</h6><p>如果 Nginx 代理的后端的某台 Web 服务器宕机了，不会影响 前端访问</p><h6 id="（8）节省带宽："><a class="header-anchor" href="#（8）节省带宽：">¶</a>（8）节省带宽：</h6><p>支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头</p><h6 id="（9）稳定性高："><a class="header-anchor" href="#（9）稳定性高：">¶</a>（9）稳定性高：</h6><p>用于反向代理，宕机的概率微乎其微</p><h4 id="三、Nginx-apache构筑-Web-服务器集群的负载均衡"><a class="header-anchor" href="#三、Nginx-apache构筑-Web-服务器集群的负载均衡">¶</a>三、Nginx+apache构筑 Web 服务器集群的负载均衡</h4><p>nginx 配置反向代理</p><p>配置 nginx 作为反向代理和负载均衡，同时利用其缓存功能，将静态页面在 nginx 缓存，以达到降低后端服务器连接数的目的并检查后端 web 服务器的健康状况<img data-src="https://img-blog.csdnimg.cn/20200611132221666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h5 id="1、安装nginx"><a class="header-anchor" href="#1、安装nginx">¶</a>1、安装nginx</h5><p>环境：</p><table><thead><tr><th><strong>OS</strong></th><th>centos7.5</th></tr></thead><tbody><tr><td><strong>nginx</strong></td><td><strong>192.168.1.20</strong></td></tr><tr><td><strong>apache1</strong></td><td><strong>192.168.1.30</strong></td></tr><tr><td><strong>apache2</strong></td><td><strong>192.168.1.40</strong></td></tr></tbody></table><h6 id="（1）安装-zlib-devel、pcre-devel-等依赖包"><a class="header-anchor" href="#（1）安装-zlib-devel、pcre-devel-等依赖包">¶</a>（1）安装 zlib-devel、pcre-devel 等依赖包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install gcc gcc-c++ make libtool zlib zlib-devel pcre pcre-devel opensll openssl-devel</span></span><br></pre></td></tr></table></figure><p>注：</p><blockquote><p>结合 proxy 和 upstream 模块实现后端 web 负载均衡</p><p>使用 proxy 模块实现静态文件缓存</p><p>结合 nginx 默认自带的 ngx_http_proxy_module 模块和ngx_http_upstream_module 模块实现后端服务器的健康检查，也可以使用第三方模块 nginx_upstream_check_module</p><p>使用 nginx-sticky-module 扩展模块实现 Cookie 会话黏贴（保持会话）</p><p>使用 ngx_cache_purge 实现更强大的缓存清除功能</p><p>上面提到的 2 个模块都属于第三方扩展模块，需要提前下好源码，然后编译时通过–add-moudle=src_path 一起安装</p></blockquote><h6 id="（2）安装nginx"><a class="header-anchor" href="#（2）安装nginx">¶</a>（2）安装nginx</h6><p>添加nginx组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># groupadd nginx</span></span><br></pre></td></tr></table></figure><p>创建nginx的运行账户nginx，加入到nginx组中，不允许nginx直接登录系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># useradd -g nginx nginx -s /sbin/nologin</span></span><br></pre></td></tr></table></figure><p>所需要的软件包</p><blockquote><p>nginx-1.14.0.tar.gz</p><p>ngx_cache_purge-2.3.tar.gz</p><p>nginx-sticky-module.zip</p></blockquote><p><a href="https://pan.baidu.com/s/1C4Wk8a2WCVjUTbnPmfxq_w" target="_blank" rel="noopener">软件链接</a></p><p>提取码：tfax</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tar zxf nginx-1.14.0.tar.gz -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># tar zxf ngx_cache_purge-2.3.tar.gz -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># unzip nginx-sticky-module.zip -d /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd /usr/src/nginx-1.14.0/</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># ./configure --prefix=/usr/local/nginx1.14 \</span></span><br><span class="line">&gt;  --user=nginx --group=nginx --with-http_stub_status_module \</span><br><span class="line">&gt;  --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module \</span><br><span class="line">&gt;  --http-client-body-temp-path=/var/tmp/nginx/client \</span><br><span class="line">&gt;  --http-proxy-temp-path=/var/tmp/nginx/proxy \</span><br><span class="line">&gt;  --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --with-http_flv_module \</span><br><span class="line">&gt;  --add-module=/usr/src/nginx-sticky-module \</span><br><span class="line">&gt;  --add-module=/usr/src/ngx_cache_purge-2.3</span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>注：nginx 的所有模块必须在编译的时候添加，不能再运行的时候动态加载</p><p>相关参数解释：</p><p>–with-http-stub-status-module：</p><blockquote><p>通过网页监控nginx的状态</p></blockquote><p>–with-http-realip-module：</p><blockquote><p>获取客户端的真实IP地址</p></blockquote><p>–with-http-ssl module：</p><blockquote><p>开启nginx的加密传输功能</p></blockquote><p>–with-httpgzipstaticmodule：</p><blockquote><p>开启压缩功能</p></blockquote><p>–http-client-body-temp-path=/var/tmp/nginx/client：</p><blockquote><p>客户端访问数据临吁存放路径</p></blockquote><p>–with-pcre：</p><blockquote><p>支持正则匹配表达式</p></blockquote><p>–add-module=/usr/src/ngx_cache_purge-2.3：</p><blockquote><p>添加nginx的第三方模块语法为—add-module=第三方模块路径</p></blockquote><p>–with-http flv module：</p><blockquote><p>支持flv视频流</p></blockquote><h5 id="2、优化-nginx-程序的执行路径"><a class="header-anchor" href="#2、优化-nginx-程序的执行路径">¶</a>2、优化 nginx 程序的执行路径</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># ln -s /usr/local/nginx1.14/sbin/nginx /usr/local/sbin/</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx1.14/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: [emerg] mkdir() <span class="string">"/var/tmp/nginx/client"</span> failed (2: No such file or directory)</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx1.14/conf/nginx.conf <span class="built_in">test</span> failed</span><br></pre></td></tr></table></figure><p>这里会报错，根据提示创建相应的目录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># mkdir -p /var/tmp/nginx/client</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># chown -R nginx:nginx /var/tmp/nginx/</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx1.14/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx1.14/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><h5 id="3、编写nginx服务脚本"><a class="header-anchor" href="#3、编写nginx服务脚本">¶</a>3、编写nginx服务脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># cat /etc/init.d/nginx </span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># chkconfig: 2345 99 20 </span></span><br><span class="line"><span class="comment"># description: Nginx Service Control Script </span></span><br><span class="line">PROG=<span class="string">"/usr/local/nginx1.14/sbin/nginx"</span></span><br><span class="line">PIDF=<span class="string">"/usr/local/nginx-1.14/logs/nginx.pid"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">   netstat -anplt |grep <span class="string">":80"</span> &amp;&gt; /dev/null &amp;&amp; pgrep <span class="string">"nginx"</span> &amp;&gt; /dev/null</span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"Nginx service already running."</span> </span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     <span class="variable">$PROG</span> -t &amp;&gt; /dev/null</span><br><span class="line">     <span class="keyword">if</span> [ $? -eq 0 ] ; <span class="keyword">then</span></span><br><span class="line">       <span class="variable">$PROG</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"Nginx service start success."</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     <span class="variable">$PROG</span> -t</span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   ;;</span><br><span class="line">  stop)</span><br><span class="line">   netstat -anplt |grep <span class="string">":80"</span> &amp;&gt; /dev/null &amp;&amp; pgrep <span class="string">"nginx"</span> &amp;&gt; /dev/nul</span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">kill</span> -s QUIT $(cat <span class="variable">$PIDF</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Nginx service stop success."</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Nginx service already stop"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   ;;</span><br><span class="line">  restart)</span><br><span class="line">    <span class="variable">$0</span> stop</span><br><span class="line">    <span class="variable">$0</span> start</span><br><span class="line">    ;;</span><br><span class="line">  status)</span><br><span class="line">   netstat -anplt |grep <span class="string">":80"</span> &amp;&gt; /dev/null &amp;&amp; pgrep <span class="string">"nginx"</span> &amp;&gt; /dev/null</span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"Nginx service is running."</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"Nginx is stop."</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">  ;;</span><br><span class="line">  reload)</span><br><span class="line">   netstat -anplt |grep <span class="string">":80"</span> &amp;&gt; /dev/null &amp;&amp; pgrep <span class="string">"nginx"</span> &amp;&gt; /dev/nul</span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$PROG</span> -t &amp;&gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ] ; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">kill</span> -s HUP $(cat <span class="variable">$PIDF</span>)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"reload Nginx config success."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="variable">$PROG</span> -t</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Nginx service is not run."</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart|reload&#125;"</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>测试脚本是否能用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># chmod +x /etc/init.d/nginx </span></span><br><span class="line">[root@nginx ~]<span class="comment"># chkconfig --add nginx</span></span><br><span class="line">[root@nginx ~]<span class="comment"># chkconfig nginx on</span></span><br><span class="line">[root@nginx ~]<span class="comment"># /etc/init.d/nginx start</span></span><br><span class="line">Nginx service start success.</span><br><span class="line">[root@nginx ~]<span class="comment"># netstat -anput | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6162/nginx: master</span><br></pre></td></tr></table></figure><p>注：如果你想在已安装好的 nginx 上添加第三方模块，依然需要重新编译，但为了不覆盖你原有的配置，请不要 make install，而是直接拷贝可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.14.0]<span class="comment">#./configure --add-module=……  #你的第三方模块</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.14.0]<span class="comment"># make 后不要 make install,改为手动拷贝，先备份</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.14.0]<span class="comment"># cp /usr/local/nginx-1.14/sbin/nginx /usr/local/nginx-1.14/sbin/nginx.bak</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.14.0]<span class="comment"># cp objs/nginx /usr/local/nginx-1.14/sbin/nginx</span></span><br></pre></td></tr></table></figure><h4 id="四、开启nginx网页界面认证"><a class="header-anchor" href="#四、开启nginx网页界面认证">¶</a>四、开启nginx网页界面认证</h4><h5 id="1、安装httpd-tools软件包"><a class="header-anchor" href="#1、安装httpd-tools软件包">¶</a>1、安装httpd-tools软件包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># yum -y install httpd-tools</span></span><br></pre></td></tr></table></figure><h5 id="2、使用htppasswd命令生成账号密码"><a class="header-anchor" href="#2、使用htppasswd命令生成账号密码">¶</a>2、使用htppasswd命令生成账号密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># /usr/bin/htpasswd -c /usr/local/nginx1.14/nginx.passwd admin</span></span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user admin</span><br></pre></td></tr></table></figure><h5 id="3、添加配置文件："><a class="header-anchor" href="#3、添加配置文件：">¶</a>3、添加配置文件：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/local/nginx1.14/conf/nginx.conf</span></span><br><span class="line">        location /auth &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            auth_basic  <span class="string">"提示语句"</span>;</span><br><span class="line">            auth_basic_user_file  /usr/<span class="built_in">local</span>/nginx1.14/nginx.passwd;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="4、创建文件夹及网页"><a class="header-anchor" href="#4、创建文件夹及网页">¶</a>4、创建文件夹及网页</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># mkdir /usr/local/nginx1.14/auth</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cat /usr/local/nginx1.14/auth/index.html</span></span><br><span class="line">This is a <span class="built_in">test</span> file!</span><br></pre></td></tr></table></figure><h5 id="5、重载nginx，访问测试"><a class="header-anchor" href="#5、重载nginx，访问测试">¶</a>5、重载nginx，访问测试</h5><p>[root@nginx ~]# nginx -s  reload<br><img data-src="https://img-blog.csdnimg.cn/20200611132323290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>输入用户名密码就可以访问了</p><h4 id="五、配置-nginx-反向代理：反向代理-负载均衡-健康探测"><a class="header-anchor" href="#五、配置-nginx-反向代理：反向代理-负载均衡-健康探测">¶</a>五、配置 nginx 反向代理：反向代理+负载均衡+健康探测</h4><p>查看 nginx 加载的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/1.14.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx1.14 --user=nginx --group=nginx --with-http_stub_status_module --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client --http-proxy-temp-path=/var/tmp/nginx/proxy --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --with-http_flv_module --add-module=/usr/src/nginx-sticky-module --add-module=/usr/src/ngx_cache_purge-2.3</span><br></pre></td></tr></table></figure><p>nginx 的所有模块必须在编译的时候添加，不能再运行的时候动态加载</p><h5 id="1、nginx-sticky-module-模块："><a class="header-anchor" href="#1、nginx-sticky-module-模块：">¶</a>1、nginx-sticky-module 模块：</h5><blockquote><p>这个模块的作用是通过 cookie 黏贴的方式将来自同一个客户端（浏览器）的请求发送到同一个后端服务器上处理，这样一定程度上可以解决多个 backend servers 的 session 同步的问题 —— 因为不再需要同步，而 RR 轮询模式必须要运维人员自己考虑 session 同步的实现另外内置的 ip_hash 也可以实现根据客户端 IP 来分发请求，但它很容易造成负载不均衡的情况，而如果 nginx 前面有 CDN 网络或者来自同一局域网的访问，它接收的客户端 IP 是一样的，容易造成负载不均衡现象。nginx-sticky-module 的 cookie 过期时间，默认浏览器关闭就过期</p><p>这个模块并不合适不支持 Cookie 或手动禁用了 cookie 的浏览器，此时默认 sticky 就会切换成 RR。它不能与 ip_hash 同时使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">        server 192.168.31.141:80 weight=1;</span><br><span class="line">        server 192.168.31.250:80 weight=1;</span><br><span class="line">        sticky;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置起来超级简单，一般来说一个 sticky 指令就够了</p><p>相关信息可以查看<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng" target="_blank" rel="noopener">官方文档</a></p><h5 id="2、load-balance-其它调度方案："><a class="header-anchor" href="#2、load-balance-其它调度方案：">¶</a>2、load-balance 其它调度方案：</h5><p>这里顺带介绍一下 nginx 的负载均衡模块支持的其它调度算法：</p><p>轮询（默认）：</p><blockquote><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。Weight 指定轮询权值，Weight 值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下</p></blockquote><p>ip_hash ：</p><blockquote><p>每个请求按访问 IP 的 hash 结果分配，这样来自同一个 IP 的访客固定访问一个后端服务器，有效解决了动态网页存在的 session 共享问题。当然如果这个节点不可用了，会发到下个节点，而此时没有 session 同步的话就注销掉了</p></blockquote><p>least_conn ：</p><blockquote><p>请求被发送到当前活跃连接最少的 realserver 上。会考虑 weight 的值</p></blockquote><p>url_hash：</p><blockquote><p>此方法按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx 本身是不支持 url_hash 的，如果需要使用这种调度算法，必须安装 Nginx 的 hash 软件包 nginx_upstream_hash</p></blockquote><p>fair：</p><blockquote><p>这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx 本身是不支持 fair 的，如果需要使用这种调度算法，必须下载 Nginx 的upstream_fair 模块</p></blockquote><h5 id="3、负载均衡与健康检查："><a class="header-anchor" href="#3、负载均衡与健康检查：">¶</a>3、负载均衡与健康检查：</h5><p>严格来说，nginx 自带是没有针对负载均衡后端节点的健康检查的，但是可以通过默认自带的 ngx_http_proxy_module 模块和 ngx_http_upstream_module 模块中的相关指令来完成当后端节点出现故障时，自动切换到下一个节点来提供访问</p><p>修改配置文件：（vim /usr/local/nginx-1.14/conf/nginx.config）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http模块下添加</span></span><br><span class="line">upstream backend &#123;</span><br><span class="line">        server 192.168.1.30:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">        server 192.168.1.40:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">        sticky;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># location模块添加</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br><span class="line">[root@nginx ~]<span class="comment"># curl 127.0.0.1</span></span><br><span class="line">apache1</span><br><span class="line">[root@nginx ~]<span class="comment"># curl 127.0.0.1</span></span><br><span class="line">apache2</span><br><span class="line"><span class="comment"># 访问nginx服务器，nginx就代理了后端两台apache服务，并进行轮询</span></span><br></pre></td></tr></table></figure><p>weight ：</p><blockquote><p>轮询权值也是可以用在 ip_hash 的，默认值为 1</p></blockquote><p>max_fails ：</p><blockquote><p>允许请求失败的次数，默认为 1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误</p></blockquote><p>fail_timeout ：</p><blockquote><p>有两层含义，一是在 10s 时间内最多容许 2 次失败；二是在经历了 2 次 失败以后，10s 时间内不分配请求到这台服务器</p></blockquote><h5 id="4、nginx的proxy缓存的使用"><a class="header-anchor" href="#4、nginx的proxy缓存的使用">¶</a>4、nginx的proxy缓存的使用</h5><p>缓存也就是将 js、css、image 等静态文件从后端服务器缓存到 nginx 指定的缓存目录下，既可以减轻后端服务器负担，也可以加快访问速度，但这样缓存及时清理成为了一个问题，所以需要 ngx_cache_purge 这个模块来在过期时间未到之前，手动清理缓存</p><p>proxy 模块中常用的指令是 proxy_pass 和 proxy_cache</p><p>nginx 的 web 缓存功能的主要是由 proxy_cache、fastcgi_cache 指令集和相关指令集完成， proxy_cache 指令负责反向代理缓存后端服务器的静态内容，fastcgi_cache 主要用来处理 FastCGI 动态进程缓存</p><p>在配置文件中添加修改：注：在添加文件前请查看文件中是否有，如果没有再添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    proxy_buffering on;</span><br><span class="line">    proxy_temp_path /usr/<span class="built_in">local</span>/nginx1.14/proxy_temp;</span><br><span class="line">    proxy_cache_path /usr/<span class="built_in">local</span>/nginx1.14/proxy_cache levels=1:2 keys_zone=my-cache:100m inactive=600m max_size=2g;</span><br><span class="line">    </span><br><span class="line">        location ~/purge(/.*) &#123;</span><br><span class="line">            allow 127.0.0.1;</span><br><span class="line">            allow 192.168.1.0/24;</span><br><span class="line">            deny all;</span><br><span class="line">            proxy_cache_purge my-cache <span class="variable">$host</span><span class="variable">$1</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_504;</span><br><span class="line">            proxy_cache my-cache;</span><br><span class="line">            add_header Nginx-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">            proxy_cache_valid 200 304 301 302 8h;</span><br><span class="line">            proxy_cache_valid 404 1m;</span><br><span class="line">            proxy_cache_valid any 1d;</span><br><span class="line">            proxy_cache_key <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>相关选项说明：</p><p>proxy_buffering on：</p><blockquote><p>代理的时候，开启或关闭缓冲后端服务器的响应</p><p>当开启缓冲时，nginx 尽可能快地从被代理的服务器接收响应，再将它存入缓冲区中</p></blockquote><p>proxy_temp_path：</p><blockquote><p>缓存临时目录。后端的响应并不直接返回客户端，而是先写到一个临 时文件中，然后被 rename 一下当做缓存放在 proxy_cache_path 。0.8.9 版本以后允许 temp 和 cache 两个目录在不同文件系统上（分区），然而为了减少性能损失还是建议把它们设成 一个文件系统上</p></blockquote><p>proxy_cache_path：</p><blockquote><p>设置缓存目录，目录里的文件名是 cache_key 的 MD5 值。 levels=1:2 keys_zone=my-cache:50m 表示采用 2 级目录结构，第一层目录只有一个字符，是 由levels=1:2设置，总共二层目录，子目录名字由二个字符组成。Web缓存区名称为my-cache， 内存缓存空间大小为 100MB，这个缓冲 zone 可以被多次使用。文件系统上看到的缓存文件 名类似于 /usr/local/nginx1.14/proxy_cache/c/29/b7f54b2df7773722d382f4809d65029c 。 inactive=600 max_size=2g 表示 600 分钟没有被访问的内容自动清除，硬盘最大缓存空间为 2GB，超过这个大学将清除最近最少使用的数据</p></blockquote><p>proxy_cache：</p><blockquote><p>用前面定义的缓存区 my-cache</p></blockquote><p>proxy_cache_key：</p><blockquote><p>定义如何生成缓存的键，设置 web 缓存的 key 值，nginx 根据 key 值 md5 哈希存储缓存</p></blockquote><p>proxy_cache_valid：</p><blockquote><p>为不同的响应状态码设置不同的缓存时间，比如 200、302 等正常结果 可以缓存的时间长点，而 404、500 等缓存时间设置短一些，这个时间到了文件就会过期， 而不论是否刚被访问过</p></blockquote><p>add_header：</p><blockquote><p>指令来设置 response header, 语法: add_header name value;</p></blockquote><p>$upstream_cache_status：</p><blockquote><p>这个变量来显示缓存的状态，我们可以在配置中添加一个 http 头来显示这一状态</p></blockquote><p>$upstream_cache_status 包含以下几种状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MISS 未命中，请求被传送到后端</span><br><span class="line"></span><br><span class="line">HIT 缓存命中</span><br><span class="line"></span><br><span class="line">EXPIRED 缓存已经过期请求被传送到后端 </span><br><span class="line"></span><br><span class="line">UPDATING 正在更新缓存，将使用旧的应答 </span><br><span class="line"></span><br><span class="line">STALE 后端将得到过期的应答</span><br></pre></td></tr></table></figure><p>expires：</p><blockquote><p>在响应头里设置 Expires:或 Cache-Control:max-age，返回给客户端的浏览器缓存失 效时间</p></blockquote><h5 id="5、访问测试"><a class="header-anchor" href="#5、访问测试">¶</a>5、访问测试<img data-src="https://img-blog.csdnimg.cn/20200611132524563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></h5><p>查看这个文件，里面就有了缓存文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ll /usr/local/nginx1.14/proxy_cache/d/a0/</span></span><br><span class="line">总用量 4</span><br><span class="line">-rw-------. 1 nginx nginx 622 6月  11 11:22 d5bd6fad23957bb6e6023525d18aba0d</span><br></pre></td></tr></table></figure><p>如果在缓存时间之内需要更新被缓存的静态文件怎么办呢，这时候就需要手动来清除缓存了</p><p>浏览器访问 192.168.1.20/purge/来清除缓存</p><p>备注：</p><ul><li>purge 是 ngx_cache_pure 模块指令</li><li>index.html是要清除的缓存文件 URL 路径<br><img data-src="https://img-blog.csdnimg.cn/20200611132430847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></li></ul><p>缓存数据已经没有了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># ll /usr/local/nginx1.14/proxy_cache/d/a0/</span></span><br><span class="line">总用量 0</span><br></pre></td></tr></table></figure><h4 id="六、开启gzip压缩输出，减少网络传输"><a class="header-anchor" href="#六、开启gzip压缩输出，减少网络传输">¶</a>六、开启gzip压缩输出，减少网络传输</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">     gzip_vary on;</span><br><span class="line">     client_max_body_size   10m;</span><br><span class="line">     client_body_buffer_size   128k;</span><br><span class="line">     proxy_connect_timeout   75;</span><br><span class="line">     proxy_send_timeout   75;</span><br><span class="line">     proxy_read_timeout   75;</span><br><span class="line">     proxy_buffer_size   4k;</span><br><span class="line">     proxy_buffers   4 32k;</span><br><span class="line">     proxy_busy_buffers_size   64k;</span><br><span class="line">     proxy_temp_file_write_size  64k;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>相关解释：</p><p>proxy_busy_buffers_size 64k：</p><blockquote><p>高负荷下缓冲大小（默认大小是 proxy_buffers 指令设置单块缓冲大小的 2 倍）</p></blockquote><p>proxy_temp_file_write_size 64k ：</p><blockquote><p>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小</p></blockquote><p>gzip on :</p><blockquote><p>开启 gzip 压缩输出，减少网络传输</p></blockquote><p>gzip_min_length 1k：</p><blockquote><p>置允许压缩的页面最小字节数，页面字节数从 header 头得 content-length 中进行获取。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大</p></blockquote><p>gzip_buffers 16 8k：</p><blockquote><p>设置系统获取几个单位的缓存用于存储 gzip 的压缩结果数据流。16 8k 代表以8k 为单位，按照原始数据大小以 8k 为单位的16倍申请内存。如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储 gzip 压缩结果</p></blockquote><p>gzip_http_version 1.1：</p><blockquote><p>用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户 就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并 期望也       启用 Gzip 压缩的话，由于末端通信是 http/1.1，故请设置为 1.1</p></blockquote><p>gzip_comp_level 6：</p><blockquote><p>gzip 压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理速度最 慢(传输快但比较消耗 cpu)</p></blockquote><p>gzip_types：</p><blockquote><p>匹配 mime 类型进行压缩，无论是否指定”text/html”类型总是会被压缩的。 默认值: gzip_types text/html (默认不对 js/css 文件进行压缩)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">压缩类型，匹配 MIME 类型进行压缩</span><br><span class="line"></span><br><span class="line">不能用通配符 text&#x2F;*</span><br><span class="line"></span><br><span class="line">(无论是否指定)text&#x2F;html 默认已经压缩 </span><br><span class="line"></span><br><span class="line">设置哪压缩种文本文件可参考 conf&#x2F;mime.types</span><br></pre></td></tr></table></figure><p>gzip_proxied any：</p><blockquote><p>Nginx 作为反向代理的时候启用，根据某些请求和应答来决定是否在对 代理请求的应答启用 gzip 压缩，是否压缩取决于请求头中的“Via”字段，指令中可以同时指 定多个不同的参数</p></blockquote><p>意义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">off – 关闭所有的代理结果数据的压缩</span><br><span class="line"></span><br><span class="line">expired – 启用压缩，如果 header 头中包含 “Expires” 头信息</span><br><span class="line"></span><br><span class="line">no-cache – 启用压缩，如果 header 头中包含 “Cache-Control:no-cache” 头信息</span><br><span class="line"></span><br><span class="line">no-store – 启用压缩，如果 header 头中包含 “Cache-Control:no-store” 头信息</span><br><span class="line"></span><br><span class="line">private – 启用压缩，如果 header 头中包含 “Cache-Control:private” 头信息</span><br><span class="line"></span><br><span class="line">no_last_modified – 启用压缩,如果 header 头中不包含 “Last-Modified” 头信息</span><br><span class="line"></span><br><span class="line">no_etag – 启用压缩 ,如果 header 头中不包含 “ETag” 头信息</span><br><span class="line"></span><br><span class="line">auth – 启用压缩 , 如果 header 头中包含 “Authorization” 头信息</span><br><span class="line"></span><br><span class="line">any – 无条件启用压缩</span><br></pre></td></tr></table></figure><p>gzip_vary on：</p><blockquote><p>和 http 头有关系，加个 vary 头，给代理服务器用的，有的浏览器支持压缩，</p><p>有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的 HTTP 头来判断，是否需要压缩</p></blockquote><p>将httpd服务的网页制造大点，访问测试：<br><img data-src="https://img-blog.csdnimg.cn/20200611132603607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="七、开启br压缩"><a class="header-anchor" href="#七、开启br压缩">¶</a>七、开启br压缩</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># tar zxf ngx_brotli.tar.gz -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd /usr/src/nginx-1.14.0/</span></span><br></pre></td></tr></table></figure><h5 id="1、使用nginx-V查看编译时的信息"><a class="header-anchor" href="#1、使用nginx-V查看编译时的信息">¶</a>1、使用nginx -V查看编译时的信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/1.14.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx1.14 --user=nginx --group=nginx --with-http_stub_status_module --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client --http-proxy-temp-path=/var/tmp/nginx/proxy --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --with-http_flv_module --add-module=/usr/src/nginx-sticky-module --add-module=/usr/src/ngx_cache_purge-2.3</span><br></pre></td></tr></table></figure><h5 id="2、进行编译"><a class="header-anchor" href="#2、进行编译">¶</a>2、进行编译</h5><p>最后加上<code>--add-module=/usr/src/ngx_brotli</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># ./configure --prefix=/usr/local/nginx1.14 --user=nginx --group=nginx --with-http_stub_status_module --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client --http-proxy-temp-path=/var/tmp/nginx/proxy --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --with-http_flv_module --add-module=/usr/src/nginx-sticky-module --add-module=/usr/src/ngx_cache_purge-2.3 --add-module=/usr/src/ngx_brotli</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># make # 不要make install</span></span><br></pre></td></tr></table></figure><h5 id="3、将新的nginx命令文件替换旧的"><a class="header-anchor" href="#3、将新的nginx命令文件替换旧的">¶</a>3、将新的nginx命令文件替换旧的</h5><p>替换前先做个备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># mv /usr/local/nginx1.14/sbin/nginx /usr/local/nginx1.14/sbin/nginx.bak</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># cp objs/nginx /usr/local/nginx1.14/sbin/</span></span><br></pre></td></tr></table></figure><h5 id="4、重启nginx"><a class="header-anchor" href="#4、重启nginx">¶</a>4、重启nginx</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx -s stop</span></span><br><span class="line">[root@nginx nginx-1.14.0]<span class="comment"># nginx</span></span><br></pre></td></tr></table></figure><h5 id="5、添加配置文件内容"><a class="header-anchor" href="#5、添加配置文件内容">¶</a>5、添加配置文件内容</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/local/nginx1.14/conf/nginx.conf</span></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    brotli on;</span><br><span class="line">    brotli_types text/plain text/css text/xml application/xml application/json ;</span><br><span class="line">    brotli_static off; </span><br><span class="line">    brotli_comp_level 11;</span><br><span class="line">    brotli_buffers 16 8k;</span><br><span class="line">    brotli_window 512k;</span><br><span class="line">    brotli_min_length 20;</span><br><span class="line">[root@nginx ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>相关参数解释：</p><p>brotli_static off;</p><blockquote><p>否允许查找预处理好的、以.br结尾的压缩 件,可inyon off always</p></blockquote><p>brotli_comp_level 11;</p><blockquote><p>压缩级别</p></blockquote><p>brotli_buffers 16 8k;</p><blockquote><p>读取缓冲区数量和大小</p></blockquote><p>brotli_window 512k;</p><blockquote><p>滑动窗口大小</p></blockquote><p>brotli_min_length 20;</p><blockquote><p>指定压缩数据的最小字节</p></blockquote><h5 id="6、访问测试"><a class="header-anchor" href="#6、访问测试">¶</a>6、访问测试</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># curl -I -H "Accept-Encoding: gzip, deflate,br" 127.0.0.1</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.14.0</span><br><span class="line">Date: Thu, 11 Jun 2020 04:01:16 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Set-Cookie: route=617ff1b025324ae95a8a4e10c70854c9; Path=/</span><br><span class="line">Last-Modified: Thu, 11 Jun 2020 03:46:40 GMT</span><br><span class="line">ETag: W/<span class="string">"1cb0-5a7c6cef388ea"</span></span><br><span class="line">Nginx-Cache: MISS</span><br><span class="line">Content-Encoding: br</span><br></pre></td></tr></table></figure><h4 id="八、nginx完整配置文件"><a class="header-anchor" href="#八、nginx完整配置文件">¶</a>八、nginx完整配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># cat /usr/local/nginx1.14/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">user  nginx nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">upstream backend &#123;</span><br><span class="line">        server 192.168.1.30:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">server 192.168.1.40:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">        sticky;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    proxy_buffering on;</span><br><span class="line">    proxy_temp_path /usr/<span class="built_in">local</span>/nginx1.14/proxy_temp;</span><br><span class="line">    proxy_cache_path /usr/<span class="built_in">local</span>/nginx1.14/proxy_cache levels=1:2 keys_zone=my-cache:100m inactive=600m max_size=2g;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    brotli on;</span><br><span class="line">    brotli_types text/plain text/css text/xml application/xml application/json ;</span><br><span class="line">    brotli_static off; </span><br><span class="line">    brotli_comp_level 11;</span><br><span class="line">    brotli_buffers 16 8k;</span><br><span class="line">    brotli_window 512k;</span><br><span class="line">    brotli_min_length 20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">     gzip_vary on;</span><br><span class="line">     client_max_body_size   10m;</span><br><span class="line">     client_body_buffer_size   128k;</span><br><span class="line">     proxy_connect_timeout   75;</span><br><span class="line">     proxy_send_timeout   75;</span><br><span class="line">     proxy_read_timeout   75;</span><br><span class="line">     proxy_buffer_size   4k;</span><br><span class="line">     proxy_buffers   4 32k;</span><br><span class="line">     proxy_busy_buffers_size   64k;</span><br><span class="line">     proxy_temp_file_write_size  64k;</span><br><span class="line">     <span class="comment">#proxy_buffering on;</span></span><br><span class="line">     <span class="comment">#proxy_temp_path /usr/local/nginx1.14/proxy_temp;</span></span><br><span class="line">     <span class="comment">#proxy_cache_path /usr/local/nginx1.14/proxy_cache levels=1:2 keys_zone=my-cache:100m inactive=600m max_size=2g;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">location ~/purge(/.*) &#123;</span><br><span class="line">    allow 127.0.0.1;</span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">    proxy_cache_purge my-cache <span class="variable">$host</span><span class="variable">$1</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">    proxy_pass http://backend;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_next_upstream error timeout invalid_header http_500 http_502 http_504;</span><br><span class="line">    proxy_cache my-cache;</span><br><span class="line">    add_header Nginx-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">    proxy_cache_valid 200 304 301 302 8h;</span><br><span class="line">    proxy_cache_valid 404 1m;</span><br><span class="line">    proxy_cache_valid any 1d;</span><br><span class="line">    proxy_cache_key <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /index.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /auth &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">    auth_basic  <span class="string">"提示语句"</span>;</span><br><span class="line">    auth_basic_user_file  /usr/<span class="built_in">local</span>/nginx1.14/nginx.passwd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="九、扩展知识"><a class="header-anchor" href="#九、扩展知识">¶</a>九、扩展知识</h4><p>nginx 修改版本等信息</p><h5 id="1、更改ngnix显示版本"><a class="header-anchor" href="#1、更改ngnix显示版本">¶</a>1、更改ngnix显示版本</h5><p>编译前编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/src/nginx-1.14.0/src/core/nginx.h</span></span><br><span class="line"><span class="comment">#define nginx_version</span></span><br><span class="line"><span class="comment">#define NGINX_VERSION</span></span><br><span class="line"><span class="comment">#define NGINX_VER</span></span><br><span class="line"><span class="comment">#define NGINX_VAR</span></span><br></pre></td></tr></table></figure><p>修改上面的信息，即可更改 nginx 显示版本</p><h5 id="2、自定义信息"><a class="header-anchor" href="#2、自定义信息">¶</a>2、自定义信息</h5><p>编译前编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># vim /usr/src/nginx-1.14.0/src/http/ngx_http_special_response.c</span></span><br><span class="line">static u_char ngx_http_error_full_tail[] =</span><br><span class="line">static u_char ngx_http_error_tail[] =</span><br><span class="line">[root@nginx ~]<span class="comment"># vim /usr/src/nginx-1.14.0/src/http/ngx_http_header_filter_module.c</span></span><br><span class="line">static char ngx_http_server_string[]=</span><br></pre></td></tr></table></figure><p>修改上面的信息为你自己的</p><h5 id="3、修改nginx版本名称"><a class="header-anchor" href="#3、修改nginx版本名称">¶</a>3、修改nginx版本名称</h5><p>编译完成后修改<code>/usr/local/nginx1.14/conf/</code>目录下面</p><p><code>fastcgi.conf</code>、<code>fastcgi.conf.default</code>、<code>fastcgi_params</code>、<code>fastcgi_params.default</code>这四个文件里面的版本名称</p><p>查看 nginx 版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx ~]<span class="comment"># nginx -v</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache之FCGI模式部署LAMP</title>
    <link href="https://pdxblog.top/Apache%E4%B9%8BFCGI%E6%A8%A1%E5%BC%8F%E9%83%A8%E7%BD%B2LAMP.html"/>
    <id>https://pdxblog.top/Apache%E4%B9%8BFCGI%E6%A8%A1%E5%BC%8F%E9%83%A8%E7%BD%B2LAMP.html</id>
    <published>2020-06-09T16:00:00.000Z</published>
    <updated>2020-11-20T15:50:07.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FCGI模式编译安装-LAMP-xcache"><a class="header-anchor" href="#FCGI模式编译安装-LAMP-xcache">¶</a>FCGI模式编译安装 LAMP+xcache</h3><p>php 的工作模式：</p><blockquote><p>php 在 lamp 环境下共有三种工作模式：CGI 模式、apache 模块、FastCGI 模式。CGI 模式下 运行 PHP，性能不是很好。作为 apache 的模块方式运行，在以前编译安装 lamp 已 经介绍过了。FastCGI 的方式和 apache 模块的不同点在于：FastCGI 方式 PHP 是一处独立的 进程，所有 PHP 子进程都由 PHP 的一个叫作 php-fpm 的组件负责管理；而 apache 模块化方 式运行的 PHP，则是 apache 负责调用 PHP 完成工作。PHP 的 FastCGI 方式性能要比 apache 模块化方式强很多，今天我们以 FastCGI 方式编译安装 lamp</p></blockquote><p>FastCGI 工作机制：</p><blockquote><p>首先客户端发起请求，请求分为 2 种，一种是静态请求它可以直接由 Apache 直接响应返回； 另一种是动态的请求，如其中包含中 php 或者 Perl 这种脚本解释性语言，则由 Apache 服务 器通过 fastcgi 协议调用 php 服务器执行并返回给Apache由 Apache返回解释执行后的结果， 如果这个过程中涉及到对数据的操作，此时 php 服务器还会还会通过 mysql 协议调用 mysql 服务器<br><img data-src="https://img-blog.csdnimg.cn/20200610184252757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p></blockquote><p>编译环境及各软件版本：</p><table><thead><tr><th>Linux</th><th>Web服务器</th><th>PHP</th><th>Mysql数据库</th><th>xcache</th></tr></thead><tbody><tr><td><strong>Centos7.5</strong></td><td><strong>Httpd-2.4.23</strong></td><td><strong>php-5.6.27</strong></td><td><strong>Mysql5.7</strong></td><td><strong>xcache-3.1.0</strong></td></tr></tbody></table><p>本文用到的<a href="https://pan.baidu.com/s/1b6dvnukVS0BBnP4Y-aeBrg" target="_blank" rel="noopener">软件连接</a></p><p>提取码：vzsu</p><p>主机规划</p><p>至少 3 台主机，操作系统都是 centos7.5.网段在 192.168.1.0/24 网关 192.168.1.250</p><p>分配如下：</p><p>1台httpd服务器（192.168.1.70）</p><p>1台php服务器（192.168.1.50）</p><p>1台mysql服务器（192.168.1.40）</p><h4 id="一、编译安装-LAMP"><a class="header-anchor" href="#一、编译安装-LAMP">¶</a>一、编译安装 LAMP</h4><p>编译安装 apache(请参考前面 <a href="https://blog.csdn.net/weixin_45636702/article/details/106614543" target="_blank" rel="noopener">apache 的安装</a>）</p><p>MySQL直接使用脚本意一键安装</p><h5 id="FastCGI-方式安装-php"><a class="header-anchor" href="#FastCGI-方式安装-php">¶</a>FastCGI 方式安装 php</h5><h6 id="1、解决依赖关系"><a class="header-anchor" href="#1、解决依赖关系">¶</a>1、解决依赖关系</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># yum -y install libxml2-devel lzip2-devel libcurl-devel libmcrypt-devel openssl-devel bzip2-devel</span></span><br></pre></td></tr></table></figure><p>安装libmcrypt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># tar zxf libmcrypt-2.5.7.tar.gz </span></span><br><span class="line">[root@phpserver ~]<span class="comment"># cd libmcrypt-2.5.7/</span></span><br><span class="line">[root@phpserver libmcrypt-2.5.7]<span class="comment"># ./configure --prefix=/usr/local/libmcrypt &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h6 id="2、编译安装php"><a class="header-anchor" href="#2、编译安装php">¶</a>2、编译安装php</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># tar zxf php-5.6.27.tar.gz</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># cd  php-5.6.27/</span></span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># ./configure --prefix=/usr/local/php5.6 --with-mysql=mysqlnd \</span></span><br><span class="line">&gt;  --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-openssl --<span class="built_in">enable</span>-fpm \</span><br><span class="line">&gt;  --<span class="built_in">enable</span>-sockets --<span class="built_in">enable</span>-sysvshm --<span class="built_in">enable</span>-mbstring --with-freetype-dir --with-jpeg-dir \</span><br><span class="line">&gt;  --with-png-dir --with-zlib --with-libxml-dir=/usr --<span class="built_in">enable</span>-xml --with-mhash \</span><br><span class="line">&gt;  --with-mcrypt=/usr/<span class="built_in">local</span>/libmcrypt --with-config-file-path=/etc \</span><br><span class="line">&gt;  --with-config-file-scan-dir=/etc/php.d --with-bz2--<span class="built_in">enable</span>-maintainer-zts</span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>相关选项解释：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/php5.6：安装位置</span><br><span class="line"></span><br><span class="line">--with-mysql=mysqlnd：支持 mysql</span><br><span class="line"></span><br><span class="line">--with-pdo-mysql=mysqlnd：支持 pdo 模块</span><br><span class="line"></span><br><span class="line">--with-mysqli=mysqlnd：支持 mysqli 模块</span><br><span class="line"></span><br><span class="line">注：上面的三选项的作用：数据库与 php 不在一个服务器上，指定此种方式，安装数据库 连接驱动</span><br><span class="line"></span><br><span class="line">--with-openssl：支持 openssl 模块</span><br><span class="line"></span><br><span class="line">--enable-fpm：支持 fpm 模式</span><br><span class="line"></span><br><span class="line">--enable-sockets：启用 socket 支持</span><br><span class="line"></span><br><span class="line">--enable-sysvshm：启用系统共享内存支持</span><br><span class="line"></span><br><span class="line">--enable-mbstring：多字节字串、像我们的中文就是多字节字串</span><br><span class="line"></span><br><span class="line">--with-freetype-dir：支持 freetype、就要装 freetype-devel、跟字体相关的、字体解析工具</span><br><span class="line"></span><br><span class="line">--with-jpeg-dir</span><br><span class="line"></span><br><span class="line">--with-png-dir</span><br><span class="line"></span><br><span class="line">注：上面的二选项的作用：处理 jpeg、png 图片的、php 可以动态生成 jpeg 图片</span><br><span class="line"></span><br><span class="line">--with-zlib：是个压缩库、在互联网传输时用来压缩传输的</span><br><span class="line"></span><br><span class="line">--with-libxml-dir=/usr：这个 libxml 是用来解析 xml 的、指定/usr 下</span><br><span class="line"></span><br><span class="line">--enable-xml：支持 xml 的</span><br><span class="line"></span><br><span class="line">--with-mhash：支持 mhash</span><br><span class="line"></span><br><span class="line">--with-mcrypt=/usr/local/libmcrypt：libmcrypt-devel 这个程序包所指定的</span><br><span class="line"></span><br><span class="line">--with-config-file-path=/etc：指定配置文件的存放路径的</span><br><span class="line"></span><br><span class="line">--with-config-file-scan-dir=/etc/php.d：配置文件扫描路径</span><br><span class="line"></span><br><span class="line">--with-bz2：支持 BZip2</span><br><span class="line"></span><br><span class="line">为了支持 apache 的 worker 或 event 这两个 MPM，编译时使用了--enable-maintainer-zts 选项</span><br></pre></td></tr></table></figure><p>如果使用 PHP5.3 以上版本，为了链接 MySQL 数据库，可以指定 mysqlnd，这样在本机就不 需要先安装 MySQL 或 MySQL 开发包了。mysqlnd 从 php 5.3 开始可用，可以编译时绑定到它 （而不用和具体的 MySQL 客户端库绑定形成依赖），但从 PHP 5.4 开始它就是默认设置了</p><h6 id="3、提供php配置文件"><a class="header-anchor" href="#3、提供php配置文件">¶</a>3、提供php配置文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver php-5.6.27]<span class="comment"># cp php.ini-production /etc/php.ini</span></span><br></pre></td></tr></table></figure><h6 id="4、为php-fpm提供脚本"><a class="header-anchor" href="#4、为php-fpm提供脚本">¶</a>4、为php-fpm提供脚本</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver php-5.6.27]<span class="comment"># cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span></span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># chmod +x /etc/init.d/php-fpm </span></span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># chkconfig --add php-fpm</span></span><br><span class="line">[root@phpserver php-5.6.27]<span class="comment"># chkconfig php-fpm on</span></span><br></pre></td></tr></table></figure><h6 id="5、提供php-fpm配置文件并编辑"><a class="header-anchor" href="#5、提供php-fpm配置文件并编辑">¶</a>5、提供php-fpm配置文件并编辑</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># cp /usr/local/php5.6/etc/php-fpm.conf.default /usr/local/php5.6/etc/php-fpm.conf</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># vim /usr/local/php5.6/etc/php-fpm.conf</span></span><br><span class="line">修改内容如下：</span><br><span class="line">pid = run/php-fpm.pid</span><br><span class="line">listen = 192.168.1.50:9000</span><br><span class="line">pm.max_children = 50</span><br><span class="line">pm.start_servers = 5</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 35</span><br></pre></td></tr></table></figure><p>启动php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># service php-fpm start</span></span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># netstat -anpt | grep php-fpm</span></span><br><span class="line">tcp        0      0 192.168.1.50:9000       0.0.0.0:*               LISTEN      114068/php-fpm: mas</span><br><span class="line">[root@phpserver ~]<span class="comment"># firewall-cmd --permanent --add-port=9000/tcp</span></span><br><span class="line">success</span><br><span class="line">[root@phpserver ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">Success</span><br></pre></td></tr></table></figure><p>在该主机上新建虚拟主机目录用于存放网页文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># mkdir -p /var/www/benet</span></span><br></pre></td></tr></table></figure><p>至此 php 安装配置完毕，下面配置 apache 通过 fastcgi 协议调用 php</p><h6 id="6、配置-apache-切换到-apache-主机上操作"><a class="header-anchor" href="#6、配置-apache-切换到-apache-主机上操作">¶</a>6、配置 apache(切换到 apache 主机上操作)</h6><p>在 Apache2.4 以后已经专门有一个模块针对 FastCGI 的实现，此模块为 mod_proxy_fcgi.so， 它其实是作为 mod_proxy.so 模块的扩充，因此，这两个模块都要加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line">去掉一下注释</span><br><span class="line">LoadModule proxy_module modules/mod_proxy.so</span><br><span class="line">LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so</span><br><span class="line">[root@apache ~]<span class="comment"># apachectl restart</span></span><br><span class="line">[root@apache ~]<span class="comment"># apachectl -M | grep proxy</span></span><br><span class="line"> proxy_module (shared)</span><br><span class="line"> proxy_fcgi_module (shared)</span><br></pre></td></tr></table></figure><p>建立一个目录作为虚拟主机的家目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># mkdir -p /var/www/benet</span></span><br></pre></td></tr></table></figure><p>编辑主配置文件 httpd.conf，开启虚拟主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line">启用 Include conf/extra/httpd-vhosts.conf</span><br><span class="line">Include conf/extra/httpd-vhosts.conf <span class="comment"># 去掉注释</span></span><br><span class="line">同时定位 AddType；添加下面两行：让 apache 能识别 php 格式的页面</span><br><span class="line">    AddType application/x-httpd-php .php</span><br><span class="line">    AddType application/x-httpd-php-source .phps</span><br><span class="line">并且定位至 DirectoryIndex：支持 php 格式的主页</span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">添加 index.php（最好添加在最前面）</span><br></pre></td></tr></table></figure><p>配置虚拟主机支持使用 fcgi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /usr/local/http-2.4.23/conf/extra/httpd-vhosts.conf</span></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line"> ServerAdmin webmaster@benet.com</span><br><span class="line"> DocumentRoot <span class="string">"/var/www/benet"</span></span><br><span class="line"> ServerName www.benet.com</span><br><span class="line"> ServerAlias benet.com</span><br><span class="line"> ErrorLog <span class="string">"logs/benet.com-error_log"</span></span><br><span class="line"> CustomLog <span class="string">"logs/benet.com-access_log"</span> common</span><br><span class="line"> ProxyRequests Off</span><br><span class="line">ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://192.168.1.50:9000/var/www/benet/<span class="variable">$1</span></span><br><span class="line"> <span class="comment">#&lt;LocationMatch "^(.*\.php(/.*)?)$"&gt;</span></span><br><span class="line"> <span class="comment"># ProxyPass fcgi://192.168.1.50:9000/var/www/benet</span></span><br><span class="line"> <span class="comment">#&lt;/LocationMatch&gt;</span></span><br><span class="line">&lt;Directory <span class="string">"/var/www/benet"</span>&gt;</span><br><span class="line"> Options FollowSymLinks</span><br><span class="line"> AllowOverride None</span><br><span class="line"> Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ProxyRequests off：关闭正向代理</span><br><span class="line"></span><br><span class="line">ProxyPassMatch：把以.php 结尾的文件请求发送到 php-fpm 进程，php-fpm 至少需要知道运 行的目录和 URI，所以这里直接在 fcgi://192.168.31.141:9000 后指明了这两个参数，其它的 参数的传递已经被 mod_proxy_fcgi.so 进行了封装，不需要手动指定</span><br><span class="line"></span><br><span class="line">特别注意的是，目录需要与中的 DocumentRoot 后的路径一致</span><br><span class="line"></span><br><span class="line">ProxyPassMatch</span><br><span class="line"></span><br><span class="line">只有满足特定正则模式的内容才会匹配并执行此规则，这里的模式是，^/(.*<span class="tag">\<span class="name">.</span></span>php(/.*)?)<span class="formula">$ 从网站（虚拟主机的根目录开始，匹配任何以 .php 结尾，或者在 .php 之后 紧跟一个 / 再跟别的内容的路径</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">^ (caret) 和 $</span> (dollar)标志要匹配的路径的开始和结束</span><br><span class="line"></span><br><span class="line">( )括号里的内容可以用 <span class="formula">$1 来表示，以方便后面引用它</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">fcgi:// 192.168.1.50:9000 通过 mod_proxy_fcgi 来转发的代理，使用 fastCGI 协议，转到 PHP-FPM 监听的端口</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">/path/to/your/documentroot/</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">非常重要！必须与虚拟主机的路径匹配，且必须是对应 php 文件在操作系统中的绝对路径。 否则会找不到文件</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">$</span>1 可以从原始请求扩展成整个请求路径的变量，这里指代前面( ) 里面匹配的那个路径（uri）</span><br></pre></td></tr></table></figure><p>补充：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache httpd 2.4 以前的版本中，要么把 PHP 作为 Apache 的模块运行，要么添加一个第 三方模块支持 PHP-FPM 实现</span><br></pre></td></tr></table></figure><h6 id="7、测试-LAMP-环境："><a class="header-anchor" href="#7、测试-LAMP-环境：">¶</a>7、测试 LAMP 环境：</h6><p>在 mysql 主机上创建用于 php 服务器连接的 mysql 账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all PRIVILEGES on *.* to testuser@&#39;%&#39; identified by &#39;123&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>注意防火墙要允许 mysql 连接</p><p>在 php 服务器上的/var/www/benet 目录下创建.php 的测试页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># cat /var/www/benet/index.php </span></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">[root@phpserver ~]<span class="comment"># cat /var/www/benet/test1.php </span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$link</span>=mysql_connect(<span class="string">'192.168.1.40'</span>,<span class="string">'testuser'</span>,<span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$link</span>)<span class="built_in">echo</span> <span class="string">"connection success......"</span>;</span><br><span class="line">mysql_close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>测试访问php测试页<br><img data-src="https://img-blog.csdnimg.cn/20200610184525405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br><img data-src="https://img-blog.csdnimg.cn/20200610184606798.png" alt><br>看到上面两个测试页说明 apache、php、mysql 之间可以协同工作了</p><h4 id="二、压力测试"><a class="header-anchor" href="#二、压力测试">¶</a>二、压力测试</h4><p>网站性能压力测试是服务器网站性能调优过程中必不可缺少的一环。只有让服务器处在高压 情况下，才能真正体现出软件、硬件等各种设置不当所暴露出的问题</p><p>性能测试工具目前最常见的有以下几种：ab、http_load、webbench、siege。今天我们专门 来介绍 ab</p><p>ab 是 apache 自带的压力测试工具。ab 非常实用，它不仅可以对 apache 服务器进行网站访 问压力测试，也可以对或其它类型的服务器进行压力测试。比如 nginx、tomcat、IIS 等</p><p>下面我们开始介绍有关 ab 命令的使用：</p><ol><li>ab 的原理</li><li>ab 的安装</li><li>ab 参数说明</li><li>ab 性能指标</li><li>ab 实际使用</li><li>测试 nginx 性能</li></ol><h5 id="1）ab的原理"><a class="header-anchor" href="#1）ab的原理">¶</a>1）ab的原理</h5><p>ab 是 apachebench 命令的缩写</p><p>ab 的原理：</p><p>ab 命令会创建多个并发访问线程，模拟多个访问者同时对某一 URL 地址进行访 问。它的测试目标是基于 URL 的，因此，它既可以用来测试 apache 的负载压力，也可以测 试 nginx、lighthttp、tomcat、IIS 等其它 Web 服务器的压力</p><p>ab 命令对发出负载的计算机要求很低，它既不会占用很高 CPU，也不会占用很多内存。但 却会给目标服务器造成巨大的负载，其原理类似 CC 攻击。自己测试使用也需要注意，否则 一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机</p><h5 id="2）ab的安装"><a class="header-anchor" href="#2）ab的安装">¶</a>2）ab的安装</h5><p>ab 的安装非常简单，如果是源码安装 apache 的话，那就更简单了。apache 安装完毕后 ab 命令存放在 apache 安装目录的 bin 目录下。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;http-2.4.23&#x2F;bin&#x2F;ab</span><br></pre></td></tr></table></figure><p>如果 apache 是通过 yum 的 RPM 包方式安装的话，ab 命令默认存放在/usr/bin 目录下。如 下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ab</span><br></pre></td></tr></table></figure><p>注意：如果不想安装 apache 但是又想使用 ab 命令的话，我们可以直接安装 apache 的工具 包 httpd-tools。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br></pre></td></tr></table></figure><p>查看 ab 是否安装成功，可以切换到上述目录下，使用 ab –V 命令进行检测。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># /usr/local/http-2.4.23/bin/ab -V</span></span><br></pre></td></tr></table></figure><p>如果ab -V命令出错，可以export LD_LIBRARY_PATH=&quot;/usr/local/openssl/lib/&quot;，就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># export LD_LIBRARY_PATH="/usr/local/openssl/lib/"</span></span><br><span class="line">[root@apache ~]<span class="comment"># ab -V</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br></pre></td></tr></table></figure><h5 id="3）ab参数说明"><a class="header-anchor" href="#3）ab参数说明">¶</a>3）ab参数说明</h5><p>有关 ab 命令的使用，我们可以通过帮助命令进行查看。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ab --help</span></span><br></pre></td></tr></table></figure><p>下面我们对这些参数，进行相关说明。如下：</p><p>n：在测试会话中所执行的请求个数(即总请求数)</p><p>-c：一次产生的请求个数（即并发用户数）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ab -c 500 -n 10000 http://192.168.1.70/index.html</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.70 (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache</span><br><span class="line">Server Hostname:        192.168.1.70</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.html </span><br><span class="line">Document Length:        208 bytes </span><br><span class="line"></span><br><span class="line">Concurrency Level:      500 </span><br><span class="line">Time taken <span class="keyword">for</span> tests:   25.787 seconds </span><br><span class="line">Complete requests:      10000 </span><br><span class="line">Failed requests:        4 </span><br><span class="line">   (Connect: 0, Receive: 0, Length: 4, Exceptions: 0)</span><br><span class="line">Non-2xx responses:      10000</span><br><span class="line">Total transferred:      3720000 bytes <span class="comment">#</span></span><br><span class="line">HTML transferred:       2080000 bytes </span><br><span class="line">Requests per second:    387.80 [<span class="comment">#/sec] (mean) </span></span><br><span class="line">Time per request:       1289.329 [ms] (mean) </span><br><span class="line">Time per request:       2.579 [ms] (mean, across all concurrent requests) </span><br><span class="line">Transfer rate:          140.88 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1  31.7      0    3008</span><br><span class="line">Processing:     2  302 1687.9      9   25773</span><br><span class="line">Waiting:        2  294 1641.2      9   25773</span><br><span class="line">Total:          6  303 1689.6      9   25781</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      9</span><br><span class="line">  66%     10</span><br><span class="line">  75%     10</span><br><span class="line">  80%     10</span><br><span class="line">  90%     11</span><br><span class="line">  95%    939</span><br><span class="line">  98%   6460</span><br><span class="line">  99%  12908</span><br><span class="line"> 100%  25781 (longest request)</span><br></pre></td></tr></table></figure><p>Document Path:          /index.html ：</p><blockquote><p>请求的资源</p></blockquote><p>Document Length:        208 bytes ：</p><blockquote><p>响应数据的正文长度</p></blockquote><p>Concurrency Level:      500 ：</p><blockquote><p>并发个数（并发用户数）</p></blockquote><p>Time taken for tests:   25.787 seconds ：</p><blockquote><p>所有这些请求处理完成所花费的时间</p></blockquote><p>Complete requests:      10000 ：</p><blockquote><p>完成请求数</p></blockquote><p>Failed requests:        4 ：</p><blockquote><p>失败的请求数</p></blockquote><p>Total transferred:      3720000 bytes ：</p><blockquote><p>表示所有请求的响应数据长度总和，包括每个 HTTP响应数据的头信息和正文数据的长度。注意这里不包括 HTTP 请求数据的长度，仅仅为 web服务器流向用户 PC 的应用层数据总长度</p></blockquote><p>HTML transferred:       2080000 bytes ：</p><blockquote><p>表示所有请求的响应数据中正文数据的总和，也就是减去了 Total transferred 中 HTTP 响应数据中的头信息的长度</p></blockquote><p>Requests per second:    387.80 [：/sec] (mean) ：</p><blockquote><p>吞吐量-每秒请求数</p><p>计算公式：Complete requests/Time taken for tests</p></blockquote><p>Time per request:       1289.329 [ms] (mean) ：</p><blockquote><p>用户平均请求等待时间</p><p>计算公式：Timetoken for tests/（Complete requests/Concurrency Level）</p></blockquote><p>Time per request:       2.579 [ms] (mean, across all concurrent requests) ：</p><blockquote><p>服务器平均请求等待时间</p><p>计算公式：Time taken for tests/Complete requests</p></blockquote><p>Transfer rate:          140.88 [Kbytes/sec] received</p><blockquote><p>表示这些请求在单位时间内从服务器获取的数据长度</p><p>计算公式：Total trnasferred/ Time taken for tests，这个统计很好的说明服务器的处理能力达到极限时，其出口宽带的需求量。（即平均每秒网络上的流量）</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1  31.7      0    3008</span><br><span class="line">Processing:     2  302 1687.9      9   25773</span><br><span class="line">Waiting:        2  294 1641.2      9   25773</span><br><span class="line">Total:          6  303 1689.6      9   25781</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50<span class="comment">%      9</span></span><br><span class="line">  66<span class="comment">%     10</span></span><br><span class="line">  75<span class="comment">%     10</span></span><br><span class="line">  80<span class="comment">%     10</span></span><br><span class="line">  90<span class="comment">%     11</span></span><br><span class="line">  95<span class="comment">%    939</span></span><br><span class="line">  98<span class="comment">%   6460</span></span><br><span class="line">  99<span class="comment">%  12908</span></span><br><span class="line"> 100<span class="comment">%  25781 (longest request)</span></span><br></pre></td></tr></table></figure><p>这部分数据用于描述每个请求处理时间的分布情况，比如以上测试，80%的请求处理时间 都不超过 66ms，这个处理时间是指前面的 Time per request，即对于单个用户而言，平均 每个请求的处理时间</p><h5 id="4）ab-性能指标"><a class="header-anchor" href="#4）ab-性能指标">¶</a>4）ab 性能指标</h5><p>在进行性能测试过程中有几个指标比较重要：</p><h6 id="1、吞吐率（Requests-per-second）"><a class="header-anchor" href="#1、吞吐率（Requests-per-second）">¶</a>1、吞吐率（Requests per second）</h6><p>服务器并发处理能力的量化描述，单位是 reqs/s，指的是在某个并发用户数下单位时间内处 理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。 记住：吞吐率是基于并发用户数的。这句话代表了两个含义：</p><blockquote><p>a、吞吐率和并发用户数相关</p><p>b、不同的并发用户数下，吞吐率一般是不同的</p></blockquote><p>计算公式：总请求数/处理完成这些请求数所花费的时间，即：</p><p>Request per second=Complete requests/Time taken for tests</p><p>必须要说明的是，这个数值表示当前机器的整体性能，值越大越好</p><h6 id="2、并发连接数（The-number-of-concurrent-connections）"><a class="header-anchor" href="#2、并发连接数（The-number-of-concurrent-connections）">¶</a>2、并发连接数（The number of concurrent connections）</h6><p>并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话</p><h6 id="3、并发用户数（Concurrency-Level）"><a class="header-anchor" href="#3、并发用户数（Concurrency-Level）">¶</a>3、并发用户数（Concurrency Level）</h6><p>要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连 接数</p><h6 id="4、用户平均请求等待时间（Time-per-request）"><a class="header-anchor" href="#4、用户平均请求等待时间（Time-per-request）">¶</a>4、用户平均请求等待时间（Time per request）</h6><p>计算公式：处理完成所有请求数所花费的时间/（总请求数/并发用户数），即：</p><p>Time per request=Time taken for tests/（Complete requests/Concurrency Level）</p><h6 id="5、服务器平均请求等待时间（Time-per-request-across-all-concurrent-requests）"><a class="header-anchor" href="#5、服务器平均请求等待时间（Time-per-request-across-all-concurrent-requests）">¶</a>5、服务器平均请求等待时间（Time per request:across all concurrent requests）</h6><p>计算公式：处理完成所有请求数所花费的时间/总请求数，即：</p><p>Time taken for/testsComplete requests</p><p>可以看到，它是吞吐率的倒数。同时，它也等于用户平均请求等待时间/并发用户数，即：Time per request/Concurrency Level</p><h4 id="三、php加速软件Xcache"><a class="header-anchor" href="#三、php加速软件Xcache">¶</a>三、php加速软件Xcache</h4><p>（在 php 主机上完成下面的操作)</p><p>说明：</p><p>php 安装目录：/usr/local/php5.6</p><p>php.ini 配置文件路径：/etc/php.ini</p><p>php 网页根目录：/var/www/benet</p><h5 id="1、安装xcache"><a class="header-anchor" href="#1、安装xcache">¶</a>1、安装xcache</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># wget http://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># tar zxf xcache-3.2.0.tar.gz </span></span><br><span class="line">[root@phpserver ~]<span class="comment"># cd xcache-3.2.0/</span></span><br><span class="line"><span class="comment"># 用 phpize 生成 configure 配置文件</span></span><br><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># /usr/local/php5.6/bin/phpize</span></span><br><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># ./configure --enable-xcache --enable-xcache-coverager \</span></span><br><span class="line">&gt;  --<span class="built_in">enable</span>-xcache-optimizer --with-php-config=/usr/<span class="built_in">local</span>/php5.6/bin/php-config</span><br><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>安装完成后最后出现的目录要记住，后面会用到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing shared extensions:     /usr/<span class="built_in">local</span>/php5.6/lib/php/extensions/no-debug-non-zts-20131226/</span><br></pre></td></tr></table></figure><h5 id="2、创建-xcache-缓存文件"><a class="header-anchor" href="#2、创建-xcache-缓存文件">¶</a>2、创建 xcache 缓存文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># touch /tmp/xcache</span></span><br><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># chmod 777 /tmp/xcache</span></span><br></pre></td></tr></table></figure><h5 id="3、拷贝xcache-后台管理程序到网站根目录"><a class="header-anchor" href="#3、拷贝xcache-后台管理程序到网站根目录">¶</a>3、拷贝xcache 后台管理程序到网站根目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver xcache-3.2.0]<span class="comment"># cp -r htdocs/ /var/www/benet/xcache</span></span><br></pre></td></tr></table></figure><h5 id="4、配置php支持xcache"><a class="header-anchor" href="#4、配置php支持xcache">¶</a>4、配置php支持xcache</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># vim /etc/php.ini</span></span><br><span class="line"><span class="comment"># 在最后添加以下内容</span></span><br><span class="line">[xcache-common]</span><br><span class="line">extension = /usr/<span class="built_in">local</span>/php5.6/lib/php/extensions/no-debug-non-zts-20131226/xcache.so <span class="comment"># 这个路径就是之前保存的路径</span></span><br><span class="line">[xcache.admin]</span><br><span class="line">xcache.admin.enable_auth = Off</span><br><span class="line">[xcache]</span><br><span class="line">xcache.shm_scheme =<span class="string">"mmap"</span></span><br><span class="line">xcache.size=60M</span><br><span class="line">xcache.count =1</span><br><span class="line">xcache.slots =8K</span><br><span class="line">xcache.ttl=0</span><br><span class="line">xcache.gc_interval =0</span><br><span class="line">xcache.var_size=64M</span><br><span class="line">xcache.var_count =1</span><br><span class="line">xcache.var_slots =8K</span><br><span class="line">xcache.var_ttl=0</span><br><span class="line">xcache.var_maxttl=0</span><br><span class="line">xcache.var_gc_interval =300</span><br><span class="line">xcache.test =Off</span><br><span class="line">xcache.readonly_protection = Off</span><br><span class="line">xcache.mmap_path =<span class="string">"/tmp/xcache"</span></span><br><span class="line">xcache.coredump_directory =<span class="string">""</span></span><br><span class="line">xcache.cacher =On</span><br><span class="line">xcache.stat=On</span><br><span class="line">xcache.optimizer =Off</span><br><span class="line">[xcache.coverager]</span><br><span class="line">xcache.coverager =On</span><br><span class="line">xcache.coveragedump_directory =<span class="string">""</span></span><br></pre></td></tr></table></figure><p>将 xcache 目录拷贝到 apache 主机的网页文档目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># scp -r /var/www/benet/xcache/ root@192.168.1.70:/var/www/benet/</span></span><br></pre></td></tr></table></figure><h5 id="5、测试"><a class="header-anchor" href="#5、测试">¶</a>5、测试</h5><p>重启 php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># service php-fpm restart</span></span><br></pre></td></tr></table></figure><p>浏览器打开网站根目录下面的 xcache</p><p>192.168.1.70/xcache可以看到如下页面：<br><img data-src="https://img-blog.csdnimg.cn/20200610184657790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>至此，Linux 下安装 php 加速软件 Xcache 教程完成</p><p>执行 ab 压力测试：</p><p>执行第一次压力测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ab -c 100 -n 1000 http://192.168.1.70/index.php</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.70 (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache</span><br><span class="line">Server Hostname:        192.168.1.70</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.php</span><br><span class="line">Document Length:        84474 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   1.464 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        85</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 85, Exceptions: 0)</span><br><span class="line">Total transferred:      84719909 bytes</span><br><span class="line">HTML transferred:       84473909 bytes</span><br><span class="line">Requests per second:    683.19 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       146.373 [ms] (mean)</span><br><span class="line">Time per request:       1.464 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          56523.11 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.6      0       2</span><br><span class="line">Processing:    23  139  21.1    143     192</span><br><span class="line">Waiting:        9  135  20.9    138     157</span><br><span class="line">Total:         25  140  20.6    143     192</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    143</span><br><span class="line">  66%    145</span><br><span class="line">  75%    147</span><br><span class="line">  80%    148</span><br><span class="line">  90%    152</span><br><span class="line">  95%    157</span><br><span class="line">  98%    160</span><br><span class="line">  99%    161</span><br><span class="line"> 100%    192 (longest request)</span><br></pre></td></tr></table></figure><p>执行第二次压力测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ab -c 100 -n 1000 http://192.168.1.70/index.php</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.1.70 (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache</span><br><span class="line">Server Hostname:        192.168.1.70</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /index.php</span><br><span class="line">Document Length:        84474 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   1.510 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        101</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 101, Exceptions: 0)</span><br><span class="line">Total transferred:      84719889 bytes</span><br><span class="line">HTML transferred:       84473889 bytes</span><br><span class="line">Requests per second:    662.27 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       150.995 [ms] (mean)</span><br><span class="line">Time per request:       1.510 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          54792.57 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.3      0       2</span><br><span class="line">Processing:     8  144  24.0    150     184</span><br><span class="line">Waiting:        4  137  23.6    143     155</span><br><span class="line">Total:          9  144  23.7    150     184</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    150</span><br><span class="line">  66%    152</span><br><span class="line">  75%    152</span><br><span class="line">  80%    153</span><br><span class="line">  90%    155</span><br><span class="line">  95%    157</span><br><span class="line">  98%    158</span><br><span class="line">  99%    160</span><br><span class="line"> 100%    184 (longest request)</span><br></pre></td></tr></table></figure><p>查看 xcache 的命中率：<br><img data-src="https://img-blog.csdnimg.cn/20200610184715159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="四、部署bbs论坛"><a class="header-anchor" href="#四、部署bbs论坛">¶</a>四、部署bbs论坛</h4><h5 id="1、Discuz-的程序文件解压，并且将-upload-中所有文件放置到网站目录-php-服务器的操作"><a class="header-anchor" href="#1、Discuz-的程序文件解压，并且将-upload-中所有文件放置到网站目录-php-服务器的操作">¶</a>1、Discuz 的程序文件解压，并且将 upload 中所有文件放置到网站目录(php 服务器的操作)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># mkdir discus</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># unzip Discuz_7.0.0_FULL_SC_UTF8.zip -d discus</span></span><br><span class="line">[root@phpserver ~]<span class="comment"># mv discus/Discuz_7.0.0_FULL_SC_UTF8/upload/ /var/www/benet/bbs</span></span><br></pre></td></tr></table></figure><h5 id="2、设置-php-fpm-的服务用户为下面文件的属主或者对其设置写权限，否则安装时会报错"><a class="header-anchor" href="#2、设置-php-fpm-的服务用户为下面文件的属主或者对其设置写权限，否则安装时会报错">¶</a>2、设置 php-fpm 的服务用户为下面文件的属主或者对其设置写权限，否则安装时会报错</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># chmod -R 777 /var/www/benet/bbs/</span></span><br></pre></td></tr></table></figure><h5 id="3、修改-php-ini-文件"><a class="header-anchor" href="#3、修改-php-ini-文件">¶</a>3、修改 php.ini 文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># vim  /etc/php.ini</span></span><br><span class="line">short_open_tag = On <span class="comment"># 将Off改为On，否则程序无法正常运行</span></span><br></pre></td></tr></table></figure><h5 id="4、重启-php-fpm"><a class="header-anchor" href="#4、重启-php-fpm">¶</a>4、重启 php-fpm</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># service php-fpm restart</span></span><br></pre></td></tr></table></figure><h5 id="5、web-服务器也需要有静态文件"><a class="header-anchor" href="#5、web-服务器也需要有静态文件">¶</a>5、web 服务器也需要有静态文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># scp -r /var/www/benet/bbs/ root@192.168.1.70:/var/www/benet/</span></span><br></pre></td></tr></table></figure><h5 id="6、在数据库服务器上创建-bbs-数据库及授权帐户"><a class="header-anchor" href="#6、在数据库服务器上创建-bbs-数据库及授权帐户">¶</a>6、在数据库服务器上创建 bbs 数据库及授权帐户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database bbsdb;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all on bbsdb.* to runbbs@&#39;%&#39; identified by &#39;pwd@123&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>置完成之后，输入 httd//192.168.1.70/bbs/install 即可安装<br><img data-src="https://img-blog.csdnimg.cn/20200610184748849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>填写数据库的相关信息，添加数据库服务器的地址和 MariaDB 创建的数据库和用户密码，而 后在设置 bbs 的管理员帐号密码就可以继续安装了<br><img data-src="https://img-blog.csdnimg.cn/20200610184803971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br><img data-src="https://img-blog.csdnimg.cn/20200610184819127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br>出现上面这种情况是由于 php 服务器安装了 discuz 之后导致程序发生变化从而导致动态服 务器和静态服务器的程序不一致，只需要手动把 bbs 服务器的文件和 web 服务器进行一次 同步即可，如果想实现自动同步，需要使用其他服务，如 initory+rsync、sersync 等工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@phpserver ~]<span class="comment"># scp -r /var/www/benet/bbs/* root@192.168.1.70:/var/www/benet/bbs/</span></span><br></pre></td></tr></table></figure><p>动态服务器和静态服务器同步文件之后，再次访问 bbs 的网址就正常了<br><img data-src="https://img-blog.csdnimg.cn/20200610184950613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache深度优化</title>
    <link href="https://pdxblog.top/Apache%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96.html"/>
    <id>https://pdxblog.top/Apache%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96.html</id>
    <published>2020-06-08T16:00:00.000Z</published>
    <updated>2020-07-12T06:35:17.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Apache深度优化"><a class="header-anchor" href="#Apache深度优化">¶</a>Apache深度优化</h3><h4 id="1）开启apache的Gzip（defate）功能"><a class="header-anchor" href="#1）开启apache的Gzip（defate）功能">¶</a>1）开启apache的Gzip（defate）功能</h4><p>gzip 可以极大的加速网站，有时压缩比率高到 80%,最少都有 40%以上，还是相当不错的。 在 Apache2 之后的版本，模块名不叫 gzip,而叫 mod_deflate</p><p>未使用 Gzip：<br><img data-src="https://img-blog.csdnimg.cn/20200609130213307.png" alt><br>开始使用Gzip：<br><img data-src="https://img-blog.csdnimg.cn/20200609130236625.png" alt><br>如果要开启 deflate 的话,一定要打开下面二个模块</p><blockquote><p>LoadModule deflate_module modules/mod_deflate.so</p><p>LoadModule headers_module modules/mod_headers.so</p></blockquote><p>设置压缩比率,取值范围在 1(最低) 到 9(最高)之间,不建议设置太高,虽然有很高的压缩率, 但是占用更多的 CPU 资源.</p><h5 id="mod-deflate-模块检查及安装"><a class="header-anchor" href="#mod-deflate-模块检查及安装">¶</a>mod_deflate 模块检查及安装</h5><p>检查模块是否安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># apachectl -M | grep deflte</span></span><br></pre></td></tr></table></figure><p>如果没有安装，有两种安装方法：</p><h6 id="a、编译时安装方法"><a class="header-anchor" href="#a、编译时安装方法">¶</a>a、编译时安装方法</h6><p>在编译安装Apache的时候跟上–enable-deflate 即可实现安装，<a href="https://blog.csdn.net/weixin_45636702/article/details/106614543" target="_blank" rel="noopener">Apache安装部署点击这里</a></p><h6 id="b、DSO方式安装"><a class="header-anchor" href="#b、DSO方式安装">¶</a>b、DSO方式安装</h6><p>切到apache 源码包 mod_deflate 所在 的目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># cd  /root/httpd-2.4.23/modules/filters/</span></span><br></pre></td></tr></table></figure><p>以 dso 的方式编译安装到 apache 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache filters]<span class="comment"># apxs -c -i -a mod_deflate.c</span></span><br></pre></td></tr></table></figure><p>如果报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@apache filters]<span class="comment"># apxs -c -i -a mod_deflate.c</span></span><br><span class="line">/usr/<span class="built_in">local</span>/apr/build-1/libtool --silent --mode=compile gcc -std=gnu99 -prefer-pic   -DLINUX -D_REENTRANT -D_GNU_SOURCE -g -O2 -pthread -I/usr/<span class="built_in">local</span>/http-2.4.23/include  -I/usr/<span class="built_in">local</span>/apr/include/apr-1   -I/usr/<span class="built_in">local</span>/apr-util/include/apr-1   -c -o mod_deflate.lo mod_deflate.c &amp;&amp; touch mod_deflate.slo</span><br><span class="line">mod_deflate.c:51:18: fatal error: zlib.h: No such file or directory</span><br><span class="line"> <span class="comment">#include "zlib.h"</span></span><br><span class="line">                  ^</span><br><span class="line">compilation terminated.</span><br><span class="line">apxs:Error: Command failed with rc=65536</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>原因是缺少了zlib-devel 的安装包，装上就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache filters]<span class="comment"># yum -y install zlib-devel</span></span><br></pre></td></tr></table></figure><p>再次安装模块，检查mod_deflate是否安装，成功安装这里会显示出该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache filters]<span class="comment"># ll /usr/local/http-2.4.23/modules/mod_deflate.so</span></span><br><span class="line">-rwxr-xr-x. 1 root root 98104 6月   9 09:20 /usr/<span class="built_in">local</span>/http-2.4.23/modules/mod_deflate.so</span><br></pre></td></tr></table></figure><p>apxs 命令参数说明：</p><ul><li>-i：此选项表示需要执行安装操作，以安装一个或多个动态共享对象到服务器的 modules 目 录中</li><li>-a：此选项自动增加一个 LoadModule 行到 httpd.conf 文件中，以启用此模块，或者，如果 此行已经存在，则启用之</li><li>-c：此选项表示需要执行编译操作</li></ul><p>如果重启的时候出现错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># apachectl -t</span></span><br><span class="line">httpd: Syntax error on line 104 of /usr/<span class="built_in">local</span>/http-2.4.23/conf/httpd.conf: Cannot load modules/mod_deflate.so into server: /usr/<span class="built_in">local</span>/http-2.4.23/modules/mod_deflate.so: undefined symbol: inflate</span><br><span class="line">[root@apache ~]<span class="comment"># apachectl -M</span></span><br><span class="line">httpd: Syntax error on line 104 of /usr/<span class="built_in">local</span>/http-2.4.23/conf/httpd.conf: Cannot load modules/mod_deflate.so into server: /usr/<span class="built_in">local</span>/http-2.4.23/modules/mod_deflate.so: undefined symbol: inflate</span><br><span class="line">[root@apache ~]<span class="comment"># httpd -M</span></span><br><span class="line">httpd: Syntax error on line 104 of /usr/<span class="built_in">local</span>/http-2.4.23/conf/httpd.conf: Cannot load modules/mod_deflate.so into server: /usr/<span class="built_in">local</span>/http-2.4.23/modules/mod_deflate.so: undefined symbol: inflate</span><br></pre></td></tr></table></figure><p>需要在 LoadModule deflate_module modules/mod_deflate.so 的前面加载 <a href="http://zlib.so" target="_blank" rel="noopener">zlib.so</a> 这里需要注意的是 LoadModule deflate_module 需要放在 LoadModule php5_module 之后 LoadFile /usr/lib/libz.so(x64 系统中该库文件位于/usr/lib64 目录下，可以软链接到/usr/lib 下 或者就在 LoadModule deflate_module modules/mod_deflate.so 这行的上一行添加 LoadFile /usr/lib64/libz.so 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line">LoadFile /usr/lib64/libz.so <span class="comment"># 追加</span></span><br><span class="line">LoadModule deflate_module modules/mod_deflate.so <span class="comment"># 去掉注释</span></span><br><span class="line">LoadModule headers_module modules/mod_headers.so <span class="comment"># 去掉注释</span></span><br></pre></td></tr></table></figure><p>这样 apache 就会启用这两个模块，</p><p>mod_deflate 是压缩模块，就是对要传输到客户端的代码进行 gzip 压缩</p><p>mod_headers 模块的作用是告诉浏览器页面使用了 gzip 压缩，如果不开启 mod_headers 那么浏览器就会 对 gzip 压缩过的页面进行下载，而无法正常显示</p><p>LoadModule /usr/lib64/libz.so：如果使用DSO方式安装的deflate模块需要声明，没用可以不用写</p><h6 id="在添加压缩级别等参数："><a class="header-anchor" href="#在添加压缩级别等参数：">¶</a>在添加压缩级别等参数：</h6><p>在 httpd.conf 中加入以下代码，可以加到任何空白地方，不了解 apache 的话，如果担心加 错地方，就放到 http.conf 文件的最后一行</p><p>注：在添加代码前最好先查一查要添加的代码是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_deflate.c&gt;</span><br><span class="line">DeflateCompressionLevel 9</span><br><span class="line">SetOutputFilter DEFLATE</span><br><span class="line">AddOutputFilterByType DEFLATE text/*</span><br><span class="line">AddOutputFilterByType DEFLATE application/ms* application/vnd* application/postscript application/javascript application/x-javascript</span><br><span class="line">AddOutputFilterByType DEFLATE application/x-httpd-php application x-httpd-fastphp</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:gif|jpe?g|png)$ no-gzip dont-vary </span><br><span class="line">SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:pdf|mov|avi|mp3|mp4|rm)$ no-gzip dont-vary</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>DeflateCompressionLevel 9：</p><blockquote><p>压缩程度的等级，预设可以采用 6 这个数值，以维持 耗用处理器效能与网页压缩质量的平衡</p></blockquote><p>SetOutputFilter DEFLATE：</p><blockquote><p>设置输出过滤器，对输出启用压缩，必须的，就像一个 开关一样，告诉 apache 对传输到浏览器的内容进行压缩</p></blockquote><p>AddOutputFilterByType DEFLATE text/*：</p><blockquote><p>设置对文件是文本的内容进行压缩，例如 text/html text/css text/plain 等</p></blockquote><p>AddOutputFilterByType DEFLATE application/x-httpd-php application/x-httpd-fastphp：</p><blockquote><p>对 php 类型的文件进行压缩</p></blockquote><p>SetEnvIfNoCase Request_URI .(?:gif|jpe?g|png)$ no-gzip dont-vary：</p><blockquote><p>设置不对后缀 gif，jpg，jpeg，png 的图片文件进行压缩。注：?:表示不会捕获 ( )里内容了</p></blockquote><p>SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary：</p><blockquote><p>同上，设置不对 exe，tgz，gz 等的文件进行压缩</p></blockquote><p>SetEnvIfNoCase Request_URI .(?:pdf|mov|avi|mp3|mp4|rm)$ no-gzip dont-vary</p><blockquote><p>同上，设置不对 pdf，avi，mp3 等的文件进行压缩</p></blockquote><h6 id="设置日志输出"><a class="header-anchor" href="#设置日志输出">¶</a>设置日志输出</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DeflateFilterNote Input input_info</span><br><span class="line">DeflateFilterNote Output output_info</span><br><span class="line">DeflateFilterNote Ratio ratio_info</span><br><span class="line">LogFormat <span class="string">'"%r" %&#123;output_info&#125;n/%&#123;input_info&#125;n (%&#123;ratio_info&#125;n%%)'</span> deflate</span><br><span class="line">CustomLog logs/deflate_log.log deflate</span><br></pre></td></tr></table></figure><p>DeflateFilterNote Input input_info：</p><blockquote><p>声明输入流的 byte 数量</p></blockquote><p>DeflateFilterNote Output output_info：</p><blockquote><p>声明输出流的 byte 数量</p></blockquote><p>DeflateFilterNote Ratio ratio_info：</p><blockquote><p>声明压缩的百分比</p></blockquote><p>LogFormat ‘&quot;%r&quot; %{output_info}n/%{input_info}n (%{ratio_info}n%%)’ deflate：</p><blockquote><p>声明日志格式</p></blockquote><p>修改完成后保存退出并重启 apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># systemctl  restart  httpd</span></span><br></pre></td></tr></table></figure><p>使用谷歌浏览器测试访问，如下图显示结果：（提示：在访问测试页之前按 F12 键）<br><img data-src="https://img-blog.csdnimg.cn/2020060913031552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># cat /usr/local/http-2.4.23/logs/deflate_log.log</span></span><br><span class="line"><span class="string">"GET /test.html HTTP/1.1"</span> 6421/19949 (32%)</span><br><span class="line"><span class="string">"GET /test1.html HTTP/1.1"</span> 1360/4266 (31%)</span><br></pre></td></tr></table></figure><p>注：图片是不需要启用 GZip 压缩的，从 GZip 检测结果来看，压缩后的图片体积竟然大过原 体积！这就解释了为什么图片不用启用 GZip 压缩的原因了！</p><p>可以检测了几个门户网站的图片，还有 Google、baidu 的图片，统统都没有启用图片 GZip 压缩，只是启用了 html、css、js 等文件的 GZip 压缩，这就更加说明了 GZip 压缩不适用于图 片上。另外，除了图片之外，flash 的 swf 文件也是不用启用 GZip 压缩的</p><h4 id="2）配置-mod-expires-模块"><a class="header-anchor" href="#2）配置-mod-expires-模块">¶</a>2）配置 mod_expires 模块</h4><p>这个非常有用的优化，mod_expires 可以减少 20-30%左右的重复请求，让重复的用户对指定 的页面请求结果都 CACHE 在本地，根本不向服务器发出请求。但要注意更新快的文件不要 这么做</p><p>这个模块控制服务器应答时的 Expires 头内容和 Cache-Control 头的 max-age 指令。有效期 (expiration date)可以设置为相对于源文件的最后修改时刻或者客户端的访问时刻。</p><p>未启用 expire 的效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># curl -I 192.168.1.70/12.png</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 09 Jun 2020 02:11:04 GMT</span><br><span class="line">Server: Apache/2.4.23 (Unix)</span><br><span class="line">Last-Modified: Sat, 28 Sep 2019 02:39:14 GMT</span><br><span class="line">ETag: <span class="string">"206701-59393e8841880"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 2123521</span><br><span class="line">Content-Type: image/png</span><br></pre></td></tr></table></figure><h6 id="启用-expire-缓存："><a class="header-anchor" href="#启用-expire-缓存：">¶</a>启用 expire 缓存：</h6><p>mod_expires 的安装配置：</p><p>启用 expires_module</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule expires_module modules/mod_expires.so <span class="comment"># 去掉注释</span></span><br></pre></td></tr></table></figure><p>然后添加 Expires 配置规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_expires.c&gt;</span><br><span class="line">ExpiresActive On</span><br><span class="line">ExpiresByType text/css <span class="string">"now plus 1 month"</span></span><br><span class="line">ExpiresByType application/x-javascript <span class="string">"now plus 5 day"</span></span><br><span class="line">ExpiresByType image/jpeg <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresByType image/gif <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresByType image/bmp <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresByType image/x-icon <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresByType image/png <span class="string">"access plus 1 minute"</span></span><br><span class="line">ExpiresByType application/x-shockwave-flash <span class="string">"access plus 1 month"</span></span><br><span class="line">ExpiresDefault <span class="string">"now plus 0 minute"</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>语法：</p><ul><li>ExpiresByType：定义缓存页面</li><li>text/html：指定缓存界面的类型</li><li>A60：缓存页面的时间</li><li>ExpireActive On：开启缓存功能</li><li>ExpiresByType text/html M60：页面最后一次修改缓存60</li><li>ExpiresByType image/png A60：图片缓存，和ExpiresByType image/png &quot;access plus 1 month&quot;意思相同</li><li>ExpiresDefault “now plus 0 minute”：其他页面不进行缓存</li></ul><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># curl -I 192.168.1.70/12.png</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 09 Jun 2020 02:14:55 GMT</span><br><span class="line">Server: Apache/2.4.23 (Unix)</span><br><span class="line">Last-Modified: Sat, 28 Sep 2019 02:39:14 GMT</span><br><span class="line">ETag: <span class="string">"206701-59393e8841880"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 2123521</span><br><span class="line">Cache-Control: max-age=60</span><br><span class="line">Expires: Tue, 09 Jun 2020 02:15:55 GMT</span><br><span class="line">Content-Type: image/png</span><br></pre></td></tr></table></figure><p>ExpiresDefault 和 ExpiresByType 指令同样能够用易懂的语法格式进行定义：</p><blockquote><p>ExpiresDefault &quot; [plus] {}&quot;</p><p>ExpiresByType type/encoding &quot; [plus] {}&quot;</p></blockquote><p>其中bash是下列之一：</p><ul><li>access</li><li>now (等价于’access ')</li><li>modification</li></ul><p>plus 关键字是可选的。num必须是整数，type是下列之一</p><ul><li>years</li><li>moths</li><li>weeks</li><li>days</li><li>hours</li><li>minutes</li><li>seconds</li></ul><p>例如，下列 3 个指令都表示文档默认的有效期是一个月：</p><blockquote><p>ExpiresDefault “access plus 1 month”</p><p>ExpiresDefault “access plus 4 weeks”</p><p>ExpiresDefault “access plus 30 days”</p></blockquote><p>有效期可以通过增加&quot;num type&quot;子句进一步调整</p><blockquote><p>ExpiresByType text/html “access plus 1 month 15 days 2 hours”</p><p>ExpiresByType image/gif “modification plus 5 hours 3 minutes”</p></blockquote><p>注意，如果你使用基于最后修改日期的设置，&quot;Expires:&quot;头将不会 被添加到那些并非来自于 磁盘文件的内容。这是因为这些内容并不存在&quot;最后修改时间&quot;的属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GIF 有效期为 1 个月（秒数）</span></span><br><span class="line">ExpiresByType image/gif A2592000</span><br><span class="line">ExpiresByType image/jpeg A2592000</span><br><span class="line">ExpiresByType image/png A2592000</span><br><span class="line">ExpiresByType image/x-icon A2592000</span><br><span class="line">ExpiresByType application/x-javascript A604800</span><br><span class="line">ExpiresByType text/plain A604800</span><br><span class="line"><span class="comment"># HTML 文档的有效期是最后修改时刻后的一星期</span></span><br><span class="line">ExpiresByType text/html M604800</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>&quot;M&quot;表示源文件的最后修改时刻，&quot;A&quot;表示客户端对源文件的访问时刻。后面的时间则以秒计 算</p><p>有关 Apache Expires Module 的介绍，可以参阅其<a href="http://httpd.apache.org/docs/2.4/mod/mod_expires.html" target="_blank" rel="noopener">官方文档</a>:</p><h4 id="3）Apache禁止目录遍历"><a class="header-anchor" href="#3）Apache禁止目录遍历">¶</a>3）Apache禁止目录遍历</h4><p>未禁用的效果：<br><img data-src="https://img-blog.csdnimg.cn/20200609130341874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><p>将 Options Indexes FollowSymLinks 中的 Indexes 去掉，就可以禁止 Apache 显示该目录结构。</p><p>Indexes 的作用就是当该目录下没有 index.html 文件时，就显示目录结构</p><p>在配置文件（httpd.conf）中搜索Options，找到Options Indexes FollowSymLinks 并修改为Options  FollowSymLinks</p><p>重启服务验证：<br><img data-src="https://img-blog.csdnimg.cn/20200609130353734.png" alt></p><h4 id="4）Apache隐藏版本信息"><a class="header-anchor" href="#4）Apache隐藏版本信息">¶</a>4）Apache隐藏版本信息</h4><p>测试默认 apache 的状态信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># curl -I 192.168.1.70</span></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Date: Tue, 09 Jun 2020 02:29:20 GMT</span><br><span class="line">Server: Apache/2.4.23 (Unix) <span class="comment"># 版本信息直接暴露</span></span><br><span class="line">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><h5 id="1、主配置中启用httpd-default-conf"><a class="header-anchor" href="#1、主配置中启用httpd-default-conf">¶</a>1、主配置中启用httpd-default.conf</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Include conf/extra/httpd-default.conf  <span class="comment"># 去掉注释</span></span><br></pre></td></tr></table></figure><h5 id="2、修改-httpd-default-conf"><a class="header-anchor" href="#2、修改-httpd-default-conf">¶</a>2、修改 httpd-default.conf</h5><p>文件：/usr/local/http-2.4.23/conf/extra/httpd-default.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">找到</span><br><span class="line">ServerTokens Full</span><br><span class="line">ServerSignature On</span><br><span class="line">改成</span><br><span class="line">ServerTokens Prod</span><br><span class="line">ServerSignature Off</span><br></pre></td></tr></table></figure><p>重启 apache 测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># apachectl restart</span></span><br><span class="line">[root@apache ~]<span class="comment"># curl -I 192.168.1.70</span></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Date: Tue, 09 Jun 2020 02:34:30 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><p>如果你需要彻底将版本之类的信息进行改头换面，你就需要在编译之前做准备或者进行从新 编译了。在重新编译时，修改源码包下 include 目录下的 ap_release.h 文件</p><p>#define AP_SERVER_BASEVENDOR “Apache Software Foundation” #服务的供应商名称</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define AP_SERVER_BASEPROJECT “Apache HTTP Server” #服务的项目名称</span><br><span class="line">#define AP_SERVER_BASEPRODUCT “Apache” #服务的产品名</span><br><span class="line">#define AP_SERVER_MAJORVERSION_NUMBER 2 #主要版本号</span><br><span class="line">#define AP_SERVER_MINORVERSION_NUMBER 4 #小版本号</span><br><span class="line">#define AP_SERVER_PATCHLEVEL_NUMBER 23 #补丁级别</span><br><span class="line">#define AP_SERVER_DEVBUILD_BOOLEAN 0 #</span><br></pre></td></tr></table></figure><p>上述列出的行，已经给出了注释，大家可以修改成自己想要的，然后编译安装之后，对方就彻底不知道你的版本号了</p><h4 id="5）Apache日志分割"><a class="header-anchor" href="#5）Apache日志分割">¶</a>5）Apache日志分割</h4><h5 id="为什么要分割日志"><a class="header-anchor" href="#为什么要分割日志">¶</a>为什么要分割日志</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">随着网站的访问越来越大，WebServer 产生的日志文件也会越来越大，如果不对日志进行分 割，那么只能一次将大的日志(如 Apache 的日志)整个删除，这样也丢失了很多对网站比较 宝贵的信息，因为这些日志可以用来进行访问分析、网络安全监察、网络运行状况监控等， 因此管理好这些海量的日志对网站的意义是很大的</span><br></pre></td></tr></table></figure><h5 id="方法-1-使用-rotatelogs（apache-自带的工具）每隔一天记录一个日志"><a class="header-anchor" href="#方法-1-使用-rotatelogs（apache-自带的工具）每隔一天记录一个日志">¶</a>方法 1:使用 rotatelogs（apache 自带的工具）每隔一天记录一个日志</h5><p>编辑Apache 的主配置文件，更改内容如下：</p><p>注释掉如下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorLog <span class="string">"logs/error_log"</span></span><br><span class="line">CustomLog <span class="string">"logs/access_log"</span> common</span><br></pre></td></tr></table></figure><p>然后添加如下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorLog <span class="string">"|/usr/local/http-2.4.23/bin/rotatelogs -l logs/error_%Y%m%d.log 86400"</span></span><br><span class="line">CustomLog <span class="string">"|/usr/local/http-2.4.23/bin/rotatelogs -l logs/access_%Y%m%d.log 86400"</span> combined</span><br></pre></td></tr></table></figure><p>注：其中 86400 为轮转的时间单位为秒</p><p>注：rotatelogs这个要写绝对路径，可以使用which来查询它的路径</p><p>验证：查看 logs 目录下的日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ls /usr/local/http-2.4.23/logs/</span></span><br><span class="line">access_20200609.log  access_log  deflate_log.log  error_20200609.log  error_log  httpd.pid</span><br></pre></td></tr></table></figure><p>由于 apache 自带的日志轮询工具 rotatelogs，据说在进行日志切割时容易丢日志，因此我们 通常使用 cronolog 进行日志轮询</p><h5 id="方法-2、使用-cronolog-为每一天建立一个新的日志"><a class="header-anchor" href="#方法-2、使用-cronolog-为每一天建立一个新的日志">¶</a>方法 2、使用 cronolog 为每一天建立一个新的日志</h5><p>安装 cronolog 程序</p><p>下载 <a href="https://pan.baidu.com/s/1N7qCgA7KESqS_Tdp4tU-dg" target="_blank" rel="noopener">cronolog</a><br>提取码：uzra</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf cronolog-1.6.2.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd cronolog-1.6.2/</span></span><br><span class="line">[root@apache cronolog-1.6.2]<span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>主配置文件中的使用方法，添加如下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorLog <span class="string">"|/usr/local/sbin/cronolog logs/error-%Y%m%d.log"</span> </span><br><span class="line">CustomLog <span class="string">"|/usr/local/sbin/cronolog logs/access-%Y%m%d.log"</span> combined</span><br></pre></td></tr></table></figure><p>如果 Apache 中有多个虚拟主机，最好每个虚拟主机中放置一个这样的代码，并将日志文件 名改成不同的名字</p><p>扩展：</p><p>这个保证了每天一个文件夹文件夹下每个小时产生一个 log</p><blockquote><p>CustomLog “|/usr/local/sbin/cronolog logs /%Y%m%d/access_log.%H” combined</p></blockquote><p>按天轮询（生产环境常见用法，推荐使用）：</p><blockquote><p>CustomLog “|/usr/local/sbin/cronolog logs/access_www_%Y%m%d.log” combined</p></blockquote><p>按小时轮询（生产环境较常见用法）：</p><blockquote><p>CustomLog “|/usr/local/sbin/cronolog logs /access_www_ %Y%m%d%H.log” combined</p></blockquote><p>验证：查看 logs 目录下的日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ls /usr/local/http-2.4.23/logs/</span></span><br><span class="line">access_20200609.log  access_log       error_20200609.log  error_log</span><br><span class="line">access-20200609.log  deflate_log.log  error-20200609.log  httpd.pid</span><br></pre></td></tr></table></figure><p>注意： 这两个管道日志文件程序还有一点不同之处是使用 cronolog 时如果日志是放在某个不存 在的路径则会自动创建目录，而使用 rotatelogs 时不能自动创建，这一点要特别注意</p><h4 id="6）配置防盗链"><a class="header-anchor" href="#6）配置防盗链">¶</a>6）配置防盗链</h4><p>有时候，你的网站莫名其妙的访问量变大，不要高兴的太早，有可能是被别人盗链了。 举个例子：比如你搭了个 discuz 论坛，里面有些热点图片、视频；然后别人将他网站上访问 图片的地址重定向到你的 discuz 上，这样他的服务器就可以空闲出来了；也就是说别人访问 他网站的图片视频，消耗的确是你服务器的资源</p><p>解决这个问题的方法是配置下防盗链，让外来的盗不了链</p><h5 id="方法-1：Apache-防盗链的第一种实现方法，可以用-rewrite-实现"><a class="header-anchor" href="#方法-1：Apache-防盗链的第一种实现方法，可以用-rewrite-实现">¶</a>方法 1：Apache 防盗链的第一种实现方法，可以用 rewrite 实现</h5><p>打开 httpd.conf，确保有这么一行配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule rewrite_module modules/mod_rewrite.so <span class="comment"># 去掉注释</span></span><br></pre></td></tr></table></figure><p>防盗链配置</p><p>在<code>&lt;Directory &quot;/usr/local/http-2.4.23/htdocs&quot;&gt;</code>这个区域下添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^$</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://192.168.1.70/.*$ [NC]</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://192.168.1.70$ [NC]</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://192.168.1.70/.*$ [NC]</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://192.168.1.70$ [NC]</span><br><span class="line">RewriteRule .*\.(gif|jpg|swf)<span class="variable">$http</span>://192.168.1.70/image/error.png[R,NC,L]</span><br></pre></td></tr></table></figure><p>注：相关选项的解释</p><ul><li>RewriteEngine On：</li></ul><blockquote><p>启用 rewrite，要想 rewrite 起作用，必须要写上</p></blockquote><ul><li>RewriteCond test-string condPattern ：</li></ul><blockquote><p>写在 RewriteRule 之前，可以有一或 N 条，用于测试 rewrite 的匹配条件，具体怎么写，后面会详细说到</p></blockquote><ul><li>RewriteRule Pattern Substitution：</li></ul><blockquote><p>规则</p></blockquote><ul><li>%{HTTP_REFERER}：</li></ul><blockquote><p>服务器变量，HTTPReferer 是 header 的一部分，当浏览器向 web 服务器发送请求的时候，一般会带上 Referer，告诉服务器我是从哪个页面链接过来的，服 务器藉此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就 能够从 HTTP Referer 中统计出每天有多少用户点击我主页上的链接访问他的网站</p></blockquote><ul><li>[ NC]：</li></ul><blockquote><p>指的是不区分大小写,[R]强制重定向 redirect</p></blockquote><ul><li>字母 L 表示如果能匹配本条规则，那么本条规则是最后一条(Last)，忽略之后的规则</li></ul><p>防盗链配置的说明：</p><p><strong>192.168.1.70：</strong></p><blockquote><p>表示自己的信任站点，如果有域名的可以写域名</p></blockquote><p><strong>gif|jpg|swf：</strong></p><blockquote><p>要保护文件的扩展名(以|分开)。以这些为扩展名的文件，必须通过红色标注的网址引用， 才可以访问</p></blockquote><p><strong>192.168.1.70/image/error.png：</strong></p><blockquote><p>定义被盗链时替代的图片，让所有盗链 jpg、gif、swf 等文件的网页，显示网页文档根目 录下的 image/ error.png 文件。注意：替换显示的图片不要放在设置防盗链的目录中，并且该图片文件体积越小越好。当然你也可以不设置替换图片，而是使用下面的语句即可：RewriteRule .*.(gif|jpg|png)$ - [F]</p></blockquote><p>注：[F] (强制 URL 为被禁止的 forbidden),强制当前 URL 为被禁止的，即，立即反馈一 个 HTTP 响应代码 403(被禁止的)</p><h6 id="验证"><a class="header-anchor" href="#验证">¶</a>验证</h6><p>再打开一个虚拟机（192.168.1.50），验证防盗链是否配置成功：</p><p>1、安装一个httpd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install httpd</span></span><br></pre></td></tr></table></figure><p>2、模拟web页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /var/www/html/index.html</span></span><br><span class="line">&lt;a  href=<span class="string">"http://192.168.1.70/12.png"</span>&gt;lianjie&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200609130430605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt><br><img data-src="https://img-blog.csdnimg.cn/20200609130444922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h5 id="方法-2"><a class="header-anchor" href="#方法-2">¶</a>方法 2</h5><p>通过判断浏览器头信息来阻止某些请求，即利用 SetEnvIfNoCase 和 access。</p><p>这个方法可以通过阻止某些机器人或蜘蛛爬虫抓取你的网站来节省你的带宽流量</p><p>语法: SetEnvIfNoCase attribute regex [!]env-variable[=value] [[!]env-variable[=value]] … SetEnvIfNoCase 当满足某个条件时，为变量赋值，即根据客户端请求属性设置环境变量</p><p>注：Referer ：指明了请求当前资源原始资源的 URL，使用 referer 是可以防盗链 然后在找到自己网站对应的配置的地方（如在主配置文件中或虚拟主机中），加入下列代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SetEnvIfNoCase Referer <span class="string">"^$"</span> local_ref</span><br><span class="line">SetEnvIfNoCase Referer<span class="string">"^http://www.benet.com/.*$"</span> local_ref</span><br><span class="line">SetEnvIfNoCase Referer<span class="string">"^http://benet.com/.*$"</span>local_ref</span><br><span class="line">&lt;filesmatch<span class="string">"\.(mp3|mp4|zip|rar|jpg|gif|png)"</span>&gt;</span><br></pre></td></tr></table></figure><p>2.4 版本以下的：</p><p>方法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Order Deny,Allow</span><br><span class="line">Allow from env=local_ref</span><br><span class="line">Deny from all</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Order Allow,Deny</span><br><span class="line">Allow from env=local_ref</span><br></pre></td></tr></table></figure><p>2.4 版本以上，方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Require all denied</span><br><span class="line"> Require env local_ref</span><br><span class="line">&lt;/filesmatch&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache安装部署及工作模式</title>
    <link href="https://pdxblog.top/Apache%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://pdxblog.top/Apache%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.html</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-06-09T02:47:45.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache安装部署及工作模式"><a class="header-anchor" href="#Apache安装部署及工作模式">¶</a>Apache安装部署及工作模式</h2><p>新版本的httpd-2.4新增一下特性：</p><p>新增模块：</p><ul><li>mod_proxy_fcgi(可提供 fcgi 代理）</li><li>mod_ratelimit（限制用户带宽）</li><li>mod_request（请求模块，对请求做过滤）</li></ul><p>对于基于 IP 的访问控制做了修改，不再支持 allow,deny,order 机制，而是统一使用 require 进行</p><p>还新增以下几条新特性；</p><ul><li>1、MPM 支持在运行时装载;不过要开启这种特性，在编译安装要启用这三种功能；</li></ul><blockquote><p>–enable-mpms-shared=all --with-mpm=event</p></blockquote><ul><li>2、支持 event</li><li>3、支持异步读写</li><li>4、在每个模块及每个目录上指定日志级别</li><li>5、增强版的表达式分析器</li><li>6、每请求配置：If, Elseif</li><li>7、毫秒级别的 keepalive timeout</li><li>8、基于 FQDN 的虚拟主机不再需要 NameVirtualHost 指令</li><li>9、支持使用自定义变量</li></ul><h3 id="一、部署apache"><a class="header-anchor" href="#一、部署apache">¶</a>一、部署apache</h3><p>安装环境：</p><p>操作系统：Centos7.5，关闭selinux</p><p>检查http是否安装，如查安装则卸载</p><h4 id="1、安装apache2-4-23"><a class="header-anchor" href="#1、安装apache2-4-23">¶</a>1、安装apache2.4.23</h4><h5 id="（1）下载源码包："><a class="header-anchor" href="#（1）下载源码包：">¶</a>（1）下载源码包：</h5><p>httpd-2.4.23.tar.gz</p><p>apr-1.5.2.tar.gz</p><p>apr-util-1.5.4.tar.gz</p><p>zlib-1.2.8.tar.gz</p><p>pcre-8.39.tar.gz</p><p><a href="https://pan.baidu.com/s/1N7qCgA7KESqS_Tdp4tU-dg" target="_blank" rel="noopener">软件链接</a><br>提取码：uzra</p><p>注：apr(Apache Portable Runtime)Apache 可移植运行库，它是一个对操作系统调用的抽 象库，用来实现 Apache 内部组件对操作系统的使用，提高系统的可移植性。</p><h5 id="（2）安装apr和apr-util"><a class="header-anchor" href="#（2）安装apr和apr-util">¶</a>（2）安装apr和apr-util</h5><blockquote><p>apr</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf apr-1.5.2.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  apr-1.5.2/</span></span><br><span class="line">[root@apache apr-1.5.2]<span class="comment"># ./configure --prefix=/usr/local/apr</span></span><br><span class="line">[root@apache apr-1.5.2]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><blockquote><p>apr-util</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf apr-util-1.5.4.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  apr-util-1.5.4/</span></span><br><span class="line">[root@apache apr-util-1.5.4]<span class="comment"># ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr</span></span><br><span class="line">[root@apache apr-util-1.5.4]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="（3）安装zlib"><a class="header-anchor" href="#（3）安装zlib">¶</a>（3）安装zlib</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf zlib-1.2.8.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  zlib-1.2.8/</span></span><br><span class="line">[root@apache zlib-1.2.8]<span class="comment"># ./configure --prefix=/usr/local/zlib</span></span><br><span class="line">[root@apache zlib-1.2.8]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="（4）安装pcre"><a class="header-anchor" href="#（4）安装pcre">¶</a>（4）安装pcre</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf pcre-8.39.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  pcre-8.39/</span></span><br><span class="line">[root@apache pcre-8.39]<span class="comment"># ./configure --prefix=/usr/local/pcre</span></span><br><span class="line">[root@apache pcre-8.39]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="（5）安装openssl"><a class="header-anchor" href="#（5）安装openssl">¶</a>（5）安装openssl</h5><p>安装 apache2.4.23 时提示 openssl 版本过低，centos7 自带版本 openssl-1.0.1e</p><p>下载openssl：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># wget https://www.openssl.org/source/openssl-1.0.1u.tar.gz</span></span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># tar zxf openssl-1.0.1u.tar.gz </span></span><br><span class="line">[root@apache ~]<span class="comment"># cd  openssl-1.0.1u/</span></span><br><span class="line">[root@apache openssl-1.0.1u]<span class="comment"># ./config -fPIC --prefix=/usr/local/openssl enable-shared</span></span><br><span class="line">[root@apache openssl-1.0.1u]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">[root@apache ~]<span class="comment"># mv /usr/bin/openssl /usr/bin/openssl.1.0.1e</span></span><br><span class="line">[root@apache ~]<span class="comment"># ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span></span><br></pre></td></tr></table></figure><h5 id="（6）安装apache2-4-23"><a class="header-anchor" href="#（6）安装apache2-4-23">¶</a>（6）安装apache2.4.23</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@apache httpd-2.4.23]<span class="comment"># ./configure --prefix=/usr/local/http-2.4.23 --enable-so \</span></span><br><span class="line">&gt;  --<span class="built_in">enable</span>-cgi --<span class="built_in">enable</span>-cgid --<span class="built_in">enable</span>-ssl --with-ssl=/usr/<span class="built_in">local</span>/openssl \</span><br><span class="line">&gt;  --<span class="built_in">enable</span>-rewrite --with-pcre=/usr/<span class="built_in">local</span>/pcre --with-z=/usr/<span class="built_in">local</span>/zlib \</span><br><span class="line">&gt;  --with-apr=/usr/<span class="built_in">local</span>/apr --with-apr-util=/usr/<span class="built_in">local</span>/apr-util \</span><br><span class="line">&gt;  --<span class="built_in">enable</span>-modeles=most --<span class="built_in">enable</span>-mods-shared=most --<span class="built_in">enable</span>-mpms-shared=all \</span><br><span class="line">&gt;  --with-mpm=event --<span class="built_in">enable</span>-proxy --<span class="built_in">enable</span>-proxy-fcgi --<span class="built_in">enable</span>-expires --<span class="built_in">enable</span>-deflate</span><br></pre></td></tr></table></figure><p>相关参数解释：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">--enable-so：支持动态共享模块（即打开 DSO 支持）</span><br><span class="line"></span><br><span class="line">--enable-rewrite：支持 url 重写</span><br><span class="line"></span><br><span class="line">--enable-ssl：支持 ssl</span><br><span class="line"></span><br><span class="line">--with-ssl=/usr/local/openssl：指定 ssl 安装位置</span><br><span class="line"></span><br><span class="line">--enable-cgi：启用 cgi</span><br><span class="line"></span><br><span class="line">--enable-cgid：MPM 使用的是 event 或 worker 要启用 cgid</span><br><span class="line"></span><br><span class="line">--enable-modules=most：明确指明要静态编译到 httpd 二进制文件的模块，为 空格分隔的模块名列表、all 或者 most，all 表示包含所有模块，most 表示包含大部分常用模块</span><br><span class="line"></span><br><span class="line">--enable-mods-shared=most：明确指明要以 DSO 方式编译的模块，为空格分隔 的模块名列表、all 或者 most，all 表示包含所有模 块，most 表示包含大部分模块</span><br><span class="line"></span><br><span class="line">--enable-mpms-shared=all：启用 MPM 所有支持的模式，这样 event、worker、prefork 就会以 模块化的方式安装，要用哪个就在 httpd.conf 里配置就好了</span><br><span class="line"></span><br><span class="line">--with-mpm=event：指定启用的 mpm 模式，默认使用 enevt 模式，在 apache 的早期版本 2.0 默认 prefork,2.2 版本是 worker，2.4 版本是 event</span><br><span class="line"></span><br><span class="line">--with-pcre=/usr/local/pcre：支持 pcre</span><br><span class="line"></span><br><span class="line">--with-z=/usr/local/zlib：使用 zlib 压缩库</span><br><span class="line"></span><br><span class="line">--with-apr=/usr/local/apr：指定 apr 的安装路径</span><br><span class="line"></span><br><span class="line">--with-apr-util=/usr/local/apr-util：指定 apr-util 的安装路径</span><br><span class="line"></span><br><span class="line">--enable-expires：激活彧通过配置文件控制 HTTP 的“Expires:”和“Cache-Control:”头内容，即 对网站图片、js、css 等内容，提供客户端浏览器缓存的设置。这个是 apache 调优的一个重 要选项之一</span><br><span class="line"></span><br><span class="line">--enable-deflate提供对内容的压缩传输编码支持，一般是 html、js、css 等内容的站点。使 用此参数会打打提高传输速度，提升访问者访问的体验。在生产环境中，这是 apache 调优 的一个重要选项之一</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache httpd-2.4.23]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="（7）优化http程序执行路径"><a class="header-anchor" href="#（7）优化http程序执行路径">¶</a>（7）优化http程序执行路径</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># ln -s /usr/local/http-2.4.23/bin/* /usr/local/bin/</span></span><br></pre></td></tr></table></figure><h6 id="1）修改配置文件-httpd-conf，设置其中的-ServerName-值"><a class="header-anchor" href="#1）修改配置文件-httpd-conf，设置其中的-ServerName-值">¶</a>1）修改配置文件 httpd.conf，设置其中的 ServerName 值</h6><p>例如：ServerName <a href="http://www.benet.com" target="_blank" rel="noopener">www.benet.com</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim  /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line">ServerName 127.0.0.1</span><br></pre></td></tr></table></figure><h6 id="2）开启-apache-服务器："><a class="header-anchor" href="#2）开启-apache-服务器：">¶</a>2）开启 apache 服务器：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># apachectl start</span></span><br></pre></td></tr></table></figure><h6 id="3）开机后自动启动"><a class="header-anchor" href="#3）开机后自动启动">¶</a>3）开机后自动启动</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># cp /usr/local/http-2.4.23/bin/apachectl /etc/init.d/httpd</span></span><br></pre></td></tr></table></figure><p>编辑 /etc/init.d/httpd 文件，在首行 #!/bin/sh 下面加入两行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim /etc/init.d/httpd</span></span><br><span class="line"><span class="comment"># chkconfig: 35 85 15</span></span><br><span class="line"><span class="comment"># description: apache 2.4.23</span></span><br></pre></td></tr></table></figure><blockquote><p>chkconfig: 35 85 15 （在 3 和 5 启动模式下的–启动优先级）</p></blockquote><p>将 Apache 加入开机自动启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># chkconfig --add httpd</span></span><br><span class="line">[root@apache ~]<span class="comment"># chkconfig httpd on</span></span><br></pre></td></tr></table></figure><h5 id="（8）启动编译好的-Apache-2-4-23："><a class="header-anchor" href="#（8）启动编译好的-Apache-2-4-23：">¶</a>（8）启动编译好的 Apache 2.4.23：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">[root@apache ~]<span class="comment"># netstat -anplt | grep 80</span></span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      51792/httpd</span><br></pre></td></tr></table></figure><h5 id="（9）客户端测试访问（注意防火墙）"><a class="header-anchor" href="#（9）客户端测试访问（注意防火墙）">¶</a>（9）客户端测试访问（注意防火墙）</h5><p><img data-src="https://img-blog.csdnimg.cn/2020060811014015.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、Apache的优化配置"><a class="header-anchor" href="#2、Apache的优化配置">¶</a>2、Apache的优化配置</h4><p>apache 所运行的硬件环境都是对性能影响最大的因素，即使不能对硬件进行升级，也最好 给 apache 一个单独的主机以免受到其他应用的干扰。各个硬件指标中，对性能影响最大的 是内存，对于静态内容（图片、javascript 文件、css 文件等），它决定了 apache 可以缓存多 少内容，它缓存的内容越多，在硬盘上读取内容的机会就越少，大内存可以极大提高静态站 点的速度；对动态高负载站点来说，每个请求保存的时间更多一些，apache 的 mpm 模块会 为每个请求派生出相应的进程或线程分别处理，而进程或线程的数量与内存的消耗近似成正 比，因此增大内存对提高动态站点的负载和运行速度也极为有利</p><p>其次是硬盘的速度，静态站点尤为突出，apache 不断的在读取文件并发送给相应的请求， 硬盘的读写是极其频繁的；动态站点也要不断的加载 web 程序(php 等)，一个请求甚至要读 取十几个文件才能处理完成，因此尽可能的提高硬盘速度和质量对提高 apache 的性能是有 积极意义的</p><p>最后是 cpu 和网络，cpu 影响的是 web 程序执行速度，网络影响流量大小</p><h3 id="二、Apache的工作模式"><a class="header-anchor" href="#二、Apache的工作模式">¶</a>二、Apache的工作模式</h3><p>Apache HTTP 服务器被设计为一个强大的、灵活的能够在多种平台以及不同环境下工作的服 务器。这种模块化的设计就叫做“多进程处理模块”（Multi-Processing Module，MPM），也叫 做工作模式</p><h4 id="Prefork-模式（一个非线程型的）："><a class="header-anchor" href="#Prefork-模式（一个非线程型的）：">¶</a>Prefork 模式（一个非线程型的）：</h4><h5 id="其主要工作方式是："><a class="header-anchor" href="#其主要工作方式是：">¶</a>其主要工作方式是：</h5><p>当 Apache 服务器启动后，mpm_prefork 模块会预先创建多个子进程(默 认为 5 个)，每个子进程只有一个线程，当接收到客户端的请求后，mpm_prefork 模块再将 请求转交给子进程处理，并且每个子进程同时只能用于处理单个请求。如果当前的请求数将 超过预先创建的子进程数时，mpm_prefork 模块就会创建新的子进程来处理额外的请求。 Apache 总是试图保持一些备用的或者是空闲的子进程用于迎接即将到来的请求。这样客户 端的请求就不需要在接收后等候子进程的产生</p><p>由于在 mpm_prefork 模块中，每个请求对应一个子进程，因此其占用的系统资源相对其他 两种模块而言较多。不过 mpm_prefork 模块的优点在于它的每个子进程都会独立处理对应 的单个请求，这样，如果其中一个请求出现问题就不会影响到其他请求。Prefork 在效率上 要比 Worker 要高，但是内存使用大得多不擅长处理高并发的场景</p><h5 id="Apache-在-prefork-工作模式下影响性能的重要参数说明"><a class="header-anchor" href="#Apache-在-prefork-工作模式下影响性能的重要参数说明">¶</a>Apache 在 prefork 工作模式下影响性能的重要参数说明</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prefork MPM</span></span><br><span class="line">&lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">    StartServers             5</span><br><span class="line">    MinSpareServers          5</span><br><span class="line">    MaxSpareServers         10</span><br><span class="line">    MaxRequestWorkers      250</span><br><span class="line">    MaxConnectionsPerChild   500</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>StartServers：</p><blockquote><p>apache 启动时候默认开始的子进程数</p></blockquote><p>MinSpareServers：</p><blockquote><p>最小的闲置子进程数</p></blockquote><p>MaxSpareServers：</p><blockquote><p>最大的闲置子进程数</p></blockquote><p>MaxRequestWorkers：</p><blockquote><p>MaxRequestWorkers 设置了允许同时的最大接入请求数量 任何 超 过 MaxRequestWorkers 限 制 的 请 求 将 进 入 等 候 队 列 ， 在 apache2.3.1 以 前 的 版 本 MaxRequestWorkers 被称为 MaxClients，旧的名字仍旧被支持</p></blockquote><p>MaxConnectionsPerChild</p><blockquote><p>设置的是每个子进程可处理的请求数。每个子进程在处理了“MaxConnectionsPerChild” 个请求后将自动销毁。0 意味着无限，即子进程永不销毁。虽然缺省设为 0 可以使每个 子进程处理更多的请求，但如果设成非零值也有两点重要的好处：</p><p>1、可防止意外的内 存泄漏</p><p>2、在服务器负载下降的时侯会自动减少子进程数。因此，可根据服务器的负 载来调整这个值。在 Apache2.3.9 之前称之为 MaxRequestsPerChild</p></blockquote><h5 id="注意："><a class="header-anchor" href="#注意：">¶</a>注意：</h5><h6 id="注1"><a class="header-anchor" href="#注1">¶</a>注1</h6><blockquote><p>MaxRequestWorkers 是这些指令中最为重要的一个，设定的是 Apache 可以同时处理 的请求，是对 Apache 性能影响最大的参数。如果请求总数已达到这个值（可通过 ps -ef|grep http|wc -l 来确认），那么后面的请求就要排队，直到某个已处理请求完毕。这就是系统资源 还剩下很多而 HTTP 访问却很慢的主要原因。虽然理论上这个值越大，可以处理的请求就越 多，建议将初始值设为(以 Mb 为单位的最大物理内存/2),然后根据负载情况进行动态调整。 比如一台 4G 内存的机器，那么初始值就是 4000/2=2000</p></blockquote><h6 id="注2"><a class="header-anchor" href="#注2">¶</a>注2</h6><blockquote><p>prefork 控制进程在最初建立“StartServers”个子进程后，为了满足 MinSpareServers 设 置的需要创建一个进程，等待一秒钟，继续创建两 个，再等待一秒钟，继续创建四个……如 此按指数级增加创建的进程数，最多达到每秒 32 个，直到满足 MinSpareServers 设置的值为止。这种模式 可以不必在请求到来时再产生新的进程，从而减小了系统开销以增加性能。 MaxSpareServers 设置了最大的空闲进程数，如果空闲进程数大于这个 值，Apache 会自动 kill 掉一些多余进程。这个值不要设得过大，但如果设的值比 MinSpareServers 小，Apache 会自 动把其调整为 MinSpareServers+1。如果站点负载较大，可考虑同时加大 MinSpareServers 和 MaxSpareServers</p></blockquote><h6 id="注3"><a class="header-anchor" href="#注3">¶</a>注3</h6><p>ServerLimit 和 MaxClients（MaxRequestWorkers）有什么区别呢？</p><blockquote><p>是因为在 apache1 时代，控制最大进程数只有 MaxClients 这个参数，并且这个参数最大值为 256，并且是写死了的，试图设置为超过 256 是无效的，这是由于 apache1 时代的服务器硬 件限制的。但是 apache2 时代由于服务器硬件的升级，硬件已经不再是限制，所以使用 ServerLimit 这个参数来控制最大进程数，ServerLimit 值&gt;=MaxClient 值才有效。ServerLimit 要放在 MaxClients 之前，值要不小于 MaxClients</p></blockquote><h6 id="注4"><a class="header-anchor" href="#注4">¶</a>注4</h6><p>查看 Apache 加载的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@apache conf]<span class="comment"># apachectl -t -D DUMP_MODULES</span></span><br><span class="line">或</span><br><span class="line">[root@apache conf]<span class="comment"># apachectl -M</span></span><br><span class="line">或</span><br><span class="line">[root@apache conf]<span class="comment"># apachectl -l  # 小写 L，只显示静态模块</span></span><br></pre></td></tr></table></figure><p>如何查看 Apache 的工作模式呢？可以使用 httpd -V 命令查看，另外使用 httpd -l 也可以查 看到</p><h6 id="注5"><a class="header-anchor" href="#注5">¶</a>注5</h6><p>如何修改 prefork 参数和启用 prefork 模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># vim  /usr/local/http-2.4.23/conf/extra/httpd-mpm.conf</span></span><br><span class="line">&lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">    StartServers             5</span><br><span class="line">    MinSpareServers          5</span><br><span class="line">    MaxSpareServers         10</span><br><span class="line">    MaxRequestWorkers      250</span><br><span class="line">    MaxConnectionsPerChild 500</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">[root@apache ~]<span class="comment"># vim  /usr/local/http-2.4.23/conf/httpd.conf</span></span><br><span class="line"><span class="comment"># 注释掉当前的工作模式，开启新的工作模式</span></span><br><span class="line">LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</span><br><span class="line">Include conf/extra/httpd-mpm.conf</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure><h4 id="Worker-模式-多线程多进程-："><a class="header-anchor" href="#Worker-模式-多线程多进程-：">¶</a>Worker 模式(多线程多进程)：</h4><p>和 prefork 模式相比，worker 使用了多进程和多线程的混合模式，worker 模式也同样会先预 派生一些子进程，然后每个子进程创建一些线程，同时包括一个监听线程，每个请求过来会 被分配到一个线程来服务。线程比起进程会更轻量，因为线程是通过共享父进程的内存空间， 因此，内存的占用会减少一些，在高并发的场景下会比 prefork 有更多可用的线程，表现会 更优秀一些；另外，如果一个线程出现了问题也会导致同一进程下的线程出现问题，如果是 多个线程出现问题，也只是影响 Apache 的一部分，而不是全部。由于用到多进程多线程， 需要考虑到线程的安全了，在使用 keep-alive 长连接的时候，某个线程会一直被占用，即使 中间没有请求，需要等待到超时才会被释放（该问题在 prefork 模式下也存在）</p><p>总的来说，prefork 方式速度要稍高于 worker，然而它需要的 cpu 和 memory 资源也稍多于 woker</p><h5 id="Apache-在-worker-工作模式下影响性能的重要参数说明"><a class="header-anchor" href="#Apache-在-worker-工作模式下影响性能的重要参数说明">¶</a>Apache 在 worker 工作模式下影响性能的重要参数说明</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># worker MPM</span></span><br><span class="line">&lt;IfModule mpm_worker_module&gt;</span><br><span class="line">    StartServers             3</span><br><span class="line">    MinSpareThreads         75</span><br><span class="line">    MaxSpareThreads        250</span><br><span class="line">    ThreadsPerChild         25</span><br><span class="line">    MaxRequestWorkers      400</span><br><span class="line">    MaxConnectionsPerChild   0</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>StartServers：apache 启动时候默认开始的子进程数</p><p>MinSpareThreads：最小空闲数量的工作线程</p><p>MaxSpareThreads：最大空闲数量的工作线程</p><p>ThreadsPerChild：每个子进程产生的线程数量</p><p>MaxRequestWorkers：与 prefork 模式相同</p><p>MaxConnectionsPerChild：与 prefork 模式相同</p><h5 id="注意"><a class="header-anchor" href="#注意">¶</a>注意</h5><h6 id="注1-v2"><a class="header-anchor" href="#注1-v2">¶</a>注1</h6><p>Worker 由主控制进程生成“StartServers”个子进程，每个子进程中包含固定的 ThreadsPerChild 线程数，各个线程独立地处理请求。同样， 为了不在请求到来时再生成线 程，MinSpareThreads 和 MaxSpareThreads 设置了最少和最多的空闲线程数；</p><p>而 MaxRequestWorkers 设置了同时连入的 clients 最大总数。如果现有子进程中的线程总数不 能满足负载，控制进程将派生新的子进程</p><p>MinSpareThreads 和 MaxSpareThreads 的最大缺省值分别是 75 和 250。这两个参数对 Apache 的性能影响并不大，可以按照实际情况相应调节</p><h6 id="注2-v2"><a class="header-anchor" href="#注2-v2">¶</a>注2</h6><p>ThreadsPerChild 是 worker MPM 中与性能相关最密切的指令。ThreadsPerChild 的最大 缺省值是 64，如果负载较大，64 也是不够的。这时要显式使用 ThreadLimit 指令，它的最大 缺省值是 20000。</p><h6 id="注3-v2"><a class="header-anchor" href="#注3-v2">¶</a>注3</h6><p>Worker 模式下所能同时处理的请求总数是由子进程总数乘以 ThreadsPerChild 值决定 的，应该大于等于 MaxRequestWorkers。如果负载很大，现有的子进程数不能满足时，控制 进程会派生新的子进程。默认最大的子进程总数是 16，加大时 也需要显式声明 ServerLimit （系统配置的最大进程数量，最大值是 20000）。需要注意的是，如果显式声明了 ServerLimit， 那么它乘以 ThreadsPerChild的值必须大于等于MaxRequestWorkers，而且MaxRequestWorkers 必须是 ThreadsPerChild 的整数倍，否则 Apache 将会自动调节到一个相应值</p><h6 id="注4：进程与线程的区别"><a class="header-anchor" href="#注4：进程与线程的区别">¶</a>注4：进程与线程的区别</h6><p>线程是指进程内的一个执行单元,也是进程内的可调度实体</p><p>与进程的区别:</p><blockquote><p>（1）地址空间:进程内的一个执行单元;进程至少有一个线程;它们共享进程的地址空间;而进程 有自己独立的地址空间;</p><p>（2）资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源</p><p>（3）线程是处理器调度的基本单位,但进程不是</p><p>（4）二者均可并发执行.</p></blockquote><p>进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对 应用的并发性</p><p>进程和线程的区别在于：</p><blockquote><p>简而言之,一个程序至少有一个进程,一个进程至少有一个线程.</p><p>线程的划分尺度小于进程，使得多线程程序的并发性高。</p><p>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程 序的运行效率</p></blockquote><h4 id="Event模式"><a class="header-anchor" href="#Event模式">¶</a>Event模式</h4><p>这是 Apache 最新的工作模式，是 worker 模式的变种，它把服务进程从连接中分离出来，一 worker 模式不同的是在于它解决了 keep-alive 长连接的时候占用线程资源被浪费的问题，在 event 工作模式中，会有一些专门的线程用来管理这些 keep-alive 类型的线程，当有真实请求过来的时候，将请求传递给服务器的线程，执行完毕后，又允许它释放。这增强了在高并 发场景下的请求处理。event 模式不能很好的支持 https 的访问（HTTP 认证相关的问题）</p><h3 id="三、apache-配置参数"><a class="header-anchor" href="#三、apache-配置参数">¶</a>三、apache 配置参数</h3><h5 id="（1）KeepAlive-On-Off"><a class="header-anchor" href="#（1）KeepAlive-On-Off">¶</a>（1）KeepAlive On/Off</h5><p>KeepAlive 指的是保持连接活跃，换一句话说，如果将 KeepAlive 设置为 On，那么来自 同一客户端的请求就不需要再一次连接，避免每次请求都要新建一个连接而加重服务器的负 担。一般情况下，图片较多的网站应该把 KeepAlive 设为 On</p><h5 id="（2）KeepAliveTimeOut-number"><a class="header-anchor" href="#（2）KeepAliveTimeOut-number">¶</a>（2）KeepAliveTimeOut number</h5><p>如果第二次请求和第一次请求之间超过 KeepAliveTimeOut 的时间的话，第一次连接就会 中断，再新建第二个连接。它的设置一般考虑图片或者 JS 等文件两次请求间隔，一般设置 为 3-5 秒</p><h5 id="（3）MaxKeepAliveRequests-100"><a class="header-anchor" href="#（3）MaxKeepAliveRequests-100">¶</a>（3）MaxKeepAliveRequests 100</h5><p>一次连接可以进行的 HTTP 请求的最大请求次数。将其值设为 0 将支持在一次连接内进 行无限次的传输请求。事实上没有客户程序在一次连接中请求太多的页面，通常达不到这个 上限就完成连接了</p><h5 id="（4）HostnameLookups-on-off-double"><a class="header-anchor" href="#（4）HostnameLookups-on-off-double">¶</a>（4）HostnameLookups on|off|double</h5><p>如果是使用 on，那么只有进行一次反查，如果用 double，那么进行反查之后还要进行一次 正向解析，只有两次的结果互相符合才行，而 off 就是不进行域名验证。 如果为了安全，建议使用 double；为了加快访问速度，建议使用 off。 域名查找开启这个会增加 apache 的负担, 减慢访问速度建议关闭</p><h5 id="（5）timeout-5"><a class="header-anchor" href="#（5）timeout-5">¶</a>（5）timeout 5</h5><p>推荐 5 这个是 apache 接受请求或者发出相应的时间超过这个时间断开</p><p>注：以上配置项可在/usr/local/http-2.4.23/conf/extra/httpd-default.conf 设置并在 httpd.conf 文件中通过 include 选项引用</p><h4 id="MPM-这个比较关键是影响并发效率的主要因素"><a class="header-anchor" href="#MPM-这个比较关键是影响并发效率的主要因素">¶</a>MPM 这个比较关键是影响并发效率的主要因素</h4><h5 id="（1）StartServers-10"><a class="header-anchor" href="#（1）StartServers-10">¶</a>（1）StartServers 10</h5><p>设置服务器启动时建立的子进程数量。因为子进程数量动态的取决于负载的轻重,所以 一般没有必要调整这个参数</p><h5 id="（2）MinSpareServers-10"><a class="header-anchor" href="#（2）MinSpareServers-10">¶</a>（2）MinSpareServers 10</h5><p>设置空闲子进程的最小数量。所谓空闲子进程是指没有正在处理请求的子进程。如果当 前空闲子进程数少于 MinSpareServers ,那么 Apache 将以最大每秒一个的速度产生新的子进 程。只有在非常繁忙机器上才需要调整这个参数。将此参数设的太大通常是一个坏主意</p><h5 id="（3）MaxSpareThreads-75"><a class="header-anchor" href="#（3）MaxSpareThreads-75">¶</a>（3）MaxSpareThreads 75</h5><p>设置空闲子进程的最大数量。如果当前有超过 MaxSpareServers 数量的空闲子进程,那么 父进程将杀死多余的子进程。只有在非常繁忙机器上才需要调整这个参数。将此参数设的太 大通常是一个坏主意。如果你将该指令的值设置为比 MinSpareServers 小,Apache 将会自动将 其修改成”MinSpareServers+1″</p><h5 id="（4）ServerLimit-2000"><a class="header-anchor" href="#（4）ServerLimit-2000">¶</a>（4）ServerLimit 2000</h5><p>服务器允许配置的进程数上限。只有在你需要将 MaxClients 设置成高于默认值 256 的时 候才需要使用。要将此指令的值保持和 MaxClients 一样。修改此指令的值必须完全停止服务 后再启动才能生效，以 restart 方式重启动将不会生效</p><h5 id="（5）MaxClients-MaxRequestWorkers-256"><a class="header-anchor" href="#（5）MaxClients-MaxRequestWorkers-256">¶</a>（5）MaxClients/MaxRequestWorkers 256</h5><p>用于客户端请求的最大请求数量（最大子进程数），任何超过 MaxClients 限制的请求都 将进入等候队列。默认值是 256，如果要提高这个值必须同时提高 ServerLimit 的值。建议将初始值设为(以 Mb 为单位的最大物理内存/2),然后根据负载情况进行动态调整。比如一台 4G 内存的机器，那么初始值就是 4000/2=2000。</p><h5 id="（6）MaxRequestsPerChild-MaxConnectionsPerChild-0"><a class="header-anchor" href="#（6）MaxRequestsPerChild-MaxConnectionsPerChild-0">¶</a>（6）MaxRequestsPerChild /MaxConnectionsPerChild 0</h5><p>设置的是每个子进程可处理的请求数。每个子进程在处理了“MaxRequestsPerChild”个请 求后将自动销毁。0 意味着无限，即子进程永不销毁。内存较大的服务器可以设置为 0 或较 大的数字。内存较小的服务器不妨设置成 30、50、100。所以一般情况下，如果你发现服务 器的内存直线上升，建议修改该参数试试</p><p>效，以 restart 方式重启动将不会生效</p><h5 id="（5）MaxClients-MaxRequestWorkers-256-v2"><a class="header-anchor" href="#（5）MaxClients-MaxRequestWorkers-256-v2">¶</a>（5）MaxClients/MaxRequestWorkers 256</h5><p>用于客户端请求的最大请求数量（最大子进程数），任何超过 MaxClients 限制的请求都 将进入等候队列。默认值是 256，如果要提高这个值必须同时提高 ServerLimit 的值。建议将初始值设为(以 Mb 为单位的最大物理内存/2),然后根据负载情况进行动态调整。比如一台 4G 内存的机器，那么初始值就是 4000/2=2000。</p><h5 id="（6）MaxRequestsPerChild-MaxConnectionsPerChild-0-v2"><a class="header-anchor" href="#（6）MaxRequestsPerChild-MaxConnectionsPerChild-0-v2">¶</a>（6）MaxRequestsPerChild /MaxConnectionsPerChild 0</h5><p>设置的是每个子进程可处理的请求数。每个子进程在处理了“MaxRequestsPerChild”个请 求后将自动销毁。0 意味着无限，即子进程永不销毁。内存较大的服务器可以设置为 0 或较 大的数字。内存较小的服务器不妨设置成 30、50、100。所以一般情况下，如果你发现服务 器的内存直线上升，建议修改该参数试试</p><p>注：以上配置项可在/usr/local/http-2.4.23/conf/extra/httpd-mpm.conf 设置并在 httpd.conf 文 件中通过 include 选项引用</p>]]></content>
    
    <summary type="html">
    
      架构
    
    </summary>
    
    
      <category term="架构" scheme="https://pdxblog.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://pdxblog.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python列表(list)练习题</title>
    <link href="https://pdxblog.top/Python%E5%88%97%E8%A1%A8(list)%E7%BB%83%E4%B9%A0%E9%A2%98.html"/>
    <id>https://pdxblog.top/Python%E5%88%97%E8%A1%A8(list)%E7%BB%83%E4%B9%A0%E9%A2%98.html</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2020-05-29T08:04:06.818Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python列表-list-练习题"><a class="header-anchor" href="#Python列表-list-练习题">¶</a>Python列表(list)练习题</h3><p>@[toc]</p><h4 id="一、姓名："><a class="header-anchor" href="#一、姓名：">¶</a>一、姓名：</h4><blockquote><p>将一些朋友的姓名存储在一个列表中，并将其命名为names。依次访问该列表中的每个元素，从而将每个朋友的姓名都打印出来</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>, <span class="string">'赵六'</span>, <span class="string">'田七'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br><span class="line">赵六</span><br><span class="line">田七</span><br></pre></td></tr></table></figure><h4 id="二、问候语"><a class="header-anchor" href="#二、问候语">¶</a>二、问候语</h4><blockquote><p>继续使用上一个的列表，但不打印每个朋友的姓名，而为每人打印一条消息。</p><p>每条消息都包含相同的问候语，但抬头为相应朋友的姓名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>, <span class="string">'赵六'</span>, <span class="string">'田七'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name + <span class="string">'，Good moning!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">张三，Good moning!</span><br><span class="line">李四，Good moning!</span><br><span class="line">王五，Good moning!</span><br><span class="line">赵六，Good moning!</span><br><span class="line">田七，Good moning!</span><br></pre></td></tr></table></figure><h4 id="三、自己的列表"><a class="header-anchor" href="#三、自己的列表">¶</a>三、自己的列表</h4><blockquote><p>想想你喜欢的通勤方式，如骑摩托车或开汽车，并创建一个包含多种通勤方式的列表。根据该列表打印一系列有关这些通勤方式的宣言，如“I would like to own a Honda motorcycle”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">commuting = [<span class="string">'car'</span>, <span class="string">'bicycle'</span>, <span class="string">'motorcycle'</span>]</span><br><span class="line">brands = [<span class="string">'Benz'</span>, <span class="string">'GIANT'</span>, <span class="string">'Honda'</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">    print(<span class="string">'I would like to own a '</span> + brands[num] + <span class="string">' '</span> + commuting[num])</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I would like to own a Benz car</span><br><span class="line">I would like to own a GIANT bicycle</span><br><span class="line">I would like to own a Honda motorcycle</span><br></pre></td></tr></table></figure><h4 id="四、嘉宾名单"><a class="header-anchor" href="#四、嘉宾名单">¶</a>四、嘉宾名单</h4><blockquote><p>如果你可以邀请任何人一起共进晚餐（无论是在世的还是故去的），你会邀请哪些人？请创建一个列表，其中包含至少3你想邀请的人；然后，使用这个列表打印消息，邀请这些人来与你共进晚餐</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">guests = [<span class="string">"Tom"</span>, <span class="string">"John"</span>, <span class="string">"Mike"</span>, <span class="string">"Padma"</span>]</span><br><span class="line"><span class="keyword">for</span> guest <span class="keyword">in</span> guests:</span><br><span class="line">    print(guest + <span class="string">", 我可以邀请你共进晚餐吗?"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tom, 我可以邀请你共进晚餐吗?</span><br><span class="line">John, 我可以邀请你共进晚餐吗?</span><br><span class="line">Mike, 我可以邀请你共进晚餐吗?</span><br><span class="line">Padma, 我可以邀请你共进晚餐吗?</span><br></pre></td></tr></table></figure><h4 id="五、修改嘉宾名单"><a class="header-anchor" href="#五、修改嘉宾名单">¶</a>五、修改嘉宾名单</h4><blockquote><p>你刚得知有位嘉宾无法赴约，因此需要另外邀请一位嘉宾。</p><p>以完成练习4时编写的程序为基础，在程序末尾添加一条print语句，指出哪位嘉宾无法赴约。</p><p>修改嘉宾名单，将无法赴约的嘉宾的姓名替换为新邀请的嘉宾的姓名。</p><p>再次打印一系列消息，向名单中的每位嘉宾发出邀请</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(guests[<span class="number">2</span>] + <span class="string">"不能一起吃饭!"</span> + <span class="string">"\n"</span>)</span><br><span class="line">guests[<span class="number">2</span>] = <span class="string">'Bob'</span></span><br><span class="line"><span class="keyword">for</span> guest <span class="keyword">in</span> guests:</span><br><span class="line">    print(guest + <span class="string">", 我可以邀请你共进晚餐吗?"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mike不能一起吃饭!</span><br><span class="line"></span><br><span class="line">Tom, 我可以邀请你共进晚餐吗?</span><br><span class="line">John, 我可以邀请你共进晚餐吗?</span><br><span class="line">Bob, 我可以邀请你共进晚餐吗?</span><br><span class="line">Padma, 我可以邀请你共进晚餐吗?</span><br></pre></td></tr></table></figure><h4 id="六、添加嘉宾"><a class="header-anchor" href="#六、添加嘉宾">¶</a>六、添加嘉宾</h4><blockquote><p>你刚找到了一个更大的餐桌，可容纳更多的嘉宾。请想想你还想邀请哪三位嘉宾。</p><p>以完成练习4或练习5时编写的程序为基础，在程序末尾添加一条print语句，指出你找到了一个更大的餐桌。</p><p>使用insert()将一位新嘉宾添加到名单开头。</p><p>使用insert()将另一位新嘉宾添加到名单中间。</p><p>使用append()将最后一位新嘉宾添加到名单末尾。</p><p>打印一系列消息，向名单中的每位嘉宾发出邀请</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"我找到了一个更大的餐桌!"</span> + <span class="string">"\n"</span>)</span><br><span class="line">guests.insert(<span class="number">0</span>, <span class="string">'zhangsan'</span>)</span><br><span class="line">guests.insert(<span class="number">3</span>, <span class="string">'lisi'</span>)</span><br><span class="line">guests.append(<span class="string">'wangwu'</span>)</span><br><span class="line"><span class="keyword">for</span> guest <span class="keyword">in</span> guests:</span><br><span class="line">    print(guest + <span class="string">", 我可以邀请你共进晚餐吗?"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我找到了一个更大的餐桌!</span><br><span class="line"></span><br><span class="line">zhangsan, 我可以邀请你共进晚餐吗?</span><br><span class="line">Tom, 我可以邀请你共进晚餐吗?</span><br><span class="line">John, 我可以邀请你共进晚餐吗?</span><br><span class="line">lisi, 我可以邀请你共进晚餐吗?</span><br><span class="line">Bob, 我可以邀请你共进晚餐吗?</span><br><span class="line">Padma, 我可以邀请你共进晚餐吗?</span><br><span class="line">wangwu, 我可以邀请你共进晚餐吗?</span><br></pre></td></tr></table></figure><h4 id="七、缩减名单"><a class="header-anchor" href="#七、缩减名单">¶</a>七、缩减名单</h4><p>你刚得知新购买的餐桌无法及时送达，因此只能邀请两位嘉宾。</p><blockquote><p>以完成练习6时编写的程序为基础，在程序末尾添加一行代码，打印一条你只能邀请两位嘉宾共进晚餐的消息。</p><p>使用 pop()不断地删除名单中的嘉宾，直到只有两位嘉宾为止。每次从名单中弹出一位嘉宾时，都打印一条消息，让该嘉宾知悉你很抱歉，无法邀请他来共进晚餐。</p><p>对于余下的两位嘉宾中的每一位，都打印一条消息，指出他依然在受邀人之列。</p><p>使用del()将最后两位嘉宾从名单中删除，让名单变成空的。打印该名单，核实程序结束时名单确实是空的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"sorry,我只能邀请两位嘉宾共进晚餐!"</span> + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">while</span> len(guests) &gt; <span class="number">2</span>:</span><br><span class="line">    honored = guests.pop()</span><br><span class="line">    print(honored + <span class="string">",我很抱歉,我不能邀请你一起共进晚餐!"</span>)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line"><span class="keyword">for</span> guest <span class="keyword">in</span> guests:</span><br><span class="line">    print(guest + <span class="string">", 我仍然希望你能和我一起吃饭!"</span>)</span><br><span class="line"><span class="keyword">del</span> guests[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">del</span> guests[<span class="number">0</span>]</span><br><span class="line">print(guests)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sorry,我只能邀请两位嘉宾共进晚餐!</span><br><span class="line"></span><br><span class="line">wangwu,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">Padma,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">Bob,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">lisi,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">John,我很抱歉,我不能邀请你一起共进晚餐!</span><br><span class="line">------------</span><br><span class="line">zhangsan, 我仍然希望你能和我一起吃饭!</span><br><span class="line">Tom, 我仍然希望你能和我一起吃饭!</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h4 id="八、放眼世界"><a class="header-anchor" href="#八、放眼世界">¶</a>八、放眼世界</h4><blockquote><p>想出至少5个你渴望去旅游的地方。</p><p>​将这些地方存储在一个列表中，并确保其中的元素不是按字母顺序排列的。</p><p>​按原始排列顺序打印该列表。不要考虑输出是否整洁的问题，只管打印原始Python列表。</p><p>​使用sorted()按字母顺序打印这个列表，同时不要修改它。</p><p>​再次打印该列表，核实排列顺序未变。</p><p>​使用sorted()按与字母顺序相反的顺序打印这个列表， 同时不要修改它。</p><p>​再次打印该列表，核实排列顺序未变。</p><p>​使用reverse()修改列表元素的排列顺序。打印该列表，核实排列顺序确实变了。</p><p>​使用reverse()再次修改列表元素的排列顺序。打印该列表，核实已恢复到原来的排列顺序。</p><p>​使用sort()修改该列表，使其元素按字母顺序排列。打印该列表，核实排列顺序确实变了。</p><p>​使用sort()修改该列表，使其元素按与字母顺序相反的顺序排列。打印该列表，核实排列顺序确实变了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">resort = [</span><br><span class="line">    <span class="string">"Santorini"</span>, <span class="string">"Aegean Sea"</span>, <span class="string">"Pink Sands"</span>, <span class="string">"Rose Lake"</span>, <span class="string">"The blue hole"</span></span><br><span class="line">]</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">print(sorted(resort))</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">print(sorted(resort, reverse=<span class="literal">True</span>))</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">resort.reverse()</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">resort.reverse()</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">resort.sort()</span><br><span class="line">print(resort)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">resort.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(resort)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">['Santorini', 'Aegean Sea', 'Pink Sands', 'Rose Lake', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['Aegean Sea', 'Pink Sands', 'Rose Lake', 'Santorini', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['Santorini', 'Aegean Sea', 'Pink Sands', 'Rose Lake', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['The blue hole', 'Santorini', 'Rose Lake', 'Pink Sands', 'Aegean Sea']</span><br><span class="line">------------</span><br><span class="line">['Santorini', 'Aegean Sea', 'Pink Sands', 'Rose Lake', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['The blue hole', 'Rose Lake', 'Pink Sands', 'Aegean Sea', 'Santorini']</span><br><span class="line">------------</span><br><span class="line">['Santorini', 'Aegean Sea', 'Pink Sands', 'Rose Lake', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['Aegean Sea', 'Pink Sands', 'Rose Lake', 'Santorini', 'The blue hole']</span><br><span class="line">------------</span><br><span class="line">['The blue hole', 'Santorini', 'Rose Lake', 'Pink Sands', 'Aegean Sea']</span><br></pre></td></tr></table></figure><h4 id="九、晚餐嘉宾"><a class="header-anchor" href="#九、晚餐嘉宾">¶</a>九、晚餐嘉宾</h4><blockquote><p>使用len()打印一条消息，指出你邀请了多少位嘉宾来与你共进晚餐</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guests = [<span class="string">"Tom"</span>, <span class="string">"John"</span>, <span class="string">"Mike"</span>, <span class="string">"Padma"</span>]</span><br><span class="line">print(<span class="string">"我一共邀请了"</span> + str(len(guests)) + <span class="string">"位嘉宾"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我一共邀请了4位嘉宾</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python一系列练习题
    
    </summary>
    
    
      <category term="Python一些列练习题" scheme="https://pdxblog.top/categories/Python%E4%B8%80%E4%BA%9B%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Python一系列练习题" scheme="https://pdxblog.top/tags/Python%E4%B8%80%E7%B3%BB%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>for循环和原作练习题</title>
    <link href="https://pdxblog.top/for%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%8E%9F%E4%BD%9C%E7%BB%83%E4%B9%A0%E9%A2%98.html"/>
    <id>https://pdxblog.top/for%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%8E%9F%E4%BD%9C%E7%BB%83%E4%B9%A0%E9%A2%98.html</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2020-05-29T08:04:06.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for循环和原作练习题"><a class="header-anchor" href="#for循环和原作练习题">¶</a>for循环和原作练习题</h3><p>@[toc]</p><h4 id="1、比萨："><a class="header-anchor" href="#1、比萨：">¶</a>1、比萨：</h4><blockquote><p>想出至少三种你喜欢的比萨，将其名称存储在一个列表中，再使用for循环将每种比萨的名称都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pizzas = [<span class="string">'鸡肉披萨'</span>, <span class="string">'牛肉披萨'</span>, <span class="string">'培根披萨'</span>]</span><br><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">    print(pizza)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">鸡肉披萨</span><br><span class="line">牛肉披萨</span><br><span class="line">培根披萨</span><br></pre></td></tr></table></figure><h5 id="（1）I-like-pepperoni-pizza"><a class="header-anchor" href="#（1）I-like-pepperoni-pizza">¶</a>（1）I like pepperoni pizza</h5><blockquote><p>修改这个for循环，使其打印包含比萨名称的句子，而不仅仅是比萨的名称。对于每种比萨，都显示一行输出，如“Ilikepepperonipizza”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">    print(<span class="string">'I like '</span> + pizza)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I like 鸡肉披萨</span><br><span class="line">I like 牛肉披萨</span><br><span class="line">I like 培根披萨</span><br></pre></td></tr></table></figure><h5 id="（2）I-really-love-pizza"><a class="header-anchor" href="#（2）I-really-love-pizza">¶</a>（2）I really love pizza!</h5><blockquote><p>在程序末尾添加一行代码，它不在for循环中，指出你有多喜欢比萨。输出应包含针对每种比萨的消息，还有一个总结性句子，如“Ireallylovepizza!”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">    print(<span class="string">'I like '</span> + pizza + <span class="string">' very much'</span>)</span><br><span class="line">print(<span class="string">'I really love pizza!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I like 鸡肉披萨 very much</span><br><span class="line">I like 牛肉披萨 very much</span><br><span class="line">I like 培根披萨 very much</span><br><span class="line">I really love pizza!</span><br></pre></td></tr></table></figure><h4 id="2、动物："><a class="header-anchor" href="#2、动物：">¶</a>2、动物：</h4><blockquote><p>想出至少三种有共同特征的动物，将这些动物的名称存储在一个列表中，再使用for循环将每种动物的名称都打印出来。</p></blockquote><h5 id="（1）A-dog-would-make-great-pet"><a class="header-anchor" href="#（1）A-dog-would-make-great-pet">¶</a>（1）A dog would make great pet</h5><blockquote><p>修改这个程序，使其针对每种动物都打印一个句子，如“Adogwouldmakeagreatpet”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zoos = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'pig'</span>]</span><br><span class="line"><span class="keyword">for</span> zoo <span class="keyword">in</span> zoos:</span><br><span class="line">    print(zoo + <span class="string">' would make great pet!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dog would make great pet!</span><br><span class="line">cat would make great pet!</span><br><span class="line">pig would make great pet!</span><br></pre></td></tr></table></figure><h5 id="（2）Any-of-these-animals-would-make-a-great-pet"><a class="header-anchor" href="#（2）Any-of-these-animals-would-make-a-great-pet">¶</a>（2）Any of these animals would make a great pet</h5><blockquote><p>在程序末尾添加一行代码，指出这些动物的共同之处，如打印诸如“Anyoftheseanimalswouldmakeagreatpet!”这样的句子。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> zoo <span class="keyword">in</span> zoos:</span><br><span class="line">    print(zoo + <span class="string">' would make great pet!'</span>)</span><br><span class="line">print(<span class="string">"Any of these animals would make a great pet!"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog would make great pet!</span><br><span class="line">cat would make great pet!</span><br><span class="line">pig would make great pet!</span><br><span class="line">Any of these animals would make a great pet!</span><br></pre></td></tr></table></figure><h4 id="3、数到20："><a class="header-anchor" href="#3、数到20：">¶</a>3、数到20：</h4><blockquote><p>使用一个for循环打印数字1~20（含）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    print(num, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</span><br></pre></td></tr></table></figure><h4 id="4、一百万："><a class="header-anchor" href="#4、一百万：">¶</a>4、一百万：</h4><blockquote><p>创建一个列表，其中包含数字1~1000000，再使用一个for循环将这些数字打印出来（如果输出的时间太长，按Ctrl+C停止输出，或关闭输出窗口）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> nums <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000001</span>):</span><br><span class="line">    print(nums, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h4 id="5、计算1-1000000的总和："><a class="header-anchor" href="#5、计算1-1000000的总和：">¶</a>5、计算1~1000000的总和：</h4><blockquote><p>创建一个列表，其中包含数字1~1000000，再使用min()和max()核实该列表确实是从1开始，到1000000结束的。另外，对这个列表调用函数sum()，看看Python将一百万个数字相加需要多长时间。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = list(range(<span class="number">1</span>, <span class="number">1000001</span>))</span><br><span class="line">print(min(number))</span><br><span class="line">print(max(number))</span><br><span class="line">print(sum(number))</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1000000</span><br><span class="line">500000500000</span><br></pre></td></tr></table></figure><h4 id="6、奇数："><a class="header-anchor" href="#6、奇数：">¶</a>6、奇数：</h4><blockquote><p>通过给函数range()指定第三个参数来创建一个列表，其中包含1~20的奇数；再使用一个for循环将这些数字都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>, <span class="number">2</span>):</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 7 9 11 13 15 17 19</span><br></pre></td></tr></table></figure><h4 id="7、3的倍数："><a class="header-anchor" href="#7、3的倍数：">¶</a>7、3的倍数：</h4><blockquote><p>创建一个列表，其中包含3~30内能被3整除的数字；再使用一个for循环将这个列表中的数字都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">30</span>,<span class="number">3</span>):</span><br><span class="line">    print(j,end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 6 9 12 15 18 21 24 27</span><br></pre></td></tr></table></figure><h4 id="8、立方："><a class="header-anchor" href="#8、立方：">¶</a>8、立方：</h4><blockquote><p>将同一个数字乘三次称为立方。例如，在Python中，2的立方用2**3表示。请创建一个列表，其中包含前10个整数（即1~10）的立方，再使用一个for循环将这些立方数都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">values = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    cube = value**<span class="number">3</span></span><br><span class="line">    values.append(cube)</span><br><span class="line">print(values)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]</span><br></pre></td></tr></table></figure><h4 id="9、立方解析："><a class="header-anchor" href="#9、立方解析：">¶</a>9、立方解析：</h4><blockquote><p>使用列表解析生成一个列表，其中包含前10个整数的立方。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cubes = [value ** <span class="number">3</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">print(cubes)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]</span><br></pre></td></tr></table></figure><h4 id="10、自助餐："><a class="header-anchor" href="#10、自助餐：">¶</a>10、自助餐：</h4><blockquote><p>有一家自助式餐馆，只提供五种简单的食品。请想出五种简单的食品，并将其存储在一个元组中。</p></blockquote><h5 id="（1）使用一个for循环将该餐馆提供的五种食品都打印出来。"><a class="header-anchor" href="#（1）使用一个for循环将该餐馆提供的五种食品都打印出来。">¶</a>（1）使用一个for循环将该餐馆提供的五种食品都打印出来。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buffets = (<span class="string">'饮料'</span>,<span class="string">'甜品'</span>,<span class="string">'水果'</span>,<span class="string">'肉食'</span>,<span class="string">'素食'</span>)</span><br><span class="line"><span class="keyword">for</span> buffet <span class="keyword">in</span> buffets:</span><br><span class="line">    print(buffet,end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">饮料 甜品 水果 肉食 素食</span><br></pre></td></tr></table></figure><h5 id="（2）尝试修改其中的一个元素，核实Python确实会拒绝你这样做。"><a class="header-anchor" href="#（2）尝试修改其中的一个元素，核实Python确实会拒绝你这样做。">¶</a>（2）尝试修改其中的一个元素，核实Python确实会拒绝你这样做。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffets[<span class="number">0</span>] = <span class="string">'啤酒'</span></span><br></pre></td></tr></table></figure><h5 id="（3）餐馆调整了菜单，替换了它提供的其中两种食品。请编写一个这样的代码块："><a class="header-anchor" href="#（3）餐馆调整了菜单，替换了它提供的其中两种食品。请编写一个这样的代码块：">¶</a>（3）餐馆调整了菜单，替换了它提供的其中两种食品。请编写一个这样的代码块：</h5><blockquote><p>给元组变量赋值，并使用一个for循环将新元组的每个元素都打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buffets = (<span class="string">'啤酒'</span>,<span class="string">'蛋糕'</span>,<span class="string">'水果'</span>,<span class="string">'肉食'</span>,<span class="string">'素食'</span>)</span><br><span class="line"><span class="keyword">for</span> buffet <span class="keyword">in</span> buffets:</span><br><span class="line">    print(buffet,end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">啤酒 蛋糕 水果 肉食 素食</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python一系列练习题
    
    </summary>
    
    
      <category term="Python一些列练习题" scheme="https://pdxblog.top/categories/Python%E4%B8%80%E4%BA%9B%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Python一系列练习题" scheme="https://pdxblog.top/tags/Python%E4%B8%80%E7%B3%BB%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python制作疫情地图</title>
    <link href="https://pdxblog.top/%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE.html"/>
    <id>https://pdxblog.top/%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE.html</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2020-05-29T08:08:11.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="疫情地图"><a class="header-anchor" href="#疫情地图">¶</a>疫情地图</h3><p>话不多说，直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opt</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">result = requests.get(<span class="string">'https://gwpre.sina.cn/interface/fymap2020_data.json'</span>).text</span><br><span class="line">result = json.loads(result)</span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清洗数据</span></span><br><span class="line">data = list()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result[<span class="string">'data'</span>][<span class="string">'list'</span>]:</span><br><span class="line">    data.append((i[<span class="string">'name'</span>], i[<span class="string">'value'</span>]))</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制中国地图</span></span><br><span class="line">new_map = Map()</span><br><span class="line">new_map.set_global_opts(</span><br><span class="line">    title_opts=opt.TitleOpts(<span class="string">'疫情地图'</span>,</span><br><span class="line">                             subtitle=<span class="string">'数据来源于新浪网'</span>,</span><br><span class="line">                             subtitle_link=<span class="string">'http://www.sina.cn'</span>),</span><br><span class="line">    visualmap_opts=opt.VisualMapOpts(max_=<span class="number">10000</span>, is_piecewise=<span class="literal">True</span>))</span><br><span class="line">new_map.add(<span class="string">'确诊'</span>, data, maptype=<span class="string">'china'</span>)</span><br><span class="line">new_map.render(<span class="string">'20200528.html'</span>)</span><br></pre></td></tr></table></figure><p>效果图：<br><img data-src="https://img-blog.csdnimg.cn/20200529155455859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      Python一系列练习题
    
    </summary>
    
    
      <category term="Python一些列练习题" scheme="https://pdxblog.top/categories/Python%E4%B8%80%E4%BA%9B%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Python一系列练习题" scheme="https://pdxblog.top/tags/Python%E4%B8%80%E7%B3%BB%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python网络管理</title>
    <link href="https://pdxblog.top/Python%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86.html"/>
    <id>https://pdxblog.top/Python%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86.html</id>
    <published>2020-05-14T16:00:00.000Z</published>
    <updated>2020-05-15T06:31:34.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络"><a class="header-anchor" href="#网络">¶</a>网络</h2><p>网络可以将多台主机进行连接，使得网络中的主机可以相互通信。在网络通信中，使用最广泛的通信协议是TCP/IP协议簇，因此，Python也提供了相应的应用程序接口（API), 使得工程师可以在Python程序中创建网络连接、进行网络通信。<br>计算机之间可以相互通信以后，就开始涉及网络安全问题。现如今网络情况复杂安全环境恶劣。</p><blockquote><p>2017年5月12日起，全球范围内爆发基于Windows网络共享协议进行攻击传播的蠕虫恶意代码，这是不法分子通过改造之前泄露的NSA黑客武器库中“永恒之蓝”攻击程序发起的网络攻击事件。五个小时内，包括英国、俄罗斯、整个欧洲以及中国国内多个高校校内网、大型企业内网和政府机构专网中招，被勒索支付高额赎金才能解密恢复文件，对重要数据造成严重损失。<br>被袭击的设备被锁定，并索要300美元比特币赎金。要求尽快支付勒索赎金，否则将删除文件，甚至提出半年后如果还没支付的穷人可以参加免费解锁的活动。原来以为这只是个小范围的恶作剧式的勒索软件，没想到该勒索软件大面积爆发，许多高校学生中招，愈演愈烈。</p></blockquote><p>Python是一门应用领域非常广泛的语言，除了在科学计算、大数据处理、自动化运维等领域广泛应用以外，在计算机网络领域中使用也非常广泛。这主要得益于Python语言的开发效率高、入门门槛低、功能强大等优点。工程师可以使用Python语言管理网络，计算机黑客可以使用Python语言或者Python语言编写的安全工具进行渗透测试、网络分析、安全防范等。<br>在这章中，我们将介绍Python在网络方面的应用，包括网络通信、网络管理和网络安全。我们首先介绍如何使用Python语言列出网络上所有活跃的主机；然后介绍一个 端口扫描工具；接着介绍如何使用IPy方便地进行IP地址管理；随后，介绍了一个DNS工具包；最后，我们介绍了一个非常强大的网络嗅探工具。</p><h3 id="一、列出网络上所有活跃的主机"><a class="header-anchor" href="#一、列出网络上所有活跃的主机">¶</a>一、列出网络上所有活跃的主机</h3><p>在这一小节中，我们将会学习如何在shell脚本中调用ping命令得到网络上活跃的主机列表，随后，我们使用Python语言改造这个程序，以此支持并发的判断。</p><h4 id="1、使用ping命令判断主机是否活跃"><a class="header-anchor" href="#1、使用ping命令判断主机是否活跃">¶</a>1、使用ping命令判断主机是否活跃</h4><p>ping命令是所有用户都应该了解的最基础的网络命令，ping命令可以探测主机到主机之间是否能够通信，如果不能ping到某台主机，则表明不能和这台主机进行通信。ping命令最常使用的场景是验证网络上两台主机的连通性以及找出网络上活跃的主机。<br>为了检査网络上两台主机之间的连通性，ping命令使用互联网控制协议（ICMP)中的 ECHO_REQUEST数据报，网络设备收到该数据报后会做出回应。ping命令可以通过网络设备的回复得知两台主机的连通性以及主机之间的网络延迟。<br>ping命令的使用非常简单，直接使用主机名、域名或IP地址作为参数调用ping命令即可。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]# ping 192.168.1.10</span><br><span class="line">PING 192.168.1.10 (192.168.1.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=1 ttl=64 time=0.023 ms</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=2 ttl=64 time=0.034 ms</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=3 ttl=64 time=0.033 ms</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=4 ttl=64 time=0.039 ms</span><br></pre></td></tr></table></figure><p>ping命令会连续发送包，并将结果打印到屏幕终端上。如果主机不可达，ping将会显示“Destination Host Unreachable”的错误信息。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]# ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (220.181.38.150) 56(84) bytes of data.</span><br><span class="line">From bogon (192.168.1.10) icmp_seq=1 Destination Host Unreachable</span><br><span class="line">From bogon (192.168.1.10) icmp_seq=2 Destination Host Unreachable</span><br><span class="line">From bogon (192.168.1.10) icmp_seq=3 Destination Host Unreachable</span><br><span class="line">From bogon (192.168.1.10) icmp_seq=4 Destination Host Unreachable</span><br></pre></td></tr></table></figure><p>除了检查网络上两台主机之间的连通性外，ping命令还可以粗略地估计主机之间的网络延迟情况。在ping命令的输出结果中，time字段的取值表示网络上两台主机之间的往返时间，它是分组从源主机到B的主机一个来回的时间，单位是毫秒。我们可以通过这个时间粗略估计网络的速度以及监控网络状态。例如，有这样一个使用ping命令解决线上问题的案例。当时的情况是应用程序使用我们提供的数据库服务，在每个整点时都会出现应用程序建立数据库连接失败的情况。通过前期排査，可以确定的是应用的请求已成功发出，数据库的压力并不是特别大，数据库连接也没有满。因此，问题很有可能出在网络上面。为此，我们增加了一个ping延迟监控。通过监控发现，在每个整点时ping的网络延迟变大，甚至大到了不可接受的程度。有了这个线索以后，接着排查网络问题。通过分析定位，发现是因为宿主机上有定时任务，导致每个整点宿主机的cpu压力增加，从而引发了前面所说的建立数据库连接失败的错误。<br>默认情况下，ping命令会不停地发送ECHO_REQUEST数据报并等待回复，到按下Ctrl+C为止。我们可以用选项-c限制所发送的ECHO_REQUEST数据报数量。用法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]# ping -c 2 192.168.1.10</span><br><span class="line">PING 192.168.1.10 (192.168.1.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=1 ttl=64 time=0.030 ms</span><br><span class="line">64 bytes from 192.168.1.10: icmp_seq=2 ttl=64 time=0.047 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.1.10 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.030/0.038/0.047/0.010 ms</span><br></pre></td></tr></table></figure><p>在这个例子中，ping命令发送了 2个ECHO_REQUEST数据报就停止发送，这个功能对于脚本中检查网络的连通性非常有用。<br>ping命令将结果打印到屏幕终端，我们通过ping命令的输出结果判断主机是否可达, 这种方式虽然直观，但是不便于程序进行处理。在程序中可以通过ping命令的返回码判断主机足否可达，当主机活跃时，ping命令的返回码为0，当主机不可达时，ping命令的返回码非0。<br>有了上面的基础以后，要判断网络上活跃的主机就非常容易了。我们只需要ping每一台主机，然后通过ping命令的返回值判断主机是否活跃。下面这段Shell程序就是用来判断网络中的主机是否可达：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for ip in 'cat ips.txt'</span><br><span class="line">do</span><br><span class="line">if ping $ip -c 2 &amp; &gt; /dev/null</span><br><span class="line">then</span><br><span class="line">echo "$ip is alive"</span><br><span class="line">else</span><br><span class="line">echo "$ip is unreachable"</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>在这个例子中，我们首先将主机地址以每行一个地址的形式保存到ips.txt文件中，然后通过cat命令读取ips.txt文件中的内容，使用for循环迭代ips.txt中保存的主机。<br>为了减少视觉杂讯，使用输出重定向的方式将ping命令的结果输出到/dev/null中，以此避免信息在终端上打印。为了简化起见，我们直接在if语句中调用ping命令，Shell脚本能够根据ping命令的返回码判断命令执行成功还是失败。</p><h4 id="2、使用Python判断主机是否活跃"><a class="header-anchor" href="#2、使用Python判断主机是否活跃">¶</a>2、使用Python判断主机是否活跃</h4><p>前面的Shell脚本中，虽然所有的IP地址都是彼此独立，但是，我们的程序依然是顺序调用ping命令进行主机探活。由于每执行一次ping命令都要经历一段时间延迟（或者接收回应，或者等待回应超时)，所以，当我们要检査大量主机是否处于活跃状态时需要很长的时间。对于这种情况可以考虑并发地判断主机是否活跃。<br>Shell脚本可以非常快速地解决简单的任务，但是，对于比较复杂的任务，Shell脚本就无能为力。如这里的并发判断主机是否活跃的需求。对于这种情况，可以使用Python语言编写并发的程序，以此加快程序的执行。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_reacheable</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (subprocess.call([<span class="string">'ping'</span>, <span class="string">'-c'</span>, <span class="string">'1'</span>, ip])):</span><br><span class="line">        print(<span class="string">'&#123;0&#125; is alive'</span>.format(ip))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'&#123;0&#125; is unreacheable'</span>.format(ip))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ips.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines();</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            thr = threading.Thread(target=is_reacheable, args=(line,))</span><br><span class="line">            thr.start()</span><br><span class="line">            threads.append(thr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> thr <span class="keyword">in</span> threads:</span><br><span class="line">            thr.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这个例子中，我们首先打开ips.txt文件，并通过File对象的readlines函数将所有IP 地址读入内存。读入内存以后，IP地址保存在一个列表中，列表的每一项正好是一个地址。 对于每一个IP地址都创建一个线程。由于线程之间不共享任何数据，因此，不需要进行并发控制，这也使得整个程序变得简单。</p><p>在Python 中要判断两台主机是否可达有两种不同的方法，一种是在Python程序中调用ping命令实 现，另一种是使用socket编程发送ICMP数据报。为了简单起见，在我们这里的例子中使用前一种方法。为了调用系统中的ping命令，我们使用了subprocess模块。<br>我们的Python程序最终也是调用ping命令判断主机是否活跃，从思路上来说，和前面的Shell脚本是一样的。区别就在于Python程序使用并发加快了程序的执行效率。在我的测试环境中，测试了36个IP地址，其中，有12个IP地址不可达，需要等待网络超时才能返回，另外24个IP地址可达。使用Linux自带的time命令进行粗略计时，Shell脚本的执行时间是1分48秒，Python程序的执行时间是10秒。两个程序执行时间的差异，根据网络规模和网络环境将会显著不同。这里要表达的是，使用Python语言只需要很少的代码就能够将一个程序改造成并发的程序，通过并发来大幅提升程序的效率。</p><h4 id="3、使用生产者消费者模型减少线程的数量"><a class="header-anchor" href="#3、使用生产者消费者模型减少线程的数量">¶</a>3、使用生产者消费者模型减少线程的数量</h4><p>在前面的例子中，我们为每一个IP地址创建一个线程，这在IP地址较少的时候还算可行，但在IP地址较多时就会暴露出各种问题（如频繁的上下文切换）。因此，我们需要限制线程的数量。</p><p>列出网络上所有活跃主机的问题，其实是一个简单的生产者和消费者的问题。生产者 和消费者问题是多线程并发中一个非常经典的问题，该问题描述如下：</p><blockquote><p>有一个或多个生产者在生产商品，这些商品将提供给若干个消费者去消费。为了使生产者和消费者能并发执行，在两者之间设置一个缓冲期，生产者将它生产的商品放入缓冲中，消费者可以从缓冲区中取走商品进行消费。生产者只需要关心这个缓冲区是否已满， 如果未满则向缓冲区中放入商品，如果已满，则需要等待。同理，消费者只需要关心緩冲区中是否存在商品，如果存在商品则进行消费，如果缓冲区为空，则需要等待。</p></blockquote><p>生产者和消费者模型的好处是，生产者不需要关心有多少消费者、消费者何时消费、 以怎样的速度进行消费。消费者也不需要关心生产者，这就实现了程序模块的解耦。<br>我们这里的问题比生产者和消费者模型还要简单，只需要一次性将所有的IP地址读入到内存中，然后交由多个线程去处理。也就是说，我们一开始就生产好了所有的商品，只需要消费者消费完这些商品即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.util.queue <span class="keyword">import</span> Empty, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_ping</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (subprocess.call([<span class="string">'ping'</span>, <span class="string">'-c'</span>, <span class="string">'1'</span>, ip])):</span><br><span class="line">        print(<span class="string">'&#123;0&#125; is alive'</span>.format(ip))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'&#123;0&#125; is unreacheable'</span>.format(ip))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_reacheable</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ip = q.get_nowait()</span><br><span class="line">            call_ping(ip)</span><br><span class="line">    <span class="keyword">except</span> Empty:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ips.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            q.put(line)</span><br><span class="line"></span><br><span class="line">        threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        thr = threading.Thread(target=is_reacheable, args=(q,))</span><br><span class="line">        thr.start()</span><br><span class="line">        threads.append(thr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thr <span class="keyword">in</span> threads:</span><br><span class="line">        thr.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这个例子中创建了10个线程作为消费者线程，我们可以修改range函数的参数控制线程的个数。此外，我们还用到了一个新的数据结构，即Queue。引入Queue足因为多个消费者之间存在并发访问的问题，即多个消费者可能同时从缓冲区中获取商品。为了解决并发问题，我们使用了 Python标准库的Queue。Queue是标准库中线程安全的队列（FIFO) 实现，提供了一个适用于多线程编程的先进先出的数据结构，非常适合用于生产者和消费者线程之间的数据传递。<br>在这段程序中，我们首先将所有1P地址读入内存并放入Queue中，消费者不断从 Queue中获取商品。需要注意的是，如果我们使用Queue的get方法，当Queue中没有商品时，线程将会阻塞等待直到有新的商品为止。而在这个例子中不需要消费者阻塞等待， 因此，使用了Queue的get_nowait方法。该方法在冇商品时直接返回商品，没有商品时抛出Empty异常。消费者线程不断从Queue中获取IP地址，获取到IP地址以后调用call_ ping函数判断主机是否可达，直到没有商品以后退出线程。</p><h3 id="二、端口扫描"><a class="header-anchor" href="#二、端口扫描">¶</a>二、端口扫描</h3><p>仅仅知道网络上的主机是否可达还不够，很多情况下，我们需要的是一个端口扫描器。使用端口扫描器吋以进行安全检测与攻击防范。例如，在2017年5月12日，全球范围内爆发了基于Windows网络共享协议的永恒之蓝（Wannacry)勒索蠕虫。仅仅五个小时，包 括美国、中国、俄罗斯以及整个欧洲在内的100多个国家都不问程度地遭受永恒之蓝病毒攻击，尤其是高校、大型企业内网和政府机构专网，被攻击的电脑被勒索支付高额赎金才能解密恢复文件，对重要数据造成严重损失。永恒之蓝利用Windows系统的445端口进行蠕虫攻击，部分运营商已经在主干网络上封禁了 445端口，但是教育网以及大量企业内网并没有此限制，从而导致了永恒之蓝勒索蠕虫的泛滥。</p><p>所以作为工程师，一方面需要在日常维护养成良好的习惯，如配置防火墙、进行网络隔离、关闭不必要的服务、及时更新补丁；另一方面可以掌握一些安全相关的工具，在日常中进行安全防范，在紧急悄况下进行安全检测。在这一小节，我们将介绍如何使用Python进行端口扫描。有了端口扫描器，我们可以快速了解主机打开了哪些不必要的端口，以便及时消灭安全隐患。<br>在这一小节中，我们将使用Python语言编写一个端口扫描器，然后介绍大名鼎鼎的端 口扫描工具nmap，最后，通过python-nmap在Python代码中调用nmap进行端口扫描。</p><h4 id="1、使用Python编写端口扫描工具"><a class="header-anchor" href="#1、使用Python编写端口扫描工具">¶</a>1、使用Python编写端口扫描工具</h4><p>在Linux下，可以使用ping命令要判断一台主机是否可达，而判断一个端口是否打开可以使用telnet命令。我们可以模仿前面小节中并行ping的例子，在Python代码中调用 telnet命令判断一个端口是否打开。但是telnet命令存在一个问题，当我们telnet—个不可达的端口时，telnet需要很久才能够超时返回，并且telnet命令没有参数控制超时时间。 此外，如果Python标准库中有相应的模块，应该尽可能地使用Python的标准库，而不是在 Python代码中执行Linux命令。这一方面能够增加代码的可读性、可维护性，另一方面也能够保证程序跨平台运行。<br>为了使用Python编写端口扫描器，我们需要简单了解socket模块。socket模块为操作系统的socket连接提供了一个Python接口。有了 socket模块，我们可以完成任何使用 socket的任务。<br>socket模块提供了一个工厂函数socket，socket函数会返冋一个socket对象。我们可以给socket函数传递参数，以此创建不同网络协议和网络类塑的socket对象。默认情况下，socket函数会返回一个使用TCP协议的socket对象。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s = socket.socket()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: s.connect((<span class="string">'47.100.98.242'</span>,<span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s.send(<span class="string">"GET/HTTP/1.0"</span>.encode())</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">12</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: print(s.recv(<span class="number">200</span>))</span><br><span class="line"><span class="string">b'HTTP/1.1 400 Bad Request\r\nServer: nginx\r\nDate: Sat, 29 Feb 2020 15:44:51</span></span><br><span class="line"><span class="string"> GMT\r\nContent-Type: text/html\r\nContent-Length: 150\r\nConnection: close\r\</span></span><br><span class="line"><span class="string">n\r\n&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;\r\n&lt;b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: s.close()</span><br></pre></td></tr></table></figure><p>在这个例子中，socket工厂函数以默认参数AF_INET和SOCK_STREAM创建了一个 名为s的socket对象，该对象可以在进程间进行TCP通信。创建完对象以后，我们使用connect函数连接到远程服务器的80端口，并发送一个HTTP请求到远程服务器，发送完 毕之后，接收服务器响应的前200个宇节。最后，调用socket对象的close方法关闭连接。<br>在这个例子中，我们用到了 socket工厂函数、socket的connect方法、send方法、recv 方法和close方法，这也是socket中最常使用的一些方法。</p><p>接下来，我们就看一下如何使用简单的socket接口编写一个端口扫描器。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_scan</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    conn = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn.connect((host, port))</span><br><span class="line">        print(host, port, <span class="string">'is avaliable'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(host, port, <span class="string">'is not avaliable'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">'47.100.98.242'</span></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">80</span>, <span class="number">5000</span>):</span><br><span class="line">        conn_scan(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这个端口扫描的例子中，conn_scan用来判断端口是否可用。该函数尝试建立与目标主机和端口的连接，如果成功，打印一个端口开放的消息，否则，打印一个端口关闭的消息。<br>除广使用socket套接字编程的方式判断端口是否可用以外，还可以使用Python标准库的telnet模块。该模块中包含了一个Telnet类，该类的对象表示一个telnet的连接。创建一 个Telnet对象并不会建立到远程主机的连接，需要显式地使用open方法建立连接。open方法接受三个参数，分别是主机名、端口号和超时时间。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_scan</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    t = telnetlib.Telnet()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t.open(host,port,timeout=<span class="number">1</span>)</span><br><span class="line">        print(host, port, <span class="string">'is avaliable'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(host, port, <span class="string">'is not avaliable'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        t.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">'47.100.98.242'</span></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">20</span>, <span class="number">5000</span>):</span><br><span class="line">        conn_scan(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>对于上面这段程序，我们可以参考多线程的ping程序，以及使用生产者和消费者模型的ping程序，将这段程序扩展成多主机和多线程的端口扫描器。<br>与ping程序不同的是，端U扫描需要用到两个参数，即主机地址和端口号。当我们有了主机的列表和端口号的列表以后，如何能够快速地得到所有主机与端口号的组合呢？对于这个问题，有多种不同的方法。其中比较方便的是使用列表推导。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: l1 = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: l2 = (<span class="number">22</span>,<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: list([(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> l1 <span class="keyword">for</span> y <span class="keyword">in</span> l2])</span><br><span class="line">Out[<span class="number">3</span>]: [(<span class="string">'a'</span>, <span class="number">22</span>), (<span class="string">'a'</span>, <span class="number">80</span>), (<span class="string">'b'</span>, <span class="number">22</span>), (<span class="string">'b'</span>, <span class="number">80</span>), (<span class="string">'c'</span>, <span class="number">22</span>), (<span class="string">'c'</span>, <span class="number">80</span>)]</span><br></pre></td></tr></table></figure><p>使用列表推导虽然比较方便，但是，这个列表推导表达式本身比较复杂。因此，我们可以考虑使用itertools模块中的product函数。Python标准库的itertools模块提供了一组非常常用的函数，读者很有必要了解hertooU模块中提供的函数。在itertools模块中有一个名为product的函数，该函数用来返回多个可迭代对象的笛卡尔积。注意，product比前面的列表推导表达式更加通用，它可以返回多个可迭代对象的笛长尔积。这里的例子只需要计算两个可迭代对象的笛卡尔积。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: <span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list(product(l1,l2))</span><br><span class="line">Out[<span class="number">5</span>]: [(<span class="string">'a'</span>, <span class="number">22</span>), (<span class="string">'a'</span>, <span class="number">80</span>), (<span class="string">'b'</span>, <span class="number">22</span>), (<span class="string">'b'</span>, <span class="number">80</span>), (<span class="string">'c'</span>, <span class="number">22</span>), (<span class="string">'c'</span>, <span class="number">80</span>)]</span><br></pre></td></tr></table></figure><p>有了主机和端口的组合以后，我们可以参照生产者和消费者模型的例子，开发一个多线程的端口扫描器。但是我们并没有必要这么做，因为除了使用多线程编程编写端口扫描器以外，还可以使用Python-nmap模块更加方便地进行端口扫描。</p><h4 id="2、使用nmap扫描端口"><a class="header-anchor" href="#2、使用nmap扫描端口">¶</a>2、使用nmap扫描端口</h4><p>Python-nmap模块是对nmap命令的封装。nmap是知名的网络探测和安全扫描程序, 是Network Mapper的简称。nmap可以进行主机发现（Host Discovery)、端口扫描（Port Scanning)、版本侦测（Version Detection〉、操作系统侦测（Operating System Detection)，nmap是网络管理员必用的软件之一。nmap因为功能强大、跨平台、开源、文档丰富等诸多优点，在安全领域使用非常广泛。<br>在使用之前，需要先安装nmap。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># yum install nmap</span></span><br></pre></td></tr></table></figure><p>nmap的使用非常灵活，功能又很强大，因此nmap有很多命令行选项。使用nmap时， 首先需要确定要对哪些主机进行扫描，然后确定怎么进行扫描（如使用何种技术，对哪些端 口进行扫描）。<br>nmap具有非常灵活的方式指定需要扫描的主机，我们可以使用nmap命令的-sL选项 来进行测试。-sL选项仅仅打印IP列表，不会进行任何操作。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># nmap -sL 47.100.98.242/80</span></span><br><span class="line"></span><br><span class="line">Starting Nmap <span class="number">6.40</span> ( http://nmap.org ) at <span class="number">2020</span><span class="number">-03</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">18</span> CST</span><br><span class="line">Illegal netmask <span class="keyword">in</span> <span class="string">"47.100.98.242/80"</span>. Assuming /<span class="number">32</span> (one host)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">47.100</span><span class="number">.98</span><span class="number">.242</span></span><br><span class="line">Nmap done: <span class="number">1</span> IP address (<span class="number">0</span> hosts up) scanned <span class="keyword">in</span> <span class="number">0.04</span> seconds</span><br></pre></td></tr></table></figure><p>nmap提供了非常灵活的方式来指定主机，包括同时指定多个IP、通过网段指定主机、通过通配符指定主机等。如下所示：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nmap -sL 47.100.98.242 14.215.177.39</span><br><span class="line">nmap -sL 47.100.98.*</span><br><span class="line">nmap -sL 47.100.98.242,243,245</span><br><span class="line">nmap -sL 47.100.98.242-250</span><br><span class="line">nmap -sL 47.100.98.* --exclude 47.100.98.242</span><br><span class="line">nmap -sL 47.100.98.242/30</span><br></pre></td></tr></table></figure><p>除了上面指定主机的方式，我们也可以将IP地址保存到文本中，通过-iL选项读取文件中的IP地址。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -iL ip.list</span><br></pre></td></tr></table></figure><h5 id="（1）主机发现"><a class="header-anchor" href="#（1）主机发现">¶</a>（1）主机发现</h5><p>端口扫描是nmap的重点，除此之外，我们也可以使用nmap检查网络上所有在线的主机，实现类似前边小节中列出网络上所有活跃的主机的功能。使用-sP或-sn选项可以告诉nmap不要进行端口扫描，仅仅判断主机是否可达。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># nmap -sP 47.100.98.*</span></span><br><span class="line">Starting Nmap <span class="number">6.40</span> ( http://nmap.org ) at <span class="number">2020</span><span class="number">-03</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">25</span> CST</span><br><span class="line">Nmap done: <span class="number">256</span> IP addresses (<span class="number">0</span> hosts up) scanned <span class="keyword">in</span> <span class="number">206.44</span> seconds</span><br><span class="line">    </span><br><span class="line">[root@bogon ~]<span class="comment"># nmap -sn 47.100.98.*</span></span><br><span class="line">Starting Nmap <span class="number">6.40</span> ( http://nmap.org ) at <span class="number">2020</span><span class="number">-03</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> CST</span><br><span class="line">Nmap done: <span class="number">256</span> IP addresses (<span class="number">0</span> hosts up) scanned <span class="keyword">in</span> <span class="number">205.38</span> seconds</span><br></pre></td></tr></table></figure><h5 id="（2）端口扫描"><a class="header-anchor" href="#（2）端口扫描">¶</a>（2）端口扫描</h5><p>端口扫描是nmap最基本，也是最核心的功能，用于确定目标主机TCP/UDP端口的开放情况。不添加任何参数便是对主机进行端口扫描。默认情况下，nmap将会扫描1000个最常用的端口号。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># nmap 14.215.177.39</span></span><br><span class="line">Starting Nmap <span class="number">6.40</span> ( http://nmap.org ) at <span class="number">2020</span><span class="number">-03</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">42</span> CST</span><br><span class="line">Note: Host seems down. If it <span class="keyword">is</span> really up, but blocking our ping probes, <span class="keyword">try</span> -Pn</span><br><span class="line">Nmap done: <span class="number">1</span> IP address (<span class="number">0</span> hosts up) scanned <span class="keyword">in</span> <span class="number">3.09</span> seconds</span><br></pre></td></tr></table></figure><p>在进行端口扫描时，nmap提供了大M的参数控制端口扫描。包括端口扫描协议、端口扫描类型、扫描的端口号。如下所示：</p><blockquote><p>端口扫描协议：T (TCP)、U (UDP)、S (SCTP&gt;、P (IP);</p><p>端口扫描类型：-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans;</p><p>扫描的端口号：-p 80,443 -p 80-160</p></blockquote><p>nmap中的端口扫描协议、扫描类型和端口号相关的选项，可以结合起来使用。如下所示：</p><blockquote><p>-p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</p></blockquote><p>nmap通过探测将端口划分为6个状态，下表给出了每个状态的含义。</p><table><thead><tr><th>端口状态</th><th>状态含义</th></tr></thead><tbody><tr><td>open</td><td>端口是开放的</td></tr><tr><td>closed</td><td>端口是关闭的</td></tr><tr><td>filtered</td><td>端口被防火墙IDS/IPS屏蔽，无法确认其状态</td></tr><tr><td>unfiltered</td><td>端口没有被屏蔽，但是否开放需要进一步确定</td></tr><tr><td>open|filtered</td><td>端口是开放的或被屏蔽</td></tr><tr><td>closed|filtered</td><td>端口是关闭的或被屏蔽</td></tr></tbody></table><p>在进行端口扫描时，可以使用不同的端口扫描类型。常见的端口扫描类型如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TCP SYNC SCAN:半开放扫描，这种类沏的扫描为发送一个SYN包，启动一个TCP会话，并等待响应的数据包。如果收到的是一个reset包，表明端口是关闭的; 如果收到的是一个SYNC/ACK包，则表示端口是打开的。</span><br><span class="line">TCP NULL SCAN: NULL扫描把TCP头中的所有标志位都设置为NULL。如果收到的是一个RST包，则表示相应的端口是关闭的。</span><br><span class="line">TCP FIN SCAN : TCP FIN扫描发送一个表示结束一个活跃的TCP连接的FIN包， 让对方关闭连接。如果收到了一个RST包，则表示相应的端口是关闭的。 TCPXMASSCAN: TCPXMAS扫描发送PSH、FIN、URG和TCP标志位被设置为1的数据包，如果收到一个RST包，则表示相砬端口是关闭的。</span><br></pre></td></tr></table></figure><h5 id="（3）版本侦测"><a class="header-anchor" href="#（3）版本侦测">¶</a>（3）版本侦测</h5><p>nmap在进行端口扫描时，还可以进行版本侦测。版本监测功能用于确定开放端口上运行的应用程序及版本信息。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV <span class="number">47.100</span><span class="number">.98</span><span class="number">.242</span></span><br></pre></td></tr></table></figure><h5 id="（4）操作系统监测"><a class="header-anchor" href="#（4）操作系统监测">¶</a>（4）操作系统监测</h5><p>操作系统侦测用于监测主机运行的操作系统类型及设备类型等信息。nmap拥有丰富的系统数据库，可以识别2600多种操作系统与设备类型。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sO <span class="number">47.100</span><span class="number">.98</span><span class="number">.242</span></span><br></pre></td></tr></table></figure><h4 id="3、使用python-nmap进行端口扫描"><a class="header-anchor" href="#3、使用python-nmap进行端口扫描">¶</a>3、使用python-nmap进行端口扫描</h4><p>我们在上一小节中，花f较多的篇幅介绍nmap。Python的Python-nmap仅仅趋对nmap的封装，因此，要使用Python-nmap,必须先了解nmap。Python-nmap相对于nmap, 主要的改进在于对输出结果的处理。Python-nmap将nmap的输出结果保存到宇典之中，我们只需要通过Python的字典就可以获取到nmap的输出信息，不用像Shell脚本一样通过字符串处理和正则表达式来解析nmap的结果。Python-nmap将nmap的强大功能与Python语言优秀的表达能力进行了完美的结合，使用Python语言丰富的数据结构保存结果，以便后续继续进行处理，如使用Python-nmap生成相关的报告。<br>Python-nmap是开源的库，因此，在使用之前需要手动进行安装。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-nmap</span><br></pre></td></tr></table></figure><p>Python-nmap的使用非常简单，我们只要创建一个PortScarmer对象，并调用对象的 scan方法就能够完成基本的nmap端口扫描。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> nmap                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: nm = nmap.PortScanner()    </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: nm.scan(<span class="string">'192.168.79.129'</span>,<span class="string">'22-1000'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">&#123;<span class="string">'nmap'</span>: &#123;<span class="string">'command_line'</span>: <span class="string">'nmap -oX - -p 22-1000 -sV 192.168.79.129'</span>,</span><br><span class="line">  <span class="string">'scaninfo'</span>: &#123;<span class="string">'tcp'</span>: &#123;<span class="string">'method'</span>: <span class="string">'syn'</span>, <span class="string">'services'</span>: <span class="string">'22-1000'</span>&#125;&#125;,</span><br><span class="line">  <span class="string">'scanstats'</span>: &#123;<span class="string">'timestr'</span>: <span class="string">'Mon Mar  2 16:31:17 2020'</span>,</span><br><span class="line">   <span class="string">'elapsed'</span>: <span class="string">'6.33'</span>,</span><br><span class="line">   <span class="string">'uphosts'</span>: <span class="string">'1'</span>,</span><br><span class="line">   <span class="string">'downhosts'</span>: <span class="string">'0'</span>,</span><br><span class="line">   <span class="string">'totalhosts'</span>: <span class="string">'1'</span>&#125;&#125;,</span><br><span class="line"> <span class="string">'scan'</span>: &#123;<span class="string">'192.168.79.129'</span>: &#123;<span class="string">'hostnames'</span>: [&#123;<span class="string">'name'</span>: <span class="string">'192.168.79.129'</span>,</span><br><span class="line">     <span class="string">'type'</span>: <span class="string">'PTR'</span>&#125;],</span><br><span class="line">   <span class="string">'addresses'</span>: &#123;<span class="string">'ipv4'</span>: <span class="string">'192.168.79.129'</span>&#125;,</span><br><span class="line">   <span class="string">'vendor'</span>: &#123;&#125;,</span><br><span class="line">   <span class="string">'status'</span>: &#123;<span class="string">'state'</span>: <span class="string">'up'</span>, <span class="string">'reason'</span>: <span class="string">'localhost-response'</span>&#125;,</span><br><span class="line">   <span class="string">'tcp'</span>: &#123;<span class="number">22</span>: &#123;<span class="string">'state'</span>: <span class="string">'open'</span>,</span><br><span class="line">     <span class="string">'reason'</span>: <span class="string">'syn-ack'</span>,</span><br><span class="line">     <span class="string">'name'</span>: <span class="string">'ssh'</span>,</span><br><span class="line">     <span class="string">'product'</span>: <span class="string">'OpenSSH'</span>,</span><br><span class="line">     <span class="string">'version'</span>: <span class="string">'7.4'</span>,</span><br><span class="line">     <span class="string">'extrainfo'</span>: <span class="string">'protocol 2.0'</span>,</span><br><span class="line">     <span class="string">'conf'</span>: <span class="string">'10'</span>,</span><br><span class="line">     <span class="string">'cpe'</span>: <span class="string">'cpe:/a:openbsd:openssh:7.4'</span>&#125;,</span><br><span class="line">    <span class="number">111</span>: &#123;<span class="string">'state'</span>: <span class="string">'open'</span>,</span><br><span class="line">     <span class="string">'reason'</span>: <span class="string">'syn-ack'</span>,</span><br><span class="line">     <span class="string">'name'</span>: <span class="string">'rpcbind'</span>,</span><br><span class="line">     <span class="string">'product'</span>: <span class="string">''</span>,</span><br><span class="line">     <span class="string">'version'</span>: <span class="string">'2-4'</span>,</span><br><span class="line">     <span class="string">'extrainfo'</span>: <span class="string">'RPC #100000'</span>,</span><br><span class="line">     <span class="string">'conf'</span>: <span class="string">'10'</span>,</span><br><span class="line">     <span class="string">'cpe'</span>: <span class="string">''</span>&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>当我们创建PortScanner对象时，Python-nmap会检査系统中是否已经安装了 nmap，如果没有安装，抛出PortScannerError异常。调用PortScanner对象的scan方法进行扫描以后就可以通过该类的其他方法获取本次扫描的信息。如命令行参数、主机列表、扫描的方法等。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: nm.command_line()           </span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'nmap -oX - -p 22-1000 -sV 192.168.79.129'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: nm.scaninfo()                </span><br><span class="line">Out[<span class="number">5</span>]: &#123;<span class="string">'tcp'</span>: &#123;<span class="string">'method'</span>: <span class="string">'syn'</span>, <span class="string">'services'</span>: <span class="string">'22-1000'</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: nm.all_hosts()              </span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'192.168.79.129'</span>]</span><br></pre></td></tr></table></figure><p>Python-nmap还提供了以主机地址为键，获取单台主机的详细信息。包括获取主机网络状态、所有的协议、所有打开的端口号，端口号对应的服务等。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: nm[<span class="string">'192.168.79.129'</span>].state()</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'up'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: nm[<span class="string">'192.168.79.129'</span>].all_protocols()</span><br><span class="line">Out[<span class="number">8</span>]: [<span class="string">'tcp'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: nm[<span class="string">'192.168.79.129'</span>].keys()  </span><br><span class="line">Out[<span class="number">9</span>]: dict_keys([<span class="string">'hostnames'</span>, <span class="string">'addresses'</span>, <span class="string">'vendor'</span>, <span class="string">'status'</span>, <span class="string">'tcp'</span>])</span><br><span class="line">    </span><br><span class="line">In [<span class="number">10</span>]: nm[<span class="string">'192.168.79.129'</span>][<span class="string">'tcp'</span>][<span class="number">22</span>]</span><br><span class="line">Out[<span class="number">10</span>]: </span><br><span class="line">&#123;<span class="string">'state'</span>: <span class="string">'open'</span>,</span><br><span class="line"> <span class="string">'reason'</span>: <span class="string">'syn-ack'</span>,</span><br><span class="line"> <span class="string">'name'</span>: <span class="string">'ssh'</span>,</span><br><span class="line"> <span class="string">'product'</span>: <span class="string">'OpenSSH'</span>,</span><br><span class="line"> <span class="string">'version'</span>: <span class="string">'7.4'</span>,</span><br><span class="line"> <span class="string">'extrainfo'</span>: <span class="string">'protocol 2.0'</span>,</span><br><span class="line"> <span class="string">'conf'</span>: <span class="string">'10'</span>,</span><br><span class="line"> <span class="string">'cpe'</span>: <span class="string">'cpe:/a:openbsd:openssh:7.4'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: nm[<span class="string">'192.168.79.129'</span>][<span class="string">'tcp'</span>][<span class="number">111</span>]</span><br><span class="line">Out[<span class="number">11</span>]: </span><br><span class="line">&#123;<span class="string">'state'</span>: <span class="string">'open'</span>,</span><br><span class="line"> <span class="string">'reason'</span>: <span class="string">'syn-ack'</span>,</span><br><span class="line"> <span class="string">'name'</span>: <span class="string">'rpcbind'</span>,</span><br><span class="line"> <span class="string">'product'</span>: <span class="string">''</span>,</span><br><span class="line"> <span class="string">'version'</span>: <span class="string">'2-4'</span>,</span><br><span class="line"> <span class="string">'extrainfo'</span>: <span class="string">'RPC #100000'</span>,</span><br><span class="line"> <span class="string">'conf'</span>: <span class="string">'10'</span>,</span><br><span class="line"> <span class="string">'cpe'</span>: <span class="string">''</span>&#125;</span><br></pre></td></tr></table></figure><p>Python-nmap是对nmap的Python封装，因此我们也可以通过Python-nmap指定nmap命令的复杂选项。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm.scan(hosts=<span class="string">'192.168.79.129/24'</span>,arguments=<span class="string">'-n -sP -PE -PA21,23,80,3389'</span>)</span><br></pre></td></tr></table></figure><h3 id="三、使用IPy进行IP管理"><a class="header-anchor" href="#三、使用IPy进行IP管理">¶</a>三、使用IPy进行IP管理</h3><p>在网络设计中，首先要做的就是规划IP地址。IP地址规划的好坏直接影响路由算法的效率，包括网络性能和扩展性。在IP地址规划中，需要进行大量的IP地址计算，包括网段、网络掩码、广播地址、子网数、IP类型等计算操作。在大量的计算操作中，如果没有一个好的工具，计算IP地址是一个很无趣有容易出错的事情。在Perl语言中，可以使用NET::IP模块，在Python语言中，可以使用开源的IPy模块进行操作。</p><h4 id="1、IPy模块介绍"><a class="header-anchor" href="#1、IPy模块介绍">¶</a>1、IPy模块介绍</h4><p>IPy模块是一个处理IP地址的模块，它能够自动识别IP地址的版本、IP地址的类型。使用IPy模块，可以方便地进行IP地址的计算。</p><p>IPy模块是第三方的开源模块，因此，在使用之前需要进行安装。直接使用pip安装即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install ipy</span><br></pre></td></tr></table></figure><h4 id="2、IPy模块的基本使用"><a class="header-anchor" href="#2、IPy模块的基本使用">¶</a>2、IPy模块的基本使用</h4><p>IPy模块有一个IP类，这个类几乎可以接受任何格式的IP地址和网段。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> IPy </span><br><span class="line">    </span><br><span class="line">In [<span class="number">2</span>]:<span class="keyword">from</span> IPy <span class="keyword">import</span> IP           </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: IP(<span class="number">0x7f000001</span>)               </span><br><span class="line">Out[<span class="number">3</span>]: IP(<span class="string">'127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: IP(<span class="string">'127.0.0.1'</span>)               </span><br><span class="line">Out[<span class="number">4</span>]: IP(<span class="string">'127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: IP(<span class="string">'127.0.0.0/30'</span>)             </span><br><span class="line">Out[<span class="number">5</span>]: IP(<span class="string">'127.0.0.0/30'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: IP(<span class="string">'1080:0:0:0:8:800:200C:417A'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: IP(<span class="string">'1080::8:800:200c:417a'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: IP(<span class="string">'127.0.0.0-127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: IP(<span class="string">'127.0.0.0/8'</span>)</span><br></pre></td></tr></table></figure><p>IP类包含了许多的方法，用来进行灵活的IP地址操作。例如：</p><h5 id="（1）version-获取IP地址的版本"><a class="header-anchor" href="#（1）version-获取IP地址的版本">¶</a>（1）version:获取IP地址的版本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: IP(<span class="string">'127.0.0.0-127.255.255.255'</span>) </span><br><span class="line">Out[<span class="number">9</span>]: IP(<span class="string">'127.0.0.0/8'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: IP(<span class="string">'10.0.0.0/8'</span>).version()  </span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: IP(<span class="string">'::1'</span>).version()        </span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="（2）len-得到子网IP地址的个数"><a class="header-anchor" href="#（2）len-得到子网IP地址的个数">¶</a>（2）len:得到子网IP地址的个数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: IP(<span class="string">'127.0.0.0/30'</span>).len()    </span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">13</span>]: IP(<span class="string">'127.0.0.0/28'</span>).len()    </span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">16</span></span><br></pre></td></tr></table></figure><h5 id="（3）iptype-返回IP地址的类型"><a class="header-anchor" href="#（3）iptype-返回IP地址的类型">¶</a>（3）iptype:返回IP地址的类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: IP(<span class="string">'127.0.0.1'</span>).iptype()    </span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'LOOPBACK'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: IP(<span class="string">'8.8.8.8'</span>).iptype()      </span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'PUBLIC'</span></span><br></pre></td></tr></table></figure><h5 id="（4）int-返回IP地址的整数形式"><a class="header-anchor" href="#（4）int-返回IP地址的整数形式">¶</a>（4）int:返回IP地址的整数形式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: IP(<span class="string">'8.8.8.8'</span>).int()         </span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">134744072</span></span><br></pre></td></tr></table></figure><h5 id="（5）strHex-返回IP地址的十六进制形式"><a class="header-anchor" href="#（5）strHex-返回IP地址的十六进制形式">¶</a>（5）strHex:返回IP地址的十六进制形式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: IP(<span class="string">'8.8.8.8'</span>).strHex()    </span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'0x8080808'</span></span><br></pre></td></tr></table></figure><h5 id="（6）strBin-返回IP地址的二进制形式"><a class="header-anchor" href="#（6）strBin-返回IP地址的二进制形式">¶</a>（6）strBin:返回IP地址的二进制形式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: IP(<span class="string">'8.8.8.8'</span>).strBin()</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'00001000000010000000100000001000'</span></span><br></pre></td></tr></table></figure><p>有一个方便的函数能够将IP转换为不同的格式，在工作环境中将会非常有用。例如，以数宇的形式在数据库中存储IP地址，在数据库中存储IP地址有两种形式，第一种是以变长字符串的形式将IP地址保存到数据库中，另一种是将IP地址转换为整数以后保存到数据库中。将IP地址转换为整数进行存储能够有效地节省存储空间，提高数据库的存储效率和访问速度。因此，在最佳实践中，我们一般将IP地址以数字的形式保存到数据库中。需要 IP地址时，再将数字形式的IP地址转换为字符串格式的IP地址。这个需求十分常见，因 此，MySQL提供了两个函数，分别用以将字符串形式的IP地址转换为数据格式的IP地址，以及将数字格式的IP地址转换为字符串形式的IP地址。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select INET_ATON(<span class="string">'10.166.224.14'</span>);</span><br><span class="line">+----------------------------+</span><br><span class="line">| INET_ATON(<span class="string">'10.166.224.14'</span>) |</span><br><span class="line">+----------------------------+</span><br><span class="line">|                  <span class="number">178708494</span> |</span><br><span class="line">+----------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select INET_NTOA(<span class="string">'178708494'</span>);</span><br><span class="line">+------------------------+</span><br><span class="line">| INET_NTOA(<span class="string">'178708494'</span>) |</span><br><span class="line">+------------------------+</span><br><span class="line">| <span class="number">10.166</span><span class="number">.224</span><span class="number">.14</span>          |</span><br><span class="line">+------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>除了使用MySQL自带的函数以外，我们也可以使用IP类提供的int方法将字符串形式的IP地址转换为数字形式的IP地址。要将数字形式的IP地址转换会字符串形式的IP地址，可以直接使用数字的方式创建IP对象。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: IP(<span class="string">'178708494'</span>)             </span><br><span class="line">Out[<span class="number">9</span>]: IP(<span class="string">'10.166.224.14'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="string">'&#123;0&#125;'</span>.format(IP(<span class="string">"178708494"</span>))</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'10.166.224.14'</span></span><br></pre></td></tr></table></figure><h4 id="3、网段管理"><a class="header-anchor" href="#3、网段管理">¶</a>3、网段管理</h4><p>IP类的构造函数可以接受不同格式的IP地址，也可以接受网段。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> IPy <span class="keyword">import</span> IP            </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: IP(<span class="string">'127.0.0.0/24'</span>)        </span><br><span class="line">Out[<span class="number">2</span>]: IP(<span class="string">'127.0.0.0/24'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: IP(<span class="string">'127.0.0.0-127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: IP(<span class="string">'127.0.0.0/8'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: IP(<span class="string">'127.0.0.0/127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: IP(<span class="string">'127.0.0.0/31'</span>)</span><br></pre></td></tr></table></figure><p>网段包含多个IP地址，我们可以直接使用len方法或者Python内置的len函数得到网段中IP地址的个数，也可以直接使用for循环迭代网段，以此遍历各个IP。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> IPy <span class="keyword">import</span> IP            </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: IP(<span class="string">'127.0.0.0/24'</span>)            </span><br><span class="line">Out[<span class="number">2</span>]: IP(<span class="string">'127.0.0.0/24'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: IP(<span class="string">'127.0.0.0-127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: IP(<span class="string">'127.0.0.0/8'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: IP(<span class="string">'127.0.0.0/127.255.255.255'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: IP(<span class="string">'127.0.0.0/31'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: ips = IP(<span class="string">'10.166.224.144/28'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: ips.len()                     </span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">16</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: len(ips)                      </span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">16</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: [ip <span class="keyword">for</span> ip <span class="keyword">in</span> ips]            </span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">[IP(<span class="string">'10.166.224.144'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.145'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.146'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.147'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.148'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.149'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.150'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.151'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.152'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.153'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.154'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.155'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.156'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.157'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.158'</span>),</span><br><span class="line"> IP(<span class="string">'10.166.224.159'</span>)]</span><br></pre></td></tr></table></figure><p>IP类有一个名为strNormal的方法，该方法接受一个wantprefixlen参数，参数的合法取值为0~3，每一个取值代表一种网段的显示方式。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: ips.strNormal(<span class="number">0</span>)          </span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'10.166.224.144'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: ips.strNormal(<span class="number">1</span>)            </span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'10.166.224.144/28'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: ips.strNormal(<span class="number">2</span>)            </span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'10.166.224.144/255.255.255.240'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: ips.strNormal(<span class="number">3</span>)           </span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'10.166.224.144-10.166.224.159'</span></span><br></pre></td></tr></table></figure><p>通过IP类，我们也可以方便地判断一个IP是否属于一个网段，判断子网是否包含于另一个网段中，以及两个网段是否有重叠。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: <span class="string">'10.166.224.144'</span> <span class="keyword">in</span> IP(<span class="string">'10.166.224.144/28'</span>)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: IP(<span class="string">'10.166.224.144/29'</span>) <span class="keyword">in</span> IP(<span class="string">'10.166.224.144/28'</span>)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: IP(<span class="string">'10.166.224.0/28'</span>).overlaps(<span class="string">'10.166.224.144/28'</span>)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>对于网段，我们可以方便地获取网络地址掩码以及网络的广播地址。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: ips.netmask()              </span><br><span class="line">Out[<span class="number">22</span>]: IP(<span class="string">'255.255.255.240'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: ips.broadcast()            </span><br><span class="line">Out[<span class="number">23</span>]: IP(<span class="string">'10.166.224.159'</span>)</span><br></pre></td></tr></table></figure><h3 id="四、使用dnspython解析DNS"><a class="header-anchor" href="#四、使用dnspython解析DNS">¶</a>四、使用dnspython解析DNS</h3><h4 id="1、dnspython简介与安装"><a class="header-anchor" href="#1、dnspython简介与安装">¶</a>1、dnspython简介与安装</h4><p>dnspython是Python实现的一个DNS工具集，它支持几乎所有的记录类型，可以用于查询、传输并动态更新ZONE信息，同时支持TSIG（事务签名）验证消息和EDNS0（扩展DNS）。使用dnspython可以代替Linux命令行下的nslookup以及dig等工具。</p><p>dnspython是第三方的开源模块，因此，使用之前需要先进行安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install dnspython</span><br></pre></td></tr></table></figure><h4 id="2、使用dnspython进行域名解析"><a class="header-anchor" href="#2、使用dnspython进行域名解析">¶</a>2、使用dnspython进行域名解析</h4><p>dnspython提供了丰富的API，其中，高层次的API根据名称和类型执行查询操作，低层次的API可以直接更新ZONE信息、消息、名称和记录。在所有的API中，最常使用的是域名查询。dnspython提供了一个DNS解析类resolver，使用它的query方法可以实现域名的查询功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dns.resolver.query(qname,rdtype=<span class="number">1</span>,rdclass=<span class="number">1</span>,tcp=<span class="literal">False</span>,source=<span class="literal">None</span>,raise_on_no_answer=<span class="literal">True</span>,source_port=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>query方法各参数的含义如下：</p><blockquote><p>qname:査询的域名；<br>rdtype:指定RR资源；</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A:地址记录（Address),返回域名指向的IP地址；</span><br><span class="line">NS:域名服务器记录（Name Server)，返回保存下一级域名信息的服务器地址。该记录只能设罝为域名，不能设置为IP地址；</span><br><span class="line">MX:邮件记录（Mail exchange),返回接收电子邮件的服务器地址；</span><br><span class="line">CNAME:规范名称记录（Canonical Name)，别名记录，实现域名间的映射；</span><br><span class="line">PTR:逆向査询记录（Pointer Record),反向解析，与A记录相反，将IP地址转换为主机名。</span><br></pre></td></tr></table></figure><blockquote><p>rdclass:网络类型；<br>tcp:指定査询是否启用TCP协议；<br>source:査询源的地址；<br>source_port:査询源的端口 ;<br>raise_on_no_answer:指定査询无应答时是否触发异常，默认为True。</p></blockquote><p>在使用dnspython查询DNS相关信息之前，我们先简单了解一下dig命令，以便对照查看Python程序的输出结果与dig命令的输出结果。<br>dig的全称是domain information groper,它是一个灵活探测DNS的工具，可以执行DNS査找，并显示从查询的名称服务器返回的答案。由于dig命令灵活易用、输出明确， 因此，大多数DNS管理员都使用dig解决DNS问题。<br>在我的主机上运行dig命令査找dnspython.org域名的信息。运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192</span> ~]<span class="comment"># dig qiniu.lexizhi.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG <span class="number">9.9</span><span class="number">.4</span>-RedHat<span class="number">-9.9</span><span class="number">.4</span><span class="number">-72.</span>el7 &lt;&lt;&gt;&gt; qiniu.lexizhi.com</span><br><span class="line">;; <span class="keyword">global</span> options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 35907</span><br><span class="line">;; flags: qr rd ra; QUERY: <span class="number">1</span>, ANSWER: <span class="number">12</span>, AUTHORITY: <span class="number">0</span>, ADDITIONAL: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;qiniu.lexizhi.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">qiniu.lexizhi.com.<span class="number">5</span>INCNAMEwww.lexizhi.com.qiniudns.com.</span><br><span class="line">www.lexizhi.com.qiniudns.com. <span class="number">5</span>INCNAMEdt003.china.line.qiniudns.com.</span><br><span class="line">dt003.china.line.qiniudns.com. <span class="number">5</span> INCNAMEtinychinacdnweb.qiniu.com.w.kunlunno.com.</span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.231</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.234</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.232</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.233</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">219.147</span><span class="number">.157</span><span class="number">.66</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.228</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.235</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.229</span></span><br><span class="line">tinychinacdnweb.qiniu.com.w.kunlunno.com. <span class="number">5</span> IN A <span class="number">150.138</span><span class="number">.180</span><span class="number">.230</span></span><br><span class="line"></span><br><span class="line">;; Query time: <span class="number">633</span> msec</span><br><span class="line">;; SERVER: <span class="number">192.168</span><span class="number">.79</span><span class="number">.2</span><span class="comment">#53(192.168.79.2)</span></span><br><span class="line">;; WHEN: 一 <span class="number">3</span>月 <span class="number">02</span> <span class="number">17</span>:<span class="number">29</span>:<span class="number">51</span> CST <span class="number">2020</span></span><br><span class="line">;; MSG SIZE  rcvd: <span class="number">300</span></span><br></pre></td></tr></table></figure><p>在Python代码中，可以使用dnspython查询A记录。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"></span><br><span class="line">data = dns.resolver.query(<span class="string">'www.lexizhi.com'</span>, <span class="string">'A'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>Python程序的输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">47.100</span><span class="number">.98</span><span class="number">.242</span></span><br></pre></td></tr></table></figure><p>使用dnspython实现NS记录，查询方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"></span><br><span class="line">data = dns.resolver.query(<span class="string">'dnspython.org'</span>, <span class="string">'NS'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>Python程序查询NS记录的结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ns<span class="number">-343.</span>awsdns<span class="number">-42.</span>com.</span><br><span class="line">ns<span class="number">-518.</span>awsdns<span class="number">-00.</span>net.</span><br><span class="line">ns<span class="number">-1253.</span>awsdns<span class="number">-28.</span>org.</span><br><span class="line">ns<span class="number">-2020.</span>awsdns<span class="number">-60.</span>co.uk.</span><br></pre></td></tr></table></figure><p>从输出结果来看，使用dig命令或dnspython模块都是一样的。如果在命令行操作，建议使用dig命令。如果要使用程序管理DNS或查询DNS的内容，则推荐使用dnspython模块。</p><h3 id="五、网络嗅探器Scapy"><a class="header-anchor" href="#五、网络嗅探器Scapy">¶</a>五、网络嗅探器Scapy</h3><p>Scapy是一个Python语言编写的工具，使用Scapy可以发送、嗅探、剖析和伪造网络数据报。Scapy涉及比较底层的网络协议，因此，不可避免地导致Scapy的接口复杂。虽然 Scapy的接口复杂，但整体思路却非常简单，就是发送数据报和接收数据报。在发送数据报时，Scapy提供了相关的辅助类来帮助我们构造数据报，在接收数据报时，Scapy也提供了相应的函数来帮助我们过滤和解析数据报。</p><p>在这一小节中，首先我们将介绍Scapy的功能和安装方式，然后介绍Scapy的基本使用，接着介绍如何使用Scapy发送数据报，并通过 —个DNS査询的例子演示Scapy发送数据报，最后介绍如何使用Scapy进行网络嗅探，并通过一个抓取敏感信息的例子来演示Scapy的网络嗅探。</p><h4 id="1、Scapy简介与安装"><a class="header-anchor" href="#1、Scapy简介与安装">¶</a>1、Scapy简介与安装</h4><p>Scapy是一个强大的交互式数据报处理程序，它能够伪造或者解码大量的网络协议数据报，能够发送、捕捉、匹配请求和回复数据报。Scapy可以轻松处理大多数经典任务，如端口扫描、路由跟踪、探测、攻击或网络发现等。使用Scapy可以替代hping, arpspoof，arp-sk, arping，p0f等功能，甚至可以替代nmap, tcpdump和tshark的部分功能。此外，Scapy 还有很多其他工具没有的优秀特性，如发送无效数据帧、注入修改的802.11数据帧、在 WEP上解码加密通道（VOIP)、ARP缓存攻击（VLAN)等。<br>Scapy是使用Python语言开发的丁.具，因此，我们可以直接使用pip安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install scapy</span><br></pre></td></tr></table></figure><p>Scapy运行时要对网络接口进行控制，所以需要root权限。在这一小节的例子中， 我们都使用root用户来运行Scapy程序或与Scapy相关的Python程序。<br>Scapy提供了非常丰富的功能，不同的功能依赖不同的软件。启动Scapy命令行工具时，Scapy会进行相应的检査并给出提示。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192</span> ~]<span class="comment"># scapy</span></span><br><span class="line">INFO: Can<span class="string">'t import matplotlib. Won'</span>t be able to plot.</span><br><span class="line">INFO: Can<span class="string">'t import PyX. Won'</span>t be able to use psdump() <span class="keyword">or</span> pdfdump().</span><br><span class="line">WARNING: No route found for IPv6 destination :: (no default route?)</span><br><span class="line">INFO: Can<span class="string">'t import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11)</span></span><br><span class="line"><span class="string">INFO: Can'</span>t <span class="keyword">import</span> python-cryptography v1<span class="number">.7</span>+. Disabled IPsec encryption/authentication.</span><br><span class="line">                                      </span><br><span class="line">                     aSPY//YASa       </span><br><span class="line">             apyyyyCY//////////YCa       |</span><br><span class="line">            sY//////YSpcs  scpCY//Pp     | Welcome to Scapy</span><br><span class="line"> ayp ayyyyyyySCP//Pp           syY//C    | Version <span class="number">2.4</span><span class="number">.3</span></span><br><span class="line"> AYAsAYYYYYYYY///Ps              cY//S   |</span><br><span class="line">         pCCCCY//p          cSSps y//Y   | https://github.com/secdev/scapy</span><br><span class="line">         SPPPP///a          pP///AC//Y   |</span><br><span class="line">              A//A            cyP////C   | Have fun!</span><br><span class="line">              p///Ac            sC///a   |</span><br><span class="line">              P////YCpc           A//A   | Craft packets before they craft</span><br><span class="line">       scccccp///pSP///p          p//Y   | you.</span><br><span class="line">      sY/////////y  caa           S//P   |                      -- Socrate</span><br><span class="line">       cayCyayP//Ya              pY/Ya   |</span><br><span class="line">        sY/PsY////YCc          aC//Yp </span><br><span class="line">         sc  sccaCY//PCypaapyCP//YSs  </span><br><span class="line">                  spCPY//////YPSps    </span><br><span class="line">                       ccaacs         </span><br><span class="line">                                       using IPython <span class="number">7.12</span><span class="number">.0</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>例如，使用Scapy生成图形化的示意图需要安装matplotlib库，但没有安装matplotlib并不影响Scapy的基本使用。</p><h4 id="2、Scapy的基本使用"><a class="header-anchor" href="#2、Scapy的基本使用">¶</a>2、Scapy的基本使用</h4><p>在本教程中，我们会介绍Scapy的一些基本用法，完整的使用方法可以参考Scapy的官方文档http://www.secdev.org/projects/scapy/doc/usage.html。</p><p>我们有两种方式运行Scapy，一种是直接启动Scapy进入一个交互式界面，另一种是在Python程序中调用Scapy提供的功能。与其他软件不同的是，Scapy的交互模式其实就是Python的交互模式。因此我们可以在Scapy的交互模式下导入Python的包，使用Python的语法，执行Python中的语句。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys                                                                                                              </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.version)                                                                                                      </span><br><span class="line"><span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">10</span>:<span class="number">59</span>:<span class="number">16</span>) </span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-39</span>)]</span><br></pre></td></tr></table></figure><p>既然知道了Scapy的交换模式是Python的交换模式这个事实，那我们就可以轻易地将Scapy交换模式中的代码放置在Python的源文件中，使用Python程序的方式进行软件开发。要在Python程序中使用Scapy的功能，只需要导入scapy.all模块即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys                                                                                                              </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.version)                                                                                                      </span><br><span class="line"><span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">10</span>:<span class="number">59</span>:<span class="number">16</span>) </span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-39</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function                                                                                   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *                                                                                                 </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ls())                                                                                                             </span><br><span class="line">AH         : AH</span><br><span class="line">AKMSuite   : AKM suite</span><br><span class="line">ARP        : ARP</span><br><span class="line">ASN1P_INTEGER : <span class="literal">None</span></span><br><span class="line">ASN1P_OID  : <span class="literal">None</span></span><br><span class="line">ASN1P_PRIVSEQ : <span class="literal">None</span></span><br><span class="line">ASN1_Packet : <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在Scapy的交互式工具中，我们可以通过ls()显示Scapy支持的所有协议、lsc()列出Scapy支持的所有命令、conf显示所有的配置信息、help(cmd)显示某一命令的使用帮助等。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls()                      </span><br><span class="line">AH         : AH</span><br><span class="line">AKMSuite   : AKM suite</span><br><span class="line">ARP        : ARP</span><br><span class="line">ASN1P_INTEGER : <span class="literal">None</span></span><br><span class="line">ASN1P_OID  : <span class="literal">None</span></span><br><span class="line">ASN1P_PRIVSEQ : <span class="literal">None</span></span><br><span class="line">ASN1_Packet : <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lsc()                         </span><br><span class="line">IPID_count          : Identify IP id values classes <span class="keyword">in</span> a list of packets</span><br><span class="line">arpcachepoison      : Poison target<span class="string">'s cache with (your MAC,victim'</span>s IP) couple</span><br><span class="line">arping              : Send ARP who-has requests to determine which hosts are up</span><br><span class="line">arpleak             : Exploit ARP leak flaws, like NetBSD-SA2017<span class="number">-002.</span></span><br><span class="line">bind_layers         : Bind <span class="number">2</span> layers on some specific fields<span class="string">' values.</span></span><br><span class="line"><span class="string">bridge_and_sniff    : Forward traffic between interfaces if1 and if2, sniff and return</span></span><br><span class="line"><span class="string">chexdump            : Build a per byte hexadecimal representation</span></span><br><span class="line"><span class="string">computeNIGroupAddr  : Compute the NI group Address. Can take a FQDN as input parameter</span></span><br><span class="line"><span class="string">corrupt_bits        : Flip a given percentage or number of bits from a string</span></span><br><span class="line"><span class="string">corrupt_bytes       : Corrupt a given percentage or number of bytes from a string</span></span><br><span class="line"><span class="string">defrag              : defrag(plist) -&gt; ([not fragmented], [defragmented],</span></span><br><span class="line"><span class="string">defragment          : defragment(plist) -&gt; plist defragmented as much as possible </span></span><br><span class="line"><span class="string">dhcp_request        : Send a DHCP discover request and return the answer</span></span><br><span class="line"><span class="string">dyndns_add          : Send a DNS add message to a nameserver for "name" to have a new "rdata"</span></span><br><span class="line"><span class="string">dyndns_del          : Send a DNS delete message to a nameserver for "name"</span></span><br><span class="line"><span class="string">etherleak           : Exploit Etherleak flaw</span></span><br><span class="line"><span class="string">explore             : Function used to discover the Scapy layers and protocols.</span></span><br><span class="line"><span class="string">fletcher16_checkbytes: Calculates the Fletcher-16 checkbytes returned as 2 byte binary-string.</span></span><br><span class="line"><span class="string">fletcher16_checksum : Calculates Fletcher-16 checksum of the given buffer.</span></span><br><span class="line"><span class="string">fragleak            : --</span></span><br><span class="line"><span class="string">fragleak2           : --</span></span><br><span class="line"><span class="string">fragment            : Fragment a big IP datagram</span></span><br><span class="line"><span class="string">fuzz                : </span></span><br><span class="line"><span class="string">getmacbyip          : Return MAC address corresponding to a given IP address</span></span><br><span class="line"><span class="string">getmacbyip6         : Returns the MAC address corresponding to an IPv6 address</span></span><br><span class="line"><span class="string">hexdiff             : Show differences between 2 binary strings</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; help(sniff)</span></span><br><span class="line"><span class="string">Help on function sniff in module scapy.sendrecv:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sniff(*args, **kwargs)</span></span><br><span class="line"><span class="string">    Sniff packets and return a list of packets.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        count: number of packets to capture. 0 means infinity.</span></span><br><span class="line"><span class="string">        store: whether to store sniffed packets or discard them</span></span><br><span class="line"><span class="string">        prn: function to apply to each packet. If something is returned, it</span></span><br><span class="line"><span class="string">             is displayed.</span></span><br><span class="line"><span class="string">             --Ex: prn = lambda x: x.summary()</span></span><br><span class="line"><span class="string">        session: a session = a flow decoder used to handle stream of packets.</span></span><br><span class="line"><span class="string">                 e.g: IPSession (to defragment on-the-flow) or NetflowSession</span></span><br><span class="line"><span class="string">        filter: BPF filter to apply. </span></span><br><span class="line"><span class="string">                                        </span></span><br><span class="line"><span class="string">【按q退出】</span></span><br></pre></td></tr></table></figure><p>如果你对网络编程特别感兴趣，你一定会喜欢上Scapy。我们不但可以使用Scapy嗅探和发送数据报，甚至还可以使用Scapy学习计算机网络相关知识。例如，我们可以使用ls查看协议的详细格式。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls(ARP)                          </span><br><span class="line">hwtype     : XShortField                         = (<span class="number">1</span>)</span><br><span class="line">ptype      : XShortEnumField                     = (<span class="number">2048</span>)</span><br><span class="line">hwlen      : FieldLenField                       = (<span class="literal">None</span>)</span><br><span class="line">plen       : FieldLenField                       = (<span class="literal">None</span>)</span><br><span class="line">op         : ShortEnumField                      = (<span class="number">1</span>)</span><br><span class="line">hwsrc      : MultipleTypeField                   = (<span class="literal">None</span>)</span><br><span class="line">psrc       : MultipleTypeField                   = (<span class="literal">None</span>)</span><br><span class="line">hwdst      : MultipleTypeField                   = (<span class="literal">None</span>)</span><br><span class="line">pdst       : MultipleTypeField                   = (<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h4 id="3、使用Scapy发送数据报"><a class="header-anchor" href="#3、使用Scapy发送数据报">¶</a>3、使用Scapy发送数据报</h4><p>Scapy的数据报遵循了网络协议中经典的TCP/IP四层模型，即链路层、网络层、运输层和应用层。Scapy为每个层协议都提供了辅助类，我们要做的就是把这些类实例化并修改对象的取值，以此来构造数据报。每一层都可以通过类调用创建相应的数据报，如IP()、TCP()、UDP()等，不同层之间通过“/”来连接。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1 = IP(dst=<span class="string">'10.166.244.14'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet2 = IP(dst=<span class="string">'10.166.244.14'</span>)/TCP(dport=<span class="number">80</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet3 = IP(dst=<span class="string">'10.166.244.14'</span>)/ICMP()</span><br></pre></td></tr></table></figure><p>display方法可以查看当前数据报的内容，即各个参数的取值情况。例如，下面就显示了我们构造的第一个数据报中各个字段的取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.display()                </span><br><span class="line"><span class="comment">###[ IP ]### </span></span><br><span class="line">  version= <span class="number">4</span></span><br><span class="line">  ihl= <span class="literal">None</span></span><br><span class="line">  tos= <span class="number">0x0</span></span><br><span class="line">  len= <span class="literal">None</span></span><br><span class="line">  id= <span class="number">1</span></span><br><span class="line">  flags= </span><br><span class="line">  frag= <span class="number">0</span></span><br><span class="line">  ttl= <span class="number">64</span></span><br><span class="line">  proto= hopopt</span><br><span class="line">  chksum= <span class="literal">None</span></span><br><span class="line">  src= <span class="number">192.168</span><span class="number">.79</span><span class="number">.129</span></span><br><span class="line">  dst= <span class="number">10.166</span><span class="number">.244</span><span class="number">.14</span></span><br><span class="line">  \options\</span><br></pre></td></tr></table></figure><p>字段都有默认值，如果我们建立一个类的实例，没有传给它任何参数，那么它的参数取值就是默认值。如果传递了相应的参数，就使用用户传递的参数。如果使用del删除了某个参数，就恢复了默认值。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.dst                      </span><br><span class="line"><span class="string">'10.166.244.14'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.ttl = <span class="number">32</span>                </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.ttl                      </span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> packet1.ttl                  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet1.ttl                      </span><br><span class="line"><span class="number">64</span></span><br></pre></td></tr></table></figure><p>如果我们没有提供相应的参数取值（user set fields)，参数将使用默认值（default fields）。之后，如果我们在这个类的上层进行操作 (比如IP的上面定义TCP)，那么，数据报的取值将由上层协议进行覆盖。</p><h4 id="4、使用Scapy构造DNS查询请求"><a class="header-anchor" href="#4、使用Scapy构造DNS查询请求">¶</a>4、使用Scapy构造DNS查询请求</h4><p>下面以DNS解析为例，介绍如何使用Scapy构造数据报并发送请求。假设我们使用的 DNS服务器地址为8.8,8.8,现在，我们需要获取百度（&lt;<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>&gt; )的IP地址。 为了获取百度的IP地址，我们需要创建一个DNS的请求包。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dns=DNS(rd=<span class="number">1</span>,qd=DNSQR(qname=<span class="string">'www.baidu.com'</span>))</span><br></pre></td></tr></table></figure><p>DNS是一个应用层协议，底层可以使用UDP或TCP协议。无论是TCP协议还是UDP 协议，都依赖IP协议进行网络报传输。因此，完整的DNS清求数据报如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet = sr1(IP(dst=<span class="string">'8.8.8.8'</span>)/UDP()/dns)</span><br><span class="line">Begin emission:</span><br><span class="line">...Finished sending <span class="number">1</span> packets.</span><br><span class="line">..*</span><br><span class="line">Received <span class="number">6</span> packets, got <span class="number">1</span> answers, remaining <span class="number">0</span> packets</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用sr1函数发送和接收数据报，sr1在三层发送数据报，并且接收第一个回复。收到回复后，我们可以使用show方法来查看数据报的详细内容。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet[DNS].show()</span><br><span class="line"><span class="comment">###[ DNS ]### </span></span><br><span class="line">  id= <span class="number">0</span></span><br><span class="line">  qr= <span class="number">1</span></span><br><span class="line">  opcode= QUERY</span><br><span class="line">  aa= <span class="number">0</span></span><br><span class="line">  tc= <span class="number">0</span></span><br><span class="line">  rd= <span class="number">1</span></span><br><span class="line">  ra= <span class="number">1</span></span><br><span class="line">  z= <span class="number">0</span></span><br><span class="line">  ad= <span class="number">0</span></span><br><span class="line">  cd= <span class="number">0</span></span><br><span class="line">  rcode= ok</span><br><span class="line">  qdcount= <span class="number">1</span></span><br><span class="line">  ancount= <span class="number">3</span></span><br><span class="line">  nscount= <span class="number">0</span></span><br><span class="line">  arcount= <span class="number">0</span></span><br><span class="line">  \qd\</span><br><span class="line">   |<span class="comment">###[ DNS Question Record ]### </span></span><br><span class="line">   |  qname= <span class="string">'www.baidu.com.'</span></span><br><span class="line">   |  qtype= A</span><br><span class="line">   |  qclass= IN</span><br><span class="line">  \an\</span><br><span class="line">   |<span class="comment">###[ DNS Resource Record ]### </span></span><br><span class="line">   |  rrname= <span class="string">'www.baidu.com.'</span></span><br><span class="line">   |  type= CNAME</span><br><span class="line">   |  rclass= IN</span><br><span class="line">   |  ttl= <span class="number">332</span></span><br><span class="line">   |  rdlen= <span class="literal">None</span></span><br><span class="line">   |  rdata= <span class="string">'www.a.shifen.com.'</span></span><br><span class="line">   |<span class="comment">###[ DNS Resource Record ]### </span></span><br><span class="line">   |  rrname= <span class="string">'www.a.shifen.com.'</span></span><br><span class="line">   |  type= CNAME</span><br><span class="line">   |  rclass= IN</span><br><span class="line">   |  ttl= <span class="number">93</span></span><br><span class="line">   |  rdlen= <span class="literal">None</span></span><br><span class="line">   |  rdata= <span class="string">'www.wshifen.com.'</span></span><br><span class="line">   |<span class="comment">###[ DNS Resource Record ]### </span></span><br><span class="line">   |  rrname= <span class="string">'www.wshifen.com.'</span></span><br><span class="line">   |  type= A</span><br><span class="line">   |  rclass= IN</span><br><span class="line">   |  ttl= <span class="number">58</span></span><br><span class="line">   |  rdlen= <span class="literal">None</span></span><br><span class="line">   |  rdata= <span class="number">103.235</span><span class="number">.46</span><span class="number">.39</span></span><br><span class="line">  ns= <span class="literal">None</span></span><br><span class="line">  ar= <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>DNS应答包里面包含了非常详细的信息。例如，在这个应答中我们可以看到，DNS支持递归查询（ra取值为1表示DNS服务器支持递归查询，ra取值为0表示不支持递归查询）。百度的域名解析给出了 3个结果（ancount取值为3）。在这个例子中，我们通过手动构造数据报的方式，正确发送了DNS请求，解析了百度的IP地址。<br>在构造数据报时，如果有应用的数据，数据部分可以直接使用字符。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=Ether()/IP(dst=<span class="string">'www.slashdot.org'</span>)/TCP()/<span class="string">"GET /index.html HTTP/1.0 \n\n"</span>         </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hexdump(a)</span><br><span class="line"><span class="number">0000</span>  <span class="number">00</span> <span class="number">50</span> <span class="number">56</span> FE <span class="number">43</span> <span class="number">5</span>E <span class="number">00</span> <span class="number">0</span>C <span class="number">29</span> <span class="number">58</span> <span class="number">4</span>A <span class="number">96</span> <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span>  .PV.C^..)XJ...E.</span><br><span class="line"><span class="number">0010</span>  <span class="number">00</span> <span class="number">43</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">06</span> <span class="number">6</span>C <span class="number">12</span> C0 A8 <span class="number">4</span>F <span class="number">81</span> D8 <span class="number">69</span>  .C....@.l...O..i</span><br><span class="line"><span class="number">0020</span>  <span class="number">26</span> <span class="number">0</span>F <span class="number">00</span> <span class="number">14</span> <span class="number">00</span> <span class="number">50</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">50</span> <span class="number">02</span>  &amp;....P........P.</span><br><span class="line"><span class="number">0030</span>  <span class="number">20</span> <span class="number">00</span> AF <span class="number">0</span>F <span class="number">00</span> <span class="number">00</span> <span class="number">47</span> <span class="number">45</span> <span class="number">54</span> <span class="number">20</span> <span class="number">2</span>F <span class="number">69</span> <span class="number">6</span>E <span class="number">64</span> <span class="number">65</span> <span class="number">78</span>   .....GET /index</span><br><span class="line"><span class="number">0040</span>  <span class="number">2</span>E <span class="number">68</span> <span class="number">74</span> <span class="number">6</span>D <span class="number">6</span>C <span class="number">20</span> <span class="number">48</span> <span class="number">54</span> <span class="number">54</span> <span class="number">50</span> <span class="number">2</span>F <span class="number">31</span> <span class="number">2</span>E <span class="number">30</span> <span class="number">20</span> <span class="number">0</span>A  .html HTTP/<span class="number">1.0</span> .</span><br><span class="line"><span class="number">0050</span>  <span class="number">0</span>A</span><br></pre></td></tr></table></figure><p>如果我们安装了PyX，还可以直接将数据报dump成一个PostScript或PDF文件。</p><h4 id="5、使用Scapy进行网络嗅探"><a class="header-anchor" href="#5、使用Scapy进行网络嗅探">¶</a>5、使用Scapy进行网络嗅探</h4><p>Scapy除了可以伪造数据报并接收响应结果以外，还可以用于数据报嗅探。对数据报进行嗅探的函数为sniff，sniff函数的详细使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sniff(filter=<span class="string">""</span>, iface=<span class="string">"any"</span>, prn=function, count=N)</span><br></pre></td></tr></table></figure><p>sniff函数的参数说明如下：</p><blockquote><ol><li>filter:用来表示想要捕获数据报类型的过滤器，如只捕获ICMP数据报，则filter取值为“ICMP”，只捕获80端口的TCP数据报，则filter取值为“TCP and （port 80)&quot;；</li><li>iface:设置嗅探器所要嗅探的网卡，默认对所有网卡进行嗅探；</li><li>pm:指定嗅探到符合过滤器条件的数据报时所调用的回调函数，这个回调函数只接受一个参数，即收到的数据报。</li><li>count:指定需要嗅探的数据报的个数。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_callback</span><span class="params">(packet)</span>:</span></span><br><span class="line">print(packet.show())</span><br><span class="line">sniff(prn=pack_calback, iface=<span class="string">"ens33"</span>, count=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>下面是一个非常简单的sniff使用示例。在这个例子中，我们仅仅捕获三个ICMP的数据报，并且直接打印数据报的信息。前面说过，Scapy的交互模式就是Python的交互模式，因此，我们可以直接使用Python的库、语法和语句。sniff要求prn是一个回调函数，因此，我们传递给prn参数的是一个Lambda函数。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = sniff(filter=<span class="string">"tcp"</span>, prn=<span class="keyword">lambda</span> x:x.summary(), count=<span class="number">3</span>) </span><br><span class="line">Ether / IP / TCP <span class="number">192.168</span><span class="number">.79</span><span class="number">.1</span>:<span class="number">65134</span> &gt; <span class="number">192.168</span><span class="number">.79</span><span class="number">.129</span>:ssh PA / Raw</span><br><span class="line">Ether / IP / TCP <span class="number">192.168</span><span class="number">.79</span><span class="number">.129</span>:ssh &gt; <span class="number">192.168</span><span class="number">.79</span><span class="number">.1</span>:<span class="number">65134</span> PA / Raw</span><br><span class="line">Ether / IP / TCP <span class="number">192.168</span><span class="number">.79</span><span class="number">.129</span>:ssh &gt; <span class="number">192.168</span><span class="number">.79</span><span class="number">.1</span>:<span class="number">65134</span> PA / Raw</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用Python监控Linux系统</title>
    <link href="https://pdxblog.top/%E4%BD%BF%E7%94%A8Python%E7%9B%91%E6%8E%A7Linux%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://pdxblog.top/%E4%BD%BF%E7%94%A8Python%E7%9B%91%E6%8E%A7Linux%E7%B3%BB%E7%BB%9F.html</id>
    <published>2020-05-11T16:00:00.000Z</published>
    <updated>2020-05-12T09:10:20.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Python监控Linux系统"><a class="header-anchor" href="#使用Python监控Linux系统">¶</a>使用Python监控Linux系统</h2><p>Linux下有许多使用Python语言编写的监控工具，如inotify-sync、dstat和glances。此外，如果要根据业务编写简单的监控脚本，很多工程师也会选择Python语言。Python语言是一门简单易学/语法清晰/表达能力强的编程语言，非常适合于编写监控程序的场景。使用Python语言编写监控程序具有以下几个优势：</p><p>1、Python语言开发效率高。Python语言有自己的优势与劣势，使用Python开发监控程序是一个充分发挥Python优势，避免Python劣势的领域。对于监控程序来说，能够利用Python语言开发效率高的优势尽快完成程序的编写工作。同时，监控程序也不要求性能，因此避免了Python语言性能不如C、C++和Java的劣势。</p><p>2、Python语言表达能力强。相信任何一个学习Linux的工程师都使用过shell脚本编写过监控程序。虽然Linux下有很多监控工具，也有很多文本处理程序，但是获取监控与解析结果是完全不同的工具。解析监控结果的程序不理解监控程序输出结果的具体含义。Python语言中有非常丰富的数据结构，可以用各种方式保存监控结果，以便后续处理。</p><p>3、利用第三方库开发监控程序。Python的标准库本身非常强大，被称为“连电池都包含在内”。对于一个问题，如果标准库没有提供相应的工具，那么也会有开源的项目来填补这个空白。监控程序正式这样一种情况，在Python语言中，具有非常成熟的第三方库帮助开发者简化监控程序的编写工作。</p><h3 id="一、Python编写的监控工具"><a class="header-anchor" href="#一、Python编写的监控工具">¶</a>一、Python编写的监控工具</h3><p>我们将介绍两个Python语言编写的监控工具，分别是dstat和glances。</p><h4 id="1、多功能系统资源统计工具dstat"><a class="header-anchor" href="#1、多功能系统资源统计工具dstat">¶</a>1、多功能系统资源统计工具dstat</h4><p>dstat是一个用Python语言实现的多功能系统资源统计工具，用来取代Linux下的vmstat、iostat、netstat、和ifstat等命令。并且，dstat克服了这些命令的限制，增加了额外的功能，以及更多的计数器与更好的灵活性。dstat可以在一个界面上展示非常全面的监控信息，因此，在系统监控、基准测试和故障排除等应用场景下特别有用。</p><p>我们可以使用dstat监控所有系统资源的使用情况，并且可以结合不同的场景定制监控的资源。例如，在同一时间段以相同的时间频率比较网络带宽与磁盘的吞吐率。</p><p>dstat将以列表的形式显示监控信息，并且使用不同的颜色进行输出，以可读性较强的单位展示监控数值。例如，对于字节数值，dstat自动根据数值的大小，以K、M、G等单位进行显示，避免了开发者使用其他命令时因为数值太大造成的困惑和错误。此外，使用dstat还可以非常方便地编写插件，用来收集默认情况下没有收到的监控信息。dstat是专门为人们实时查看监控信息设计的，因此默认将监控结果输出到屏幕终端。我们也可以将监控信息以CSV格式输出到文件，以便后续处理。</p><h5 id="（1）dstat介绍"><a class="header-anchor" href="#（1）dstat介绍">¶</a>（1）dstat介绍</h5><p>作为一个多功能系统资源统计工具，dstat具有以下特性：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">结合了vmstat，iostat，ifstat，netstat以及更多的信息</span><br><span class="line">实时显示统计情况</span><br><span class="line">在分析和排障时可以通过启用监控项并排序</span><br><span class="line">模块化设计</span><br><span class="line">使用python编写的，更方便扩展现有的工作任务</span><br><span class="line">容易扩展和添加你的计数器（请为此做出贡献）</span><br><span class="line">包含的许多扩展插件充分说明了增加新的监控项目是很方便的</span><br><span class="line">可以分组统计块设备/网络设备，并给出总数</span><br><span class="line">可以显示每台设备的当前状态</span><br><span class="line">极准确的时间精度，即便是系统负荷较高也不会延迟显示</span><br><span class="line">显示准确地单位和和限制转换误差范围</span><br><span class="line">用不同的颜色显示不同的单位</span><br><span class="line">显示中间结果延时小于1秒</span><br><span class="line">支持输出CSV格式报表，并能导入到Gnumeric和Excel以生成图形</span><br></pre></td></tr></table></figure><p>如果操作系统默认没有安装dstat，那么需要我们手动进行安装。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install dstat</span><br></pre></td></tr></table></figure><p>查看dstat命令的帮助信息与支持选项，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dstat --help</span><br></pre></td></tr></table></figure><p>dstat命令的–version选项，处理显示dstat的版本以外，还会显示操作系统的版本、Python语言的版本、CPU的个数，以及dstat支持的插件列表等详细信息。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat --version</span><br><span class="line">Dstat 0.7.2</span><br><span class="line">Written by Dag Wieers &lt;dag@wieers.com&gt;</span><br><span class="line">Homepage at http://dag.wieers.com/home-made/dstat/</span><br><span class="line"></span><br><span class="line">Platform posix/linux2</span><br><span class="line">Kernel 3.10.0-957.el7.x86_64</span><br><span class="line">Python 2.7.5 (default, Oct 30 2018, 23:45:53) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br><span class="line"></span><br><span class="line">Terminal type: xterm (color support)</span><br><span class="line">Terminal size: 16 lines, 83 columns</span><br><span class="line"></span><br><span class="line">Processors: 1</span><br><span class="line">Pagesize: 4096</span><br><span class="line">Clock ticks per secs: 100</span><br><span class="line"></span><br><span class="line">internal:</span><br><span class="line">aio, cpu, cpu24, disk, disk24, disk24old, epoch, fs, int, int24, io, ipc, </span><br><span class="line">load, lock, mem, net, page, page24, proc, raw, socket, swap, swapold, </span><br><span class="line">sys, tcp, time, udp, unix, vm</span><br><span class="line">/usr/share/dstat:</span><br><span class="line">battery, battery-remain, cpufreq, dbus, disk-tps, disk-util, dstat, </span><br><span class="line">dstat-cpu, dstat-ctxt, dstat-mem, fan, freespace, gpfs, gpfs-ops, </span><br><span class="line">helloworld, innodb-buffer, innodb-io, innodb-ops, lustre, memcache-hits, </span><br><span class="line">mysql-io, mysql-keys, mysql5-cmds, mysql5-conn, mysql5-io, mysql5-keys, </span><br><span class="line">net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, ntp, postfix, power, </span><br><span class="line">proc-count, qmail, rpc, rpcd, sendmail, snooze, squid, test, thermal, </span><br><span class="line">top-bio, top-bio-adv, top-childwait, top-cpu, top-cpu-adv, top-cputime, </span><br><span class="line">top-cputime-avg, top-int, top-io, top-io-adv, top-latency, </span><br><span class="line">top-latency-avg, top-mem, top-oom, utmp, vm-memctl, vmk-hba, vmk-int, </span><br><span class="line">vmk-nic, vz-cpu, vz-io, vz-ubc, wifi</span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><p>除了使用dstat命令的–version选项查看dstat的详细信息获取可支持的插件以外，还可以使用dstat命令的–list选项获取dstat的插件列表。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat --list</span><br><span class="line">internal:</span><br><span class="line">aio, cpu, cpu24, disk, disk24, disk24old, epoch, fs, int, int24, io, ipc, load, lock, mem, net, page, page24, </span><br><span class="line">proc, raw, socket, swap, swapold, sys, tcp, time, udp, unix, vm</span><br><span class="line">/usr/share/dstat:</span><br><span class="line">battery, battery-remain, cpufreq, dbus, disk-tps, disk-util, dstat, dstat-cpu, dstat-ctxt, dstat-mem, fan, </span><br><span class="line">freespace, gpfs, gpfs-ops, helloworld, innodb-buffer, innodb-io, innodb-ops, lustre, memcache-hits, mysql-io, </span><br><span class="line">mysql-keys, mysql5-cmds, mysql5-conn, mysql5-io, mysql5-keys, net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, ntp, </span><br><span class="line">postfix, power, proc-count, qmail, rpc, rpcd, sendmail, snooze, squid, test, thermal, top-bio, top-bio-adv, </span><br><span class="line">top-childwait, top-cpu, top-cpu-adv, top-cputime, top-cputime-avg, top-int, top-io, top-io-adv, top-latency, </span><br><span class="line">top-latency-avg, top-mem, top-oom, utmp, vm-memctl, vmk-hba, vmk-int, vmk-nic, vz-cpu, vz-io, vz-ubc, wifi</span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><p>直接在终端输入dstat命令，dstat将以默认参数运行。默认情况下，dstat会收集CPU、磁盘、网络、交换页和系统消息，并以1秒钟1次的频率进行输出，直到我们按Ctrl+C结束。</p><h5 id="（2）dstat常用选项"><a class="header-anchor" href="#（2）dstat常用选项">¶</a>（2）dstat常用选项</h5><p>如下所示，dstat会提示我们没有指定任何参数，因此使用-cdngy参数运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat</span><br><span class="line">You did not select any stats, using -cdngy by default.</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  9   3  88   0   0   0| 219k   60k|   0     0 |2682B 5427B| 163  1542 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  894B|   0     0 | 326  4218 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 | 126B  410B|   0     0 | 330  4431 </span><br><span class="line"> 18   7  75   0   0   0|   0     0 |  66B  416B|   0     0 | 341  2998 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  350B|   0     0 | 340  4098 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  350B|   0     0 | 319  4010 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  350B|   0     0 | 326  4378 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  350B|   0     0 | 322  4407 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  350B|   0     0 | 332  4520 </span><br><span class="line"> 21   6  73   0   0   0|1140k    0 |  66B  350B|   0     0 | 345  3341 </span><br><span class="line"> 20   7  72   0   0   1|   0     0 |  66B  358B|   0     0 | 348  3821</span><br></pre></td></tr></table></figure><p>常用选项如下：</p><blockquote><p>直接跟数字，表示#秒收集一次数据，默认为一秒；dstat 5表示5秒更新一次</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-c,--cpu  统计CPU状态，包括system, user, idle, wait, hardware interrupt, software interrupt等；</span><br><span class="line">-d, --disk 统计磁盘读写状态</span><br><span class="line">-D total,sda 统计指定磁盘或汇总信息</span><br><span class="line">-l, --load 统计系统负载情况，包括1分钟、5分钟、15分钟平均值</span><br><span class="line">-m, --mem 统计系统物理内存使用情况，包括used, buffers, cache, free</span><br><span class="line">-s, --swap 统计swap已使用和剩余量</span><br><span class="line">-n, --net 统计网络使用情况，包括接收和发送数据</span><br><span class="line">-N eth1,total  统计eth1接口汇总流量</span><br><span class="line">-r, --io 统计I/O请求，包括读写请求</span><br><span class="line">-p, --proc 统计进程信息，包括runnable、uninterruptible、new</span><br><span class="line">-y, --sys 统计系统信息，包括中断、上下文切换</span><br><span class="line">-t 显示统计时时间，对分析历史数据非常有用</span><br><span class="line">--fs 统计文件打开数和inodes数</span><br></pre></td></tr></table></figure><p>除了前面介绍的与监控相关的参数以外，dstat还可以像vmstat和iostat一样使用参数控制报告的时间间隔，或者同事指定时间间隔与报告次数。</p><p>例如，下面的命令表示以默认的选项运行dstat，每2秒钟输出一条监控信息，并在输出10条监控信息以后退出dstat。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat 2 10</span><br><span class="line">You did not select any stats, using -cdngy by default.</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  9   3  88   0   0   0| 218k   60k|   0     0 |2674B 5409B| 164  1550 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  594B|   0     0 | 326  3956 </span><br><span class="line"> 21   6  73   0   0   0|   0   147k|  66B  346B|   0     0 | 360  4114 </span><br><span class="line"> 20   5  76   0   0   0|   0     0 |  66B  346B|   0     0 | 320  4494 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  96B  372B|   0     0 | 349  4144 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  342B|   0     0 | 331  4360 </span><br><span class="line"> 21   6  74   0   0   0|   0     0 |  66B  342B|   0     0 | 344  3607 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  342B|   0     0 | 334  4475 </span><br><span class="line"> 21   6  74   0   0   0|   0     0 |  66B  342B|   0     0 | 338  4580 </span><br><span class="line"> 20   7  73   0   0   1|   0     0 |  66B  342B|   0     0 | 340  4341 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  342B|   0     0 | 344  3899 </span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><h5 id="（3）dstat高级用法"><a class="header-anchor" href="#（3）dstat高级用法">¶</a>（3）dstat高级用法</h5><p>dstat的强大之处不仅仅是因为它聚合了多种工具的监控结果，还因为它能通过附带的插件实现一些更高级功能。如：找出磁盘中占用资源最高的进程和用户。</p><p>dstat -cdlmnpsyt 5 可以得到较全面的系统性能数据。</p><p>dstat的–top-(io|bio|cpu|cputime|cputime-avg|mem) 通过这几个选项，可以看到具体是哪个用户哪个进程占用了相关系统资源，对系统调优非常有效。如查看当前占用I/O、cpu、内存等最高的进程信息可以使用dstat --top-mem --top-io --top-cpu选项。以下示例演示了如何找出占用资源最多的进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat --top-mem --top-io --top-cpu</span><br><span class="line">--most-expensive- ----most-expensive---- -most-expensive-</span><br><span class="line">  memory process |     i/o process      |  cpu process   </span><br><span class="line">gnome-shell  115M|polkitd     203k   10k|polkitd      3.8</span><br><span class="line">gnome-shell  115M|polkitd     459k   23k|polkitd       10</span><br><span class="line">gnome-shell  115M|polkitd     625k   31k|polkitd      9.0</span><br><span class="line">gnome-shell  115M|polkitd     592k   29k|dbus-daemon  8.0</span><br><span class="line">gnome-shell  115M|polkitd     606k   30k|polkitd      9.0</span><br><span class="line">gnome-shell  115M|polkitd     525k   26k|polkitd       10</span><br><span class="line">gnome-shell  115M|polkitd     525k   26k|dbus-daemon  8.0</span><br></pre></td></tr></table></figure><p>dstat的插件保存在/usr/share/dstat目录下，我们可以参考它们的实现，编写自己的插件。</p><h5 id="（4）将结果输出到CSV文件"><a class="header-anchor" href="#（4）将结果输出到CSV文件">¶</a>（4）将结果输出到CSV文件</h5><p>dstat还可以将监控信息保存到CSV文件中，以便后续进行处理。通过–output选项指定监控数据输出的文件。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# dstat -a --output dstat_output.csv</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  9   3  88   0   0   0| 217k   60k|   0     0 |2656B 5370B| 165  1568 </span><br><span class="line"> 19   8  50  22   0   0|  11M   50k|  66B  838B| 128k    0 | 428  3116 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  374B|   0     0 | 325  4514 </span><br><span class="line"> 25   7  25  43   0   0|5284k    0 |  66B  350B| 476k    0 | 448  4227 </span><br><span class="line"> 18   7  74   0   0   1|  32k  144k|  66B  366B|  52k    0 | 334  4524 </span><br><span class="line"> 31  11   6  52   0   0|1944k 4096B|  66B  374B| 868k    0 | 613  3846 </span><br><span class="line"> 19   6  69   6   0   0| 116k 4096B|  66B  374B| 116k    0 | 337  4367 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  374B|   0     0 | 331  4573 </span><br><span class="line"> 20   7  73   0   0   0|   0     0 |  66B  350B|   0     0 | 339  3787 </span><br><span class="line"> 18   6  76   0   0   0|   0     0 |  66B  350B|   0     0 | 317  4472 </span><br><span class="line"> 20   6  74   0   0   0|   0     0 |  66B  350B|   0     0 | 338  3675 </span><br><span class="line"> 20   5  75   0   0   0|   0     0 |  66B  350B|   0     0 | 324  4633 </span><br><span class="line"> 21   5  74   0   0   0|   0     0 |  66B  350B|   0     0 | 318  4597 </span><br><span class="line"> 19   6  75   0   0   0|   0     0 |  66B  350B|   0     0 | 333  4847 </span><br><span class="line"> 18   6  76   0   0   0|   0     0 |  66B  350B|   0     0 | 308  4742 ^C</span><br><span class="line">[root@192 ~]# cat dstat_output.csv </span><br><span class="line">"Dstat 0.7.2 CSV output"</span><br><span class="line">"Author:","Dag Wieers &lt;dag@wieers.com&gt;",,,,"URL:","http://dag.wieers.com/home-made/dstat/"</span><br><span class="line">"Host:","192.168.32.138",,,,"User:","root"</span><br><span class="line">"Cmdline:","dstat -a --output dstat_output.csv",,,,"Date:","22 Feb 2020 00:22:08 CST"</span><br><span class="line"></span><br><span class="line">"total cpu usage",,,,,,"dsk/total",,"net/total",,"paging",,"system",</span><br><span class="line">"usr","sys","idl","wai","hiq","siq","read","writ","recv","send","in","out","int","csw"</span><br><span class="line">8.683,2.816,88.156,0.313,0.0,0.032,222019.623,61103.678,0.0,0.0,2655.691,5370.227,164.807,1568.447</span><br><span class="line">19.388,8.163,50.0,22.449,0.0,0.0,11702272.0,51200.0,66.0,838.0,131072.0,0.0,428.0,3116.0</span><br><span class="line">19.192,6.061,74.747,0.0,0.0,0.0,0.0,0.0,66.0,374.0,0.0,0.0,325.0,4514.0</span><br><span class="line">24.510,6.863,25.490,43.137,0.0,0.0,5410816.0,0.0,66.0,350.0,487424.0,0.0,448.0,4227.0</span><br><span class="line">18.182,7.071,73.737,0.0,0.0,1.010,32768.0,147456.0,66.0,366.0,53248.0,0.0,334.0,4524.0</span><br><span class="line">30.928,11.340,6.186,51.546,0.0,0.0,1990656.0,4096.0,66.0,374.0,888832.0,0.0,613.0,3846.0</span><br><span class="line">19.192,6.061,68.687,6.061,0.0,0.0,118784.0,4096.0,66.0,374.0,118784.0,0.0,337.0,4367.0</span><br><span class="line">19.802,5.941,74.257,0.0,0.0,0.0,0.0,0.0,66.0,374.0,0.0,0.0,331.0,4573.0</span><br><span class="line">20.0,7.0,73.0,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,339.0,3787.0</span><br><span class="line">18.367,6.122,75.510,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,317.0,4472.0</span><br><span class="line">20.0,6.0,74.0,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,338.0,3675.0</span><br><span class="line">20.202,5.051,74.747,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,324.0,4633.0</span><br><span class="line">21.0,5.0,74.0,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,318.0,4597.0</span><br><span class="line">19.192,6.061,74.747,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,333.0,4847.0</span><br><span class="line">18.182,6.061,75.758,0.0,0.0,0.0,0.0,0.0,66.0,350.0,0.0,0.0,308.0,4742.0</span><br><span class="line">[root@192 ~]#</span><br></pre></td></tr></table></figure><h4 id="2、交互式监控工具glances"><a class="header-anchor" href="#2、交互式监控工具glances">¶</a>2、交互式监控工具glances</h4><p>在紧急情况下，工程师需要在尽可能短的时间内查看尽可能多的信息。此时，glances是一个不错的选择。glances的设计初衷就是在当前窗口中尽可能多地显示系统消息。</p><p>glances是一款使用Python语言开发、基于psutil的跨平台系统监控工具，在所有Linux命令行工具中，它与top命令最相似，都是命令行交互监控工具。但是，glances实现了比top命令更齐全的接口，提供了更加丰富的功能。</p><h5 id="（1）glances提供的系统信息"><a class="header-anchor" href="#（1）glances提供的系统信息">¶</a>（1）glances提供的系统信息</h5><p>glances提供的系统信息如下所示：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CPU 使用率</span><br><span class="line">内存使用情况</span><br><span class="line">内核统计信息和运行队列信息</span><br><span class="line">磁盘 I/O 速度、传输和读/写比率</span><br><span class="line">文件系统中的可用空间</span><br><span class="line">磁盘适配器</span><br><span class="line">网络 I/O 速度、传输和读/写比率</span><br><span class="line">页面空间和页面速度</span><br><span class="line">消耗资源最多的进程</span><br><span class="line">计算机信息和系统资源</span><br></pre></td></tr></table></figure><p>glances 工具可以在用户的终端上实时显示重要的系统信息，并动态地对其进行更新。这个高效的工具可以工作于任何终端屏幕。另外它并不会消耗大量的 CPU 资源，通常低于百分之二。glances 在屏幕上对数据进行显示，并且每隔2秒钟对其进行更新。您也可以自己将这个时间间隔更改为更长或更短的数值。</p><p>glances 工具还可以将相同的数据捕获到一个文件，便于以后对报告进行分析和绘制图形。输出文件可以是电子表格的格式 (.csv) 或者 html 格式。</p><h5 id="（2）Linux下glances的安装"><a class="header-anchor" href="#（2）Linux下glances的安装">¶</a>（2）Linux下glances的安装</h5><p>在Linux系统中，可以使用yum命令或者pip命令安装glances。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install glances</span><br></pre></td></tr></table></figure><p>glances的使用非常简单，直接输入glances命令便进入了一个类似top命令的交互式界面。在这个界面中，显示了比top更加全面，更加具有可读性的信息。如下所示：</p><p>glances 工作界面的说明 :<br>在图 1 的上部是 CPU 、Load（负载）、Mem（内存使用）、 Swap（交换分区）的使用情况。在图 1 的中上部是网络接口、Processes（进程）的使用情况。通常包括如下字段：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">VIRT: 虚拟内存大小</span><br><span class="line">RES: 进程占用的物理内存值</span><br><span class="line"><span class="comment">%CPU：该进程占用的 CPU 使用率</span></span><br><span class="line"><span class="comment">%MEM：该进程占用的物理内存和总内存的百分比</span></span><br><span class="line">PID: 进程 ID 号</span><br><span class="line">USER: 进程所有者的用户名</span><br><span class="line">TIME+: 该进程启动后占用的总的 CPU 时间</span><br><span class="line">IO_R 和 IO_W: 进程的读写 I/O 速率</span><br><span class="line">NAME: 进程名称</span><br><span class="line">NI: 进程优先级</span><br><span class="line">S: 进程状态，其中 S 表示休眠，R 表示正在运行，Z 表示僵死状态。</span><br></pre></td></tr></table></figure><h5 id="（3）glances的可读性"><a class="header-anchor" href="#（3）glances的可读性">¶</a>（3）glances的可读性</h5><p>对比可以发现，glances对屏幕的利用率比top明显高很多，信息量很大，有许多top所没有显示的数据。而且，glances的实时变动比top颜值高太多了。</p><p>Glances 会用一下几种颜色来代表状态，如下所示：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">绿色：OK（一切正常）</span><br><span class="line">蓝色：CAREFUL（需要注意）</span><br><span class="line">紫色：WARNING（警告）</span><br><span class="line">红色：CRITICAL（严重）</span><br></pre></td></tr></table></figure><h5 id="（4）glances常见命令"><a class="header-anchor" href="#（4）glances常见命令">¶</a>（4）glances常见命令</h5><p>glances是一个交互式的工具，因此我们也可以输入命令来控制glances的行为。glances常见的命令有：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">h：显示帮助信息</span><br><span class="line">q：离开程序退出</span><br><span class="line">c：按照 CPU 实时负载对系统进程进行排序</span><br><span class="line">m：按照内存使用状况对系统进程排序</span><br><span class="line">i：按照 I/O 使用状况对系统进程排序</span><br><span class="line">p：按照进程名称排序</span><br><span class="line">d：显示磁盘读写状况</span><br><span class="line">w：删除日志文件</span><br><span class="line">l：显示日志</span><br><span class="line">s：显示传感器信息</span><br><span class="line">f：显示系统信息</span><br><span class="line">1：轮流显示每个 CPU 内核的使用情况（次选项仅仅使用在多核 CPU 系统）</span><br></pre></td></tr></table></figure><p>glances还支持将采集的数据导入到其他服务中心，包括InfluxDB、Cassandra、CouchDB、OpenTSDB、Prometheus、StatsD、ElasticSearch、RabbitMQ/ActiveMQ、ZeroMQ、Kafaka和Riemann。</p><h3 id="二、Python监控Linux"><a class="header-anchor" href="#二、Python监控Linux">¶</a>二、Python监控Linux</h3><p>shell查看磁盘的监控信息，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon proc]# cat /proc/diskstats </span><br><span class="line">   8       0 sda 85935 21845 10913707 101067 3119 81257 743486 15647 0 31410 109079</span><br><span class="line">   8       1 sda1 1822 0 12456 397 4 0 4096 74 0 457 462</span><br><span class="line">   8       2 sda2 84082 21845 10897907 100659 3115 81257 739390 15573 0 30950 108604</span><br><span class="line">  11       0 sr0 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 253       0 dm-0 80726 0 10688467 99971 2275 0 82606 10224 0 27927 110196</span><br><span class="line"> 253       1 dm-1 25123 0 205184 7367 82098 0 656784 616558 0 5167 623924</span><br></pre></td></tr></table></figure><p>编写一个Python脚本，监控磁盘信息，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">disk  = namedtuple(<span class="string">'Disk'</span>,<span class="string">'major_number minor_number device_name'</span></span><br><span class="line">                <span class="string">' read_count read_merged_count read_sections'</span></span><br><span class="line">                <span class="string">' time_spent_reading write_count write_merged_count'</span></span><br><span class="line">                <span class="string">' write_sections time_spent_write io_requests'</span></span><br><span class="line">                <span class="string">' time_spent_doing_io weighted_time_spent_dong_io'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_disk_info</span><span class="params">(device)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'/proc/diskstats'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                        <span class="keyword">if</span> line.split()[<span class="number">2</span>] == device:</span><br><span class="line">                                <span class="keyword">return</span> disk(*(line.split()))</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'设备(&#123;0&#125;)没找到。。。'</span>.format(device))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">        disk_info = get_disk_info(<span class="string">'sda1'</span>)</span><br><span class="line"></span><br><span class="line">        print(disk_info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">        main()</span><br></pre></td></tr></table></figure><h3 id="三、使用开源库监控Linux"><a class="header-anchor" href="#三、使用开源库监控Linux">¶</a>三、使用开源库监控Linux</h3><p>在这一小节，我们将介绍一个在Python生态中广泛使用的开源项目，即psutil。随后，我们将使用psutil重构前一小节编写的监控程序。另外，还会简单介绍psutil提供的进程管理功能。</p><h4 id="1、psutil介绍"><a class="header-anchor" href="#1、psutil介绍">¶</a>1、psutil介绍</h4><blockquote><p>psutil = process and system utilities</p></blockquote><p>psutil是一个开源且跨平台的库，其提供了便利的函数用来获取操作系统的信息，比如CPU，内存，磁盘，网络等。此外，psutil还可以用来进行进程管理，包括判断进程是否存在、获取进程列表、获取进程详细信息等。而且psutil还提供了许多命令行工具提供的功能，包括：ps，top，lsof，netstat，ifconfig， who，df，kill，free，nice，ionice，iostat，iotop，uptime，pidof，tty，taskset，pmap。</p><p>psutil是一个跨平台的库，支持Linux、Windows、OSX、FreeBSD、OpenBSD、NetBSD、Sun Solaris、AIX等操作系统。同时，psutil也支持32位与64位的系统架构，支持Python2.6到Python3.x之间的所有Python版本。</p><p>psutil具有简单易用、功能强大、跨平台等诸多优点，广泛应用于开源项目中，比较有名的有glances、Facebook的osquery、Google的grr等。psutil不但广泛应用于Python语言开发的开源项目中，还被移植到了其他编程语言中，如Go语言的gopsutil、C语言的cpslib、Rust语言的rust-psutil、Ruby语言的posixpsutil等。</p><p>psutil是一个第三方的开源项目，因此，需要先安装才能够使用。如果安装了Anaconda，psutil就已经可用了。否则，需要在命令行下通过pip安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pip install psutil</span><br><span class="line">Collecting psutil</span><br><span class="line">  Downloading psutil-5.7.0.tar.gz (449 kB)</span><br><span class="line">     |████████████████████████████████| 449 kB 4.6 kB/s </span><br><span class="line">Installing collected packages: psutil</span><br><span class="line">    Running setup.py install for psutil ... done</span><br><span class="line">Successfully installed psutil-5.7.0</span><br></pre></td></tr></table></figure><p>psutil包含了异常、类、功能函数和常量，其中功能函数用来获取系统的信息，如CPU、磁盘、内存、网络等。类用来实现进程的管理功能。</p><h4 id="2、psutil提供的功能函数"><a class="header-anchor" href="#2、psutil提供的功能函数">¶</a>2、psutil提供的功能函数</h4><p>根据函数的功能，主要分为CPU、磁盘、内存、网络几类，下面将会总几个方面来介绍psutil提供的功能函数。在这一小节，我们也将学习如何使用psutil来简化使用shell脚本获取监控信息的程序，并获取CPU、内存、磁盘和网络等不同维度。</p><h5 id="（1）CPU"><a class="header-anchor" href="#（1）CPU">¶</a>（1）CPU</h5><p>与CPU相关的功能函数如下：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>psutil.cpu_count()</td><td>cpu_count(,[logical]):默认返回逻辑CPU的个数,当设置logical的参数为False时，返回物理CPU的个数。</td></tr><tr><td>psutil.cpu_percent()</td><td>cpu_percent(,[percpu],[interval])：返回CPU的利用率,percpu为True时显示所有物理核心的利用率,interval不为0时,则阻塞时显示interval执行的时间内的平均利用率</td></tr><tr><td>psutil.cpu_times()</td><td>cpu_times(,[percpu])：以命名元组(namedtuple)的形式返回cpu的时间花费,percpu=True表示获取每个CPU的时间花费</td></tr><tr><td>psutil.cpu_times_percent()</td><td>cpu_times_percent(,[percpu])：功能和cpu_times大致相同，看字面意思就能知道，该函数返回的是耗时比例。</td></tr><tr><td>psutil.cpu_stats()</td><td>cpu_stats()以命名元组的形式返回CPU的统计信息，包括上下文切换，中断，软中断和系统调用次数。</td></tr><tr><td>psutil.cpu_freq()</td><td>cpu_freq([percpu])：返回cpu频率</td></tr></tbody></table><h6 id="1）cpu-count"><a class="header-anchor" href="#1）cpu-count">¶</a>1）cpu_count</h6><blockquote><p>默认返回逻辑CPU的个数,当设置logical的参数为False时，返回物理CPU的个数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import psutil                                                              </span><br><span class="line"></span><br><span class="line">In [2]: psutil.cpu_count()                                                         </span><br><span class="line">Out[2]: 2</span><br><span class="line"></span><br><span class="line">In [3]: psutil.cpu_count(logical&#x3D;False)                                            </span><br><span class="line">Out[3]: 1</span><br></pre></td></tr></table></figure><h6 id="2）cpu-percent"><a class="header-anchor" href="#2）cpu-percent">¶</a>2）cpu_percent</h6><blockquote><p>返回CPU的利用率，percpu为True时显示所有物理核心的利用率，interval不为0时，则阻塞时显示interval执行的时间内的平均利用率。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: psutil.cpu_percent()                                                       </span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: psutil.cpu_percent(percpu=<span class="literal">True</span>)                                            </span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">1.3</span>, <span class="number">1.5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: psutil.cpu_percent(percpu=<span class="literal">True</span>,interval=<span class="number">2</span>)                                 </span><br><span class="line">Out[<span class="number">6</span>]: [<span class="number">1.0</span>, <span class="number">0.0</span>]</span><br></pre></td></tr></table></figure><h6 id="3）cpu-times"><a class="header-anchor" href="#3）cpu-times">¶</a>3）cpu_times</h6><p>以命名元组(namedtuple)的形式返回cpu的时间花费，percpu=True表示获取每个CPU的时间花费。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: psutil.cpu_times()                                                         </span><br><span class="line">Out[<span class="number">7</span>]: scputimes(user=<span class="number">41.51</span>, nice=<span class="number">2.05</span>, system=<span class="number">35.36</span>, idle=<span class="number">2096.05</span>, iowait=<span class="number">5.45</span>, irq=<span class="number">0.0</span>, softirq=<span class="number">1.31</span>, steal=<span class="number">0.0</span>, guest=<span class="number">0.0</span>, guest_nice=<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: psutil.cpu_times_percent()                                                 </span><br><span class="line">Out[<span class="number">8</span>]: scputimes(user=<span class="number">0.3</span>, nice=<span class="number">0.0</span>, system=<span class="number">0.1</span>, idle=<span class="number">99.5</span>, iowait=<span class="number">0.0</span>, irq=<span class="number">0.0</span>, softirq=<span class="number">0.0</span>, steal=<span class="number">0.0</span>, guest=<span class="number">0.0</span>, guest_nice=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure><h6 id="4）cpu-stats"><a class="header-anchor" href="#4）cpu-stats">¶</a>4）cpu_stats</h6><p>以命名元组的形式返回CPU的统计信息，包括上下文切换，中断，软中断和系统调用次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: psutil.cpu_stats()                                                        </span><br><span class="line">Out[<span class="number">10</span>]: scpustats(ctx_switches=<span class="number">538642</span>, interrupts=<span class="number">238329</span>, soft_interrupts=<span class="number">273448</span>, syscalls=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h6 id="5）cpu-freq"><a class="header-anchor" href="#5）cpu-freq">¶</a>5）cpu_freq</h6><p>返回cpu频率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: psutil.cpu_freq()                                                         </span><br><span class="line">Out[<span class="number">11</span>]: scpufreq(current=<span class="number">2394.464</span>, min=<span class="number">0.0</span>, max=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure><h5 id="（2）内存"><a class="header-anchor" href="#（2）内存">¶</a>（2）内存</h5><p>与内存相关的功能函数如下：</p><h6 id="1）virtual-memory"><a class="header-anchor" href="#1）virtual-memory">¶</a>1）virtual_memory</h6><p>以命名元组的形式返回内存使用情况，包括总内存、可用内存、内存利用率、buffer和cache等。除了内存利用率，其它字段都以字节为单位返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: psutil.virtual_memory()                                                    </span><br><span class="line">Out[<span class="number">2</span>]: svmem(total=<span class="number">1019797504</span>, available=<span class="number">95744000</span>, percent=<span class="number">90.6</span>, used=<span class="number">758079488</span>, free=<span class="number">67502080</span>, active=<span class="number">295485440</span>, inactive=<span class="number">417394688</span>, buffers=<span class="number">0</span>, cached=<span class="number">194215936</span>, shared=<span class="number">19103744</span>, slab=<span class="number">92905472</span>)</span><br></pre></td></tr></table></figure><blockquote><p>单位转换</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- conding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes2human</span><span class="params">(n)</span>:</span></span><br><span class="line">     symbols = (<span class="string">'K'</span>,<span class="string">'M'</span>,<span class="string">'G'</span>,<span class="string">'T'</span>,<span class="string">'P'</span>,<span class="string">'E'</span>,<span class="string">'Z'</span>,<span class="string">'Y'</span>)</span><br><span class="line">     prefix = &#123;&#125;</span><br><span class="line">     <span class="keyword">for</span> i,s <span class="keyword">in</span> enumerate(symbols):</span><br><span class="line">         prefix[s] = <span class="number">1</span> &lt;&lt; (i + <span class="number">1</span>) * <span class="number">10</span></span><br><span class="line">     <span class="keyword">for</span> s <span class="keyword">in</span> reversed(symbols):</span><br><span class="line">         <span class="keyword">if</span> n &gt;= prefix[s]:</span><br><span class="line">             value = float(n) / prefix[s]</span><br><span class="line">             <span class="keyword">return</span> <span class="string">'%.1f%s'</span> % (value,s)</span><br><span class="line">     <span class="keyword">return</span> <span class="string">'%sB'</span> % n</span><br><span class="line"></span><br><span class="line">print(bytes2human(psutil.virtual_memory().total))</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# python mem.py </span><br><span class="line">972.6M</span><br></pre></td></tr></table></figure><h6 id="2）swap-memory"><a class="header-anchor" href="#2）swap-memory">¶</a>2）swap_memory</h6><p>以命名元组的形式返回swap/memory使用情况，包含swap中页的换入和换出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: psutil.swap_memory()                                                       </span><br><span class="line">Out[<span class="number">3</span>]: sswap(total=<span class="number">2147479552</span>, used=<span class="number">141819904</span>, free=<span class="number">2005659648</span>, percent=<span class="number">6.6</span>, sin=<span class="number">24666112</span>, sout=<span class="number">147292160</span>)</span><br></pre></td></tr></table></figure><h5 id="（3）磁盘"><a class="header-anchor" href="#（3）磁盘">¶</a>（3）磁盘</h5><p>与磁盘相关的功能如下：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>psutil.disk_io_counters()</td><td>disk_io_counters([perdisk])：以命名元组的形式返回磁盘io统计信息(汇总的)，包括读、写的次数，读、写的字节数等。 当perdisk的值为True，则分别列出单个磁盘的统计信息(字典：key为磁盘名称，value为统计的namedtuple)。</td></tr><tr><td>psutil.disk_partitions()</td><td>disk_partitions([all=False])：以命名元组的形式返回所有已挂载的磁盘，包含磁盘名称，挂载点，文件系统类型等信息。 当all等于True时，返回包含/proc等特殊文件系统的挂载信息</td></tr><tr><td>psutil.disk_usage()</td><td>disk_usage(path)：以命名元组的形式返回path所在磁盘的使用情况，包括磁盘的容量、已经使用的磁盘容量、磁盘的空间利用率等。</td></tr></tbody></table><h6 id="1）psutil-disk-io-counters"><a class="header-anchor" href="#1）psutil-disk-io-counters">¶</a>1）psutil.disk_io_counters</h6><p>以命名元组的形式返回磁盘io统计信息(汇总的)，包括读、写的次数，读、写的字节数等。 当perdisk的值为True，则分别列出单个磁盘的统计信息(字典：key为磁盘名称，value为统计的namedtuple)。有了disk_io_counters函数，省去了解析/proc/diskstats文件的烦恼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: psutil.disk_io_counters()                                                  </span><br><span class="line">Out[<span class="number">2</span>]: sdiskio(read_count=<span class="number">86913</span>, write_count=<span class="number">46560</span>, read_bytes=<span class="number">5038501376</span>, write_bytes=<span class="number">408987648</span>, read_time=<span class="number">77974</span>, write_time=<span class="number">79557</span>, read_merged_count=<span class="number">5933</span>, write_merged_count=<span class="number">35916</span>, busy_time=<span class="number">42153</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: psutil.disk_io_counters(perdisk=<span class="literal">True</span>)                                      </span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">&#123;<span class="string">'sda'</span>: sdiskio(read_count=<span class="number">41472</span>, write_count=<span class="number">5340</span>, read_bytes=<span class="number">2524417024</span>, write_bytes=<span class="number">205662720</span>, read_time=<span class="number">38302</span>, write_time=<span class="number">4484</span>, read_merged_count=<span class="number">5933</span>, write_merged_count=<span class="number">35916</span>, busy_time=<span class="number">21074</span>),</span><br><span class="line"> <span class="string">'sda1'</span>: sdiskio(read_count=<span class="number">1854</span>, write_count=<span class="number">4</span>, read_bytes=<span class="number">6441472</span>, write_bytes=<span class="number">2097152</span>, read_time=<span class="number">370</span>, write_time=<span class="number">35</span>, read_merged_count=<span class="number">0</span>, write_merged_count=<span class="number">0</span>, busy_time=<span class="number">396</span>),</span><br><span class="line"> <span class="string">'sda2'</span>: sdiskio(read_count=<span class="number">39587</span>, write_count=<span class="number">5337</span>, read_bytes=<span class="number">2516263424</span>, write_bytes=<span class="number">203570688</span>, read_time=<span class="number">37925</span>, write_time=<span class="number">4449</span>, read_merged_count=<span class="number">5933</span>, write_merged_count=<span class="number">35916</span>, busy_time=<span class="number">20675</span>),</span><br><span class="line"> <span class="string">'sr0'</span>: sdiskio(read_count=<span class="number">0</span>, write_count=<span class="number">0</span>, read_bytes=<span class="number">0</span>, write_bytes=<span class="number">0</span>, read_time=<span class="number">0</span>, write_time=<span class="number">0</span>, read_merged_count=<span class="number">0</span>, write_merged_count=<span class="number">0</span>, busy_time=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'dm-0'</span>: sdiskio(read_count=<span class="number">38566</span>, write_count=<span class="number">5197</span>, read_bytes=<span class="number">2483773952</span>, write_bytes=<span class="number">55885312</span>, read_time=<span class="number">37685</span>, write_time=<span class="number">3546</span>, read_merged_count=<span class="number">0</span>, write_merged_count=<span class="number">0</span>, busy_time=<span class="number">19410</span>),</span><br><span class="line"> <span class="string">'dm-1'</span>: sdiskio(read_count=<span class="number">6875</span>, write_count=<span class="number">36059</span>, read_bytes=<span class="number">30310400</span>, write_bytes=<span class="number">147697664</span>, read_time=<span class="number">1987</span>, write_time=<span class="number">71537</span>, read_merged_count=<span class="number">0</span>, write_merged_count=<span class="number">0</span>, busy_time=<span class="number">1673</span>)&#125;</span><br></pre></td></tr></table></figure><h6 id="2）psutil-disk-partitions"><a class="header-anchor" href="#2）psutil-disk-partitions">¶</a>2）psutil.disk_partitions</h6><p>以命名元组的形式返回所有已挂载的磁盘，包含磁盘名称，挂载点，文件系统类型等信息。当all等于True时，返回包含/proc等特殊文件系统的挂载信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: psutil.disk_partitions()                                                   </span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line">[sdiskpart(device=<span class="string">'/dev/mapper/centos-root'</span>, mountpoint=<span class="string">'/'</span>, fstype=<span class="string">'xfs'</span>, opts=<span class="string">'rw,seclabel,relatime,attr2,inode64,noquota'</span>),</span><br><span class="line"> sdiskpart(device=<span class="string">'/dev/sda1'</span>, mountpoint=<span class="string">'/boot'</span>, fstype=<span class="string">'xfs'</span>, opts=<span class="string">'rw,seclabel,relatime,attr2,inode64,noquota'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: [device <span class="keyword">for</span> device <span class="keyword">in</span> psutil.disk_partitions() <span class="keyword">if</span> device.mountpoint == <span class="string">'/'</span>]</span><br><span class="line">Out[<span class="number">5</span>]: [sdiskpart(device=<span class="string">'/dev/mapper/centos-root'</span>, mountpoint=<span class="string">'/'</span>, fstype=<span class="string">'xfs'</span>, opts=<span class="string">'rw,seclabel,relatime,attr2,inode64,noquota'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="function"><span class="keyword">def</span> <span class="title">get_disk_via_mountpoint</span><span class="params">(point)</span>:</span> </span><br><span class="line">    ...:     disk = [item <span class="keyword">for</span> item <span class="keyword">in</span> psutil.disk_partitions() <span class="keyword">if</span> item.mountpoint == point] </span><br><span class="line">    ...:     <span class="keyword">return</span> disk[<span class="number">0</span>].device </span><br><span class="line">    ...:                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: get_disk_via_mountpoint(<span class="string">'/'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'/dev/mapper/centos-root'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: get_disk_via_mountpoint(<span class="string">'/boot'</span>) </span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'/dev/sda1'</span></span><br></pre></td></tr></table></figure><h6 id="3）psutil-disk-usage"><a class="header-anchor" href="#3）psutil-disk-usage">¶</a>3）psutil.disk_usage</h6><p>以命名元组的形式返回path所在磁盘的使用情况，包括磁盘的容量、已经使用的磁盘容量、磁盘的空间利用率等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: psutil.disk_usage(<span class="string">'/'</span>)       </span><br><span class="line">Out[<span class="number">9</span>]: sdiskusage(total=<span class="number">18238930944</span>, used=<span class="number">6775488512</span>, free=<span class="number">11463442432</span>, percent=<span class="number">37.1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: psutil.disk_usage(<span class="string">'/'</span>).percent</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">37.2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: type(psutil.disk_usage(<span class="string">'/'</span>).percent)</span><br><span class="line">Out[<span class="number">11</span>]: float</span><br></pre></td></tr></table></figure><h5 id="（4）网络"><a class="header-anchor" href="#（4）网络">¶</a>（4）网络</h5><p>与网络相关的函数如下：</p><table><thead><tr><th>函数</th><th>详情</th></tr></thead><tbody><tr><td>psutil.net_io_counter([pernic])</td><td>以命名元组的形式返回当前系统中每块网卡的网络io统计信息，包括收发字节数，收发包的数量、出错的情况和删包情况。当pernic为True时，则列出所有网卡的统计信息。</td></tr><tr><td>psutil.net_connections([kind])</td><td>以列表的形式返回每个网络连接的详细信息(namedtuple)。命名元组包含fd, family, type, laddr, raddr, status, pid等信息。kind表示过滤的连接类型，支持的值如下：(默认为inet)</td></tr><tr><td>psutil.net_if_addrs()</td><td>以字典的形式返回网卡的配置信息，包括IP地址和mac地址、子网掩码和广播地址。</td></tr><tr><td>psutil.net_if_stats()</td><td>返回网卡的详细信息，包括是否启动、通信类型、传输速度与mtu。</td></tr><tr><td>psutil.users()</td><td>以命名元组的方式返回当前登陆用户的信息，包括用户名，登陆时间，终端，与主机信息</td></tr><tr><td>psutil.boot_time()</td><td>以时间戳的形式返回系统的启动时间</td></tr></tbody></table><h6 id="1）psutil-net-io-counter"><a class="header-anchor" href="#1）psutil-net-io-counter">¶</a>1）psutil.net_io_counter</h6><p>以命名元组的形式返回当前系统中每块网卡的网络io统计信息，包括收发字节数，收发包的数量、出错的情况和删包情况。当pernic为True时，则列出所有网卡的统计信息。使用net_io_counter函数与自己解析/proc/net/dev文件内容实现的功能相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: psutil.net_io_counters()     </span><br><span class="line">Out[<span class="number">2</span>]: snetio(bytes_sent=<span class="number">720405</span>, bytes_recv=<span class="number">3661606</span>, packets_sent=<span class="number">5520</span>, packets_recv=<span class="number">14886</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: psutil.net_io_counters(pernic=<span class="literal">True</span>) </span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">&#123;<span class="string">'ens37'</span>: snetio(bytes_sent=<span class="number">724145</span>, bytes_recv=<span class="number">3365944</span>, packets_sent=<span class="number">5538</span>, packets_recv=<span class="number">10017</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'lo'</span>: snetio(bytes_sent=<span class="number">0</span>, bytes_recv=<span class="number">0</span>, packets_sent=<span class="number">0</span>, packets_recv=<span class="number">0</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'virbr0-nic'</span>: snetio(bytes_sent=<span class="number">0</span>, bytes_recv=<span class="number">0</span>, packets_sent=<span class="number">0</span>, packets_recv=<span class="number">0</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'virbr0'</span>: snetio(bytes_sent=<span class="number">0</span>, bytes_recv=<span class="number">0</span>, packets_sent=<span class="number">0</span>, packets_recv=<span class="number">0</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>),</span><br><span class="line"> <span class="string">'ens33'</span>: snetio(bytes_sent=<span class="number">0</span>, bytes_recv=<span class="number">298202</span>, packets_sent=<span class="number">0</span>, packets_recv=<span class="number">4899</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>)&#125;</span><br></pre></td></tr></table></figure><h6 id="2）net-connections"><a class="header-anchor" href="#2）net-connections">¶</a>2）net_connections</h6><p>以列表的形式返回每个网络连接的详细信息(namedtuple)，可以使用该函数查看网络连接状态，统计连接个数以及处于特定状态的网络连接个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: psutil.net_connections()      </span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line">[sconn(fd=<span class="number">6</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, type=&lt;SocketKind.SOCK_STREAM: <span class="number">1</span>&gt;, laddr=addr(ip=<span class="string">'::'</span>, port=<span class="number">111</span>), raddr=(), status=<span class="string">'LISTEN'</span>, pid=<span class="number">6558</span>),</span><br><span class="line"> sconn(fd=<span class="number">7</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, type=&lt;SocketKind.SOCK_DGRAM: <span class="number">2</span>&gt;, laddr=addr(ip=<span class="string">'::'</span>, port=<span class="number">111</span>), raddr=(), status=<span class="string">'NONE'</span>, pid=<span class="number">6558</span>),</span><br><span class="line"> sconn(fd=<span class="number">8</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, type=&lt;SocketKind.SOCK_STREAM: <span class="number">1</span>&gt;, laddr=addr(ip=<span class="string">'::1'</span>, port=<span class="number">6010</span>), raddr=(), status=<span class="string">'LISTEN'</span>, pid=<span class="number">9047</span>),</span><br><span class="line"> sconn(fd=<span class="number">6</span>, family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, type=&lt;SocketKind.SOCK_STREAM: <span class="number">1</span>&gt;,</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: conns = psutil.net_connections()</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: len([conn <span class="keyword">for</span> conn <span class="keyword">in</span> conns <span class="keyword">if</span> conn.status == <span class="string">'TIME_WAIT'</span>])   </span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><h6 id="3）net-if-addrs"><a class="header-anchor" href="#3）net-if-addrs">¶</a>3）net_if_addrs</h6><p>以字典的形式返回网卡的配置信息，包括IP地址和mac地址、子网掩码和广播地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: psutil.net_if_addrs()                                                                                               </span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">&#123;<span class="string">'lo'</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, address=<span class="string">'127.0.0.1'</span>, netmask=<span class="string">'255.0.0.0'</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>),</span><br><span class="line">  snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, address=<span class="string">'::1'</span>, netmask=<span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>),</span><br><span class="line">  snicaddr(family=&lt;AddressFamily.AF_PACKET: <span class="number">17</span>&gt;, address=<span class="string">'00:00:00:00:00:00'</span>, netmask=<span class="literal">None</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>)],</span><br><span class="line"> <span class="string">'ens37'</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, address=<span class="string">'192.168.1.131'</span>, netmask=<span class="string">'255.255.255.255'</span>, broadcast=<span class="string">'192.168.1.131'</span>, ptp=<span class="literal">None</span>),</span><br><span class="line">  snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, address=<span class="string">'240e:82:e03:7342:4378:7be3:558c:fc88'</span>, netmask=<span class="string">'ffff:ffff:ffff:ffff::'</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h6 id="4）psutil-net-if-stats"><a class="header-anchor" href="#4）psutil-net-if-stats">¶</a>4）psutil.net_if_stats</h6><p>返回网卡的详细信息，包括是否启动、通信类型、传输速度与mtu。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: psutil.net_if_stats()        </span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">&#123;<span class="string">'ens37'</span>: snicstats(isup=<span class="literal">True</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_FULL: <span class="number">2</span>&gt;, speed=<span class="number">1000</span>, mtu=<span class="number">1500</span>),</span><br><span class="line"> <span class="string">'lo'</span>: snicstats(isup=<span class="literal">True</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_UNKNOWN: <span class="number">0</span>&gt;, speed=<span class="number">0</span>, mtu=<span class="number">65536</span>),</span><br><span class="line"> <span class="string">'virbr0-nic'</span>: snicstats(isup=<span class="literal">False</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_FULL: <span class="number">2</span>&gt;, speed=<span class="number">10</span>, mtu=<span class="number">1500</span>),</span><br><span class="line"> <span class="string">'virbr0'</span>: snicstats(isup=<span class="literal">True</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_UNKNOWN: <span class="number">0</span>&gt;, speed=<span class="number">0</span>, mtu=<span class="number">1500</span>),</span><br><span class="line"> <span class="string">'ens33'</span>: snicstats(isup=<span class="literal">True</span>, duplex=&lt;NicDuplex.NIC_DUPLEX_FULL: <span class="number">2</span>&gt;, speed=<span class="number">1000</span>, mtu=<span class="number">1500</span>)&#125;</span><br></pre></td></tr></table></figure><h5 id="（5）其他"><a class="header-anchor" href="#（5）其他">¶</a>（5）其他</h5><h6 id="1）users"><a class="header-anchor" href="#1）users">¶</a>1）users</h6><p>以命名元组的方式返回当前登陆用户的信息，包括用户名，登陆时间，终端，与主机信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: psutil.users()              </span><br><span class="line">Out[<span class="number">9</span>]: </span><br><span class="line">[suser(name=<span class="string">'root'</span>, terminal=<span class="string">':0'</span>, host=<span class="string">'localhost'</span>, started=<span class="number">1582366080.0</span>, pid=<span class="number">7991</span>),</span><br><span class="line"> suser(name=<span class="string">'root'</span>, terminal=<span class="string">'pts/0'</span>, host=<span class="string">'localhost'</span>, started=<span class="number">1582366208.0</span>, pid=<span class="number">8927</span>),</span><br><span class="line"> suser(name=<span class="string">'root'</span>, terminal=<span class="string">'pts/1'</span>, host=<span class="string">'192.168.1.4'</span>, started=<span class="number">1582370816.0</span>, pid=<span class="number">10099</span>),</span><br><span class="line"> suser(name=<span class="string">'root'</span>, terminal=<span class="string">'pts/3'</span>, host=<span class="string">'192.168.1.4'</span>, started=<span class="number">1582369408.0</span>, pid=<span class="number">9787</span>)]</span><br></pre></td></tr></table></figure><h6 id="2）boot-time"><a class="header-anchor" href="#2）boot-time">¶</a>2）boot_time</h6><p>以时间戳的形式返回系统的启动时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: psutil.boot_time()    </span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">1582527367.0</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">11</span>]: datetime.datetime.fromtimestamp(psutil.boot_time()).strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)                                  </span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'2020-02-24 14:56:07'</span></span><br></pre></td></tr></table></figure><h4 id="3、综合案例：使用psutil实现监控程序"><a class="header-anchor" href="#3、综合案例：使用psutil实现监控程序">¶</a>3、综合案例：使用psutil实现监控程序</h4><h4 id="4、psutil进程管理"><a class="header-anchor" href="#4、psutil进程管理">¶</a>4、psutil进程管理</h4><p>psutil还提供了作为进程管理的功能函数，包括获取进程列表，判断是否存在，以及进程管理的类封装。</p><table><thead><tr><th>函数</th><th>详情</th></tr></thead><tbody><tr><td>psutil.Process()</td><td>对进程进行封装，可以使用该类的方法获取进行的详细信息，或者给进程发送信号。</td></tr><tr><td>psutil.pids()</td><td>以列表的形式返回当前正在运行的进程</td></tr><tr><td>psutil.pid_exists(1)</td><td>判断给点定的pid是否存在</td></tr><tr><td>psutil.process_iter()</td><td>迭代当前正在运行的进程，返回的是每个进程的Process对象</td></tr></tbody></table><h6 id="1）Process类"><a class="header-anchor" href="#1）Process类">¶</a>1）Process类</h6><p>对进程进行封装，可以使用该类的方法获取进行的详细信息，或者给进程发送信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: init_process = psutil.Process()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: init_process.cmdline()      </span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'/usr/local/python38/bin/python3.8'</span>, <span class="string">'/usr/local/python38/bin/ipython'</span>]</span><br></pre></td></tr></table></figure><p>Process类包含很多方法来获取进程的详细信息。下面是几个较常用的方法：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name：获取进程的名称</span><br><span class="line">cmdline：获取启动进程的命令行参数</span><br><span class="line">create_time：获取进程的创建时间(时间戳格式)</span><br><span class="line">num_fds：进程打开的文件个数</span><br><span class="line">num_threads：进程的子进程个数</span><br><span class="line">is_running：判断进程是否正在运行</span><br><span class="line">send_signal：给进程发送信号，类似与os.kill等</span><br><span class="line">kill：发送SIGKILL信号结束进程</span><br><span class="line">terminate：发送SIGTEAM信号结束进程</span><br></pre></td></tr></table></figure><h6 id="2）pids"><a class="header-anchor" href="#2）pids">¶</a>2）pids</h6><p>以列表的形式返回当前正在运行的进程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> psutil                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: init_process = psutil.Process()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: init_process.cmdline()       </span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'/usr/local/python38/bin/python3.8'</span>, <span class="string">'/usr/local/python38/bin/ipython'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: psutil.pids()[:<span class="number">5</span>]            </span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><h6 id="3）pid-exists"><a class="header-anchor" href="#3）pid-exists">¶</a>3）pid_exists</h6><p>判断给点定的pid是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: psutil.pid_exists(<span class="number">1</span>)          </span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: psutil.pid_exists(<span class="number">10245</span>)                              </span><br><span class="line">Out[<span class="number">6</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h6 id="4）process-iter"><a class="header-anchor" href="#4）process-iter">¶</a>4）process_iter</h6><p>迭代当前正在运行的进程，返回的是每个进程的Process对象，而pids返回的是进程的列表。</p><h3 id="四、使用Python监控MongoDB"><a class="header-anchor" href="#四、使用Python监控MongoDB">¶</a>四、使用Python监控MongoDB</h3><p>对于MongoDB数据库来说，获取监控的方法比较简单，因为MongoDB本身流返回给我们一个字典形式的数据。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pymongo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'127.0.0.1:27017'</span>)</span><br><span class="line">client.admin.authenticate(<span class="string">'laoyu'</span>,<span class="string">'laoyu'</span>)</span><br><span class="line">rs = client.admin.command(<span class="string">'replSetGetStatus'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"set:"</span>,rs[<span class="string">'set'</span>])</span><br><span class="line">print(<span class="string">"myState:"</span>,rs[<span class="string">'myState'</span>])</span><br><span class="line">print(<span class="string">'num of members:'</span>,len(rs[<span class="string">'members'</span>]))</span><br></pre></td></tr></table></figure><h6 id="3）pid-exists-v2"><a class="header-anchor" href="#3）pid-exists-v2">¶</a>3）pid_exists</h6><p>判断给点定的pid是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: psutil.pid_exists(<span class="number">1</span>)          </span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: psutil.pid_exists(<span class="number">10245</span>)                              </span><br><span class="line">Out[<span class="number">6</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h6 id="4）process-iter-v2"><a class="header-anchor" href="#4）process-iter-v2">¶</a>4）process_iter</h6><p>迭代当前正在运行的进程，返回的是每个进程的Process对象，而pids返回的是进程的列表。</p><h3 id="四、使用Python监控MongoDB-v2"><a class="header-anchor" href="#四、使用Python监控MongoDB-v2">¶</a>四、使用Python监控MongoDB</h3><p>对于MongoDB数据库来说，获取监控的方法比较简单，因为MongoDB本身流返回给我们一个字典形式的数据。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pymongo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'127.0.0.1:27017'</span>)</span><br><span class="line">client.admin.authenticate(<span class="string">'laoyu'</span>,<span class="string">'laoyu'</span>)</span><br><span class="line">rs = client.admin.command(<span class="string">'replSetGetStatus'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"set:"</span>,rs[<span class="string">'set'</span>])</span><br><span class="line">print(<span class="string">"myState:"</span>,rs[<span class="string">'myState'</span>])</span><br><span class="line">print(<span class="string">'num of members:'</span>,len(rs[<span class="string">'members'</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="https://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://pdxblog.top/tags/Python/"/>
    
  </entry>
  
</feed>
