<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>派大星の博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pdxblog.top/"/>
  <updated>2020-04-27T14:43:16.438Z</updated>
  <id>http://pdxblog.top/</id>
  
  <author>
    <name>派大星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python3+Django3开发简单的人员管理系统</title>
    <link href="http://pdxblog.top/Python3+Django3%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://pdxblog.top/Python3+Django3%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-27T14:43:16.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python3-Django3开发简单的人员管理系统"><a href="#Python3-Django3开发简单的人员管理系统" class="headerlink" title="Python3+Django3开发简单的人员管理系统"></a>Python3+Django3开发简单的人员管理系统</h2><h3 id="1、创建工程和应用"><a href="#1、创建工程和应用" class="headerlink" title="1、创建工程和应用"></a>1、创建工程和应用</h3><h4 id="1-1-使用pycharm创建项目"><a href="#1-1-使用pycharm创建项目" class="headerlink" title="1.1 使用pycharm创建项目"></a>1.1 使用pycharm创建项目</h4><p><img src="https://img-blog.csdnimg.cn/20200427202651145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200427202714742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-2安装mysqlclient"><a href="#1-2安装mysqlclient" class="headerlink" title="1.2安装mysqlclient"></a>1.2安装mysqlclient</h4><p>在设置里面找创建的项目点击右边的“+”号直接安装<br><img src="https://img-blog.csdnimg.cn/20200427202822941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2、应用配置"><a href="#2、应用配置" class="headerlink" title="2、应用配置"></a>2、应用配置</h3><h4 id="2-1、修改项目配置文件（UserSystem-settings-py）"><a href="#2-1、修改项目配置文件（UserSystem-settings-py）" class="headerlink" title="2.1、修改项目配置文件（UserSystem/settings.py）"></a>2.1、修改项目配置文件（UserSystem/settings.py）</h4><h5 id="1）注释csrf校验"><a href="#1）注释csrf校验" class="headerlink" title="1）注释csrf校验"></a>1）注释csrf校验</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',  # 注释此项</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="2）修改数据库的默认配置：sqlite3改为mysql"><a href="#2）修改数据库的默认配置：sqlite3改为mysql" class="headerlink" title="2）修改数据库的默认配置：sqlite3改为mysql"></a>2）修改数据库的默认配置：sqlite3改为mysql</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 'default': &#123;</span></span><br><span class="line">    <span class="comment">#     'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">    <span class="comment">#     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"><span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'userinfo'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123.com'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3）修改语言和时区"><a href="#3）修改语言和时区" class="headerlink" title="3）修改语言和时区"></a>3）修改语言和时区</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LANGUAGE_CODE = 'en-us'</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">'zh-Hans'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TIME_ZONE = 'UTC'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><h5 id="4）允许所有IP访问"><a href="#4）允许所有IP访问" class="headerlink" title="4）允许所有IP访问"></a>4）允许所有IP访问</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure><h4 id="2-2、定义用户信息的数据模型：UserInfo-models-py"><a href="#2-2、定义用户信息的数据模型：UserInfo-models-py" class="headerlink" title="2.2、定义用户信息的数据模型：UserInfo/models.py"></a>2.2、定义用户信息的数据模型：UserInfo/models.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (<span class="string">'男'</span>, <span class="string">'男'</span>),</span><br><span class="line">        (<span class="string">'女'</span>, <span class="string">'女'</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">'姓 名'</span>)</span><br><span class="line">    birthday = models.DateField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'生 日'</span>)</span><br><span class="line">    gender = models.CharField(max_length=<span class="number">30</span>, choices=GENDER_CHOICES, verbose_name=<span class="string">'性 别'</span>)</span><br><span class="line">    account = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">'工 号'</span>)</span><br><span class="line">    age = models.IntegerField(default=<span class="number">18</span>, verbose_name=<span class="string">'年 龄'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3、初始化模型数据库兵生成数据库文件"><a href="#2-3、初始化模型数据库兵生成数据库文件" class="headerlink" title="2.3、初始化模型数据库兵生成数据库文件"></a>2.3、初始化模型数据库兵生成数据库文件</h4><p>简言之：在Django 1.9及未来的版本种使用migrate代替原先的syscdb.</p><p>先在Mysql中创建数据库”userinfo”</p><p>执行下面代码：（直接再Pycharm里的”Terminal”终端执行 ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) F:\python1\UserSystem&gt;python manage.py makemigrations</span><br><span class="line">(venv) F:\python1\UserSystem&gt;python ./manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="2-4、显示注册信息修改默认标题（UserInfo-admin-py）"><a href="#2-4、显示注册信息修改默认标题（UserInfo-admin-py）" class="headerlink" title="2.4、显示注册信息修改默认标题（UserInfo/admin.py）"></a>2.4、显示注册信息修改默认标题（UserInfo/admin.py）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'age'</span>,</span><br><span class="line">        <span class="string">'birthday'</span>,</span><br><span class="line">        <span class="string">'gender'</span>,</span><br><span class="line">        <span class="string">'account'</span>,</span><br><span class="line">    ]</span><br><span class="line">    search_fields = (<span class="string">'name'</span>,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(User, HostAdmin)</span><br><span class="line">admin.AdminSite.site_header = <span class="string">'运维系统管理后台'</span></span><br><span class="line">admin.AdminSite.site_title = <span class="string">'运维系统'</span></span><br></pre></td></tr></table></figure><h4 id="2-5、添加应用的url访问（UserSystem-urls-py）"><a href="#2-5、添加应用的url访问（UserSystem-urls-py）" class="headerlink" title="2.5、添加应用的url访问（UserSystem/urls.py）"></a>2.5、添加应用的url访问（UserSystem/urls.py）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3、启动Django服务"><a href="#3、启动Django服务" class="headerlink" title="3、启动Django服务"></a>3、启动Django服务</h3><h4 id="3-1、命令启动"><a href="#3-1、命令启动" class="headerlink" title="3.1、命令启动"></a>3.1、命令启动</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv) F:\python1\UserSystem&gt;python ./manage.py runserver</span><br></pre></td></tr></table></figure><h4 id="3-2、创建超级用户"><a href="#3-2、创建超级用户" class="headerlink" title="3.2、创建超级用户"></a>3.2、创建超级用户</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(venv) F:\python1\UserSystem&gt;python ./manage.py createsuperuser</span><br><span class="line">用户名: accp</span><br><span class="line">电子邮件地址:</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">密码长度太短。密码必须包含至少 <span class="number">8</span> 个字符。</span><br><span class="line">这个密码太常见了。</span><br><span class="line">密码只包含数字。</span><br><span class="line">Bypass password validation and create user anyway? [y/N]: y</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><h4 id="3-3、浏览器访问登录：http-127-0-0-1-8000-admin"><a href="#3-3、浏览器访问登录：http-127-0-0-1-8000-admin" class="headerlink" title="3.3、浏览器访问登录：http://127.0.0.1:8000/admin"></a>3.3、浏览器访问登录：<a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></h4><p><img src="https://img-blog.csdnimg.cn/20200427202927690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-4、登录成功后即可添加对应的信息到系统中"><a href="#3-4、登录成功后即可添加对应的信息到系统中" class="headerlink" title="3.4、登录成功后即可添加对应的信息到系统中"></a>3.4、登录成功后即可添加对应的信息到系统中</h4><p><img src="https://img-blog.csdnimg.cn/20200427202946525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-5、前往数据库查看，用户信息是否保存"><a href="#3-5、前往数据库查看，用户信息是否保存" class="headerlink" title="3.5、前往数据库查看，用户信息是否保存"></a>3.5、前往数据库查看，用户信息是否保存</h4><p><img src="https://img-blog.csdnimg.cn/20200427203007623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python对Linux系统的管理</title>
    <link href="http://pdxblog.top/Python%E5%AF%B9Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AE%A1%E7%90%86.html"/>
    <id>http://pdxblog.top/Python%E5%AF%B9Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AE%A1%E7%90%86.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-27T14:43:53.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python对Linux系统的管理"><a href="#Python对Linux系统的管理" class="headerlink" title="Python对Linux系统的管理"></a>Python对Linux系统的管理</h2><h3 id="一、OS模块常用功能"><a href="#一、OS模块常用功能" class="headerlink" title="一、OS模块常用功能"></a>一、OS模块常用功能</h3><h4 id="1、os模块打开文件"><a href="#1、os模块打开文件" class="headerlink" title="1、os模块打开文件"></a>1、os模块打开文件</h4><p>方法如下：</p><blockquote><p>os.open(filename, flag, [,mode])</p></blockquote><p>flag参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">os.O_CREAT# 创建文件</span><br><span class="line">os.O_RDONLY# 只读方式打开</span><br><span class="line">os.O_WRONLY# 只写方式打开</span><br><span class="line">os.O_RDWR# 读写方式打开</span><br></pre></td></tr></table></figure><h4 id="2、os模块对文件进行操作"><a href="#2、os模块对文件进行操作" class="headerlink" title="2、os模块对文件进行操作"></a>2、os模块对文件进行操作</h4><p>常用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">os.read(fd, buffersize)</span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">os.write(fd, string)</span><br><span class="line"><span class="comment"># 文件指针操作</span></span><br><span class="line">os.lseek(fd, pos, how)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">os.close(fd)</span><br></pre></td></tr></table></figure><p>代码演示：</p><blockquote><p>文件创建和写入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fd = os.open(<span class="string">"abc.txt"</span>, os.O_RDWR | os.O_CREAT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入字符串</span></span><br><span class="line">str = <span class="string">"Hello Python!"</span></span><br><span class="line">ret = os.write(fd, bytes(str, <span class="string">'UTF-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入返回值</span></span><br><span class="line">print(<span class="string">"写入的位数为: "</span>)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"写入成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">os.close(fd)</span><br><span class="line">print(<span class="string">"关闭文件成功!!"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>文件读取</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fd = os.open(<span class="string">"abc.txt"</span>, os.O_RDWR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文本</span></span><br><span class="line">ret = os.read(fd, <span class="number">6</span>)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">os.close(fd)</span><br><span class="line">print(<span class="string">"关闭文件成功!!"</span>)</span><br></pre></td></tr></table></figure><h4 id="3、os模块管理文件和目录"><a href="#3、os模块管理文件和目录" class="headerlink" title="3、os模块管理文件和目录"></a>3、os模块管理文件和目录</h4><p>常用方法如下：</p><table><thead><tr><th>os方法</th><th>说明</th></tr></thead><tbody><tr><td>getcwd()</td><td>获取当前目录</td></tr><tr><td>listdir(path)</td><td>返回当前目录下所有文件组成的列表</td></tr><tr><td>chdir(path)</td><td>切换目录</td></tr><tr><td>rename(old, new)</td><td>修改文件或者目录名</td></tr><tr><td>mkdir(path [,mode])</td><td>创建目录</td></tr><tr><td>makedirs(path [,mode])</td><td>创建多级目录</td></tr><tr><td>rmdir(path)</td><td>删除目录（目录必须为空目录）</td></tr><tr><td>removedirs(path)</td><td>删除多级目录（目录必须为空目录）</td></tr><tr><td>remove(path)</td><td>删除文件</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(os.getcwd())  <span class="comment"># pwd</span></span><br><span class="line">print(os.listdir()) <span class="comment"># ls</span></span><br><span class="line">os.chdir(<span class="string">'/opt'</span>)<span class="comment"># cd /opt</span></span><br><span class="line">os.rename(<span class="string">'abc.txt'</span>,<span class="string">'test.txt'</span>) <span class="comment"># mv abc.txt test.txt</span></span><br><span class="line">os.remove(<span class="string">'read.py'</span>)    <span class="comment"># rm -f abc.txt</span></span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">'test'</span>)    <span class="comment"># mkdir dir1</span></span><br><span class="line">os.makedirs(<span class="string">'demo/abc'</span>) <span class="comment"># mkdir -p dir2/dir22</span></span><br><span class="line">os.rmdir(<span class="string">'test'</span>)    <span class="comment"># 目录必须为空</span></span><br><span class="line">os.removedirs(<span class="string">'demo'</span>)   <span class="comment"># 目录必须为空</span></span><br></pre></td></tr></table></figure><h4 id="4、os模块管理文件权限"><a href="#4、os模块管理文件权限" class="headerlink" title="4、os模块管理文件权限"></a>4、os模块管理文件权限</h4><table><thead><tr><th>os方法</th><th>说明</th></tr></thead><tbody><tr><td>access(path, mode)</td><td>判断该文件权限：F_OK表示该路径存在；<br>权限：R_OK，W_OK，X_OK</td></tr><tr><td>chmod(path, mode)</td><td>修改文件权限：0o755</td></tr><tr><td>chown(path, uid, gid)</td><td>更改文件所有者，如果不修改可以设置为 -1</td></tr></tbody></table><p>代码演示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试路径是否存在：os.F_OK</span></span><br><span class="line">res = os.access('test.txt',os.F_OK)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试当前用户对该文件是否有读的权限</span></span><br><span class="line">res = os.access('test.txt',os.R_OK)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试当前用户对该文件是否有写的权限</span></span><br><span class="line">res = os.access('test.txt',os.W_OK)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试当前用户对该文件是否有执行的权限</span></span><br><span class="line">res = os.access('test.txt',os.X_OK)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改当前用户的权限</span></span><br><span class="line">os.chmod('test.txt',0o755)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改文件的所有者</span></span><br><span class="line">os.chown('test.txt', 1001, 1002)</span><br></pre></td></tr></table></figure><h4 id="5、os-path模块管理文件与路径"><a href="#5、os-path模块管理文件与路径" class="headerlink" title="5、os.path模块管理文件与路径"></a>5、os.path模块管理文件与路径</h4><h5 id="（1）拆分路径"><a href="#（1）拆分路径" class="headerlink" title="（1）拆分路径"></a>（1）拆分路径</h5><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.split(path)</td><td>返回一个二元组，包含文件的路径和文件名</td></tr><tr><td>os.path.dirname(path)</td><td>返回文件的路径</td></tr><tr><td>os.path.basename(path)</td><td>返回文件名</td></tr><tr><td>os.path.splitext(path)</td><td>返回一个去掉文件扩展名的部分和扩展名的二元组</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: os.getcwd()</span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'/opt/os_demo'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: os.listdir()</span><br><span class="line">Out[<span class="number">11</span>]: [<span class="string">'os_access.py'</span>, <span class="string">'test.txt'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: path = <span class="string">'/opt/os_demo/test.txt'</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">13</span>]: os.path.split(path)</span><br><span class="line">Out[<span class="number">13</span>]: (<span class="string">'/opt/os_demo'</span>, <span class="string">'test.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: os.path.dirname(path)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'/opt/os_demo'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: os.path.basename(path)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'test.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: os.path.splitext(path) </span><br><span class="line">Out[<span class="number">16</span>]: (<span class="string">'/opt/os_demo/test'</span>, <span class="string">'.txt'</span>)</span><br></pre></td></tr></table></figure><h5 id="（2）构建路径"><a href="#（2）构建路径" class="headerlink" title="（2）构建路径"></a>（2）构建路径</h5><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.expanduser(path)</td><td>展开用户的HOME目录，如<del>，</del>oracle</td></tr><tr><td>os.path.abspath(path)</td><td>得到文件或路径的绝对路径</td></tr><tr><td>os.path.join(path)</td><td>根据不同的操作系统平台，使用不同的路径分隔符拼接路径</td></tr><tr><td>os.path.isabs(path)</td><td>检查一个路径是不是一个绝对路径</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: os.path.expanduser(<span class="string">'~'</span>) </span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'/root'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: os.path.expanduser(<span class="string">'~oracle'</span>) </span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'/home/oracle'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: os.path.expanduser(<span class="string">'~accp'</span>)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'/home/accp'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: os.path.expanduser(<span class="string">'~acp'</span>) </span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'~acp'</span><span class="comment"># 错误演示</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'/opt/os_demo'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: os.path.abspath(<span class="string">'..'</span>)</span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">'/opt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: os.path.join(<span class="string">'/opt/os_demo'</span>,<span class="string">'test.txt'</span>)</span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'/opt/os_demo/test.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: os.path.isabs(<span class="string">'/opt/os_demo/'</span>) </span><br><span class="line">Out[<span class="number">26</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: os.path.isabs(<span class="string">'.'</span>) </span><br><span class="line">Out[<span class="number">27</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h5 id="（3）获取文件属性"><a href="#（3）获取文件属性" class="headerlink" title="（3）获取文件属性"></a>（3）获取文件属性</h5><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.getatime(path)</td><td>返回最近访问时间（浮点型秒数）</td></tr><tr><td>os.path.getmtime(path)</td><td>返回最近文件修改时间</td></tr><tr><td>os.path.getctime(path)</td><td>返回文件 path 创建时间</td></tr><tr><td>os.path.getsize(path)</td><td>返回文件大小，如果文件不存在就返回错误</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: os.path.getatime(path)</span><br><span class="line">Out[<span class="number">33</span>]: <span class="number">1587547270.7306058</span><span class="comment"># 时间戳</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: os.path.getmtime(path)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">1587547270.7306058</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: os.path.getctime(path)</span><br><span class="line">Out[<span class="number">35</span>]: <span class="number">1587548055.4721448</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: os.path.getsize(path)</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="（4）判断文件类型"><a href="#（4）判断文件类型" class="headerlink" title="（4）判断文件类型"></a>（4）判断文件类型</h5><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.isfile(path)</td><td>判断路径是否为文件</td></tr><tr><td>os.path.isdir(path)</td><td>判断路径是否为目录</td></tr><tr><td>os.path.islink(path)</td><td>判断路径是否为链接</td></tr><tr><td>os.path.ismount(path)</td><td>判断路径是否为挂载点</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: os.path.isfile(path)</span><br><span class="line">Out[<span class="number">37</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: os.path.isdir(path)</span><br><span class="line">Out[<span class="number">38</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: os.path.islink(path)</span><br><span class="line">Out[<span class="number">39</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: os.path.ismount(path)</span><br><span class="line">Out[<span class="number">40</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="6、os模块执行shell命令"><a href="#6、os模块执行shell命令" class="headerlink" title="6、os模块执行shell命令"></a>6、os模块执行shell命令</h4><p>os.system()的作用：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行shell命令</span><br><span class="line">返回shell命令的返回值</span><br><span class="line">命令的输出会输出到标准输出</span><br></pre></td></tr></table></figure><p>代码演示：</p><blockquote><p>os.system(‘cls’)</p></blockquote><h4 id="案例1：编写自动安装Python的脚本"><a href="#案例1：编写自动安装Python的脚本" class="headerlink" title="案例1：编写自动安装Python的脚本"></a>案例1：编写自动安装Python的脚本</h4><p>实现步骤：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载Python版本源码</span><br><span class="line">安装Python需要的依赖库</span><br><span class="line">编译安装Python</span><br></pre></td></tr></table></figure><p>伪代码：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 判断用户是不是root</span><br><span class="line">2. 如果是，等待用户输入Python版本</span><br><span class="line">3. 执行shell命令下载源码包</span><br><span class="line">4. 安装依赖开发包</span><br><span class="line">5. 编译安装Python</span><br></pre></td></tr></table></figure><p>脚本内容如下（基于Python2）：</p><blockquote><p>auto_install_python.py</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> coding=utf-8</span></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断用户是否是root用户</span></span><br><span class="line">if os.getuid() == 0:</span><br><span class="line">    pass</span><br><span class="line">else:</span><br><span class="line">    print</span><br><span class="line">    '当前用户不是root用户！'</span><br><span class="line">    SystemExit(1)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Python依赖库</span></span><br><span class="line">cmd_module = 'yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel'</span><br><span class="line">res = os.system(cmd_module)</span><br><span class="line">if res != 0:</span><br><span class="line">    print</span><br><span class="line">    'Python依赖库安装失败，请重新执行该脚本。'</span><br><span class="line">    SystemExit(1)</span><br><span class="line">else:</span><br><span class="line">    print</span><br><span class="line">    'python依赖库安装成功！'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入Python版本，下载Python源码包到本地目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget url</span></span><br><span class="line">version = raw_input('请输入Python版本：（3.6/3.8）')</span><br><span class="line">if version == '3.6':</span><br><span class="line">    url = 'https://www.python.org/ftp/python/3.6.10/Python-3.6.10.tgz'</span><br><span class="line">else:</span><br><span class="line">    url = 'https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz'</span><br><span class="line">cmd = 'wget ' + url</span><br><span class="line">res = os.system(cmd)</span><br><span class="line">if res != 0:</span><br><span class="line">    print 'Python源码包下载失败！'</span><br><span class="line">    SystemExit(1)</span><br><span class="line">else:</span><br><span class="line">    print('======================&gt;&gt;&gt;Python源码包下载成功！')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压Python源码包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar zxvf Python-3.6.10.tgz</span></span><br><span class="line">if version == '3.6':</span><br><span class="line">    package_name = 'Python-3.6.10'</span><br><span class="line">else:</span><br><span class="line">    package_name = 'Python-3.8.1'</span><br><span class="line">res = os.system('tar zxvf ' + package_name + '.tgz')</span><br><span class="line">if res != 0:</span><br><span class="line">    print '解压失败。。。'</span><br><span class="line">    SystemExit(1)</span><br><span class="line">else:</span><br><span class="line">    print('#########################解压成功！#########################')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置语言</span></span><br><span class="line">os.system('export LANG=zh_CN.UTF-8')</span><br><span class="line">os.system('export LANGUAGE=zh_CN.UTF-8')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到Python目录</span></span><br><span class="line">os.chdir(package_name)</span><br><span class="line">os.system('./configure --prefix=/usr/local/python3')</span><br><span class="line">res = os.system('make &amp;&amp; make install')</span><br><span class="line">if res !=0:</span><br><span class="line">    print '源码编译失败。。。'</span><br><span class="line">    SystemExit(1)</span><br><span class="line">else:</span><br><span class="line">    print('####################Python安装成功，请进行验证！####################')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改用户环境变量</span></span><br><span class="line">os.system('echo "export PYTHON3=/usr/local/python3" &gt;&gt;~/.bash_profile')</span><br><span class="line">os.system('echo "export PATH=$PYTHON3/bin:$PATH" &gt;&gt;~/.bash_profile')</span><br><span class="line">os.system("source ~/.bash_profile")</span><br><span class="line">os.system('cat ~/.bash_profile')</span><br><span class="line">print('####################用户环境变量已修改，请进行验证！####################')</span><br><span class="line">os.system('python3 --version')</span><br></pre></td></tr></table></figure><h4 id="7、os-walk函数遍历目录树"><a href="#7、os-walk函数遍历目录树" class="headerlink" title="7、os.walk函数遍历目录树"></a>7、os.walk函数遍历目录树</h4><p>os.walk() 方法遍历某个目录及其子目录，对于每一个目录，walk()函数返回一个三元组（dirpath、dirnames、filenames）。其中dirpath保存的是当前目录，dirnames是当前目录下的子目录列表，filenames是当前目录下的文件列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"."</span>, topdown=<span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        print(os.path.join(root, name))</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">        print(os.path.join(root, name))</span><br></pre></td></tr></table></figure><p>os.walk() 方法是一个简单易用的文件、目录遍历器，可以帮助我们高效的处理文件、目录方面的事情。</p><h4 id="案例2：打印最常用的10条Linux命令"><a href="#案例2：打印最常用的10条Linux命令" class="headerlink" title="案例2：打印最常用的10条Linux命令"></a>案例2：打印最常用的10条Linux命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count &#x3D; Counter()</span><br><span class="line">with open(os.path.expanduser(&#39;~&#x2F;.bash_history&#39;)) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        cmd &#x3D; line.strip().split()</span><br><span class="line">        if cmd:</span><br><span class="line">            count[cmd[0]] +&#x3D;1</span><br><span class="line"></span><br><span class="line">print(count.most_common(10))</span><br></pre></td></tr></table></figure><h3 id="二、使用ConfigParser类解析配置文件"><a href="#二、使用ConfigParser类解析配置文件" class="headerlink" title="二、使用ConfigParser类解析配置文件"></a>二、使用ConfigParser类解析配置文件</h3><p>Python中有ConfigParser类，可以很方便的从配置文件中读取数据（如DB的配置，路径的配置），所以可以自己写一个函数，实现读取config配置。</p><h4 id="1、配置文件的格式"><a href="#1、配置文件的格式" class="headerlink" title="1、配置文件的格式"></a>1、配置文件的格式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">节：[session]</span><br><span class="line">参数(键=值)name=value</span><br></pre></td></tr></table></figure><p>mysql配置文件部分内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span>= <span class="number">3306</span></span><br><span class="line"><span class="attr">user</span>= mysql</span><br><span class="line"><span class="attr">password</span>= mysql</span><br><span class="line"><span class="attr">host</span>= <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">basedir</span>= /usr</span><br><span class="line"><span class="attr">datadir</span>= /var/lib/mysql</span><br><span class="line"><span class="attr">tmpdir</span>= /tmp</span><br><span class="line">skip-external-locking</span><br></pre></td></tr></table></figure><h4 id="2、ConfigParser类的使用方法"><a href="#2、ConfigParser类的使用方法" class="headerlink" title="2、ConfigParser类的使用方法"></a>2、ConfigParser类的使用方法</h4><h5 id="（1）创建configParser对象"><a href="#（1）创建configParser对象" class="headerlink" title="（1）创建configParser对象"></a>（1）创建configParser对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> configparser</span><br><span class="line">    </span><br><span class="line">In [<span class="number">2</span>]: cf = configparser.ConfigParser(allow_no_value=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h5 id="（2）读取配置文件内容"><a href="#（2）读取配置文件内容" class="headerlink" title="（2）读取配置文件内容"></a>（2）读取配置文件内容</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: cf.read(<span class="string">'my.inf'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'my.ini'</span>]</span><br></pre></td></tr></table></figure><h5 id="（3）获取配置文件信息"><a href="#（3）获取配置文件信息" class="headerlink" title="（3）获取配置文件信息"></a>（3）获取配置文件信息</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sections: 返回一个包含所有章节的列表</span><br><span class="line">options：返回一个包含章节下所有选项的列表</span><br><span class="line"></span><br><span class="line">has_section：判断章节是否存在</span><br><span class="line">has_options：判断某个选项是否存在</span><br><span class="line"></span><br><span class="line">items：以元组的形式返回所有的选项</span><br><span class="line">get、getboolean、getint、getfloat：获取选项的值</span><br></pre></td></tr></table></figure><p>方法测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: cf.sections()</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="string">'client'</span>, <span class="string">'mysqld'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: cf.has_section(<span class="string">'client'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]cf.options(<span class="string">'client'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'port'</span>, <span class="string">'user'</span>, <span class="string">'password'</span>, <span class="string">'host'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: cf.has_option(<span class="string">'client'</span>,<span class="string">'user'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: cf.get(<span class="string">'client'</span>,<span class="string">'port'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'3306'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: cf.getint(<span class="string">'client'</span>,<span class="string">'port'</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">3306</span></span><br></pre></td></tr></table></figure><h5 id="（4）修改配置文件"><a href="#（4）修改配置文件" class="headerlink" title="（4）修改配置文件"></a>（4）修改配置文件</h5><p>常用方法：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">remove_section：删除一个章节</span><br><span class="line">add_section：添加一个章节</span><br><span class="line">remove_option：删除一个选项</span><br><span class="line">set：添加一个选项</span><br><span class="line">write：将ConfigParser兑现中的数据保存到文件中</span><br></pre></td></tr></table></figure><p>方法测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: cf.remove_section(<span class="string">'client'</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: cf.write(open(<span class="string">'my.ini'</span>, <span class="string">'w'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: cf.add_section(<span class="string">'client'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: cf.set(<span class="string">'client'</span>,<span class="string">'port'</span>,<span class="string">'3306'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: cf.set(<span class="string">'client'</span>,<span class="string">'user'</span>,<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: cf.set(<span class="string">'client'</span>,<span class="string">'password'</span>,<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: cf.set(<span class="string">'client'</span>,<span class="string">'host'</span>,<span class="string">'127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: cf.write(open(<span class="string">'my.ini'</span>,<span class="string">'w'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: cf.remove_option(<span class="string">'client'</span>,<span class="string">'host'</span>)</span><br><span class="line">Out[<span class="number">19</span>: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: cf.write(open(<span class="string">'my.ini'</span>,<span class="string">'w'</span>))</span><br></pre></td></tr></table></figure><h3 id="三、查找文件"><a href="#三、查找文件" class="headerlink" title="三、查找文件"></a>三、查找文件</h3><h4 id="1、使用fnmatch找到特定文件"><a href="#1、使用fnmatch找到特定文件" class="headerlink" title="1、使用fnmatch找到特定文件"></a>1、使用fnmatch找到特定文件</h4><p>fnmatch.fnmatch()函数一次只能处理一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(item):</span><br><span class="line">        <span class="comment"># if fnmatch.fnmatch(item, '*.jpg'):</span></span><br><span class="line">        <span class="keyword">if</span> fnmatch.fnmatch(item, <span class="string">'[a-e]*'</span>):</span><br><span class="line">        <span class="comment"># if fnmatch.fnmatch(item, '[a-g]?.txt'):</span></span><br><span class="line">        <span class="comment"># if fnmatch.fnmatch(item, '[!a-c]*'):</span></span><br><span class="line">            print(item)</span><br></pre></td></tr></table></figure><p>fnmatch.filter()函数一次可以处理多个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"></span><br><span class="line">items = os.listdir(<span class="string">'.'</span>)</span><br><span class="line">files = fnmatch.filter(items, <span class="string">'[a-c]*'</span>)</span><br><span class="line">print(files)</span><br></pre></td></tr></table></figure><h4 id="2、使用glob找到特定文件"><a href="#2、使用glob找到特定文件" class="headerlink" title="2、使用glob找到特定文件"></a>2、使用glob找到特定文件</h4><p>标准库glob的作用相当于os.listdir()加上fnmatch。使用glob以后，不需要调用os.listdir()获取文件列表，直接通过模式匹配即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">files = glob.glob(<span class="string">'*.jpg'</span>)</span><br><span class="line">print(files)</span><br></pre></td></tr></table></figure><h4 id="案例3：找到目录下最大（或最老）的10个文件"><a href="#案例3：找到目录下最大（或最老）的10个文件" class="headerlink" title="案例3：找到目录下最大（或最老）的10个文件"></a>案例3：找到目录下最大（或最老）的10个文件</h4><h3 id="四、高级文件处理接口shutil"><a href="#四、高级文件处理接口shutil" class="headerlink" title="四、高级文件处理接口shutil"></a>四、高级文件处理接口shutil</h3><h4 id="1、复制文件和文件夹"><a href="#1、复制文件和文件夹" class="headerlink" title="1、复制文件和文件夹"></a>1、复制文件和文件夹</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutil.copy(file1,file2)</span><br><span class="line">shuti.copytree(dir1, dir2)</span><br></pre></td></tr></table></figure><h4 id="2、文件和文件夹的移动与重命名"><a href="#2、文件和文件夹的移动与重命名" class="headerlink" title="2、文件和文件夹的移动与重命名"></a>2、文件和文件夹的移动与重命名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutil.move(file1, file2)</span><br><span class="line">shutil.move(file, dir)</span><br></pre></td></tr></table></figure><h4 id="3、删除目录"><a href="#3、删除目录" class="headerlink" title="3、删除目录"></a>3、删除目录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutil.rmtree(dir)</span><br><span class="line">os.unlink(file)</span><br></pre></td></tr></table></figure><h3 id="五、文件内容管理"><a href="#五、文件内容管理" class="headerlink" title="五、文件内容管理"></a>五、文件内容管理</h3><h4 id="1、目录和文件对比"><a href="#1、目录和文件对比" class="headerlink" title="1、目录和文件对比"></a>1、目录和文件对比</h4><p>filecmp模块包含了比较目录和文件的操作。</p><p>目录结构如下，其中，a.txt和c.txt内容是一样的，a_copy.txt是a.txt的拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├─dir1</span><br><span class="line">│  │  a.txt</span><br><span class="line">│  │  a_copy.txt</span><br><span class="line">│  │  b.txt</span><br><span class="line">│  │  c.txt</span><br><span class="line">│  └─subdir1</span><br><span class="line">│          sa.txt</span><br><span class="line">└─dir2</span><br><span class="line">    │  a.txt</span><br><span class="line">    │  b.txt</span><br><span class="line">    │  c.txt</span><br><span class="line">    ├─subdir1</span><br><span class="line">    │      sb.txt</span><br><span class="line">    └─subdir2</span><br></pre></td></tr></table></figure><h4 id="（1）比较两个文件"><a href="#（1）比较两个文件" class="headerlink" title="（1）比较两个文件"></a>（1）比较两个文件</h4><p>使用filecmp模块的cmp函数比较两个文件是否相同，如果文件相同则返回True，否则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> filecmp</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: cd dir1</span><br><span class="line">E:\git-project\python_project\cloud33\Python常用模块\compare\dir1</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: filecmp.cmp(<span class="string">'a.txt'</span>,<span class="string">'b.txt'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: filecmp.cmp(<span class="string">'a.txt'</span>,<span class="string">'c.txt'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: filecmp.cmp(<span class="string">'a.txt'</span>,<span class="string">'a_copy.txt'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="（2）比较多个文件"><a href="#（2）比较多个文件" class="headerlink" title="（2）比较多个文件"></a>（2）比较多个文件</h4><p>filecmp目录下还有一个名为cmpfiles的函数，该函数用来同时比较两个不同的目录下的多个文件，并且返回一个三元组，分别包含相同的文件、不同的文件和无法比较的文件。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: filecmp.cmpfiles(<span class="string">'dir1'</span>,<span class="string">'dir2'</span>,[<span class="string">'a.txt'</span>,<span class="string">'b.txt'</span>,<span class="string">'c.txt'</span>,<span class="string">'a_copy.txt'</span>])</span><br><span class="line">Out[<span class="number">6</span>]: ([<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>], [], [<span class="string">'a_copy.txt'</span>])</span><br></pre></td></tr></table></figure><p>cmpfiles函数同时用来比较两个目录下的文件，也可以使用该函数比较两个目录。但是，在比较两个目录时，需要通过参数指定可能的文件，因此比较繁琐。</p><h4 id="（3）比较目录"><a href="#（3）比较目录" class="headerlink" title="（3）比较目录"></a>（3）比较目录</h4><p>filecmp中还有一个名为dircmp的函数，用来比较两个目录。调用dircmp函数以后，会返回一个dircmp类的对象，该对象保存了诸多属性，我们可以通过查看这些属性获取目录之间的差异。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: d = filecmp.dircmp(<span class="string">'dir1'</span>,<span class="string">'dir2'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: d.report()</span><br><span class="line">diff dir1 dir2</span><br><span class="line">Only <span class="keyword">in</span> dir1 : [<span class="string">'a_copy.txt'</span>]</span><br><span class="line">Only <span class="keyword">in</span> dir2 : [<span class="string">'subdir2'</span>]</span><br><span class="line">Identical files : [<span class="string">'c.txt'</span>]</span><br><span class="line">Differing files : [<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>]</span><br><span class="line">Common subdirectories : [<span class="string">'subdir1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: d.left_list</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="string">'a.txt'</span>, <span class="string">'a_copy.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>, <span class="string">'subdir1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: d.right_list</span><br><span class="line">Out[<span class="number">10</span>]: [<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>, <span class="string">'subdir1'</span>, <span class="string">'subdir2'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: d.left_only</span><br><span class="line">Out[<span class="number">11</span>]: [<span class="string">'a_copy.txt'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: d.right_only</span><br><span class="line">Out[<span class="number">12</span>]: [<span class="string">'subdir2'</span>]</span><br></pre></td></tr></table></figure><h4 id="2、MD5校验和比较"><a href="#2、MD5校验和比较" class="headerlink" title="2、MD5校验和比较"></a>2、MD5校验和比较</h4><p>校验码是通过散列函数计算而成，是一种从任何数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，便于进行比较。MD5是目前使用最广泛的散列算法。</p><p>MD5哈希一般用于检查文件的完整性，尤其常用于检查文件传输、磁盘错误或其他情况下文件的正确性。</p><p>Linux下计算一个文件的MD5校验码，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 demo]# md5sum a.txt</span><br><span class="line">d41d8cd98f00b204e9800998ecf8427e  a.txt</span><br></pre></td></tr></table></figure><p>在Python中计算文件的MD5校验码也非常简单，使用标准库hashlib模块即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">d = hashlib.md5()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'b.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        d.update(line.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(d.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者可以这样（最常见的写法，常用于图片的命名）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.md5(<span class="string">b'123'</span>).hexdigest()</span><br><span class="line"><span class="string">'202cb962ac59075b964b07152d234b70'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用hash.new()这个一般方法，hashlib.new(name[, data])，name传入的是哈希加密算法的名称，如md5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.new(<span class="string">'md5'</span>, <span class="string">b'123'</span>).hexdigest()</span><br><span class="line"><span class="string">'202cb962ac59075b964b07152d234b70'</span></span><br></pre></td></tr></table></figure><h3 id="六、使用Python管理压缩包"><a href="#六、使用Python管理压缩包" class="headerlink" title="六、使用Python管理压缩包"></a>六、使用Python管理压缩包</h3><h4 id="1、tarfile"><a href="#1、tarfile" class="headerlink" title="1、tarfile"></a>1、tarfile</h4><h5 id="（1）读取tar包"><a href="#（1）读取tar包" class="headerlink" title="（1）读取tar包"></a>（1）读取tar包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'cmake-3.17.0.tar.gz'</span>) <span class="keyword">as</span> t:</span><br><span class="line">    <span class="keyword">for</span> member <span class="keyword">in</span> t.getmembers():</span><br><span class="line">        print(member.name)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'cmake-3.17.0.tar.gz'</span>) <span class="keyword">as</span> t:</span><br><span class="line">t.extractall()</span><br><span class="line">t.extract(<span class="string">'cmake-3.17.0/Help'</span>,<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure><p>常用方法说明：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getmembers():获取tar包中的文件列表</span><br><span class="line">member.name:获取tar包中文件的文件名</span><br><span class="line">extract(member, path):提取单个文件</span><br><span class="line">extractall(path, memebers):提取所有的文件</span><br></pre></td></tr></table></figure><h5 id="（2）创建tar包"><a href="#（2）创建tar包" class="headerlink" title="（2）创建tar包"></a>（2）创建tar包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'readme.tar'</span>, mode=<span class="string">'w'</span>) <span class="keyword">as</span> out:</span><br><span class="line">    out.add(<span class="string">'read.txt'</span>)</span><br></pre></td></tr></table></figure><h5 id="（3）读取与创建压缩包"><a href="#（3）读取与创建压缩包" class="headerlink" title="（3）读取与创建压缩包"></a>（3）读取与创建压缩包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'tarfile_add.tar'</span>,mode=<span class="string">'r:gz'</span>) <span class="keyword">as</span> out:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'tarfile_add.tar'</span>,mode=<span class="string">'r:bz2'</span>) <span class="keyword">as</span> out:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="案例4：备份指定文件到压缩包中"><a href="#案例4：备份指定文件到压缩包中" class="headerlink" title="案例4：备份指定文件到压缩包中"></a>案例4：备份指定文件到压缩包中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_file_math</span><span class="params">(filename, patterns)</span>:</span></span><br><span class="line">    <span class="string">'''查找特定类型的文件'''</span></span><br><span class="line">    <span class="keyword">for</span> pattern <span class="keyword">in</span> patterns:</span><br><span class="line">        <span class="keyword">if</span> fnmatch.fnmatch(filename, pattern):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_files</span><span class="params">(root, patterns=[<span class="string">'*'</span>])</span>:</span></span><br><span class="line">    <span class="keyword">for</span> root, dirnames, filenames <span class="keyword">in</span> os.walk(root):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> is_file_math(filename, patterns):</span><br><span class="line">                <span class="keyword">yield</span> os.path.join(root, filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">patterns = [<span class="string">'*.txt'</span>,<span class="string">'*.md'</span>]</span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">'%Y_%m_%d_%H_%M_%S'</span>)</span><br><span class="line">filename = <span class="string">'backup_all_file_&#123;0&#125;.tar.gz'</span>.format(now)</span><br><span class="line"><span class="keyword">with</span> tarfile.open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> find_files(<span class="string">'.'</span>, patterns):</span><br><span class="line">        f.add(item)</span><br></pre></td></tr></table></figure><h4 id="2、zipfile"><a href="#2、zipfile" class="headerlink" title="2、zipfile"></a>2、zipfile</h4><h5 id="（1）读取zip文件"><a href="#（1）读取zip文件" class="headerlink" title="（1）读取zip文件"></a>（1）读取zip文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">demo_zip = zipfile.ZipFile(<span class="string">'read.zip'</span>)</span><br><span class="line">print(demo_zip.namelist())</span><br><span class="line">demo_zip.extractall(<span class="string">'1'</span>)</span><br><span class="line">demo_zip.extract(<span class="string">'a.jpg'</span>,<span class="string">'2'</span>)</span><br></pre></td></tr></table></figure><p>常用方法说明：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">namelist():返回zip文件中包含的所有文件和文件夹的字符串列表</span><br><span class="line">extract(filename, path)：从zip文件中提取单个文件</span><br><span class="line">extractall(path)：从zip文件中提取所有文件</span><br></pre></td></tr></table></figure><h5 id="（2）创建zip文件"><a href="#（2）创建zip文件" class="headerlink" title="（2）创建zip文件"></a>（2）创建zip文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">newZip = zipfile.ZipFile(<span class="string">'new.zip'</span>,mode=<span class="string">'w'</span>)</span><br><span class="line">newZip.write(<span class="string">'a.jpg'</span>)</span><br><span class="line">newZip.close()</span><br></pre></td></tr></table></figure><h5 id="（3）Python命令行调用zipfile"><a href="#（3）Python命令行调用zipfile" class="headerlink" title="（3）Python命令行调用zipfile"></a>（3）Python命令行调用zipfile</h5><p>zipfile模块提供的命令行接口包含的选项：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-l:显示zip格式压缩包中的文件列表</span><br><span class="line">-e:提取zip格式的压缩包</span><br><span class="line">-c:创建zip格式的压缩包</span><br><span class="line">-t:验证文件是不是一个有效的zip格式压缩包</span><br></pre></td></tr></table></figure><p>示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建zip文件</span></span><br><span class="line">python -m zipfile -c new1.zip archive_tar.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看zip文件列表</span></span><br><span class="line">python -m zipfile -l new1.zip</span><br><span class="line">File Name                                             Modified             Size</span><br><span class="line">archive_tar.py                                 <span class="number">2020</span><span class="number">-04</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">32</span>:<span class="number">54</span>          <span class="number">239</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取zip文件到指定目录</span></span><br><span class="line">python -m zipfile -e new1.zip new_dir</span><br></pre></td></tr></table></figure><h4 id="3、shutil创建和读取压缩包"><a href="#3、shutil创建和读取压缩包" class="headerlink" title="3、shutil创建和读取压缩包"></a>3、shutil创建和读取压缩包</h4><p>shutil支持的格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">print(shutil.get_archive_formats())</span><br><span class="line"></span><br><span class="line">[(<span class="string">'bztar'</span>, <span class="string">"bzip2'ed tar-file"</span>), (<span class="string">'gztar'</span>, <span class="string">"gzip'ed tar-file"</span>), (<span class="string">'tar'</span>, <span class="string">'uncompressed tar file'</span>), (<span class="string">'xztar'</span>, <span class="string">"xz'ed tar-file"</span>), (<span class="string">'zip'</span>, <span class="string">'ZIP file'</span>)]</span><br></pre></td></tr></table></figure><h5 id="（1）创建压缩包"><a href="#（1）创建压缩包" class="headerlink" title="（1）创建压缩包"></a>（1）创建压缩包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数1：生成的压缩包文件名</span></span><br><span class="line"><span class="comment"># 参数2：压缩包的格式</span></span><br><span class="line"><span class="comment"># 参数3：压缩的目录</span></span><br><span class="line">shutil.make_archive(<span class="string">'a.jpg'</span>,<span class="string">'gztar'</span>, <span class="string">'ddd'</span>)</span><br></pre></td></tr></table></figure><h5 id="（2）解压"><a href="#（2）解压" class="headerlink" title="（2）解压"></a>（2）解压</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数1：需要解压的压缩包</span></span><br><span class="line"><span class="comment"># 参数2：解压的目录</span></span><br><span class="line">print(shutil.unpack_archive(<span class="string">'a.jpg.tar.gz'</span>,<span class="string">'jpg'</span>))</span><br></pre></td></tr></table></figure><h3 id="七、Python执行外部命令"><a href="#七、Python执行外部命令" class="headerlink" title="七、Python执行外部命令"></a>七、Python执行外部命令</h3><h4 id="1、subprocess模块简介"><a href="#1、subprocess模块简介" class="headerlink" title="1、subprocess模块简介"></a>1、subprocess模块简介</h4><p>这个模块用来创建和管理子进程。它提供了高层次的接口，用来替换os.system()、os.spawn*()、os.popen*()、os.popen2.<em>()和commands.\</em>等模块和函数。</p><p>subprocess提供了一个名为Popen的类启动和设置子进程的参数，由于这个类比较复杂，subprosess还提供了若干便利的函数，这些函数都是对Popen类的封装。</p><h4 id="2、subprocess模块的便利函数"><a href="#2、subprocess模块的便利函数" class="headerlink" title="2、subprocess模块的便利函数"></a>2、subprocess模块的便利函数</h4><h5 id="（1）call"><a href="#（1）call" class="headerlink" title="（1）call"></a>（1）call</h5><p>call函数的定义如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)</span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> subprocess                                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: subprocess.call([<span class="string">'ls'</span>,<span class="string">'-l'</span>])                                                          </span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2049</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">2077</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root   <span class="number">21</span> <span class="number">4</span>月  <span class="number">22</span> <span class="number">16</span>:<span class="number">32</span> os</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 公共</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 模板</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 视频</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 图片</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 文档</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 下载</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 音乐</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 桌面</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">0</span></span><br><span class="line">     </span><br><span class="line">In [<span class="number">3</span>]: subprocess.call(<span class="string">'exit 1'</span>, shell=<span class="literal">True</span>)                                             </span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="（2）check-call"><a href="#（2）check-call" class="headerlink" title="（2）check_call"></a>（2）check_call</h5><p>check_all函数的作用与call函数类似，区别在于异常情况下返回的形式不同。</p><p>对于call函数，工程师通过捕获call命令的返回值判断命令是否执行成功，如果成功则返回0，否则的话返回非0。对于check_call函数，如果执行成功，返回0，如果执行失败，抛出subprocess.CallProseccError异常，示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: subprocess.check_call([<span class="string">'ls'</span>,<span class="string">'-l'</span>])                                                    </span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2049</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">2077</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root   <span class="number">21</span> <span class="number">4</span>月  <span class="number">22</span> <span class="number">16</span>:<span class="number">32</span> os</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 公共</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 模板</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 视频</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 图片</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 文档</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 下载</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 音乐</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">2019</span> 桌面</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: subprocess.check_call(<span class="string">'lsljdl'</span>, shell=<span class="literal">True</span>)                                           </span><br><span class="line">/bin/sh: lsljdl: 未找到命令</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">CalledProcessError                        Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-7</span><span class="number">-885</span>ea94380a9&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 subprocess.check_call('lsljdl', shell=True)</span><br><span class="line"></span><br><span class="line">/usr/local/python3/lib/python3<span class="number">.8</span>/subprocess.py <span class="keyword">in</span> check_call(*popenargs, **kwargs)</span><br><span class="line">    <span class="number">362</span>         <span class="keyword">if</span> cmd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="number">363</span>             cmd = popenargs[<span class="number">0</span>]</span><br><span class="line">--&gt; 364         raise CalledProcessError(retcode, cmd)</span><br><span class="line">    <span class="number">365</span>     <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="number">366</span> </span><br><span class="line"></span><br><span class="line">CalledProcessError: Command <span class="string">'lsljdl'</span> returned non-zero exit status <span class="number">127.</span></span><br></pre></td></tr></table></figure><h5 id="（3）check-output"><a href="#（3）check-output" class="headerlink" title="（3）check_output"></a>（3）check_output</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: output = subprocess.check_output([<span class="string">'df'</span>,<span class="string">'-h'</span>])                                         </span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: print(output.decode())                                                               </span><br><span class="line">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/cl-root   <span class="number">37</span>G  <span class="number">5.1</span>G   <span class="number">32</span>G   <span class="number">14</span>% /</span><br><span class="line">devtmpfs             <span class="number">897</span>M     <span class="number">0</span>  <span class="number">897</span>M    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                <span class="number">912</span>M   <span class="number">84</span>K  <span class="number">912</span>M    <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs                <span class="number">912</span>M  <span class="number">9.0</span>M  <span class="number">903</span>M    <span class="number">1</span>% /run</span><br><span class="line">tmpfs                <span class="number">912</span>M     <span class="number">0</span>  <span class="number">912</span>M    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1           <span class="number">1014</span>M  <span class="number">173</span>M  <span class="number">842</span>M   <span class="number">18</span>% /boot</span><br><span class="line">tmpfs                <span class="number">183</span>M   <span class="number">16</span>K  <span class="number">183</span>M    <span class="number">1</span>% /run/user/<span class="number">42</span></span><br><span class="line">tmpfs                <span class="number">183</span>M     <span class="number">0</span>  <span class="number">183</span>M    <span class="number">0</span>% /run/user/<span class="number">0</span></span><br><span class="line"></span><br><span class="line">                                                                                       </span><br><span class="line">In [<span class="number">10</span>]: lines = output.decode().split(<span class="string">'\n'</span>)                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: lines                                                                           </span><br><span class="line">Out[<span class="number">11</span>]: </span><br><span class="line">[<span class="string">'文件系统             容量  已用  可用 已用% 挂载点'</span>,</span><br><span class="line"> <span class="string">'/dev/mapper/cl-root   37G  5.1G   32G   14% /'</span>,</span><br><span class="line"> <span class="string">'devtmpfs             897M     0  897M    0% /dev'</span>,</span><br><span class="line"> <span class="string">'tmpfs                912M   84K  912M    1% /dev/shm'</span>,</span><br><span class="line"> <span class="string">'tmpfs                912M  9.0M  903M    1% /run'</span>,</span><br><span class="line"> <span class="string">'tmpfs                912M     0  912M    0% /sys/fs/cgroup'</span>,</span><br><span class="line"> <span class="string">'/dev/sda1           1014M  173M  842M   18% /boot'</span>,</span><br><span class="line"> <span class="string">'tmpfs                183M   16K  183M    1% /run/user/42'</span>,</span><br><span class="line"> <span class="string">'tmpfs                183M     0  183M    0% /run/user/0'</span>,</span><br><span class="line"> <span class="string">''</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">1</span>:<span class="number">-1</span>]: </span><br><span class="line">    ...:     <span class="keyword">if</span> line: </span><br><span class="line">    ...:         print(line.split()[<span class="number">-2</span>]) </span><br><span class="line">    ...:                                                                                 t</span><br><span class="line"><span class="number">14</span>%</span><br><span class="line"><span class="number">0</span>%</span><br><span class="line"><span class="number">1</span>%</span><br><span class="line"><span class="number">1</span>%</span><br><span class="line"><span class="number">0</span>%</span><br><span class="line"><span class="number">18</span>%</span><br><span class="line"><span class="number">1</span>%</span><br><span class="line"><span class="number">0</span>%</span><br></pre></td></tr></table></figure><h4 id="3、subprocess模块的Popen类"><a href="#3、subprocess模块的Popen类" class="headerlink" title="3、subprocess模块的Popen类"></a>3、subprocess模块的Popen类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmd</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    p = subprocess.Popen(cmd, shell=<span class="literal">True</span>,</span><br><span class="line">                         stdin=subprocess.PIPE,</span><br><span class="line">                         stdout=subprocess.PIPE,</span><br><span class="line">                         stderr=subprocess.PIPE)</span><br><span class="line">    stdout, stderr = p.communicate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p.returncode, stderr</span><br><span class="line">    <span class="keyword">return</span> p.returncode, stdout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">execute_cmd(<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure><h3 id="八、综合案例：使用Python部署MongoDB"><a href="#八、综合案例：使用Python部署MongoDB" class="headerlink" title="八、综合案例：使用Python部署MongoDB"></a>八、综合案例：使用Python部署MongoDB</h3><p>看一个综合案例，使用Python不俗MongoDB数据库。在这个例子中，将会用到各种与系统管理相关的标准库，包括os、os.path、shutil、tarfile和subprocess模块。</p><blockquote><p>假设当前目录下存在一个MongoDB安装包，我们的Python程序需要将他解压到当前目录的mongo目录下，并且当前目录创建一个mongodata目录用老保存MongoDB的数据库文件。</p></blockquote><p>在部署MongoDB数据库之前，当前目录下的文件结构如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── auto_install_mongodb.py</span><br><span class="line">└── ./mongodb-linux-x86_64-rhel70-4.2.3.tgz</span><br></pre></td></tr></table></figure><p>程序部署完成后，当前目录的文件结构大致如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ./auto_install_mongodb.py</span><br><span class="line">├── ./mongo</span><br><span class="line">│   ├── ./mongo/bin</span><br><span class="line">│   │   ├── ./mongo/bin/bsondump</span><br><span class="line">│   │   ├── ./mongo/bin/install_compass</span><br><span class="line">│   │   ├── ./mongo/bin/mongo</span><br><span class="line">│   │   ├── ./mongo/bin/mongod</span><br><span class="line">│   │   ├── ./mongo/bin/mongodump</span><br><span class="line">│   │   ├── ./mongo/bin/mongoexport</span><br><span class="line">│   │   ├── ./mongo/bin/mongofiles</span><br><span class="line">│   │   ├── ./mongo/bin/mongoimport</span><br><span class="line">│   │   ├── ./mongo/bin/mongoreplay</span><br><span class="line">│   │   ├── ./mongo/bin/mongorestore</span><br><span class="line">│   │   ├── ./mongo/bin/mongos</span><br><span class="line">│   │   ├── ./mongo/bin/mongostat</span><br><span class="line">│   │   └── ./mongo/bin/mongotop</span><br><span class="line">│   ├── ./mongo/LICENSE-Community.txt</span><br><span class="line">│   ├── ./mongo/MPL-2</span><br><span class="line">│   ├── ./mongo/README</span><br><span class="line">│   ├── ./mongo/THIRD-PARTY-NOTICES</span><br><span class="line">│   └── ./mongo/THIRD-PARTY-NOTICES.gotools</span><br><span class="line">├── ./mongodata</span><br><span class="line">│   ├── ./mongodata/collection-0-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/collection-2-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/collection-4-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/diagnostic.data</span><br><span class="line">│   │   ├── ./mongodata/diagnostic.data/metrics.2020-04-27T10-17-57Z-00000</span><br><span class="line">│   │   └── ./mongodata/diagnostic.data/metrics.interim</span><br><span class="line">│   ├── ./mongodata/index-1-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/index-3-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/index-5-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/index-6-4813754152483353608.wt</span><br><span class="line">│   ├── ./mongodata/journal</span><br><span class="line">│   │   ├── ./mongodata/journal/WiredTigerLog.0000000001</span><br><span class="line">│   │   ├── ./mongodata/journal/WiredTigerPreplog.0000000001</span><br><span class="line">│   │   └── ./mongodata/journal/WiredTigerPreplog.0000000002</span><br><span class="line">│   ├── ./mongodata/_mdb_catalog.wt</span><br><span class="line">│   ├── ./mongodata/mongod.lock</span><br><span class="line">│   ├── ./mongodata/mongod.log</span><br><span class="line">│   ├── ./mongodata/sizeStorer.wt</span><br><span class="line">│   ├── ./mongodata/storage.bson</span><br><span class="line">│   ├── ./mongodata/WiredTiger</span><br><span class="line">│   ├── ./mongodata/WiredTigerLAS.wt</span><br><span class="line">│   ├── ./mongodata/WiredTiger.lock</span><br><span class="line">│   ├── ./mongodata/WiredTiger.turtle</span><br><span class="line">│   └── ./mongodata/WiredTiger.wt</span><br><span class="line">└── ./mongodb-linux-x86_64-rhel70-4.2.3.tgz</span><br></pre></td></tr></table></figure><p>MongoDB下载地址如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-s390x-rhel72-4.3.3.tgz</span><br></pre></td></tr></table></figure><p>MongoDB是当下最流行的文档数据库，具有很好的易用性。启动一个MongoDB数据库实例，只需要执行一下几条shell命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf mongodb-linux-x86_64-rhel70-4.2.3.tgz</span><br><span class="line">mv mongodb-linux-x86_64-rhel70-4.2.3 mongo</span><br><span class="line">mkdir mongodata</span><br><span class="line">mongo/bin/mongod --fork --logpath mongodata/mongod.log --dbpath mongodata</span><br></pre></td></tr></table></figure><blockquote><p>这里给出的shell命令，只是为了便于不熟悉MongoDB的人了解MongoDB数据库的启动过程，还有很多的情况没有考虑。例如，要将当前目录下的MongoDB安装包解压到当前目录下的mongo目录中，但是当前目录下已经存在一个名为mongo的目录，则会报错</p></blockquote><p>下面的程序时使用Python部署MongoDB数据库的完整代码，这段程序综合应用了很多与系统管理相关的模块。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmd</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    <span class="string">'''执行shell命令'''</span></span><br><span class="line">    p = subprocess.Popen(cmd, shell=<span class="literal">True</span>,</span><br><span class="line">                         stdin=subprocess.PIPE,</span><br><span class="line">                         stdout=subprocess.PIPE,</span><br><span class="line">                         stderr=subprocess.PIPE)</span><br><span class="line">    stdout, stderr = p.communicate()</span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p.returncode, stderr</span><br><span class="line">    <span class="keyword">return</span> p.returncode, stdout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpackage_mongo</span><span class="params">(package, package_dir)</span>:</span></span><br><span class="line">    unpackage_dir = os.path.splitext(package)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(unpackage_dir):</span><br><span class="line">        shutil.rmtree(unpackage_dir)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(package_dir):</span><br><span class="line">        shutil.rmtree(package_dir)</span><br><span class="line">    <span class="comment"># 解压</span></span><br><span class="line">    t = tarfile.open(package, <span class="string">'r:gz'</span>)</span><br><span class="line">    t.extractall(<span class="string">'.'</span>)</span><br><span class="line">    print(<span class="string">'tar is ok.'</span>)</span><br><span class="line">    <span class="comment"># 重命名mongodb-linux-x86_64-rhel70-4.2.3为mongo</span></span><br><span class="line">    shutil.move(unpackage_dir, <span class="string">'mongo'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_datadir</span><span class="params">(data_dir)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(data_dir):</span><br><span class="line">        shutil.rmtree(data_dir)</span><br><span class="line">    os.mkdir(data_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_mongod_commamd</span><span class="params">(package_dir, data_dir, logfile)</span>:</span></span><br><span class="line">    mongod = os.path.join(package_dir, <span class="string">'bin'</span>, <span class="string">'mongod'</span>)</span><br><span class="line">    mongod_format = <span class="string">"""&#123;0&#125; --fork --dbpath &#123;1&#125; --logpath &#123;2&#125;"""</span></span><br><span class="line">    <span class="keyword">return</span> mongod_format.format(mongod, data_dir, logfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_mongod</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    returncode, out = execute_cmd(cmd)</span><br><span class="line">    <span class="keyword">if</span> returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">'execute &#123;0&#125; error:&#123;1&#125;'</span>.format(cmd, out.decode()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'execute &#123;0&#125; sucessfully.'</span>.format(cmd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    package = <span class="string">'mongodb-linux-x86_64-rhel70-4.2.3.tgz'</span></span><br><span class="line">    cur_dir = os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line">    package_dir = os.path.join(cur_dir, <span class="string">'mongo'</span>)</span><br><span class="line">    data_dir = os.path.join(cur_dir, <span class="string">'mongodata'</span>)</span><br><span class="line">    logfile = os.path.join(data_dir, <span class="string">'mongod.log'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(package):</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">'&#123;0&#125; not found.'</span>.format(package))</span><br><span class="line"></span><br><span class="line">    unpackage_mongo(package, package_dir)</span><br><span class="line">    create_datadir(data_dir)</span><br><span class="line">    start_mongod(format_mongod_commamd(package_dir, data_dir, logfile))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>代码说明：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在这段过程中，我们首先在main函数中定义了几个变量，包括当前目录的路径，MongoDB二进制文件所在的路径、MongoDB数据目录所在的路径，以及MongoDB的日志问紧啊</span><br><span class="line"></span><br><span class="line">随后，我们判断MongoDB的安装包是否存在，如果不存在，则通过抛出SystemExit异常的方式结束程序</span><br><span class="line"></span><br><span class="line">在unpackage_mongo函数中，我们通过Python程序得到MongoDB安装包解压以后的目录。如果目录已经存在，则删除该目录。随后，我们使用tarfile解压MongoDB数据库，解压完成后，将命令重命名为mongo目录</span><br><span class="line"></span><br><span class="line">在create_datadir目录红，我们首先判断MongoDB数据库目录是否存在，如果存在，则删除该目录，随后在创建MongoDB数据库目录</span><br><span class="line"></span><br><span class="line">在start_mongod函数中，我们执行MongoDB数据库的启动命令启动MongoDB数据库。为了在Python代码中执行shell命令，我们使用了subprocess库，我们将subprocess库执行shell命令的瑞吉封装成execute_cmd函数，在执行shell命令时，直接调用该函数即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型之字典</title>
    <link href="http://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8.html"/>
    <id>http://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-27T14:41:05.001Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python数据类型之字典"><a href="#Python数据类型之字典" class="headerlink" title="Python数据类型之字典"></a>Python数据类型之字典</h4><h4 id="字典的语法"><a href="#字典的语法" class="headerlink" title="字典的语法"></a>字典的语法</h4><p>键值对形式，键值之间用“:”分隔，键值对包含在一个”{}“里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#之前的数据类型都是与变量所关联</span></span><br><span class="line">name = <span class="string">'bily'</span> <span class="comment">#字符串类型</span></span><br><span class="line">name = <span class="number">89</span>  <span class="comment">#数字类型</span></span><br><span class="line">key = <span class="number">88.8</span></span><br><span class="line">list = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  <span class="comment">#列表类型</span></span><br><span class="line">tuple = (<span class="number">6</span>,<span class="number">4</span>,<span class="number">68</span>)  <span class="comment">#元组</span></span><br><span class="line"><span class="comment">#字典的例子</span></span><br><span class="line"><span class="comment">#字典存放的数据更大</span></span><br><span class="line"><span class="comment">#平常查字典的时候目录和页数是对应的</span></span><br><span class="line"><span class="comment">#在python中叫做键和值</span></span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br></pre></td></tr></table></figure><p>键是唯一、无序的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>,<span class="string">'age'</span>:<span class="string">'33'</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'33'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;  <span class="comment">#后面的替换了前面的</span></span><br></pre></td></tr></table></figure><p>键值可以是数字、字符串、元组，一般用于字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="number">1</span>:<span class="number">101</span>,<span class="number">2</span>:<span class="number">102</span>&#125;</span><br><span class="line">print(dict1)</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">101</span>, <span class="number">2</span>: <span class="number">102</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="简单的字典"><a href="#简单的字典" class="headerlink" title="简单的字典"></a>简单的字典</h4><p>字典的访问：字典名称[键]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义字典</span></span><br><span class="line">dict2 = &#123;<span class="string">'河北'</span>:<span class="string">'邯郸'</span>,<span class="string">'甘肃'</span>:<span class="string">'兰州'</span>,<span class="string">'四川'</span>:<span class="string">'成都'</span>&#125;</span><br><span class="line"><span class="comment">#对字典进行访问（取值）===&gt;   值=字典名称[键]</span></span><br><span class="line">hd = dict2[<span class="string">'河北'</span>]</span><br><span class="line">print(hd)</span><br><span class="line">邯郸</span><br></pre></td></tr></table></figure><p>添加键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加键值对（字典的数据）</span></span><br><span class="line">dict2[<span class="string">'山西'</span>] = <span class="string">'太原'</span></span><br><span class="line">print(dict2)</span><br><span class="line">&#123;<span class="string">'河北'</span>: <span class="string">'邯郸'</span>, <span class="string">'甘肃'</span>: <span class="string">'兰州'</span>, <span class="string">'四川'</span>: <span class="string">'成都'</span>, <span class="string">'山西'</span>: <span class="string">'太原'</span>&#125;</span><br></pre></td></tr></table></figure><p>修改字典的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改字典的值</span></span><br><span class="line">dict2[<span class="string">'河北'</span>] = <span class="string">'邢台'</span></span><br><span class="line">print(dict2)</span><br><span class="line">&#123;<span class="string">'河北'</span>: <span class="string">'邢台'</span>, <span class="string">'甘肃'</span>: <span class="string">'兰州'</span>, <span class="string">'四川'</span>: <span class="string">'成都'</span>, <span class="string">'山西'</span>: <span class="string">'太原'</span>&#125;</span><br></pre></td></tr></table></figure><p>删除键值对：del</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除字典的键值对</span></span><br><span class="line"><span class="keyword">del</span> dict2[<span class="string">'四川'</span>]</span><br><span class="line">print(dict2)</span><br><span class="line">&#123;<span class="string">'河北'</span>: <span class="string">'邢台'</span>, <span class="string">'甘肃'</span>: <span class="string">'兰州'</span>, <span class="string">'山西'</span>: <span class="string">'太原'</span>&#125;</span><br></pre></td></tr></table></figure><p>除了这个横向排序，还可以纵向排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'张三'</span>,</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'男'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="string">'20'</span>,</span><br><span class="line">    <span class="string">'phone'</span>:<span class="string">'13813812138'</span></span><br><span class="line">&#125;</span><br><span class="line">print(student)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'张三'</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>, <span class="string">'phone'</span>: <span class="string">'13813812138'</span>&#125;</span><br><span class="line"></span><br><span class="line">shell = &#123;</span><br><span class="line">    <span class="string">'pwd'</span>:<span class="string">'显示当前目录'</span>,</span><br><span class="line">    <span class="string">'cd'</span>:<span class="string">'切换目录'</span>,</span><br><span class="line">    <span class="string">'mv'</span>:<span class="string">'移动文件或目录'</span>,</span><br><span class="line">    <span class="string">'mkdir'</span>:<span class="string">'创建目录'</span>,</span><br><span class="line">    <span class="string">'cp'</span>:<span class="string">'复制文件或目录'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> shell:</span><br><span class="line">    print(i+<span class="string">'：'</span>+shell[i])</span><br><span class="line">pwd：显示当前目录</span><br><span class="line">cd：切换目录</span><br><span class="line">mv：移动文件或目录</span><br><span class="line">mkdir：创建目录</span><br><span class="line">cp：复制文件或目录</span><br></pre></td></tr></table></figure><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><p>遍历所有的键值对：</p><p>key</p><p>value</p><p>items()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个字典</span></span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line"><span class="comment">#遍历字典：键值对的集合、键的集合、值的集合</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dict.items():</span><br><span class="line">    print(key+<span class="string">":"</span>+value)</span><br><span class="line">name:老周</span><br><span class="line">age:<span class="number">29</span></span><br><span class="line">job:程序员</span><br><span class="line"><span class="comment">#字典常用的函数</span></span><br><span class="line">print(dict.items())</span><br><span class="line">print(dict.keys())</span><br><span class="line">print(dict.values())</span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'老周'</span>), (<span class="string">'age'</span>, <span class="string">'29'</span>), (<span class="string">'job'</span>, <span class="string">'程序员'</span>)])</span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'job'</span>])</span><br><span class="line">dict_values([<span class="string">'老周'</span>, <span class="string">'29'</span>, <span class="string">'程序员'</span>])</span><br></pre></td></tr></table></figure><p>按顺序遍历字典中的所有的键：sorteed()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将字典的键排序</span></span><br><span class="line">print(sorted(dict1.keys()))</span><br><span class="line">print(sorted(dict1.values()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> sorted(dict1.keys()):</span><br><span class="line">    print(info,end=<span class="string">" "</span>)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> sorted(dict1.values()):</span><br><span class="line">    print(info,end=<span class="string">" "</span>)</span><br><span class="line">[<span class="string">'age'</span>, <span class="string">'job'</span>, <span class="string">'name'</span>]</span><br><span class="line">[<span class="string">'29'</span>, <span class="string">'程序员'</span>, <span class="string">'老周'</span>]</span><br><span class="line">age job name </span><br><span class="line"></span><br><span class="line"><span class="number">29</span> 程序员 老周</span><br></pre></td></tr></table></figure><p>遍历字典中所有的值：values()</p><p><strong>其他方法（扩展）</strong></p><p>计算字典元素个数，即键的总数：len(dict)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字典元素的个数</span></span><br><span class="line">print(len(dict))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>返回一个字典的浅复制：dict.copy()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个空字典</span></span><br><span class="line">dict1 = &#123;&#125;</span><br><span class="line"><span class="comment">#复制字典</span></span><br><span class="line">dict1 = dict.copy()</span><br><span class="line">print(dict1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br></pre></td></tr></table></figure><p>返回并删除字典中的最后一对键和值：popitem()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">print(dict.popitem())</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br><span class="line">(<span class="string">'job'</span>, <span class="string">'程序员'</span>)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>&#125;</span><br><span class="line"><span class="comment">#删除指定的值</span></span><br><span class="line">print(dict.pop(<span class="string">'age'</span>))</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br><span class="line"><span class="number">29</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br></pre></td></tr></table></figure><p>删除字典内所有元素：dict(clear)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict.clear()</span><br><span class="line">print(dict)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="字典的嵌套"><a href="#字典的嵌套" class="headerlink" title="字典的嵌套"></a>字典的嵌套</h4><p>列表里嵌套字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义字典</span></span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">dict1 = &#123;<span class="string">'age'</span>:<span class="string">'29'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">'name'</span>:<span class="string">'老周'</span>,<span class="string">'job'</span>:<span class="string">'程序员'</span>&#125;</span><br><span class="line"><span class="comment">#列表里嵌套字典</span></span><br><span class="line">list = [dict,dict1,dict2]</span><br><span class="line">print(list)</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="string">'29'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'老周'</span>, <span class="string">'job'</span>: <span class="string">'程序员'</span>&#125;]</span><br></pre></td></tr></table></figure><p>字典里嵌套列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict3 = &#123;<span class="string">'pet'</span>:[<span class="string">'cat'</span>,<span class="string">'dog'</span>,<span class="string">'duck'</span>]&#125;</span><br><span class="line">print(dict3</span><br><span class="line">&#123;<span class="string">'pet'</span>: [<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'duck'</span>]&#125;</span><br></pre></td></tr></table></figure><p>字典里嵌套字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dict4 = &#123;</span><br><span class="line">    <span class="string">'age'</span>:&#123;<span class="string">'girl'</span>:<span class="string">'18'</span>,<span class="string">'boy'</span>:<span class="string">'20'</span>&#125;,</span><br><span class="line">    <span class="string">'job'</span>:&#123;<span class="string">'man'</span>:<span class="string">'IT'</span>,<span class="string">'women'</span>:<span class="string">'db'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(dict4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dict4.items():</span><br><span class="line">    print(<span class="string">'key:'</span>+key,end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> value.items():</span><br><span class="line">        print(v)</span><br><span class="line">&#123;<span class="string">'age'</span>: &#123;<span class="string">'girl'</span>: <span class="string">'18'</span>, <span class="string">'boy'</span>: <span class="string">'20'</span>&#125;, <span class="string">'job'</span>: &#123;<span class="string">'man'</span>: <span class="string">'IT'</span>, <span class="string">'women'</span>: <span class="string">'db'</span>&#125;&#125;</span><br><span class="line">key:age (<span class="string">'girl'</span>, <span class="string">'18'</span>)</span><br><span class="line">(<span class="string">'boy'</span>, <span class="string">'20'</span>)</span><br><span class="line">key:job (<span class="string">'man'</span>, <span class="string">'IT'</span>)</span><br><span class="line">(<span class="string">'women'</span>, <span class="string">'db'</span>)</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1、创建两个字典来表示老师，然后将这两个字典存储到一个名为person的列表中。遍历这个列表，将其中每个老师的信息都打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">teacher1 = &#123;</span><br><span class="line">    <span class="string">'语文'</span>:<span class="string">'张三'</span>,</span><br><span class="line">    <span class="string">'数学'</span>:<span class="string">'李四'</span>,</span><br><span class="line">    <span class="string">'英语'</span>:<span class="string">'王五'</span>,</span><br><span class="line">&#125;</span><br><span class="line">teacher2 = &#123;</span><br><span class="line">    <span class="string">'物理'</span>:<span class="string">'赵六'</span>,</span><br><span class="line">    <span class="string">'历史'</span>:<span class="string">'葛七'</span>,</span><br><span class="line">    <span class="string">'政治'</span>:<span class="string">'周八'</span></span><br><span class="line">&#125;</span><br><span class="line">person = [teacher1,teacher2]</span><br><span class="line"><span class="keyword">for</span> teacher <span class="keyword">in</span> person:</span><br><span class="line">    print(teacher)</span><br><span class="line">&#123;<span class="string">'语文'</span>: <span class="string">'张三'</span>, <span class="string">'数学'</span>: <span class="string">'李四'</span>, <span class="string">'英语'</span>: <span class="string">'王五'</span>&#125;</span><br><span class="line">&#123;<span class="string">'物理'</span>: <span class="string">'赵六'</span>, <span class="string">'历史'</span>: <span class="string">'葛七'</span>, <span class="string">'政治'</span>: <span class="string">'周八'</span>&#125;</span><br></pre></td></tr></table></figure><p>2、创建多个字典，每个字典都使用一种宠物的名字命名；在每个字典中，包含宠物的类型和主人的名字。将这些字典存储在一个名为pets的列表中，再遍历该列表，将宠物的信息都打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">dog = &#123;</span><br><span class="line">    <span class="string">'小型犬'</span>:<span class="string">'贵宾犬'</span>,</span><br><span class="line">    <span class="string">'中型犬'</span>:<span class="string">'柯基犬'</span>,</span><br><span class="line">    <span class="string">'大型犬'</span>:<span class="string">'金毛犬'</span></span><br><span class="line">&#125;</span><br><span class="line">cat = &#123;</span><br><span class="line">    <span class="string">'小型'</span>:<span class="string">'新加坡猫'</span>,</span><br><span class="line">    <span class="string">'中型'</span>:<span class="string">'波斯猫'</span>,</span><br><span class="line">    <span class="string">'大型'</span>:<span class="string">'沙特尔猫'</span></span><br><span class="line">&#125;</span><br><span class="line">pig = &#123;</span><br><span class="line">    <span class="string">'华北型'</span>:<span class="string">'东北民猪'</span>,</span><br><span class="line">    <span class="string">'华南型'</span>:<span class="string">'海南猪'</span>,</span><br><span class="line">    <span class="string">'江海型'</span>:<span class="string">'太湖猪'</span></span><br><span class="line">&#125;</span><br><span class="line">pets = [dog,cat,pig]</span><br><span class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">    print(pet)</span><br><span class="line">&#123;<span class="string">'小型犬'</span>: <span class="string">'贵宾犬'</span>, <span class="string">'中型犬'</span>: <span class="string">'柯基犬'</span>, <span class="string">'大型犬'</span>: <span class="string">'金毛犬'</span>&#125;</span><br><span class="line">&#123;<span class="string">'小型'</span>: <span class="string">'新加坡猫'</span>, <span class="string">'中型'</span>: <span class="string">'波斯猫'</span>, <span class="string">'大型'</span>: <span class="string">'沙特尔猫'</span>&#125;</span><br><span class="line">&#123;<span class="string">'华北型'</span>: <span class="string">'东北民猪'</span>, <span class="string">'华南型'</span>: <span class="string">'海南猪'</span>, <span class="string">'江海型'</span>: <span class="string">'太湖猪'</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python生态工具</title>
    <link href="http://pdxblog.top/Python%E7%94%9F%E6%80%81%E5%B7%A5%E5%85%B7.html"/>
    <id>http://pdxblog.top/Python%E7%94%9F%E6%80%81%E5%B7%A5%E5%85%B7.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-27T14:45:09.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python生态工具"><a href="#Python生态工具" class="headerlink" title="Python生态工具"></a>Python生态工具</h2><h3 id="一、Python内置小工具"><a href="#一、Python内置小工具" class="headerlink" title="一、Python内置小工具"></a>一、Python内置小工具</h3><h4 id="1-1、-1秒钟启动一个下载服务器"><a href="#1-1、-1秒钟启动一个下载服务器" class="headerlink" title="1.1、 1秒钟启动一个下载服务器"></a>1.1、 1秒钟启动一个下载服务器</h4><p>在实际工作中，时常会有这样的一个需求：将文件传给其他同事。将文件传给同事本身并不是一个很繁 琐的工作，现在的聊天工具一般都支持文件传输。但是，如果需要传送的文件较多，操作起来就会比较 麻烦。此外，如果文件在远程的服务器上，则需要先将远程服务器的文件下载到本地，然后再通过聊天 工具传给同事。再或者，你并不是特别清楚要传哪几个文件给同事，所以，你们需要进行交流，而交流 的时间成本是比较高的，会降低办事效率。</p><p>此时，如果你知道Python内置了一个下载服务器就能够显著提升效率了。例如，你的同事要让你传的文 件位于某一个目录下，那么，你可以进入这个目录，然后执行下面的命令启动一个下载服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p>在Python 3中，由于对系统库进行了重新整理，因此，使用方式会有不同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>执行上面的命令就会在当前目录下启动一个文件下载服务器，默认打开8000端口。完成以后，只需要将 IP和端口告诉同事，让同事自己去操作即可，非常方便高效。</p><p>使用浏览器访问Python启动的下载服务器，可以看到一个类似于FTP下载的界面，这个时候单击文件下 载即可。通过这种方式传输文件，可以降低大家的沟通成本，提高文件传输的效率。</p><p>上面使用的Python语句，从工作原理来说，仅仅是启动了一个Python内置的Web服务器。如果当前目 录下存在一个名为index.html的文件，则默认显示该文件的内容。如果当前目录下不存在这样一个文 件，则默认显示当前目录下的文件列表，也就是大家看到的下载服务器。 </p><h4 id="1-2、字符串转换为JSON"><a href="#1-2、字符串转换为JSON" class="headerlink" title="1.2、字符串转换为JSON"></a>1.2、字符串转换为JSON</h4><p>JSON是一种轻量级的数据交换格式，易于人类阅读和编写，同时也易于机器解析和生成。由于JSON的 诸多优点，已被广泛使用在各个系统中。JSON使用越广泛，需要将JSON字符串转换为JSON对象的需求 就越频繁。</p><p>例如，在工作过程中，我们的系统会调用底层服务的API。底层服务的API一般都是以JSON的格式返 回，为了便于问题追踪，我们会将API返回的JSON转换为字符串记录到日志文件中。当需要分析问题 时，就需要将日志文件中的JSON字符串拿出来进行分析。这个时候，需要将一个JSON字符串转换为 JSON对象，以提高日志的可读性。</p><p>这个需求十分常见，以至于使用搜索引擎搜索”JSON”，处于搜索结果的第一项便是“在线JSON格式化工 具”。除了打开浏览器，使用在线JSON格式化工具以外，我们也可以使用命令行终端的Python解释器来 解析JSON串，如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]<span class="comment"># echo '&#123;"address": &#123;"province": "zhejiang", "city": "hangzhou"&#125;, "name": "lmx", "sex": "male"&#125;' | python -m json.tool </span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"address"</span>: </span><br><span class="line">        <span class="string">"city"</span>: <span class="string">"hangzhou"</span>,</span><br><span class="line">       <span class="string">"province"</span>: <span class="string">"zhejiang</span></span><br><span class="line"><span class="string">   &#125;,</span></span><br><span class="line"><span class="string">   "</span>name<span class="string">": "</span>lmx<span class="string">"</span></span><br><span class="line"><span class="string">   "</span>sex<span class="string">": "</span>male<span class="string">"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>使用命令行解释器解析JSON串非常方便，而且，为了便于阅读，该工具还会自动将转换的结果进行对 齐和格式化。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]<span class="comment"># echo '&#123;"address": &#123;"province": "zhejiang", "city":</span></span><br><span class="line"><span class="string">"hangzhou"</span>&#125;, <span class="string">"name"</span>: <span class="string">"lmx"</span>, <span class="string">"sex"</span>: <span class="string">"male"</span>&#125;<span class="string">' | python -m json.tool</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"address": &#123;</span></span><br><span class="line"><span class="string">"city": "hangzhou",</span></span><br><span class="line"><span class="string">"province": "zhejiang"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"name": "lmx",</span></span><br><span class="line"><span class="string">"sex": "male"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="1-3、检查第三方库是否正常安装"><a href="#1-3、检查第三方库是否正常安装" class="headerlink" title="1.3、检查第三方库是否正常安装"></a>1.3、检查第三方库是否正常安装</h4><p>安装完Python的第三方库以后，如何确认这个库已经正确安装了呢？答案很简单，只需要尝试进行 import导入即可。如果导入没有任何错误，则认为安装成功；如果导入失败，则认为安装失败。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]<span class="comment"># python</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.5</span> (default, Oct <span class="number">30</span> <span class="number">2018</span>, <span class="number">23</span>:<span class="number">45</span>:<span class="number">53</span>)</span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-36</span>)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>验证Python的第三方库是否安装成功，本身也是一件很简单的事情，但是，如果我们使用脚本对大批量 的服务器进行自动部署，又应该如何验证第三方库安装成功了呢？肯定不能登录每一台服务器进行验 证。这个时候，我们可以使用Python解释器的-c参数快速地执行import语句，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]<span class="comment"># python -c "import paramiko"</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named paramiko</span><br></pre></td></tr></table></figure><h3 id="二、pip高级用法"><a href="#二、pip高级用法" class="headerlink" title="二、pip高级用法"></a>二、pip高级用法</h3><p>为了便于用户安装和管理第三方库和软件，越来越多的编程语言拥有自己的包管理工具，如nodejs的 npm，ruby的gem。Python也不例外，现在Python生态主流的包管理工具是pip</p><h4 id="2-1、pip介绍"><a href="#2-1、pip介绍" class="headerlink" title="2.1、pip介绍"></a>2.1、pip介绍</h4><p>pip是一个用来安装和管理Python包的工具，是easy_install的替代品，如果读者使用的是Python 2.7.9+或Python 3.4+版本的Python，则已经内置了pip，无须安装直接使用即可。如果系统中没有安装 pip，也可以手动安装</p><h4 id="2-2、python3安装pip"><a href="#2-2、python3安装pip" class="headerlink" title="2.2、python3安装pip"></a>2.2、python3安装pip</h4><blockquote><p><strong>方法1：python33安装完成后默认已经带有pip3</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle bin]<span class="comment"># pip3 -V</span></span><br><span class="line">pip 19.2.3 from /usr/<span class="built_in">local</span>/python38/lib/python3.8/site-packages/pip (python</span><br><span class="line">3.8)</span><br><span class="line">[root@oracle bin]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/python38/bin</span><br></pre></td></tr></table></figure><p>你可以用以下命令,创建软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python38/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><blockquote><p><strong>方法2：使用以下方法重新安装pip插件</strong></p></blockquote><p>下载get-pip.py脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/3.2/get-pip.py</span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 get-pip.py</span><br></pre></td></tr></table></figure><p>python3创建pip3索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/python3.6.1/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><p>pip之所以能够成为最流行的包管理工具，并不是因为它被Python官方作为默认的包管理器，而是因为 它自身的诸多优点。pip的优点有：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip提供了丰富的功能，其竞争对手easy_install则只支持安装，没有提供卸载和显示已安装列表的功</span><br><span class="line">能；</span><br><span class="line">pip能够很好地支持虚拟环境；</span><br><span class="line">pip可以通过requirements.txt集中管理依赖；</span><br><span class="line">pip能够处理二进制格式(.whl)；</span><br><span class="line">pip是先下载后安装，如果安装失败，也会清理干净，不会留下一个中间状态。</span><br></pre></td></tr></table></figure><p>如果用户没有将软件打包上传到pypi.python.org，则无法使用pip进行安装。对于这种情况，Python生 态也有标准的做法，例如，我们尝试从源码安装paramiko。需要注意的是，我们也可以通过pip安装 paramiko的，这里只是为了演示Python生态中源码安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/paramiko/paramiko.git</span><br><span class="line">$ <span class="built_in">cd</span> paramiko</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><h4 id="2-3、给pip3重命名"><a href="#2-3、给pip3重命名" class="headerlink" title="2.3、给pip3重命名"></a>2.3、给pip3重命名</h4><p>切换至家目录，通过.bashrc添加别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle bin]<span class="comment"># cd ~</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim .bashrc</span></span><br><span class="line"><span class="built_in">alias</span> pip=pip3</span><br><span class="line">[root@localhost ~]<span class="comment"># source .bashrc</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pip -V</span></span><br><span class="line">pip 19.2.3 from /usr/<span class="built_in">local</span>/python38/lib/python3.8/site-packages/pip (python</span><br><span class="line">3.8)</span><br></pre></td></tr></table></figure><h4 id="2-4、pip3常用命令"><a href="#2-4、pip3常用命令" class="headerlink" title="2.4、pip3常用命令"></a>2.4、pip3常用命令</h4><table><thead><tr><th>子命令</th><th>解释说明</th></tr></thead><tbody><tr><td>install</td><td>安装软件包</td></tr><tr><td>download</td><td>下载软件包</td></tr><tr><td>uninstall</td><td>卸载安装包</td></tr><tr><td>freeze</td><td>按照requirements格式输出安装包，可以到其他服务器上执行pip install -r requirements.txt直接安装软件</td></tr><tr><td>list</td><td>列出当前系统中的安装包</td></tr><tr><td>show</td><td>查看安装包的信息，包括版本、依赖、许可证、作者、主页等信息</td></tr><tr><td>check</td><td>检查安装包依赖是否完整</td></tr><tr><td>search</td><td>查找安装包</td></tr><tr><td>wheel</td><td>打包软件到wheel格式</td></tr><tr><td>hash</td><td>计算安装包的hash值</td></tr><tr><td>completion</td><td>生成命令补全配置</td></tr><tr><td>help</td><td>获取pip和子命令的帮助信息</td></tr></tbody></table><h4 id="2-5、加速pip安装的技巧"><a href="#2-5、加速pip安装的技巧" class="headerlink" title="2.5、加速pip安装的技巧"></a>2.5、加速pip安装的技巧</h4><p>如果大家使用Python的时间比较长的话，会发现Python安装的一个问题，即pypi.python.org不是特别 稳定，有时候会很慢，甚至处于完全不可用的状态。这个问题有什么好办法可以解决呢？根据笔者的经 验，至少有两种不同的方法。</p><h5 id="1、使用豆瓣或阿里云的源加速软件安装"><a href="#1、使用豆瓣或阿里云的源加速软件安装" class="headerlink" title="1、使用豆瓣或阿里云的源加速软件安装"></a>1、使用豆瓣或阿里云的源加速软件安装</h5><p>访问pypi.python.org不稳定的主要原因是因为网络不稳定，如果我们从网络稳定的服务器下载安装 包，问题就迎刃而解了。我们国内目前有多个pypi镜像，推荐使用豆瓣的镜像源或阿里的镜像源。如果 要使用第三方的源，只需要在安装时，通过pip命令的-i选项指定镜像源即可。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple/ flask</span><br></pre></td></tr></table></figure><p>每次都要指定镜像源的地址比较麻烦，我们也可以修改pip的配置文件，将镜像源写入配置文件中。对 于Linux系统来说，需要创建～/.pip/pip.conf文件，然后在文件中保存如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir .pip</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd .pip</span></span><br><span class="line">[root@localhost .pip]<span class="comment"># touch pip.conf</span></span><br><span class="line">[root@localhost .pip]<span class="comment"># vim pip.conf</span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h5 id="2、将软件下载到本地部署"><a href="#2、将软件下载到本地部署" class="headerlink" title="2、将软件下载到本地部署"></a>2、将软件下载到本地部署</h5><p>如果需要对大批量的服务器安装软件包，并且安装包比较多或者比较大，则可以考虑将软件包下载到本 地，然后从本地安装。这对于使用脚本部署大量的服务器非常有用，此外，对于服务器无法连接外网的 情况，也可以使用这种方法。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载到本地</span></span><br><span class="line">pip install --download=<span class="string">'pwd'</span> -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line">pip install --no-index -f file://<span class="string">'pwd'</span> -r requirements.txt</span><br></pre></td></tr></table></figure><p>使用这种方式，只需要下载一次，就可以多处安装，不用担心网络不稳定的问题。并且，pip能够自动 处理软件依赖问题。例如，我们通过这种方式下载Flask到当前目录下，则Flask的依赖click、 itsdangerous、Jinja2、MarkupSafe和Werkzeug也会被下载到本地，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install --download=<span class="string">'pwd'</span> flask</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">click-6.7-py2.py3-none-any.whl itsdangerous-0.24.tar.gz</span><br><span class="line">MarkupSafe-0.23.tar.gz Flask-0.12-py2.py3-none-any.whl</span><br><span class="line">Jinja2-2.9.5-py2.py3-none-any.whl Werkzeug-0.11.15-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure><h3 id="三、Python变成辅助工具"><a href="#三、Python变成辅助工具" class="headerlink" title="三、Python变成辅助工具"></a>三、Python变成辅助工具</h3><p>因为Python是一门动态类型语言，所以，Python程序不需要编译和链接就可以直接运行。Python程序 运行时是从上至下逐行执行，因此Python工程师可以进行交互式的编程，从而快速验证代码的运行结果 是否符合预期。同时，Python工程师也可以通过交互式编程的方式学习Python编程。也正是因为 Python交互式编程的诸多优点，所以，Python交互式编程使用非常广泛。</p><h4 id="3-1、Python交互式编程"><a href="#3-1、Python交互式编程" class="headerlink" title="3.1、Python交互式编程"></a>3.1、Python交互式编程</h4><p>要使用Python的交互式编程，最简单的方式是使用标准的Python Shell。在命令行直接输入python命 令便可进入Python Shell，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># python</span></span><br><span class="line">Python <span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">20</span>:<span class="number">36</span>)</span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-39</span>)] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>虽然标准的Python Shell也支持交互式编程，但是，它有很多不足，包括：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">没有语法高亮；</span><br><span class="line">不支持Tab自动补全；</span><br><span class="line">没有自动缩进功能；</span><br><span class="line">不能保存历史记录；</span><br><span class="line">不能很好地与操作系统交互；</span><br><span class="line">无法导入外部文件中的程序。</span><br></pre></td></tr></table></figure><p>虽然Python自带的交互式编程满足了功能性需求，但是在易用性上仍有诸多不足。IPython是增强型的 Python Shell，不但解决了上面提到的各种问题，而且提供了非常丰富的组件，可以方便地进行交互式 编程和数据分析。IPython功能丰富，不可避免地导致软件变得庞大复杂，因此，IPython 4.0对 IPython进行了拆分，分离成IPython Shell和jupyter两个组件，这两个组件现在需要分别安装。 按照行业惯例，IPython代指IPython Shell，是一个类似于Python Shell的交互式解释器；jupyter代指 IPython Notebook，是一个带图形界面的应用程序。接下来我们分别介绍IPython和jupyter的使用。</p><h4 id="3-2、使用IPython交互编程"><a href="#3-2、使用IPython交互编程" class="headerlink" title="3.2、使用IPython交互编程"></a>3.2、使用IPython交互编程</h4><p>IPython是一个第三方工具，因此，在使用之前需要先安装。可以直接使用操作系统的包管理工具或pip 进行安装。以下是在centos7上的安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pip install ipython</span></span><br><span class="line">Looking <span class="keyword">in</span> indexes: https://pypi.douban.com/simple/</span><br><span class="line">Collecting ipython</span><br><span class="line">Downloading</span><br><span class="line">https://pypi.doubanio.com/packages/1c/f3/c8be38ee117d02508bb8b9158eb41ca416</span><br><span class="line">f442a6e8e3b3159c2f2d14ed79/ipython-7.11.1-py3-none-any.whl (777kB)</span><br><span class="line">|████████████████████████████████| 778kB 934kB/s</span><br><span class="line"></span><br><span class="line">……省略部分输出信息</span><br><span class="line"></span><br><span class="line">Installing collected packages: six, ipython-genutils, decorator, traitlets,</span><br><span class="line">ptyprocess, pexpect, pickleshare, wcwidth, prompt-toolkit, pygments,</span><br><span class="line">backcall, parso, jedi, ipython</span><br><span class="line">Running setup.py install <span class="keyword">for</span> backcall ... <span class="keyword">done</span></span><br><span class="line">Successfully installed backcall-0.1.0 decorator-4.4.1 ipython-7.11.1</span><br><span class="line">ipython-genutils-0.2.0 jedi-0.15.2 parso-0.5.2 pexpect-4.7.0 pickleshare0.7.5 prompt-toolkit-3.0.2 ptyprocess-0.6.0 pygments-2.5.2 six-1.13.0</span><br><span class="line">traitlets-4.3.3 wcwidth-0.1.8</span><br></pre></td></tr></table></figure><p>安装完成以后，在命令行终端输入ipython就进入了IPython交互式编程界面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipython</span></span><br><span class="line">Python <span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">20</span>:<span class="number">36</span>)</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.11</span><span class="number">.1</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: sum=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">...: sum+=i</span><br><span class="line">...: print(sum)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: os.getlogin()</span><br><span class="line"></span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'root'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]:</span><br></pre></td></tr></table></figure><p>与标准的Python Shell一样，IPython的行显示了所使用的Python解释器版本以及当前的时间。第二行 是获取版权信息的方式，接着给出了IPython的版本。后是简短的使用说明，包括特征介绍、简短的 使用手册和如何获取帮助信息。表2-2给出了IPython提供的使用说明。 接下来我们将从五个不同的维度介绍IPython的使用，分别是：</p><blockquote><p>①更好的编辑器；</p><p>②更方便地获取帮助信息；</p><p>③IPython提供的magic函数； </p><p>④IPython的保存历史功能； </p><p>⑤IPython与操作系统交</p></blockquote><h5 id="（1）更好的编辑器"><a href="#（1）更好的编辑器" class="headerlink" title="（1）更好的编辑器"></a>（1）更好的编辑器</h5><p>IPython非常强大，有各种高级功能。其中，有用也直观的便是作为交互式编程工具的编辑器功 能。简单来说，IPython相对于标准的Python Shell是一个更好的交互式编程的编辑器，因为它具有：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法高亮； </span><br><span class="line">自动缩进； </span><br><span class="line">Tab补全； </span><br><span class="line">快速获取帮助信息； </span><br><span class="line">搜索历史； </span><br><span class="line">执行shell命令</span><br></pre></td></tr></table></figure><p>如果只是描述IPython的特征，相信读者并没有完全的概念。这个时候可以坐在计算机旁，打开IPython 随便敲几行Python代码和标准的Python Shell进行比较，就能够直观感受到IPython的优点。</p><p>IPython与标准Python Shell的大区别在于，IPython会对命令提示符的每一行进行编号，编号以后能 够提高交互式编程的可读性。更重要的是，我们可以通过IPython提供的特殊函数对编号以后的代码进 行操作。此外，IPython支持语法高亮和自动缩进，相对于标准的Python Shell，是一个更好的编辑 器。如果在编写代码的过错中出现了错误需要删除时，标准的Python Shell无法进行很好的处理，只能 重新进行输入，而IPython则不存在这样的问题。</p><p>tab补全是一个特别有用的功能，IPython支持tab补全，而标准的Python Shell不支持。大家可以想象 一下，一个工程师近正在学习Python，他知道一个库里面有他想要的函数，但是，他并不能非常准确 地说出这个函数的名称。这个时候，如果没有tab补全，就只能一边打开Python官方的参考手册，一边 学习编程。有了tab补全以后，即使他对函数名称不是特别熟悉也没有关系，可以先通过tab补全列出当 前命名空间下的函数列表，然后根据函数名称选择自己需要的函数。IPython的补全功能非常强大，不 但可以补全用户的变量名、标准库的函数，在导入包时也可以进行补全。</p><p>这一小节，我们一直在强调IPython比标准的Python Shell更好用，拥有更多高级功能。如果读者接触 Python的时间不长，也许不能理解为什么需要使用交互式编程。交互式编程在当前会话退出以后就结束 了，并不满足计算机程序一次编写多次运行的特点。但是，在我们的日常工作中还是会经常用到交互式编程。</p><p>交互式编程不但可以快速验证代码执行结果，还可以帮助我们学习Python编程。Python工程师在编写 代码时，通常会使用编辑器和Python Shell组合的方式来完成程序的编写，例如，将代码从编辑器复制 到Python Shell以验证代码的正确性，然后将验证过的代码从Python Shell复制到编辑器中。</p><h5 id="（2）使用IPython来解析MySQL的备份日志"><a href="#（2）使用IPython来解析MySQL的备份日志" class="headerlink" title="（2）使用IPython来解析MySQL的备份日志"></a>（2）使用IPython来解析MySQL的备份日志</h5><p>为了便于读者理解交互式编程的好处，我们这里演示一个使用Python交互式编程的例子。在这个例子 中，我们使用IPython来解析MySQL的备份日志。</p><p>一个典型的MySQL物理备份日志如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">170221 01:07:48 Executing UNLOCK TABLES</span><br><span class="line">170221 01:07:48 All tables unlocked</span><br><span class="line">Starting slave SQL thread</span><br><span class="line">170221 01:07:48 [00] Streaming ib_buffer_pool to &lt;STDOUT&gt;</span><br><span class="line">170221 01:07:48 [00] ...done</span><br><span class="line">170221 01:07:48 Backup created in directory '/home/lmx/log/backup'</span><br><span class="line">MySQL binlog position: filename 'mysql-bin.000003', position '507946128',</span><br><span class="line">GTID of the last change '5a81ea97-daf1-11e6-94c1-fa163ee35df3:1-3409440'</span><br><span class="line">MySQL slave binlog position: master host '10.173.33.35', filename 'mysqlbin.000002', position '524993060'</span><br><span class="line">170221 01:07:48 [00] Streaming backup-my.cnf</span><br><span class="line">170221 01:07:48 [00] ...done</span><br><span class="line">170221 01:07:48 [00] Streaming xtrabackup_info</span><br><span class="line">170221 01:07:48 [00] ...done</span><br><span class="line">xtrabackup: Transaction log of lsn (3387315364) to (3451223966) was copied.</span><br><span class="line">170221 01:07:48 completed OK!</span><br></pre></td></tr></table></figure><p>即使读者对MySQL不了解也没有关系，我们现在的需求是解析下面这一行日志，并获取日志中的host、 filename和position的值。虽然在日志中position的值包含在一对单引号内，但是，我们希望解析以后 position的值是一个整数。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL slave binlog position: master host '10.173.33.35', filename 'mysqlbin.000002', position '524993060'</span><br></pre></td></tr></table></figure><p>在这个例子中，主要就是对字符串进行处理，并提取相应的值。这个问题当然不难，但是，如果不借助 交互式编程工具，需要工程师一次在代码中编写正确也不简单。如果工程师不知道交互式编程工具，就 只能在编辑器里面编写代码，然后运行。如果有错误再修改，直到获取正确的取值，整个过程将会非常 耗时。如果项目庞大，调试起来也会比较困难。这个时候就可以借助Python的交互式编程工具，先验证 代码的正确性，然后将验证过的代码从交互式编程工具复制到编辑器中。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipython</span></span><br><span class="line">Python <span class="number">3.8</span><span class="number">.1</span> (default, Jan <span class="number">14</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">20</span>:<span class="number">36</span>)</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.11</span><span class="number">.1</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line">In [<span class="number">1</span>]: line=<span class="string">"MySQL slave binlog position: master host '10.173.33.35',</span></span><br><span class="line"><span class="string">filename 'mysql-bin.000002', position '524993060'"</span></span><br><span class="line">In [<span class="number">2</span>]: line.split(<span class="string">"'"</span>)</span><br><span class="line">Out[<span class="number">2</span>]:</span><br><span class="line">[<span class="string">'MySQL slave binlog position: master host '</span>,</span><br><span class="line"><span class="string">'10.173.33.35'</span>,</span><br><span class="line"><span class="string">', filename '</span>,</span><br><span class="line"><span class="string">'mysql-bin.000002'</span>,</span><br><span class="line"><span class="string">', position '</span>,</span><br><span class="line"><span class="string">'524993060'</span>,</span><br><span class="line"><span class="string">''</span>]</span><br><span class="line">In [<span class="number">3</span>]: host=line.split(<span class="string">"'"</span>)[<span class="number">1</span>]</span><br><span class="line">In [<span class="number">4</span>]: filename=line.split(<span class="string">"'"</span>)[<span class="number">3</span>]</span><br><span class="line">In [<span class="number">5</span>]: position=line.split(<span class="string">"'"</span>)[<span class="number">5</span>]</span><br><span class="line">In [<span class="number">6</span>]: print(host,filename,position)</span><br><span class="line"><span class="number">10.173</span><span class="number">.33</span><span class="number">.35</span> mysql-bin<span class="number">.000002</span> <span class="number">524993060</span></span><br><span class="line">In [<span class="number">7</span>]: type(position)</span><br><span class="line">Out[<span class="number">7</span>]: str</span><br><span class="line">In [<span class="number">8</span>]: position=int(position)</span><br><span class="line">In [<span class="number">9</span>]: print(host,filename,position)</span><br><span class="line"><span class="number">10.173</span><span class="number">.33</span><span class="number">.35</span> mysql-bin<span class="number">.000002</span> <span class="number">524993060</span></span><br></pre></td></tr></table></figure><p>为了节省文章篇幅，我们没有进行错误的尝试，而是直接通过单引号来分解字符串。由于我们使用了交 互式编程，可以很方便地看到字符串分解以后的中间结果。正是有了这个中间结果，我们才知道，字符 串分解成列表以后，下标1对应的字符串是host的值，下标3对应的字符串是filename的值，下标5对应 的字符串是position的值。我们还可以通过交互式编程发现position是一个字符串。由于我们要求 position是一个整数，因此，需要在代码中将position强制转换为一个整数。</p><p>如果读者自己尝试从这一行字符串中获取有效的值，很可能一开始会尝试使用逗号或空格来分解字符 串。这两种方法都无法一次取出host、filename和position的值。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: line.split(<span class="string">','</span>)</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line">[<span class="string">"MySQL slave binlog position: master host '10.173.33.35'"</span>,</span><br><span class="line"><span class="string">" filename 'mysql-bin.000002'"</span>,</span><br><span class="line"><span class="string">" position '524993060'"</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: line.split(<span class="string">' '</span>)</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">[<span class="string">'MySQL'</span>,</span><br><span class="line"><span class="string">'slave'</span>,</span><br><span class="line"><span class="string">'binlog'</span>,</span><br><span class="line"><span class="string">'position:'</span>,</span><br><span class="line"><span class="string">'master'</span>,</span><br><span class="line"><span class="string">'host'</span>,</span><br><span class="line"><span class="string">"'10.173.33.35',"</span>,</span><br><span class="line"><span class="string">'filename'</span>,</span><br><span class="line"><span class="string">"'mysql-bin.000002',"</span>,</span><br><span class="line"><span class="string">'position'</span>,</span><br><span class="line"><span class="string">"'524993060'"</span>]</span><br></pre></td></tr></table></figure><p>使用交互式编程，我们可以快速尝试不同的方案，先验证自己的想法是否正确，然后将代码拷贝到编辑 器中，组成我们的Python程序文件。通过这种方式，能够有效降低代码出错的概率，减少调试的时间， 从而提高工作效率。</p><h5 id="（3）更好地获取帮助信息"><a href="#（3）更好地获取帮助信息" class="headerlink" title="（3）更好地获取帮助信息"></a>（3）更好地获取帮助信息</h5><p>Python工程师不但可以通过交互式编程快速验证代码执行结果，还可以通过交互式编程的方式学习 Python编程。之所以说Python工程师可以通过交互式编程学习编程，是因为使用IPython能够方便地获 取到相应的帮助信息。如命名空间下的每个对象以及其定义和使用说明。虽然标准的Python Shell也可 以通过help函数获取到对象的帮助信息，但是，IPython提供了更加灵活的方式获取命名空间下的对象 列表，以及更加全面的帮助信息。 </p><p>我们知道，在标准库的os模块下的path子模块中有很多操作文件、目录和路径的函数，也有很多 以”is”开始的判断类函数。这些判断类函数的作用非常明确，用以判断给定的对象是否为一个文件或一 个目录。我们可以使用通配符的方式获取该模块下的所有判断类函数，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: <span class="keyword">import</span> os</span><br><span class="line">In [11]: ?os.path.is*</span><br><span class="line">os.path.isabs</span><br><span class="line">os.path.isdir</span><br><span class="line">os.path.isfile</span><br><span class="line">os.path.islink</span><br><span class="line">os.path.ismount</span><br></pre></td></tr></table></figure><p>获取当前命名空间下的所有对象，除了使用通配符的方式以外，也可以使用前面介绍的tab补全方式。 tab补全的方式更加实用一些，就如同IPython提供的获取帮助信息的方式比标准的Python Shell获取帮 助信息更实用一样。在IPython中，可以通过标准的help函数获取对象的帮助信息，也可以使用“？”和 “？？”获取对象的帮助信息，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="keyword">import</span> json</span><br><span class="line">In [<span class="number">13</span>]: <span class="keyword">import</span> os</span><br><span class="line">In [14]: os.path.isfile?</span><br><span class="line">Signature: os.path.isfile(path)</span><br><span class="line">Docstring: Test whether a path <span class="keyword">is</span> a regular file</span><br><span class="line">File: ~/.pyenv/versions/<span class="number">3.8</span><span class="number">.1</span>/lib/python3<span class="number">.8</span>/genericpath.py</span><br><span class="line">Type: function</span><br><span class="line"></span><br><span class="line">In [15]: json.dump?</span><br><span class="line"></span><br><span class="line">Signature:</span><br><span class="line">json.dump(</span><br><span class="line">obj,</span><br><span class="line">fp,</span><br><span class="line">*,</span><br><span class="line">skipkeys=<span class="literal">False</span>,</span><br><span class="line">ensure_ascii=<span class="literal">True</span>,</span><br><span class="line">check_circular=<span class="literal">True</span>,</span><br><span class="line">allow_nan=<span class="literal">True</span>,</span><br><span class="line">cls=<span class="literal">None</span>,</span><br><span class="line">indent=<span class="literal">None</span>,</span><br><span class="line">separators=<span class="literal">None</span>,</span><br><span class="line">default=<span class="literal">None</span>,</span><br><span class="line">sort_keys=<span class="literal">False</span>,</span><br><span class="line">**kw,</span><br><span class="line">)</span><br><span class="line">Docstring:</span><br><span class="line">Serialize ``obj`` <span class="keyword">as</span> a JSON formatted stream to ``fp`` (a</span><br><span class="line">``.write()``-supporting file-like object).</span><br><span class="line"></span><br><span class="line">If ``skipkeys`` <span class="keyword">is</span> true then ``dict`` keys that are <span class="keyword">not</span> basic types</span><br><span class="line">(``str``, ``int``, ``float``, ``bool``, ``<span class="literal">None</span>``) will be skipped</span><br><span class="line">instead of raising a ``TypeError``.</span><br></pre></td></tr></table></figure><p>当我们输入对象名称，再输入一个问号以后按回车键，就会显示相应的帮助信息。如果帮助信息比较 长，则会以分页的方式显示帮助信息。如果因为帮助信息太多而进入了分页页面，可以通过“q”键退出， 退出以后可以继续进行编程。</p><p>例如，json这个标准库下有一个dump函数和一个dumps函数，Python初学者总是容易混淆。这个时 候，如果能够充分利用IPython，就可以方便地获取到帮助信息，使用时不容易犯错。下面就是一个典 型的Python工程师使用json模块的方式，先构造了一个字典，希望将字典转换成json字符串。因为不知 道应该使用json.dump函数还是json.dumps函数，所以，在交互式编程中通过“json.dump?”语句获取dump函数的帮助信息。获取完json.dump函数的帮助信息以后，按“q”键退出，退出以后继续进行编 程。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: <span class="keyword">import</span> json</span><br><span class="line">In [<span class="number">19</span>]: d=dict(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">In [20]: json.dump?</span><br><span class="line">In [<span class="number">21</span>]: json.dumps(d)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'&#123;"a": 1, "b": 2, "c": 3&#125;'</span></span><br></pre></td></tr></table></figure><p>在IPython中，除了使用一个问号获取帮助信息以外，也可以使用两个问号获取帮助信息。两个问号获 取到的帮助信息更加全面，甚至会包含函数的实现源码。</p><p>除了使用问号的方式获取对象的帮助信息以外，IPython还提供了另外一种方式获取对象的信息，可以 分别获取对象的定义、文档和文件等。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: <span class="keyword">import</span> json</span><br><span class="line">In [<span class="number">23</span>]: %pdef json</span><br><span class="line">Object <span class="keyword">is</span> <span class="keyword">not</span> callable.</span><br><span class="line">In [<span class="number">24</span>]: %pdef json.dump</span><br><span class="line">json.dump(</span><br><span class="line">obj,</span><br><span class="line">fp,</span><br><span class="line">*,</span><br><span class="line">skipkeys=<span class="literal">False</span>,</span><br><span class="line">ensure_ascii=<span class="literal">True</span>,</span><br><span class="line">check_circular=<span class="literal">True</span>,</span><br><span class="line">allow_nan=<span class="literal">True</span>,</span><br><span class="line">cls=<span class="literal">None</span>,</span><br><span class="line">indent=<span class="literal">None</span>,</span><br><span class="line">separators=<span class="literal">None</span>,</span><br><span class="line">default=<span class="literal">None</span>,</span><br><span class="line">sort_keys=<span class="literal">False</span>,</span><br><span class="line">**kw,</span><br><span class="line">)</span><br><span class="line">In [<span class="number">25</span>]: %pfile json.dump</span><br><span class="line">In [<span class="number">26</span>]: %pdoc json.dump</span><br><span class="line">In [<span class="number">27</span>]: %pinfo json</span><br></pre></td></tr></table></figure><h5 id="（4）magic函数"><a href="#（4）magic函数" class="headerlink" title="（4）magic函数"></a>（4）magic函数</h5><p>IPython提供了很多功能强大的函数，如前面已经提到的%pfile、%pdoc、%pinfo等。为了区分 IPython提供的函数和用户的输入，所有IPython提供的函数都以“%”开头。以“%”开头的这类功能强大的 函数，在IPython中称为magic函数。magic函数主要是为IPython提供增强的功能、与操作系统交互、 操纵用户的输入和输出以及对IPython进行配置。</p><p>IPython会将任何第一个字母为“%”的行，视为对magic函数的特殊调用。因此，所有的magic函数都是 以“%”开头。在IPython中，有两种不同的方法可以获取magic函数列表，分别是通过“%”获取所有的 magic函数和通过“%lsmagic”获取所有的magic函数。</p><p>下面是一个用lsmagic函数获取magic函数列表的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: %lsmagic</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">Available line magics:</span><br><span class="line">%alias %alias_magic %autoawait %autocall %autoindent %automagic</span><br><span class="line">%bookmark %cat %cd %clear %colors %conda %config %cp %cpaste</span><br><span class="line">%debug %dhist %dirs %doctest_mode %ed %edit %env %gui %hist</span><br><span class="line">%history %killbgscripts %ldir %less %lf %lk %ll %load %load_ext</span><br><span class="line">%loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic</span><br><span class="line">%lx %macro %magic %man %matplotlib %mkdir %more %mv %notebook</span><br><span class="line">%page %paste %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %pip</span><br><span class="line">%popd %pprint %precision %prun %psearch %psource %pushd %pwd %pycat</span><br><span class="line">%pylab %quickref %recall %rehashx %reload_ext %rep %rerun %reset</span><br><span class="line">%reset_selective %rm %rmdir %run %save %sc %set_env %store %sx</span><br><span class="line">%system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos</span><br><span class="line">%xdel %xmode</span><br><span class="line"></span><br><span class="line">Available cell magics:</span><br><span class="line">%%! %%HTML %%SVG %%bash %%capture %%debug %%file %%html %%javascript</span><br><span class="line">%%js %%latex %%markdown %%perl %%prun %%pypy %%python %%python2</span><br><span class="line">%%python3 %%ruby %%script %%sh %%svg %%sx %%system %%time %%timeit</span><br><span class="line">%%writefile</span><br><span class="line"></span><br><span class="line">Automagic <span class="keyword">is</span> ON, % prefix IS NOT needed <span class="keyword">for</span> line magics.</span><br></pre></td></tr></table></figure><p>可以看到，IPython提供了很多magic函数。并且，随着IPython的功能越来越多，magic函数还会不断 增加。那么，有没有一种好的方法能够快速了解magic函数的用法呢？前面介绍的通过问号获取对象帮 助信息的方法对magic函数也适用。因此，只要输入一个magic函数，后面再输入一个问号，回车以后 就能够看到这个magic函数的帮助信息。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [29]: %save?</span><br><span class="line">Docstring:</span><br><span class="line">Save a set of lines <span class="keyword">or</span> a macro to a given filename.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">%save [options] filename n1-n2 n3-n4 ... n5 .. n6 ...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">     </span><br><span class="line">-r: use <span class="string">'raw'</span> input. By default, the <span class="string">'processed'</span> history <span class="keyword">is</span> used,so that magics are loaded <span class="keyword">in</span> their transformed version to validPython. If this option <span class="keyword">is</span> given, the raw input <span class="keyword">as</span> typed <span class="keyword">as</span> thecommand line <span class="keyword">is</span> used instead.</span><br><span class="line"></span><br><span class="line">-f: force overwrite. If file exists, %save will prompt <span class="keyword">for</span> overwriteunless -f <span class="keyword">is</span> given.</span><br><span class="line"></span><br><span class="line">-a: append to the file instead of overwriting it.</span><br><span class="line">:</span><br></pre></td></tr></table></figure><p>IPython的官方文档将magic函数分为三类，分别是：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）操作代码的magic函数，如<span class="comment">%run、%edit、%save、%macro、%recall；</span></span><br><span class="line">2）控制IPython的magic函数，如<span class="comment">%colors、%xmode、%autoindent、%automagic；</span></span><br><span class="line">3）其他magic函数，如<span class="comment">%reset、%timeit、%%writefile、%load、%paste。</span></span><br></pre></td></tr></table></figure><p>为了演示magic函数的使用，我们来看一个实际的例子。假设你是一名DBA，并且非常喜欢Python这门 编程语言，会经常使用Python管理MySQL。因此，你经常需要使用Python连接MySQL执行SQL语句 （Python连接MySQL的知识将在11章介绍）。使用Python执行SQL语句，对于普通的查询语句，返回 的结果将是一个二维的元组。但是，如果执行的是一些管理类的SQL语句或者监控类的SQL语句， Python驱动将会以怎样的方式返回MySQL的查询结果呢？</p><p>例如，需要执行下面的SQL语句，并获取返回结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>；</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>；</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%innodb%buffer%'</span>；</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'%select%'</span>；</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_buffer_pool_dump_pct = <span class="number">30</span>；</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> . <span class="keyword">TO</span> [<span class="string">'lmx'</span>@<span class="string">'localhost'</span>](mailto:<span class="string">'lmx'</span>@<span class="string">'localhost'</span>)</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>。</span><br></pre></td></tr></table></figure><p>为了得到Python执行上面SQL语句的结果，需要在Python中连接MySQL并进行认证。认证完成以后执 行SQL语句获取输出。由于你经常需要验证SQL语句，因此，使用Python连接MySQL并认证这些代码需 要反复输入。为了节省输入时间，我们可以将Python连接MySQL并认证的逻辑保存到外部文件中，在 需要的时候通过%load这个magic函数将外部代码导入到IPython中执行即可。例如，我们在一个名为 connect.py的外部文件中保存了连接MySQL的代码，在Ipython中使用%load导入外部Python文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: %load connect.py</span><br><span class="line">     </span><br><span class="line">In [<span class="number">31</span>]: <span class="keyword">import</span> MySQLdb <span class="keyword">as</span> db</span><br><span class="line">conn = db.connect(host=<span class="string">"localhost"</span>, db=<span class="string">"test"</span>, user=<span class="string">'lmx'</span>,</span><br><span class="line">passwd=<span class="string">'my_passwd'</span>, unix_socket=<span class="string">'/tmp/mysql.sock'</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">sql = <span class="string">"select 1"</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">print</span> rows</span><br><span class="line">((<span class="number">1L</span>,),)</span><br></pre></td></tr></table></figure><p>使用%load命令导入外部的Python文件并执行以后，可以继续使用已经建立的MySQL连接执行SQL语 句。这个例子主要用以演示magic函数的用法，IPython提供了大量的magic函数，每一个magic函数的 具体用法都可以通过问号表达式获取相应的帮助文档。</p><h5 id="（5）保存历史"><a href="#（5）保存历史" class="headerlink" title="（5）保存历史"></a>（5）保存历史</h5><p>保存编码历史这方面，IPython相比标准的Python Shell有了质的提升。用户可以非常灵活地操作 IPython的输入历史和输出历史。下面我们简单看几个例子：</p><blockquote><p>_i, _ii, _iii 分别保存了最近的三次输入； _, , _ 分别保存了最近的三次输出； 可以像Bash一样，通 过ctrl+p, ctrl+n查找输入； 可以像Bash一样，使用ctrl+r进行反向查找； IPython的输入历史在 当前会话退出以后会进行持久化，下一次进入IPython时，依然可以查找前一次会话的输入历史； %edit IPython可以通过%edit编辑历史输入并重新执行； %save IPython可以通过%save将 IPython中的代码保存到程序文件中； %rerun IPython可以指定代码行数重新运行；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: %rerun <span class="number">21</span></span><br><span class="line">=== Executing: ===</span><br><span class="line">json.dumps(d)</span><br><span class="line">=== Output: ===</span><br><span class="line">Out[<span class="number">32</span>]: <span class="string">'&#123;"a": 1, "b": 2, "c": 3&#125;'</span></span><br></pre></td></tr></table></figure><h5 id="（6）与操作系统交互"><a href="#（6）与操作系统交互" class="headerlink" title="（6）与操作系统交互"></a>（6）与操作系统交互</h5><p>IPython比标准的Python Shell好用的另一个理由是，它能够更好地与操作系统进行交互。在使用 Python进行交互式编程时，不用退出Python Shell就可以执行Linux命令。magic函数里的%cd和%pwd 作用相当于Linux下的cd命令和pwd命令。此外，在IPython中，可以通过“!cmd”的形式执行任何Linux 命令。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: %ls</span><br><span class="line">anaconda-ks.cfg initial-setup-ks.cfg Python<span class="number">-3.8</span><span class="number">.1</span>/ Python<span class="number">-3.8</span><span class="number">.1</span>.tgz</span><br><span class="line">In [<span class="number">34</span>]: %pwd</span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">'/root'</span></span><br><span class="line">In [<span class="number">35</span>]: ! wc -l /tmp/storage.log</span><br><span class="line"><span class="number">0</span> /tmp/storage.log</span><br></pre></td></tr></table></figure><p>也可以通过赋值的方式捕获命令的输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: data=!df</span><br><span class="line">In [<span class="number">37</span>]: data</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">[<span class="string">'文件系统    1K-块      已用      可用       已用%      挂载点'</span>,</span><br><span class="line"><span class="string">'/dev/mapper/centos-root 17811456 6060988  11750468   35%  /'</span>,</span><br><span class="line"><span class="string">'devtmpfs 480872               0  480872     0%    /dev'</span>,</span><br><span class="line"><span class="string">'tmpfs 497948               0  497948     0% /dev/shm'</span>,</span><br><span class="line"><span class="string">'tmpfs                   497948            8696  489252     2% /run'</span>,</span><br><span class="line"><span class="string">'tmpfs                   497948               0  497948     0%      /sys/fs/cgroup'</span>,</span><br><span class="line"><span class="string">'/dev/sda1               1038336         169504  868832     17% /boot'</span>,</span><br><span class="line"><span class="string">'tmpfs                   99592               64  99528      1%      /run/user/1000'</span>,</span><br><span class="line"><span class="string">'tmpfs                   99592                0  99592      0% /run/user/0'</span>]</span><br><span class="line">In [<span class="number">38</span>]: data[<span class="number">1</span>].split()[<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">38</span>]: <span class="string">'35%'</span></span><br></pre></td></tr></table></figure><p>在Python生态中，除了IPython这个增强的Python Shell以外，还有bython和ptpython这两个不错的 Python Shell。后面这两个工具都有自己的特色，但是都没有IPython使用广泛。而且，由于IPython使 用最为广泛，很多开源项目（如流行的爬虫框架Scrapy）对IPython进行了集成，所以，建议读者学习 IPython。</p><h4 id="3-3、-jupyter的使用"><a href="#3-3、-jupyter的使用" class="headerlink" title="3.3、 jupyter的使用"></a>3.3、 jupyter的使用</h4><h5 id="（1）、jupyter介绍"><a href="#（1）、jupyter介绍" class="headerlink" title="（1）、jupyter介绍"></a>（1）、jupyter介绍</h5><p>jupyter就是以前的IPython Notebook，是一种新兴的交互式数据分析与记录工具。它通过浏览器访问 本地或者远端的IPython进程，并利用浏览器的图形界面，增强IPython的可视化输出。jupyter定义了 一种全新的文件格式，文件的后缀名是ipynb。ipynb文件包含了代码，用以说明每一步的计算和输出。 也就是说，ipynb文件完整记录了计算过程中的所有相关信息，并且，能够支持图片、视频和公式等副 文本格式，是科学计算、数据分析和编程教学的优秀工具。</p><p>正是由于jupyter丰富的可视化输出，其广泛应用于以下场景：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">编程教学；</span><br><span class="line">数据分析；</span><br><span class="line">科学计算；</span><br><span class="line">幻灯片演示。</span><br></pre></td></tr></table></figure><h5 id="（2）、-jupyter-notebook的使用"><a href="#（2）、-jupyter-notebook的使用" class="headerlink" title="（2）、 jupyter notebook的使用"></a>（2）、 jupyter notebook的使用</h5><p>IPython Shell与jupyter分离以后，jupyter需要额外进行安装。直接使用pip安装即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pip install jupyter</span><br><span class="line">Looking in indexes: https://pypi.douban.com/simple/</span><br><span class="line">Collecting jupyter</span><br><span class="line">Downloading</span><br><span class="line">https://pypi.doubanio.com/packages/83/df/0f5dd132200728a86190397e1ea87cd762</span><br><span class="line">44e42d39ec5e88efd25b2abd7e/jupyter-1.0.0-py2.py3-none-any.whl</span><br><span class="line">……省略部分信息</span><br><span class="line">Successfully installed MarkupSafe-1.1.1 Send2Trash-1.5.0 attrs-19.3.0</span><br><span class="line">bleach-3.1.0 defusedxml-0.6.0 entrypoints-0.3 ipykernel-5.1.3 ipywidgets7.5.1 jinja2-2.10.3 jsonschema-3.2.0 jupyter-1.0.0 jupyter-client-5.3.4</span><br><span class="line">jupyter-console-6.0.0 jupyter-core-4.6.1 mistune-0.8.4 nbconvert-5.6.1</span><br><span class="line">nbformat-5.0.3 notebook-6.0.2 pandocfilters-1.4.2 prometheus-client-0.7.1</span><br><span class="line">prompt-toolkit-2.0.10 pyrsistent-0.15.7 python-dateutil-2.8.1 pyzmq-18.1.1</span><br><span class="line">qtconsole-4.6.0 terminado-0.8.3 testpath-0.4.4 tornado-6.0.3 webencodings0.5.1 widgetsnbextension-3.5.1</span><br></pre></td></tr></table></figure><p>由于我们是在Linux下安装jupyter，如果我们的Linux没有图形界面，可以通过设置–no-browser和设 置–ip=0.0.0.0进行外部访问，如果不指定–ip参数，默认IP是localhost，也就是只有本地才能访问。如 下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# jupyter notebook --no-browser --ip=0.0.0.0 --allow-root</span><br><span class="line">[I 13:06:33.656 NotebookApp] 启动notebooks 在本地路径: /root</span><br><span class="line">[I 13:06:33.657 NotebookApp] 本程序运行在: http://localhost:8888/?</span><br><span class="line">token=33fdb8256c7c1d13a23b8189ea0f4e7b7f434f14cc07ea5e</span><br><span class="line">[I 13:06:33.657 NotebookApp] or http://127.0.0.1:8888/?</span><br><span class="line">token=33fdb8256c7c1d13a23b8189ea0f4e7b7f434f14cc07ea5e</span><br><span class="line">[I 13:06:33.657 NotebookApp] 使用control-c停止此服务器并关闭所有内核(两次跳过确认).</span><br><span class="line">[C 13:06:33.727 NotebookApp]</span><br><span class="line"></span><br><span class="line">To access the notebook, open this file in a browser:</span><br><span class="line">file:///root/.local/share/jupyter/runtime/nbserver-3998-open.html</span><br><span class="line">Or copy and paste one of these URLs:</span><br><span class="line">http://localhost:8888/?</span><br><span class="line">token=33fdb8256c7c1d13a23b8189ea0f4e7b7f434f14cc07ea5e</span><br><span class="line">or http://127.0.0.1:8888/?</span><br><span class="line">token=33fdb8256c7c1d13a23b8189ea0f4e7b7f434f14cc07ea5e</span><br></pre></td></tr></table></figure><p>从jupyter notebook的输出结果可以看到，jupyter notebook命令给出了一个URL，我们只需将该URL 拷贝至浏览器中，然后将0.0.0.0替换为Linux服务器的IP即可。</p><blockquote><p>在Windows下可以使用远程连接工具xmanager来操作</p></blockquote><p>通过浏览器访问jupyter给我们的URL，就可以登录到jupyter的主界面。这个界面会显示当前目录下的 所有文件<br><img src="https://img-blog.csdnimg.cn/20200427203400246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>登录jupyter的主界面后，我们如果要创建一个文件，只需要单击“新建”，选择你希望启动的Notebook 类型即可。我们选择Python 3。选择Python 3以后，浏览器会打开一个新的页面。在这个新的页面中， 可以看到一个空的Notebook界面。</p><p>jupyter界面由以下部分组成：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标题栏</span><br><span class="line">菜单栏</span><br><span class="line">快捷键</span><br><span class="line">编辑区</span><br></pre></td></tr></table></figure><p>在菜单栏中有一个“帮助”选项，读者可以通过该选项得到jupyter的使用说明。jupyter本身是图形界面的 应用，使用比较简单，因此，本教程不会花很多篇幅来介绍jupyter的使用。<br><img src="https://img-blog.csdnimg.cn/20200427203426132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在jupyter的编辑区中默认有一个输入框。输入框在jupyter中称为cell。我们可以通过菜单栏的“cell”选项 控制cell的格式、执行cell的代码。与此同时，我们也可以通过快捷键控制cell，如ctrl+enter快捷键用以 执行cell中的代码，shift+enter快捷键用以执行当前cell中的代码，并且在当前cell下方创建一个新的 cell。<br><img src="https://img-blog.csdnimg.cn/20200427203444853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>jupyter之所以能够进行编程教学和幻灯片演示，是因为它可以支持富文本格式和markdown格式。我们 只需修改cell的类型为“Markdown”，就可以在cell中使用markdown语句进行输入了。我们也可以在 jupyter中画图。为了在jupyter中画图，我们需要先安装matplotlib。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pip install matplotlib</span><br><span class="line">Looking in indexes: https://pypi.douban.com/simple/</span><br><span class="line">Collecting matplotlib</span><br><span class="line">Downloading</span><br><span class="line">https://pypi.doubanio.com/packages/53/6c/7b400d45f0ecd6703b2779a7dfda657857</span><br><span class="line">9a353748e1b43d8353cb7f5b7f/matplotlib-3.1.2-cp38-cp38-manylinux1_x86_64.whl</span><br><span class="line">(13.1MB)</span><br><span class="line">|████████████████████████████████| 13.1MB 1.8MB/s</span><br><span class="line">……省略部分信息</span><br><span class="line">Installing collected packages: kiwisolver, numpy, pyparsing, cycler,</span><br><span class="line">matplotlib</span><br><span class="line">Successfully installed cycler-0.10.0 kiwisolver-1.1.0 matplotlib-3.1.2</span><br><span class="line">numpy-1.18.1 pyparsing-2.4.6</span><br></pre></td></tr></table></figure><p>安装matplotlib以后就可以在jupyter中画图了，下面给出了一个jupyter使用的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">x = numpy.arange(<span class="number">11</span>)</span><br><span class="line">y = x**<span class="number">2</span></span><br><span class="line">plt.plot(x, y)</span><br></pre></td></tr></table></figure><p>运行结果如下图：<br><img src="https://img-blog.csdnimg.cn/20200427203507236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="四、Python工作环境管理"><a href="#四、Python工作环境管理" class="headerlink" title="四、Python工作环境管理"></a>四、Python工作环境管理</h3><p>Python 2和Python 3之间存在着较大的差异，并且，由于各种原因导致了Python 2和Python 3的长期 共存。在实际工作过程中，我们可能会同时用到Python 2和Python 3，因此，需要经常在Python 2和 Python 3之间进行来回切换。此外，如果你是喜欢尝鲜的人，那么，你很有可能在Python新版本出来 的时候立即下载Python的版本，试验Python的特性。</p><p>在Python世界里，除了需要对Python的版本进行管理以外，还需要对不同的软件包进行管理。大部分 情况下，对于开源的库我们使用***版本即可。但是，有时候可能需要对相同的Python版本，在不同的 项目中使用不同版本的软件包。</p><p>在这一节里，我们将介绍两个工具，即pyenv和virtualenv。前者用于管理不同的Python版本，后者用 于管理不同的工作环境。有了这两个工具，Python相关的版本问题将不再是问题。</p><h4 id="4-1、使用pyenv管理不同的Python版本"><a href="#4-1、使用pyenv管理不同的Python版本" class="headerlink" title="4.1、使用pyenv管理不同的Python版本"></a>4.1、使用pyenv管理不同的Python版本</h4><p>安装不同的Python版本并不是一件容易的事情，在不同的Python版本之间来回切换更加困难，而且， 多版本并存非常容易互相干扰。因此，我们需要一个名为pyenv的工具。pyenv是一个Python版本管理 工具，它能够进行全局的Python版本切换，也可以为单个项目提供对应的Python版本。使用pyenv以 后，可以在服务器上安装多个不同的Python版本，也可以安装不同的Python实现。不同Python版本之 间的切换也非常简单。接下来我们就一起看一下pyenv的安装和使用。</p><h5 id="1、-pyenv的安装"><a href="#1、-pyenv的安装" class="headerlink" title="1、.pyenv的安装"></a>1、.pyenv的安装</h5><p>我们直接从GitHub下载项目到本地，然后，分别执行以下命令进行安装即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .pip]# yum -y install git</span><br><span class="line">[root@localhost .pip]# git clone https://github.com/yyuu/pyenv.git ～/.pyenv</span><br><span class="line"></span><br><span class="line">正克隆到 '～/.pyenv'...</span><br><span class="line">remote: Enumerating objects: 8, done.</span><br><span class="line">remote: Counting objects: 100% (8/8), done.</span><br><span class="line">remote: Compressing objects: 100% (8/8), done.</span><br><span class="line">remote: Total 17600 (delta 2), reused 2 (delta 0), pack-reused 17592</span><br><span class="line">接收对象中: 100% (17600/17600), 3.44 MiB | 601.00 KiB/s, done.</span><br><span class="line">处理 delta 中: 100% (11954/11954), done.</span><br><span class="line"></span><br><span class="line">[root@localhost .pip]# echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt;</span><br><span class="line">～/.bash_profile</span><br><span class="line">[root@localhost .pip]# echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt;</span><br><span class="line">～/.bash_profile</span><br><span class="line">[root@localhost .pip]# echo 'eval "$(pyenv init -)"' &gt;&gt;～/.bash_profile</span><br></pre></td></tr></table></figure><p>安装完成以后需要重新载入配置文件，或者退出以后重新登录，以使～/.bash_profile中的配置生效。 笔者一般选择使用source命令重新载入配置文件，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .pip]# source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>至此，pyenv就安装完成了，我们可以通过下面的命令验证pyenv是否正确安装并获取pyenv的帮助信 息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv --help</span><br><span class="line">Usage: pyenv &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful pyenv commands are:</span><br><span class="line">commands List all available pyenv commands</span><br><span class="line">commands List all available pyenv commands</span><br><span class="line">exec Run an executable with the selected Python version</span><br><span class="line">global Set or show the global Python version</span><br><span class="line">help Display help for a command</span><br><span class="line">hooks List hook scripts for a given pyenv command</span><br><span class="line">init Configure the shell environment for pyenv</span><br><span class="line">install Install a Python version using python-build</span><br><span class="line">local Set or show the local application-specific Python version</span><br><span class="line">prefix Display prefix for a Python version</span><br><span class="line">rehash Rehash pyenv shims (run this after installing executables)</span><br><span class="line">root Display the root directory where versions and shims are kept</span><br><span class="line">shell Set or show the shell-specific Python version</span><br><span class="line">shims List existing pyenv shims</span><br><span class="line">uninstall Uninstall a specific Python version</span><br><span class="line">version Show the current Python version and its origin</span><br><span class="line">--version Display the version of pyenv</span><br><span class="line">version-file Detect the file that sets the current pyenv version</span><br><span class="line">version-name Show the current Python version</span><br><span class="line">version-origin Explain how the current Python version is set</span><br><span class="line">versions List all Python versions available to pyenv</span><br><span class="line">whence List all Python versions that contain the given executable</span><br><span class="line">which Display the full path to an executable</span><br><span class="line"></span><br><span class="line">See `pyenv help &lt;command&gt;' for information on a specific command.</span><br><span class="line">For full documentation, see: https://github.com/pyenv/pyenv#readme</span><br></pre></td></tr></table></figure><h5 id="2、pyenv的使用"><a href="#2、pyenv的使用" class="headerlink" title="2、pyenv的使用"></a>2、pyenv的使用</h5><p>我们通过pyenv的install命令，可以查看pyenv当前支持哪些Python版本，如下所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv install --list</span><br><span class="line">Available versions:</span><br><span class="line">2.1.3</span><br><span class="line">……省略部分信息</span><br><span class="line">3.8.0</span><br><span class="line">3.8-dev</span><br><span class="line">3.8.1</span><br><span class="line">3.9-dev</span><br><span class="line">……省略部分信息</span><br><span class="line">anaconda3-2018.12</span><br><span class="line">anaconda3-2019.03</span><br><span class="line">anaconda3-2019.07</span><br><span class="line">anaconda3-2019.10</span><br><span class="line">……省略部分信息</span><br></pre></td></tr></table></figure><p>由于pyenv可以安装的Python版本列表非常长，所以，这里进行了省略。读者可以在自己电脑上安装 pyenv，然后执行pyenv install –list命令进行查看。可以看到，pyenv不但可以安装不同的Python版 本，而且还可以安装不同的Python实现，也可以安装***版本的Python用以学习。</p><p>查看当前系统中包含的Python版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv versions</span><br><span class="line">* system (set by /root/.pyenv/version)</span><br></pre></td></tr></table></figure><p>使用pyenv安装不同的Python版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv install -v 3.6.0</span><br><span class="line">pyenv install -v 2.7.13</span><br></pre></td></tr></table></figure><p>再次查看当前系统中包含的Python版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv versions</span><br><span class="line">* system (set by /root/.pyenv/version)</span><br><span class="line">2.7.13</span><br><span class="line">3.8.1</span><br></pre></td></tr></table></figure><p>由于我们安装了2个Python版本，加上我们系统自身的Python，当前系统中存在3个不同的Python版 本。其中，输出结果前面的“*”表示当前正在使用的版本。我们也可以通过pyenv global选择不同的 Python版本，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv global 3.8.1</span><br><span class="line">[root@localhost ~]# pyenv versions</span><br><span class="line">system</span><br><span class="line">2.7.13</span><br><span class="line">* 3.8.1 (set by /root/.pyenv/version)</span><br><span class="line">[root@localhost ~]# python</span><br><span class="line">Python 3.8.1 (default, Jan 14 2020, 12:20:36)</span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">exit</span>()</span></span><br><span class="line">[root@localhost ~]# pyenv global 2.7.13</span><br><span class="line">[root@localhost ~]# python</span><br><span class="line">Python 2.7.13 (default, Jan 14 2020, 12:27:38)</span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>使用pyenv以后，可以快速切换Python的版本。切换Python版本以后，与版本相关的依赖也会一起切 换。因此，我们不用担心不同的版本在系统中是否会相互干扰。例如，切换Python版本以后，相应的 pip也会跟着切换，所以不用担心自己使用的pip版本和Python版本不匹配的问题，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv global 3.8.1</span><br><span class="line">[root@localhost ~]# pip --version</span><br><span class="line">pip 19.2.3 from /root/.pyenv/versions/3.8.1/lib/python3.8/site-packages/pip</span><br><span class="line">(python 3.8)</span><br></pre></td></tr></table></figure><p>如果想要删除Python版本，使用uninstall命令即可。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv uninstall 2.7.10</span><br></pre></td></tr></table></figure><h4 id="4-2、-使用virtualenv管理不同的项目"><a href="#4-2、-使用virtualenv管理不同的项目" class="headerlink" title="4.2、 使用virtualenv管理不同的项目"></a>4.2、 使用virtualenv管理不同的项目</h4><p>virtualenv本身是一个独立的项目，用以隔离不同项目的工作环境。例如，用户lmx希望在项目A中使用 Flask 0.8这个版本，与此同时，又想在项目B中使用Flask 0.9这个版本。如果我们全局安装Flask，必然 无法满足用户的需求。这个时候，我们就可以使用virtualenv。</p><p>读者需要注意pyenv和virtualenv的区别。pyenv用以管理不同的Python版本，例如，你的系统工作时 使用Python 2.7.13，学习时使用Python 3.6.0。virtualenv用以隔离项目的工作环境，例如，项目A和 项目B都是使用Python 2.7.13，但是，项目A需要使用Flask 0.8版本，项目B需要使用Flask 0.9版本。我 们只要组合pyenv和virtualenv这两个工具，就能够构造Python和第三方库的任意版本组合，拥有很好 的灵活性，也避免了项目之间的相互干扰。</p><p>virtualenv本身是一个独立的工具，用户可以不使用pyenv而单独使用virtualenv。但是，如果你使用了 pyenv，就需要安装pyenv-virtualenv插件，而不是通过virtualenv软件使用virtualenv的功能。</p><h5 id="1、pyenv-virtualenv的安装"><a href="#1、pyenv-virtualenv的安装" class="headerlink" title="1、pyenv-virtualenv的安装"></a>1、pyenv-virtualenv的安装</h5><p>安装和使用pyenv-virtualenv插件如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# git clone https://github.com/yyuu/pyenv-virtualenv.git</span><br><span class="line"><span class="meta">$</span><span class="bash">(pyenv root)/plugins/pyenv-virtualenv</span></span><br><span class="line">正克隆到 '/root/.pyenv/plugins/pyenv-virtualenv'...</span><br><span class="line">remote: Enumerating objects: 2064, done.</span><br><span class="line">remote: Total 2064 (delta 0), reused 0 (delta 0), pack-reused 2064</span><br><span class="line">接收对象中: 100% (2064/2064), 580.31 KiB | 264.00 KiB/s, done.</span><br><span class="line">处理 delta 中: 100% (1413/1413), done.</span><br><span class="line">[root@localhost ~]# echo 'eval "$(pyenv virtualenv-init -)"'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;~/.bash_profile</span></span><br></pre></td></tr></table></figure><p>与安装pyenv类似，安装完成以后需要重新载入配置文件，或者退出用户再登录，以使得配置文件生 效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# source ~/.bash_profile</span><br><span class="line">[root@localhost ~]# pyenv help virtualenv</span><br><span class="line">Usage: pyenv virtualenv [-f|--force] [VIRTUALENV_OPTIONS] [version]</span><br><span class="line">&lt;virtualenv-name&gt;</span><br><span class="line">pyenv virtualenv --version</span><br><span class="line">pyenv virtualenv --help</span><br><span class="line">     -f/--force Install even if the version appears to be installed</span><br><span class="line">already</span><br></pre></td></tr></table></figure><h5 id="2、pyenv-virtualenv的使用"><a href="#2、pyenv-virtualenv的使用" class="headerlink" title="2、pyenv-virtualenv的使用"></a>2、pyenv-virtualenv的使用</h5><p>有了pyenv-virtualenv以后，我们可以为同一个Python解释器，创建多个不同的工作环境。例如，我们 新建两个工作环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv virtualenv 3.8.1 first_project</span><br><span class="line">[root@localhost ~]# pyenv virtualenv 3.8.1 second_project</span><br></pre></td></tr></table></figure><p>可以使用virtualenvs子命令查看工作环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv virtualenvs</span><br><span class="line">3.8.1/envs/first_project (created from /root/.pyenv/versions/3.8.1)</span><br><span class="line">3.8.1/envs/second_project (created from /root/.pyenv/versions/3.8.1)</span><br><span class="line">first_project (created from /root/.pyenv/versions/3.8.1)</span><br><span class="line">second_project (created from /root/.pyenv/versions/3.8.1)</span><br></pre></td></tr></table></figure><p>创建完工作环境以后，可以通过activate和deactivate子命令进入或退出一个工作环境。进入工作环境 以后，左边的提示符会显示你当前所在的工作环境，以免因为环境太多导致操作错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv activate first_project</span><br><span class="line">pyenv-virtualenv: prompt changing will be removed from future release.</span><br><span class="line">configure `export PYENV_VIRTUALENV_DISABLE_PROMPT=1' to simulate the</span><br><span class="line">behavior.</span><br><span class="line">(first_project) [root@localhost ~]# pip install flask==1.1.1</span><br><span class="line">Looking in indexes: https://pypi.douban.com/simple/</span><br><span class="line">Collecting flask</span><br><span class="line">Downloading</span><br><span class="line">https://pypi.doubanio.com/packages/9b/93/628509b8d5dc749656a9641f4caf13540e</span><br><span class="line">2cdec85276964ff8f43bbb1d3b/Flask-1.1.1-py2.py3-none-any.whl (94kB)</span><br><span class="line">|████████████████████████████████| 102kB 4.7MB/s</span><br><span class="line">……省略部分信息</span><br><span class="line">Successfully installed Jinja2-2.10.3 MarkupSafe-1.1.1 Werkzeug-0.16.0</span><br><span class="line">click-7.0 flask-1.1.1 itsdangerous-1.1.0</span><br><span class="line">(first_project) [root@localhost ~]# pyenv deactivate</span><br></pre></td></tr></table></figure><p>接下来，我们看一下在不同的工作环境安装不同的Flask版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pyenv activate first_project</span><br><span class="line">(first_project) [root@localhost ~]# pip install flask==1.1.1</span><br><span class="line">(first_project) [root@localhost ~]# pyenv deactivate</span><br><span class="line"></span><br><span class="line">(second_project) [root@localhost ~]# pip install flask==0.10.1</span><br></pre></td></tr></table></figure><p>如果想要删除虚拟环境，则使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(first_project) [root@localhost ~]# pyenv virtualenv-delete first_project</span><br></pre></td></tr></table></figure><p>使用pyenv和python-virtualenv插件，我们就能够自由地在不同的版本之间进行切换，相比管理Python 版本，不但节省了时间，也避免了工作过程中的相互干扰。</p>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="http://pdxblog.top/Python%E5%87%BD%E6%95%B0.html"/>
    <id>http://pdxblog.top/Python%E5%87%BD%E6%95%B0.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="1、为什么要使用函数"><a href="#1、为什么要使用函数" class="headerlink" title="1、为什么要使用函数"></a>1、为什么要使用函数</h4><p>函数中的代码一次编写，所处运行</p><p>函数可以让代码复用，减少代码冗余</p><h4 id="2、定义函数"><a href="#2、定义函数" class="headerlink" title="2、定义函数"></a>2、定义函数</h4><p>关键字：def</p><p>函数名称右侧有小括号，结尾处有冒号</p><p>函数内第一行通常书写注释，表明该函数的意义</p><p>注释后空一行，开始写代码块</p><p>函数结束后，空两行</p><p>函数调用后空一行，再执行别的代码</p><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><h5 id="无参函数"><a href="#无参函数" class="headerlink" title="无参函数"></a>无参函数</h5><h5 id="带参函数"><a href="#带参函数" class="headerlink" title="带参函数"></a>带参函数</h5><blockquote><p>注意事项：调用函数时，实参传递的个数要与形参保持一致</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python小练习</title>
    <link href="http://pdxblog.top/Python%E5%B0%8F%E7%BB%83%E4%B9%A0.html"/>
    <id>http://pdxblog.top/Python%E5%B0%8F%E7%BB%83%E4%B9%A0.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.113Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1）猜拳游戏"><a href="#1）猜拳游戏" class="headerlink" title="1）猜拳游戏"></a>1）猜拳游戏</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">猜拳游戏：根据用户输入的数字，分别给出提示：“猜大了”或“猜小了”或“猜对了”，只有3次机会，否则退出程序</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">num = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">time = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> time &lt;= <span class="number">3</span>:</span><br><span class="line">    guess = int(input(<span class="string">'请输入你猜的数字：'</span>))</span><br><span class="line">    <span class="keyword">if</span> guess &lt; num:</span><br><span class="line">        print(<span class="string">'猜小了！！！'</span>)</span><br><span class="line">        time += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> guess &gt; num:</span><br><span class="line">        print(<span class="string">'猜大了！！！'</span>)</span><br><span class="line">        time += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'恭喜你，猜对了！！！'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">f'移动三次机会，现在是第<span class="subst">&#123;time&#125;</span>次！！！'</span>)</span><br><span class="line">    <span class="keyword">if</span> time == <span class="number">3</span>:</span><br><span class="line">        quiz = input(<span class="string">'三次都没对，是否继续（y/n）'</span>)</span><br><span class="line">        <span class="keyword">if</span> quiz == <span class="string">'y'</span>:</span><br><span class="line">            time = <span class="number">0</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> quiz == <span class="string">'n'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">请输入你猜的数字：<span class="number">7</span></span><br><span class="line">猜小了！！！</span><br><span class="line">移动三次机会，现在是第<span class="number">1</span>次！！！</span><br><span class="line">请输入你猜的数字：<span class="number">10</span></span><br><span class="line">恭喜你，猜对了！！！</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="2）跑马灯"><a href="#2）跑马灯" class="headerlink" title="2）跑马灯"></a>2）跑马灯</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">跑马灯特效</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    content = <span class="string">'武汉加油，中国加油'</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        os.system(<span class="string">'cls'</span>)</span><br><span class="line">        print(content)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        content = content[<span class="number">1</span>:] + content[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line">加油，中国加油武汉</span><br><span class="line">油，中国加油武汉加</span><br><span class="line">，中国加油武汉加油</span><br><span class="line">中国加油武汉加油，</span><br><span class="line">国加油武汉加油，中</span><br><span class="line">加油武汉加油，中国</span><br><span class="line">油武汉加油，中国加</span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line">加油，中国加油武汉</span><br><span class="line">油，中国加油武汉加</span><br><span class="line">，中国加油武汉加油</span><br><span class="line">中国加油武汉加油，</span><br><span class="line">国加油武汉加油，中</span><br><span class="line">加油武汉加油，中国</span><br><span class="line">油武汉加油，中国加</span><br><span class="line">武汉加油，中国加油</span><br><span class="line">汉加油，中国加油武</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">-1</span></span><br></pre></td></tr></table></figure><h5 id="3）幸运数"><a href="#3）幸运数" class="headerlink" title="3）幸运数"></a>3）幸运数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入一个4位数，如果各个数字之和大于20，则次数为幸运数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lucky_numbers</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># num = int(input('请输入一个4位数：'))</span></span><br><span class="line">    <span class="comment"># print('您输入的是：' + str(num))</span></span><br><span class="line">    <span class="comment"># 分解四位数，获取各位数字</span></span><br><span class="line">    <span class="comment"># 获取个位数字</span></span><br><span class="line">    ge_wei = num % <span class="number">10</span></span><br><span class="line">    shi_wei = int(num % <span class="number">100</span> / <span class="number">10</span>)</span><br><span class="line">    bai_wei = int(num / <span class="number">100</span> % <span class="number">10</span>)</span><br><span class="line">    qian_wei = int(num / <span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 求四个数值的和，并进行判断，如果大于20，则输出提示：是幸运数</span></span><br><span class="line">    <span class="keyword">if</span> (ge_wei + shi_wei + bai_wei + qian_wei) &gt; <span class="number">20</span>:</span><br><span class="line">        print(<span class="string">'是幸运数字'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'不是幸运数字,谢谢参与'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    num = int(input(<span class="string">'请输入一个4位数：'</span>))</span><br><span class="line">    print(<span class="string">'您输入的是：'</span> + str(num))</span><br><span class="line">    lucky_numbers(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">请输入一个<span class="number">4</span>位数：<span class="number">6666</span></span><br><span class="line">您输入的是：<span class="number">6666</span></span><br><span class="line">是幸运数字</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="4）温度格式转换"><a href="#4）温度格式转换" class="headerlink" title="4）温度格式转换"></a>4）温度格式转换</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用while实现：输出摄氏温度与华氏温度的对照表，要求它从摄氏温度0度到250度，每隔20度为一项，</span></span><br><span class="line"><span class="comment"># 对照表中的条目不超过10条。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 转换关系：华氏温度 = 摄氏温度 * 9 / 5.0 + 32</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 循环操作：计算摄氏温度，并输出对照条目</span></span><br><span class="line"><span class="comment"># 循环条件：</span></span><br><span class="line"><span class="comment"># 条目&lt;=10 &amp;&amp; 摄氏温度 &lt;= 250</span></span><br><span class="line"></span><br><span class="line">celsius = <span class="number">0</span></span><br><span class="line">Fahrenheit = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> <span class="keyword">and</span> celsius &lt;= <span class="number">250</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    celsius = celsius + <span class="number">20</span></span><br><span class="line">    Fahrenheit = celsius * <span class="number">9</span> / <span class="number">5.0</span> + <span class="number">32</span></span><br><span class="line">    print(<span class="string">'摄氏温度：'</span>, celsius, <span class="string">'华氏温度：'</span>, Fahrenheit, end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">摄氏温度： <span class="number">20</span> 华氏温度： <span class="number">68.0</span> </span><br><span class="line">摄氏温度： <span class="number">40</span> 华氏温度： <span class="number">104.0</span> </span><br><span class="line">摄氏温度： <span class="number">60</span> 华氏温度： <span class="number">140.0</span> </span><br><span class="line">摄氏温度： <span class="number">80</span> 华氏温度： <span class="number">176.0</span> </span><br><span class="line">摄氏温度： <span class="number">100</span> 华氏温度： <span class="number">212.0</span> </span><br><span class="line">摄氏温度： <span class="number">120</span> 华氏温度： <span class="number">248.0</span> </span><br><span class="line">摄氏温度： <span class="number">140</span> 华氏温度： <span class="number">284.0</span> </span><br><span class="line">摄氏温度： <span class="number">160</span> 华氏温度： <span class="number">320.0</span> </span><br><span class="line">摄氏温度： <span class="number">180</span> 华氏温度： <span class="number">356.0</span> </span><br><span class="line">摄氏温度： <span class="number">200</span> 华氏温度： <span class="number">392.0</span> </span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python编写简单的学生管理系统</title>
    <link href="http://pdxblog.top/Python%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://pdxblog.top/Python%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-25T11:49:43.118Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python编写简单的学生管理系统"><a href="#Python编写简单的学生管理系统" class="headerlink" title="Python编写简单的学生管理系统"></a>Python编写简单的学生管理系统</h4><blockquote><p>一共两个文件，其中一个定义函数，另一个是主程序，调用函数，运行程序</p></blockquote><p><strong>CMS.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">编写“学生信息管理系统”，要求如下：</span></span><br><span class="line"><span class="string">必须使用自定义函数，完成对程序的模块化</span></span><br><span class="line"><span class="string">学生信息至少包含：姓名、年龄、学号，除此以外可以适当添加</span></span><br><span class="line"><span class="string">必须完成的功能：添加、删除、修改、查询、退出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 定义一个列表用来存储多个学生信息</span></span><br><span class="line">stuList = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义系统菜单显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">displayMenu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 完成显示系统菜单的功能</span></span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">"学 生 信 息 管 理 系 统 "</span>)</span><br><span class="line">    print(<span class="string">"1、添加学生信息"</span>)</span><br><span class="line">    print(<span class="string">"2、删除学生信息"</span>)</span><br><span class="line">    print(<span class="string">"3、修改学生信息"</span>)</span><br><span class="line">    print(<span class="string">"4、查询学生信息"</span>)</span><br><span class="line">    print(<span class="string">"5、退出学生信息管理系统"</span>)</span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNewStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 完成添加学生信息的功能</span></span><br><span class="line">    name = input(<span class="string">"请输入学生的姓名："</span>)</span><br><span class="line">    stuId = input(<span class="string">"请输入学生的学号："</span>)</span><br><span class="line">    age = input(<span class="string">"请输入学生的年龄："</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个字典用来存储每个学生的信息</span></span><br><span class="line">    stuDict = &#123;&#125;</span><br><span class="line">    stuDict[<span class="string">'name'</span>] = name</span><br><span class="line">    stuDict[<span class="string">'stuId'</span>] = stuId</span><br><span class="line">    stuDict[<span class="string">'age'</span>] = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 将每个学生的信息添加到列表中</span></span><br><span class="line">    stuList.append(stuDict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成删除学生信息的功能</span></span><br><span class="line">    delName = input(<span class="string">"请输入你要删除的学生姓名："</span>)</span><br><span class="line">    delFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> tempStu <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> delName == tempStu[<span class="string">'name'</span>]:</span><br><span class="line">            delName = stuList.index(tempStu)  <span class="comment"># 获取要删除的学生所在列表中的索引</span></span><br><span class="line">            <span class="keyword">del</span> stuList[delName]  <span class="comment"># 按索引删除</span></span><br><span class="line">            delFlag = <span class="number">1</span>  <span class="comment"># 删除成功</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> delFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"没有此人，请中心输入！！！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reviseStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成修改学生信息的功能</span></span><br><span class="line">    reviseName = input(<span class="string">"请输入你要修改信息的学生姓名："</span>)</span><br><span class="line">    reviseFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> tempStuDict <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> reviseName == tempStuDict[<span class="string">'name'</span>]:</span><br><span class="line">            <span class="comment"># 修改学生的信息</span></span><br><span class="line">            newStuId = input(<span class="string">"请输入要修改后学生的学号："</span>)</span><br><span class="line">            newAge = input(<span class="string">"请输入要修改后学生的年龄："</span>)</span><br><span class="line">            tempStuDict[<span class="string">'stuId'</span>] = newStuId</span><br><span class="line">            tempStuDict[<span class="string">'age'</span>] = newAge</span><br><span class="line">            reviseFlag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> reviseFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"没有此人，请重新输入"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inquireStu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stuList</span><br><span class="line">    <span class="comment"># 完成查询学生信息的功能</span></span><br><span class="line">    inquireName = input(<span class="string">"请输入你要查询的学生的姓名："</span>)</span><br><span class="line">    inquireFlag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> stuList:</span><br><span class="line">        <span class="keyword">if</span> inquireName == temp[<span class="string">'name'</span>]:</span><br><span class="line">            print(<span class="string">"%s\t%s\t%s"</span> % (temp[<span class="string">'name'</span>], temp[<span class="string">'stuId'</span>], temp[<span class="string">'age'</span>]))</span><br><span class="line">            inquireFlag = <span class="number">1</span>  <span class="comment"># 表示查询成功</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> inquireFlag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"查无此人..."</span>)</span><br></pre></td></tr></table></figure><p><strong>test_student.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">测试学生信息管理系统的功能</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> student_sys.CMS <span class="keyword">as</span> stu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数：程序从这里开始运行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 菜单显示</span></span><br><span class="line">    <span class="comment"># 1、提示用户选择功能</span></span><br><span class="line">    stu.displayMenu()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 2、获取用户的输入</span></span><br><span class="line">        key = int(input(<span class="string">"请输入你选择的功能序号："</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key == <span class="number">1</span>:</span><br><span class="line">            stu.addNewStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">2</span>:</span><br><span class="line">            stu.delStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">3</span>:</span><br><span class="line">            stu.reviseStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">4</span>:</span><br><span class="line">            stu.inquireStu()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">5</span>:</span><br><span class="line">            print(<span class="string">'退出程序！！！'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入！！！只能输入1-5的数字！！！"</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用主函数，运行程序</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">****************************************</span><br><span class="line">学 生 信 息 管 理 系 统 </span><br><span class="line"><span class="number">1</span>、添加学生信息</span><br><span class="line"><span class="number">2</span>、删除学生信息</span><br><span class="line"><span class="number">3</span>、修改学生信息</span><br><span class="line"><span class="number">4</span>、查询学生信息</span><br><span class="line"><span class="number">5</span>、退出学生信息管理系统</span><br><span class="line">****************************************</span><br><span class="line">请输入你选择的功能序号：<span class="number">1</span></span><br><span class="line">请输入学生的姓名：john</span><br><span class="line">请输入学生的学号：<span class="number">003</span></span><br><span class="line">请输入学生的年龄：<span class="number">18</span></span><br><span class="line"></span><br><span class="line">请输入你选择的功能序号：<span class="number">4</span></span><br><span class="line">请输入你要查询的学生的姓名：john</span><br><span class="line">john<span class="number">003</span><span class="number">18</span></span><br><span class="line"></span><br><span class="line">请输入你选择的功能序号：<span class="number">5</span></span><br><span class="line">退出程序！！！</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之if语句</title>
    <link href="http://pdxblog.top/Python%E4%B9%8Bif%E8%AF%AD%E5%8F%A5.html"/>
    <id>http://pdxblog.top/Python%E4%B9%8Bif%E8%AF%AD%E5%8F%A5.html</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2020-03-13T11:48:20.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python之if语句"><a href="#Python之if语句" class="headerlink" title="Python之if语句"></a>Python之if语句</h3><p><strong>应用场景</strong></p><p>编程时经常需要检查一列条件并根据此条件决定采取什么措施</p><p><strong>选择条件的实例：简单的if结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果天气晴朗，我们去室外散步；否则继续宅在家里</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">如果 天气晴朗:</span></span><br><span class="line"><span class="string">    我们去室外散步</span></span><br><span class="line"><span class="string">否则:</span></span><br><span class="line"><span class="string">    继续宅在家里</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">state = <span class="string">'晴朗'</span></span><br><span class="line"><span class="keyword">if</span> state == <span class="string">'晴朗'</span>:</span><br><span class="line">    print(<span class="string">'室外散步'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'宅在家里'</span>)</span><br><span class="line">室外散步</span><br></pre></td></tr></table></figure><p><strong>条件表达测试布尔表达式</strong></p><blockquote><p>比较运算符：（==、!=、&gt;、&lt;、&gt;=、&lt;=）</p><p>逻辑运算符：(and、or)</p><p>成员运算符：（in、not in）</p></blockquote><p><strong>if语句结构</strong></p><p>使用不同的条件做不同的事情</p><blockquote><p>简单的if语句</p><p>if-else语句</p><p>if-elif-else结构</p><p>多重if结构</p><p>注意事项：else代码也不是必须的</p></blockquote><p><strong>if语句在列表中的应用</strong></p><blockquote><p>检查元素</p><p>确定列表是不空的</p><p>使用多个列表</p></blockquote><p><strong>条件表达测试布尔表达式</strong></p><p><strong>比较运算符</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#比较运算符在条件表达式的应用：ATM/客服电话(请输入1，请输入2....)</span></span><br><span class="line"><span class="comment">#==</span></span><br><span class="line">key = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> key == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'存款'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'取款'</span>)</span><br><span class="line">存款</span><br><span class="line"><span class="comment">#！=</span></span><br><span class="line"><span class="keyword">if</span> key != <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'不存款'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'存款'</span>)</span><br><span class="line">存款</span><br><span class="line"><span class="comment">#&gt;=</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"允许进入网吧"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'未成年人禁止进入'</span>)</span><br><span class="line">允许进入网吧</span><br><span class="line"><span class="comment">#其他运算符都是一个道理</span></span><br></pre></td></tr></table></figure><p><strong>逻逻辑运算符：and、or</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#and</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">50</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">and</span> money &gt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">抱歉  <span class="comment">#and两边的条件必须都得成立</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">or</span> money &gt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">欢迎光临   <span class="comment">#or两边的条件只需要满足一个就行</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">id_hard = <span class="literal">True</span> <span class="comment">#布尔值</span></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span> <span class="keyword">or</span> money &gt;= <span class="number">100</span>) <span class="keyword">and</span> id_hard:  <span class="comment">#对于布尔值（True/or）可以省略</span></span><br><span class="line">    print(<span class="string">'欢迎光临'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'抱歉'</span>)</span><br><span class="line">欢迎光临</span><br></pre></td></tr></table></figure><p>总结and和or的区别：</p><blockquote><p>and两边的条件必须都得成立</p><p>or两边的条件只需要满足一个就行</p></blockquote><p><strong>成员运算符：in、not in</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义列表</span></span><br><span class="line"><span class="comment">#in</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">不存在</span><br><span class="line"><span class="comment">#在列表中加一个kety查看效果</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>,<span class="string">'kety'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">不存在</span><br><span class="line"><span class="comment">#因为添加的kety是小写，而定义的变量是大写的Kety，对于这种情况可以采用忽略大小写转换的方法</span></span><br><span class="line">names = [<span class="string">'John'</span>,<span class="string">'Bili'</span>,<span class="string">'Laoyew'</span>,<span class="string">'kety'</span>]</span><br><span class="line">name = <span class="string">'Kety'</span></span><br><span class="line"><span class="keyword">if</span> name.lower() <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br><span class="line">存在</span><br><span class="line"><span class="comment">#not in</span></span><br><span class="line"><span class="keyword">if</span> name.upper() <span class="keyword">not</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">'no'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'yes'</span>)</span><br><span class="line">no</span><br></pre></td></tr></table></figure><p>条件测试的表达是的结果就是布尔值，要么是True，要么是False，不能用一个等值条件来做</p><p><strong>if语句结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单的if</span></span><br><span class="line">age = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line">婴儿</span><br><span class="line"><span class="comment">#if-else</span></span><br><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">2</span> <span class="keyword">and</span> age &lt;= <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'蹒跚学步'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line">蹒跚学步</span><br><span class="line"><span class="comment">#if-elif-else</span></span><br><span class="line">age = <span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'婴儿'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">2</span> <span class="keyword">and</span> age &lt;= <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'蹒跚学步'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">4</span> <span class="keyword">and</span> age &lt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'上幼儿园'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'其他'</span>)</span><br><span class="line">其他</span><br><span class="line"><span class="comment">#else代码不是必须的，如果去掉else，是没有输出结果的</span></span><br></pre></td></tr></table></figure><p>如果在符合一个条件之后里面又有一个条件该怎么表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#男女学生参加100米赛跑，如果在10秒内跑完的，进入决赛；</span></span><br><span class="line"><span class="comment">#进入决赛，分男子组合进行比赛</span></span><br><span class="line"><span class="comment">#多重if结构</span></span><br><span class="line">second = <span class="number">6</span></span><br><span class="line">gender = <span class="string">'男'</span></span><br><span class="line"><span class="keyword">if</span> second &lt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">'进入决赛'</span>)</span><br><span class="line">    <span class="keyword">if</span> gender == <span class="string">'男'</span>:</span><br><span class="line">        print(<span class="string">'进入男子组'</span>)</span><br><span class="line">    <span class="keyword">elif</span> gender == <span class="string">'女'</span>:</span><br><span class="line">        print(<span class="string">'进入女子组'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'重在参与，弘扬体育精神'</span>)</span><br><span class="line">进入决赛</span><br><span class="line">进入男子组</span><br></pre></td></tr></table></figure><p><strong>if语句在列表中的应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="keyword">if</span> f == <span class="string">'pear'</span>:</span><br><span class="line">        print(<span class="string">'做个梨罐头'</span>)</span><br><span class="line">    <span class="keyword">elif</span> f == <span class="string">'orange'</span>:</span><br><span class="line">        print(<span class="string">'做句子罐头'</span>)</span><br><span class="line">    <span class="keyword">elif</span> f == <span class="string">'apple'</span>:</span><br><span class="line">        print(<span class="string">'做苹果罐头'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'做沙拉'</span>)</span><br><span class="line">做苹果罐头</span><br><span class="line">做沙拉</span><br><span class="line">做个梨罐头</span><br><span class="line">做句子罐头  <span class="comment">#最后结果的顺序是列表内的顺序</span></span><br><span class="line">fruits = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'pear'</span>,<span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">if</span> len(fruits) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'没有水果'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'开始做水果罐头了'</span>)</span><br><span class="line">    <span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">        print(fruit,end=<span class="string">" "</span>)</span><br><span class="line">开始做水果罐头了</span><br><span class="line">apple banana pear orange</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><strong>1、求100以内数字的偶数之和与奇数之和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#偶数之和</span></span><br><span class="line">print(sum(range(<span class="number">2</span>,<span class="number">101</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="comment">#奇数之和</span></span><br><span class="line">print(sum(range(<span class="number">1</span>,<span class="number">101</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="number">2550</span></span><br><span class="line"><span class="number">2500</span></span><br></pre></td></tr></table></figure><p><strong>2、输出100以内7的倍数的数字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">        print(i,end=<span class="string">" "</span>)</span><br><span class="line"> <span class="number">7</span> <span class="number">14</span> <span class="number">21</span> <span class="number">28</span> <span class="number">35</span> <span class="number">42</span> <span class="number">49</span> <span class="number">56</span> <span class="number">63</span> <span class="number">70</span> <span class="number">77</span> <span class="number">84</span> <span class="number">91</span> <span class="number">98</span></span><br></pre></td></tr></table></figure><p><strong>3、打印直角三角形，奇数用*号代替，偶数用#号代替</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span> <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">            print(<span class="string">'*'</span>,end=<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'#'</span>,end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># </span></span><br><span class="line">* <span class="comment"># * </span></span><br><span class="line">* <span class="comment"># * # </span></span><br><span class="line">* <span class="comment"># * # * </span></span><br><span class="line">* <span class="comment"># * # * # </span></span><br><span class="line">* <span class="comment"># * # * # * </span></span><br><span class="line">* <span class="comment"># * # * # * # </span></span><br><span class="line">* <span class="comment"># * # * # * # *</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型之列表的进阶操作</title>
    <link href="http://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html"/>
    <id>http://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2020-03-13T11:48:20.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python数据类型之列表的进阶操作"><a href="#Python数据类型之列表的进阶操作" class="headerlink" title="Python数据类型之列表的进阶操作"></a>Python数据类型之列表的进阶操作</h3><p><strong>遍历</strong></p><p>重复性的内容需要按照步骤，分步式的读取出来</p><p>对文件内容已经有相似结构的循环读取</p><blockquote><ol><li>for循环</li><li>魔法推导式</li><li>常见的错误：缩进错误、遗漏冒号</li></ol></blockquote><p><strong>创建数值列表</strong></p><blockquote><ol><li><p>range(参数1，参数2，参数3)：包头不包尾</p><p>​    参数1：起始值（包含自己）</p><p>​    参数2：终止值（不包含自己）</p><p>​    参数3：步长（间隔数）</p></li><li><p>创建数字列表</p></li><li><p>数字列表的简单统计计算{最大值：max()、最小值：min()、总和：sum() }</p></li></ol></blockquote><p><strong>切片</strong></p><p>把一段数据进行分割</p><blockquote><ol><li><p>遍历切片</p></li><li><p>复制列表(把某一个列表中的数据给别的一个，同样的制造一份出来)</p></li></ol></blockquote><p><strong>元组</strong></p><blockquote><ol><li><p>元组与列表的区别（列表的值可以修改，元组的值不可修改）</p></li><li><p>定义元组</p></li><li><p>修改元组变量</p></li></ol></blockquote><h4 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个列表</span></span><br><span class="line">names = [<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"赵六"</span>,<span class="string">"田七"</span>]</span><br><span class="line">zhang_san = names[<span class="number">0</span>]</span><br><span class="line">li_si = names[<span class="number">1</span>]</span><br><span class="line">wang_wu = names[<span class="number">2</span>]</span><br><span class="line">print(zhang_san+<span class="string">" "</span>+li_si+<span class="string">" "</span>+wang_wu)</span><br><span class="line">张三 李四 王五</span><br><span class="line"><span class="comment">#想要读取某一个值，这样就很麻烦</span></span><br><span class="line"><span class="comment">#使用for循环来读取，重复的有规律的读取内容</span></span><br></pre></td></tr></table></figure><p><strong>for循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name,end=<span class="string">" "</span>)</span><br><span class="line">张三 李四 王五 赵六 田七</span><br><span class="line"><span class="comment">#如果是英文的名字，还可以进行一些操作，比如说大小写转换</span></span><br><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2:</span><br><span class="line">    print(name.title())</span><br><span class="line">Anlen</span><br><span class="line">Bob</span><br></pre></td></tr></table></figure><p><strong>魔法推导式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[name <span class="keyword">for</span> name <span class="keyword">in</span> names2]</span><br><span class="line">-----------------------------------------------------------------------------------------[<span class="string">'anlen'</span>, <span class="string">'bob'</span>]</span><br></pre></td></tr></table></figure><p><strong>常见的错误:</strong></p><p><strong>缩进错误</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2:</span><br><span class="line">print(name.title())  <span class="comment">#print没有缩进</span></span><br><span class="line">  File <span class="string">"&lt;ipython-input-12-89d8b78a3789&gt;"</span>, line <span class="number">3</span></span><br><span class="line">    print(name.title())</span><br><span class="line">    ^</span><br><span class="line">IndentationError: expected an indented bloc  <span class="comment">#提示缩进错误</span></span><br></pre></td></tr></table></figure><p><strong>遗漏冒号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names2 = [<span class="string">"anlen"</span>,<span class="string">"bob"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names2   <span class="comment">#遗漏冒号</span></span><br><span class="line">    print(name.title())</span><br><span class="line">  File <span class="string">"&lt;ipython-input-13-ee6eafbd451b&gt;"</span>, line <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names2</span><br><span class="line">                      ^</span><br><span class="line">SyntaxError: invalid syntax   <span class="comment">#提示语法错误</span></span><br></pre></td></tr></table></figure><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#循环输出1到10</span></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#这样会很麻烦，使用range()就会很方便</span></span><br></pre></td></tr></table></figure><p><strong>range(参数1，参数2，参数3)：包头不包尾</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#输出1-10之间的偶数</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>):  <span class="comment">#cong2开始每次加2</span></span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="comment">#输出1-10之间的奇数</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):  <span class="comment">#从1开始每次加2</span></span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="comment">#输出奇数的平方</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    print(num**<span class="number">2</span>,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">9</span> <span class="number">25</span> <span class="number">49</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><p><strong>创建数字列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">print(numbers)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p><strong>数字列表的简单计算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数字列表的最大值、最小值、总和</span></span><br><span class="line">print(max(numbers))</span><br><span class="line">print(min(numbers))</span><br><span class="line">print(sum(numbers))</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个列表</span></span><br><span class="line">pets = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"duck"</span>,<span class="string">"pig"</span>]</span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><p><strong>把数据进行分割，截取特定的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取开头</span></span><br><span class="line">pets[<span class="number">0</span>]  </span><br><span class="line"><span class="string">'cat'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#中间截取</span></span><br><span class="line">pets[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="string">'dog'</span>, <span class="string">'duck'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#全部截取</span></span><br><span class="line">pets[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#取最后</span></span><br><span class="line">pets[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'pig'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从开头到结尾</span></span><br><span class="line">pets[<span class="number">0</span>:]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从中间某一个到结尾</span></span><br><span class="line">pets[<span class="number">1</span>:]</span><br><span class="line">[<span class="string">'dog'</span>, <span class="string">'duck'</span>, <span class="string">'pig'</span>]</span><br></pre></td></tr></table></figure><p><strong>遍历切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> pets[<span class="number">-3</span>:]:</span><br><span class="line">    print(pet,end=<span class="string">" "</span>)</span><br><span class="line">dog duck pig</span><br></pre></td></tr></table></figure><p><strong>复制列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">games = [<span class="string">'王者'</span>,<span class="string">'吃鸡'</span>,<span class="string">'英雄联盟'</span>]</span><br><span class="line"><span class="comment">#friend_games = ['王者','吃鸡']  //这样代码创重复，是不可取的</span></span><br><span class="line">friend_games = games[:<span class="number">2</span>]</span><br><span class="line">print(<span class="string">'我喜欢的游戏有:'</span>+str(games))</span><br><span class="line">print(<span class="string">'我朋友喜欢的游戏有:'</span>+str(friend_games)</span><br><span class="line">我喜欢的游戏有:[<span class="string">'王者'</span>, <span class="string">'吃鸡'</span>, <span class="string">'英雄联盟'</span>]</span><br><span class="line">我朋友喜欢的游戏有:[<span class="string">'王者'</span>, <span class="string">'吃鸡'</span>]</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义列表</span></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">print(nums)</span><br><span class="line"><span class="comment">#定义元组</span></span><br><span class="line">numbers = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">print(numbers)</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-1</span><span class="number">-9</span>b5931007d67&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">5</span> <span class="comment">#定义元组</span></span><br><span class="line">      <span class="number">6</span> numbers = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">----&gt; 7 numbers[0] = 10</span><br><span class="line">      <span class="number">8</span> print(numbers[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment  <span class="comment">#tuple是只读，而不支持写</span></span><br><span class="line">     <span class="comment">#证明元组的值是不能被修改的</span></span><br><span class="line"><span class="comment">#但它的访问形式和列表一样</span></span><br><span class="line">print(nums[<span class="number">0</span>])</span><br><span class="line">print(numbers[<span class="number">0</span>])</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    print(num,end=<span class="string">" "</span>)</span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>给元组变量赋值，打包给它换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(numbers)</span><br><span class="line">numbers = (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(numbers)</span><br><span class="line">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>但是有些地方的值是不允许改变的，也不能改变的，比如（性别），这就可以使用元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sex = (<span class="string">"男"</span>,<span class="string">"女"</span>)</span><br><span class="line">print(sex)</span><br><span class="line">(<span class="string">'男'</span>, <span class="string">'女'</span>)   <span class="comment">#这个值就是固定的，不能被改，也没法该</span></span><br></pre></td></tr></table></figure><p>在日常生活中，要确定内容是否要进行二次修改来决定使用元组，还是列表</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><strong>批量生成50个C类IP–192.168.1.x</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pre = <span class="string">'192.168.1.'</span></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> list(range(<span class="number">1</span>,<span class="number">51</span>)):</span><br><span class="line">    print(pre+str(ip),end= <span class="string">"        "</span>)</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.7</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.8</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.9</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.13</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.15</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.16</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.17</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.18</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.19</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.20</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.21</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.22</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.23</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.24</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.25</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.26</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.27</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.28</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.29</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.30</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.31</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.32</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.33</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.34</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.35</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.36</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.37</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.38</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.39</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.40</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.41</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.42</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.43</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.44</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.45</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.46</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.47</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.48</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.49</span>        <span class="number">192.168</span><span class="number">.1</span><span class="number">.50</span></span><br></pre></td></tr></table></figure><p><strong>for的双重循环使用</strong></p><p>使用口诀：</p><blockquote><p>外层循环控制行数</p><p>内层循环控制列数</p><p>外层循环执行1次，内层循环执行1轮</p></blockquote><p><strong>打印数字直角三角形</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        print(j+<span class="number">1</span>,end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="number">1234567</span></span><br><span class="line"><span class="number">12345678</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p><strong>打印九九乘法表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">        print(str(j+<span class="number">1</span>)+<span class="string">"x"</span>+str(i)+<span class="string">"="</span>+str(i*(j+<span class="number">1</span>)),end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="number">1</span>x1=<span class="number">1</span> </span><br><span class="line"><span class="number">1</span>x2=<span class="number">2</span> <span class="number">2</span>x2=<span class="number">4</span> </span><br><span class="line"><span class="number">1</span>x3=<span class="number">3</span> <span class="number">2</span>x3=<span class="number">6</span> <span class="number">3</span>x3=<span class="number">9</span> </span><br><span class="line"><span class="number">1</span>x4=<span class="number">4</span> <span class="number">2</span>x4=<span class="number">8</span> <span class="number">3</span>x4=<span class="number">12</span> <span class="number">4</span>x4=<span class="number">16</span> </span><br><span class="line"><span class="number">1</span>x5=<span class="number">5</span> <span class="number">2</span>x5=<span class="number">10</span> <span class="number">3</span>x5=<span class="number">15</span> <span class="number">4</span>x5=<span class="number">20</span> <span class="number">5</span>x5=<span class="number">25</span> </span><br><span class="line"><span class="number">1</span>x6=<span class="number">6</span> <span class="number">2</span>x6=<span class="number">12</span> <span class="number">3</span>x6=<span class="number">18</span> <span class="number">4</span>x6=<span class="number">24</span> <span class="number">5</span>x6=<span class="number">30</span> <span class="number">6</span>x6=<span class="number">36</span> </span><br><span class="line"><span class="number">1</span>x7=<span class="number">7</span> <span class="number">2</span>x7=<span class="number">14</span> <span class="number">3</span>x7=<span class="number">21</span> <span class="number">4</span>x7=<span class="number">28</span> <span class="number">5</span>x7=<span class="number">35</span> <span class="number">6</span>x7=<span class="number">42</span> <span class="number">7</span>x7=<span class="number">49</span> </span><br><span class="line"><span class="number">1</span>x8=<span class="number">8</span> <span class="number">2</span>x8=<span class="number">16</span> <span class="number">3</span>x8=<span class="number">24</span> <span class="number">4</span>x8=<span class="number">32</span> <span class="number">5</span>x8=<span class="number">40</span> <span class="number">6</span>x8=<span class="number">48</span> <span class="number">7</span>x8=<span class="number">56</span> <span class="number">8</span>x8=<span class="number">64</span> </span><br><span class="line"><span class="number">1</span>x9=<span class="number">9</span> <span class="number">2</span>x9=<span class="number">18</span> <span class="number">3</span>x9=<span class="number">27</span> <span class="number">4</span>x9=<span class="number">36</span> <span class="number">5</span>x9=<span class="number">45</span> <span class="number">6</span>x9=<span class="number">54</span> <span class="number">7</span>x9=<span class="number">63</span> <span class="number">8</span>x9=<span class="number">72</span> <span class="number">9</span>x9=<span class="number">81</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型之列表的基本操作</title>
    <link href="http://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
    <id>http://pdxblog.top/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2020-03-13T11:48:20.960Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是列表"><a href="#什么是列表" class="headerlink" title="什么是列表"></a><strong>什么是列表</strong></h4><p>列表是Python中非常重要的数据类型，通常作为函数的返回值。由一组元素组成，列表可以实现添加、删除和查找操作，元素值可以被修改</p><p>由一系列按照特定的顺序排列起来的元素所组成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#普通的变量定义形式</span></span><br><span class="line">tom = <span class="string">"Tom"</span></span><br><span class="line">jack = <span class="string">"Jack"</span></span><br><span class="line">john = <span class="string">"John"</span></span><br><span class="line"></span><br><span class="line">pet1 = <span class="string">"cat"</span></span><br><span class="line">pet2 = <span class="string">"dog"</span></span><br><span class="line">pet3 = <span class="string">"bird"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义列表，语法格式</span></span><br><span class="line">name = [<span class="string">'Tom'</span>,<span class="string">'Jack'</span>,<span class="string">'John'</span>]</span><br><span class="line">pet = [<span class="string">'cat'</span>,<span class="string">'dog'</span>,<span class="string">'bird'</span>]   <span class="comment">#相比一个一个来定义会比较简洁，方便</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印列表</span></span><br><span class="line">print(name)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'Jack'</span>, <span class="string">'John'</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br></pre></td></tr></table></figure><p><strong>用索引访问列表元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过索引读取列表中的元素，索引从0开始，-1代表最后一个</span></span><br><span class="line">print(name[<span class="number">0</span>])</span><br><span class="line">print(pet[<span class="number">2</span>])</span><br><span class="line">Tom</span><br><span class="line">bird   <span class="comment">#这些数字就是列表中排列的顺序，是从0开始，按照一定的顺序，以此类推</span></span><br><span class="line"><span class="comment">#-1代表元素的最后一个，-2代表倒数第二个，以此类推</span></span><br><span class="line">print(name[<span class="number">-1</span>])</span><br><span class="line">print(pet[<span class="number">-2</span>])</span><br><span class="line">John</span><br><span class="line">dog</span><br></pre></td></tr></table></figure><h4 id="列表的基本操作"><a href="#列表的基本操作" class="headerlink" title="列表的基本操作"></a>列表的基本操作</h4><p><strong>修改：</strong></p><blockquote><p>通过索引获取元素，进行修改</p></blockquote><p><strong>添加：</strong></p><blockquote><p>append(元素)：在列表末尾添加</p><p>insert(索引，元素)：在列表指定位置插入</p></blockquote><p><strong>删除：</strong></p><blockquote><p>del：根据元素的索引删除元素，被删除的元素不可以在进行访问</p><p>pop()：删除列表末尾的元素</p><p>pop(索引)：弹出指定位置的元素，被删除的元素还能继续使用</p><p>remove(value)：根据元素的值进行删除</p></blockquote><p><strong>排序</strong></p><blockquote><p>sorted(列表)：临时排序</p><p>sort()：永久排序</p><p>sort(reverse=True)：倒序排序</p><p>len()：列表长度</p></blockquote><p><strong>修改列表的元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过索引获取元素，进行修改</span></span><br><span class="line">name[<span class="number">1</span>] = <span class="string">'San'</span></span><br><span class="line">print(name)</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'San'</span>, <span class="string">'John'</span>]  <span class="comment">#之前定义的是Jack，现在修改成了San</span></span><br></pre></td></tr></table></figure><p><strong>向列表中添加元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在列表末尾添加新元素</span></span><br><span class="line">name.append(<span class="string">'Bob'</span>)</span><br><span class="line">print(name)</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'San'</span>, <span class="string">'John'</span>, <span class="string">'Bob'</span>]</span><br><span class="line"><span class="comment">#在列表指定位置添加新元素</span></span><br><span class="line">print(pet)</span><br><span class="line">pet.insert(<span class="number">0</span>,<span class="string">'penguin'</span>)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br><span class="line">[<span class="string">'penguin'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br><span class="line"></span><br><span class="line">pet.insert(<span class="number">-2</span>,<span class="string">'pig'</span>)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'penguin'</span>, <span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br></pre></td></tr></table></figure><p><strong>删除列表中的元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据元素的索引删除元素</span></span><br><span class="line">print(pet)</span><br><span class="line"><span class="keyword">del</span> pet[<span class="number">0</span>]</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'penguin'</span>, <span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]  <span class="comment">#使用del删除的元素不可以进行访问</span></span><br><span class="line"><span class="comment">#删除列表末尾的元素</span></span><br><span class="line">print(pet)</span><br><span class="line">new_pet = pet.pop()  <span class="comment">#不加参数在表最后一个</span></span><br><span class="line">print(new_pet)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>, <span class="string">'bird'</span>]</span><br><span class="line">bird</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>] </span><br><span class="line"><span class="comment">#弹出指定位置的元素</span></span><br><span class="line">print(pet)</span><br><span class="line">pet.pop(<span class="number">2</span>)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>, <span class="string">'dog'</span>]</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>]</span><br><span class="line"><span class="comment">#访问刚才删除的值</span></span><br><span class="line">print(new_pet)</span><br><span class="line">bird</span><br><span class="line"><span class="comment">#根据元素的值进行删除</span></span><br><span class="line">print(pet)</span><br><span class="line">pet.remove(<span class="string">'cat'</span>)</span><br><span class="line">print(pet)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'pig'</span>]</span><br><span class="line">[<span class="string">'pig'</span>]</span><br><span class="line"><span class="comment">#删除一个不存在值</span></span><br><span class="line">pet.remove(<span class="string">'d'</span>)</span><br><span class="line">print(pet)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-16</span><span class="number">-086</span>f691d7e32&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> <span class="comment">#删除一个不存在值</span></span><br><span class="line">----&gt; 2 pet.remove('d')</span><br><span class="line">      <span class="number">3</span> print(pet)</span><br><span class="line"></span><br><span class="line">ValueError: list.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> list</span><br><span class="line"><span class="comment">#删除的值必须是真实存在的，不然就会报错</span></span><br></pre></td></tr></table></figure><p><strong>列表排序</strong></p><p>按照26个字母的顺序进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义列表：汽车的品牌</span></span><br><span class="line">print(<span class="string">'原始顺序：'</span>)</span><br><span class="line">brand = [<span class="string">'audi'</span>,<span class="string">'bmw'</span>,<span class="string">'toyota'</span>,<span class="string">'byd'</span>,<span class="string">'luhu'</span>]</span><br><span class="line">print(brand)</span><br><span class="line"><span class="comment">#临时排序</span></span><br><span class="line">print(<span class="string">'临时排序：'</span>)</span><br><span class="line">print(sorted(brand))</span><br><span class="line">print(brand)</span><br><span class="line"><span class="comment">#永久排序</span></span><br><span class="line">print(<span class="string">'永久排序：'</span>)</span><br><span class="line">brand.sort()</span><br><span class="line">print(brand)</span><br><span class="line"><span class="comment">#倒序排序</span></span><br><span class="line">print(<span class="string">'倒序排序：'</span>)</span><br><span class="line">brand.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(brand)</span><br><span class="line">原始顺序：</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>, <span class="string">'byd'</span>, <span class="string">'luhu'</span>]</span><br><span class="line">临时排序：</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'byd'</span>, <span class="string">'luhu'</span>, <span class="string">'toyota'</span>]</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>, <span class="string">'byd'</span>, <span class="string">'luhu'</span>]   <span class="comment">#排完序之后就又变会原来的顺序了</span></span><br><span class="line">永久排序：</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'byd'</span>, <span class="string">'luhu'</span>, <span class="string">'toyota'</span>]</span><br><span class="line">倒序排序：</span><br><span class="line">[<span class="string">'toyota'</span>, <span class="string">'luhu'</span>, <span class="string">'byd'</span>, <span class="string">'bmw'</span>, <span class="string">'audi'</span>]</span><br></pre></td></tr></table></figure><p><strong>获取列表的长度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取列表的长度</span></span><br><span class="line">print(len(brand))</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>常见错误：索引越界</strong></p><p>比如说列表长度为5，也就是说索引最多到4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正确索引</span></span><br><span class="line">print(brand[<span class="number">4</span>])</span><br><span class="line">audi</span><br><span class="line"><span class="comment">#错误索引，索引越界</span></span><br><span class="line">print(brand[<span class="number">5</span>])</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IndexError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-10</span><span class="number">-173</span>eb23c555f&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 print(brand[5])</span><br><span class="line"></span><br><span class="line">IndexError: list index out of range <span class="comment">#索引错误，列表索引超出范围</span></span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><strong>列表练习（一）</strong></p><blockquote><ol><li>定义一个列表，存储5个科目名称 </li><li>新增科目（末尾新增&amp;指定位置新增） </li><li>修改科目 </li><li>删除科目，并且在打印科目列表的时候，能够显示删除了哪个科目 </li><li>删除指定名称的科目 </li><li>删除第2个科目 </li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、定义一个列表，存储5个科目名称</span></span><br><span class="line">print(<span class="string">'定义列表：'</span>)</span><br><span class="line">subjects = [<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,<span class="string">'物理'</span>,<span class="string">'历史'</span>]</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#2、新增科目（末尾新增&amp;指定位置新增）</span></span><br><span class="line"><span class="comment">#末尾新增</span></span><br><span class="line">print(<span class="string">'末尾新增：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects.append(<span class="string">'化学'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#指定位置新增</span></span><br><span class="line">print(<span class="string">'指定位置新增：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects.insert(<span class="number">0</span>,<span class="string">'生物'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#3、修改科目</span></span><br><span class="line">print(<span class="string">'修改科目：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects[<span class="number">1</span>] = <span class="string">'政治'</span></span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#4、删除科目，并且在打印科目列表的时候，能够显示产出了哪个科目</span></span><br><span class="line">print(<span class="string">'删除科目，并且显示删除了哪个科目：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">new_subjects = subjects.pop()</span><br><span class="line">print(new_subjects)</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#5、删除指定名称的科目</span></span><br><span class="line">print(<span class="string">'删除指定名称的科目：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects.remove(<span class="string">'物理'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line"><span class="comment">#6、删除第二个科目</span></span><br><span class="line">print(<span class="string">'删除第二个科目：'</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">subjects.pop(<span class="number">1</span>)</span><br><span class="line">print(subjects)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">定义列表：</span><br><span class="line">[<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>]</span><br><span class="line">末尾新增：</span><br><span class="line">[<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>]</span><br><span class="line">[<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">指定位置新增：</span><br><span class="line">[<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">修改科目：</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">删除科目，并且显示删除了哪个科目：</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>, <span class="string">'化学'</span>]</span><br><span class="line">化学</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>]</span><br><span class="line">删除指定名称的科目：</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'物理'</span>, <span class="string">'历史'</span>]</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'历史'</span>]</span><br><span class="line">删除第二个科目：</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'政治'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'历史'</span>]</span><br><span class="line">[<span class="string">'生物'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'历史'</span>]</span><br></pre></td></tr></table></figure><p><strong>列表练习（二）</strong> </p><blockquote><ol><li>将5个城市的名称存储到列表中，并且保证名称不是按照字母顺序排列的 </li><li>打印出原始的城市列表信息 </li><li>使用sorted()方法按字母顺序打印城市列表，但是不要修改列表元素的顺序 </li><li>打印该列表，确认城市名称排列顺序没有被修改 </li><li>使用sort()方法排列城市名称，确保永久性修改排列顺序</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、将5个城市的名称存储带列表中，并且保证名称不是按照字母顺序排列的</span></span><br><span class="line">print(<span class="string">'定义城市列表：'</span>)</span><br><span class="line">city = [<span class="string">'zhengzhou'</span>,<span class="string">'shanghai'</span>,<span class="string">'beijing'</span>,<span class="string">'guangzhou'</span>,<span class="string">'luoyang'</span>]</span><br><span class="line"><span class="comment">#2、打印出来原始的城市列表信息</span></span><br><span class="line">print(<span class="string">'原始列表信息：'</span>)</span><br><span class="line">print(city)</span><br><span class="line"><span class="comment">#3、使用sorted()方法按字母顺序打印城市列表，但不要修改列表元素的顺序</span></span><br><span class="line">print(<span class="string">'sorted()方法排序--临时排序：'</span>)</span><br><span class="line">print(city)</span><br><span class="line">print(sorted(city))</span><br><span class="line"><span class="comment">#4、打印该列表，确认城市名称排序没有被修改</span></span><br><span class="line">print(<span class="string">'验证城市名称排序没有被修改：'</span>)</span><br><span class="line">print(city)</span><br><span class="line"><span class="comment">#5、使用sort()方法排序城市名称，确保永久性排列顺序</span></span><br><span class="line">print(<span class="string">'使用sort()排序--永久排序：'</span>)</span><br><span class="line">city.sort()</span><br><span class="line">print(city)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">定义城市列表：</span><br><span class="line">原始列表信息：</span><br><span class="line">[<span class="string">'zhengzhou'</span>, <span class="string">'shanghai'</span>, <span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>]</span><br><span class="line">sorted()方法排序--临时排序：</span><br><span class="line">[<span class="string">'zhengzhou'</span>, <span class="string">'shanghai'</span>, <span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>]</span><br><span class="line">[<span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>, <span class="string">'shanghai'</span>, <span class="string">'zhengzhou'</span>]</span><br><span class="line">验证城市名称排序没有被修改：</span><br><span class="line">[<span class="string">'zhengzhou'</span>, <span class="string">'shanghai'</span>, <span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>]</span><br><span class="line">使用sort()排序--永久排序：</span><br><span class="line">[<span class="string">'beijing'</span>, <span class="string">'guangzhou'</span>, <span class="string">'luoyang'</span>, <span class="string">'shanghai'</span>, <span class="string">'zhengzhou'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python的变量和简单的数据类型</title>
    <link href="http://pdxblog.top/Python%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://pdxblog.top/Python%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</id>
    <published>2020-03-10T16:00:00.000Z</published>
    <updated>2020-03-11T09:59:20.859Z</updated>
    
    <content type="html"><![CDATA[<h4 id="IPython介绍"><a href="#IPython介绍" class="headerlink" title="IPython介绍"></a>IPython介绍</h4><p><code>ipython</code>是一个<code>python</code>的交互式<code>shell</code>，比默认的<code>python shell</code>好用得多，支持变量自动补全，自动缩进，支持<code>bash shell</code>命令，内置了许多很有用的功能和函数。学习<code>ipython</code>将会让我们以一种更高的效率来使用<code>python</code>。同时它也是利用Python进行科学计算和交互可视化的一个最佳的平台</p><p><strong>IPython提供了两个主要的组件：</strong></p><blockquote><ul><li>一个强大的python交互式shell </li><li>供Jupyter notebooks使用的一个Jupyter内核（IPython notebook）</li></ul></blockquote><p><strong>IPython的主要功能如下：</strong></p><blockquote><ul><li>运行ipython控制台 </li><li>使用ipython作为系统shell </li><li>使用历史输入(history) </li><li>Tab补全 </li><li>使用<code>%run</code>命令运行脚本 </li><li>使用<code>%timeit</code>命令快速测量时间 </li><li>使用<code>%pdb</code>命令快速debug </li><li>使用<code>pylab</code>进行交互计算 </li><li>使用IPython Notebook</li></ul></blockquote><p><strong>安装IPython</strong></p><p>ipython支持Python2.7版本或者3.3以上的版本，我用的是windows下的python 3.8.2版本。</p><p><strong>安装ipython很简单，可以直接使用pip管理工具即可:</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;pip3 install ipython</span><br></pre></td></tr></table></figure><p><strong>下载太慢可以使用国内镜像：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;pip3 install <span class="literal">-i</span> https://pypi.douban.com/simple ipython</span><br></pre></td></tr></table></figure><p><strong>查看当前库</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;pip3 list</span><br><span class="line">Package          Version</span><br><span class="line">---------------- -------</span><br><span class="line">backcall         <span class="number">0.1</span>.<span class="number">0</span></span><br><span class="line">colorama         <span class="number">0.4</span>.<span class="number">3</span></span><br><span class="line">decorator        <span class="number">4.4</span>.<span class="number">2</span></span><br><span class="line">ipython          <span class="number">7.13</span>.<span class="number">0</span></span><br><span class="line">ipython<span class="literal">-genutils</span> <span class="number">0.2</span>.<span class="number">0</span></span><br><span class="line">jedi             <span class="number">0.16</span>.<span class="number">0</span></span><br><span class="line">parso            <span class="number">0.6</span>.<span class="number">2</span></span><br><span class="line">pickleshare      <span class="number">0.7</span>.<span class="number">5</span></span><br><span class="line">pip              <span class="number">19.2</span>.<span class="number">3</span></span><br><span class="line">prompt<span class="literal">-toolkit</span>   <span class="number">3.0</span>.<span class="number">4</span></span><br><span class="line">Pygments         <span class="number">2.6</span>.<span class="number">1</span></span><br><span class="line">setuptools       <span class="number">41.2</span>.<span class="number">0</span></span><br><span class="line">six              <span class="number">1.14</span>.<span class="number">0</span></span><br><span class="line">traitlets        <span class="number">4.3</span>.<span class="number">3</span></span><br><span class="line">wcwidth          <span class="number">0.1</span>.<span class="number">8</span></span><br><span class="line">WARNING: You are <span class="keyword">using</span> pip version 19.2.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'python -m pip install --upgrade pip'</span> command.</span><br></pre></td></tr></table></figure><p><strong>根据提示更新下载源</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;python3 <span class="literal">-m</span> pip install -<span class="literal">-upgrade</span> pip</span><br></pre></td></tr></table></figure><p><strong>更显失败的利用豆瓣镜像源更新</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;python <span class="literal">-m</span> pip install -<span class="literal">-upgrade</span> pip <span class="literal">-i</span> https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p><strong>交互式使用IPython</strong></p><p>IPython支持所有python的标准输入输出，也就是我们在IDLE中或者Python shell中能用的，在IPython中都能够使用，唯一的不同之处使ipython会使用<code>In [x]</code>和<code>Out [x]</code>表示输入输出，并表示出相应的序号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在cmd窗口输出ipython即可</span></span><br><span class="line">C:\Users\Admin&gt;ipython</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.2</span> (tags/v3<span class="number">.8</span><span class="number">.2</span>:<span class="number">7</span>b3ab59, Feb <span class="number">25</span> <span class="number">2020</span>, <span class="number">23</span>:<span class="number">03</span>:<span class="number">10</span>) [MSC v<span class="number">.1916</span> <span class="number">64</span> bit (AMD64)]</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.13</span><span class="number">.0</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: print(<span class="string">'hello python!'</span>)</span><br><span class="line">hello python!</span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">In [<span class="number">2</span>]: exit</span><br></pre></td></tr></table></figure><h4 id="Jupyter-Notebook介绍"><a href="#Jupyter-Notebook介绍" class="headerlink" title="Jupyter Notebook介绍"></a>Jupyter Notebook介绍</h4><p>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。——<a href="https://link.jianshu.com/?t=https%3A%2F%2Fjupyter-notebook.readthedocs.io%2Fen%2Fstable%2Fnotebook.html" target="_blank" rel="noopener">Jupyter Notebook官方介绍</a></p><p>简而言之，Jupyter Notebook是以网页的形式打开，可以在网页页面中<strong>直接</strong>编写代码和运行代码，代码的运行结果也会直接在代码块下显示。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释</p><p><strong>组成部分</strong></p><p><strong>1、网页应用</strong></p><p>网页应用即基于网页形式的、结合了编写说明文档、数学公式、交互计算和其他富媒体形式的工具。<strong>简言之，网页应用是可以实现各种功能的工具</strong></p><p><strong>2、文档</strong></p><p>即Jupyter Notebook中所有交互计算、编写说明文档、数学公式、图片以及其他富媒体形式的输入和输出，都是以文档的形式体现的。</p><p>这些文档是保存为后缀名为<code>.ipynb</code>的<code>JSON</code>格式文件，不仅便于版本控制，也方便与他人共享。</p><p>此外，文档还可以导出为：HTML、LaTeX、PDF等格</p><p><strong>Jupyter Notebook的主要特点</strong></p><blockquote><ul><li>编程时具有<strong>语法高亮</strong>、<em>缩进</em>、<em>tab补全</em>的功能。</li><li>可直接通过浏览器运行代码，同时在代码块下方展示运行结果。</li><li>以富媒体格式展示计算结果。富媒体格式包括：HTML，LaTeX，PNG，SVG等。</li><li>对代码编写说明文档或语句时，支持Markdown语法。</li><li>支持使用LaTeX编写数学性说明</li></ul></blockquote><p><strong>安装Jupyter Notebook</strong></p><p><strong>安装前提</strong></p><p>安装Jupyter Notebook的前提是需要安装了Python（3.3版本及以上，或2.7版本</p><p><strong>使用pip命令安装</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;pip3 install <span class="literal">-i</span> https://pypi.douban.com/simple jupyter</span><br></pre></td></tr></table></figure><p><strong>运行Jupyter Notebook</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;jupyter  notebook</span><br></pre></td></tr></table></figure><p>执行命令之后，在终端中将会显示一系列notebook的服务器信息，同时浏览器将会自动启动Jupyter Notebook</p><p><strong>启动过程中终端显示内容如下：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.207</span> <span class="type">NotebookApp</span>] Serving notebooks from local directory: F:\python1\<span class="number">1</span></span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.208</span> <span class="type">NotebookApp</span>] The Jupyter Notebook is running at:</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.208</span> <span class="type">NotebookApp</span>] http://localhost:<span class="number">8888</span>/?token=c3ac105eef676358b314723d6d56a53ca773fac409c6fac8</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.208</span> <span class="type">NotebookApp</span>]  or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=c3ac105eef676358b314723d6d56a53ca773fac409c6fac8</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.208</span> <span class="type">NotebookApp</span>] Use Control<span class="literal">-C</span> to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[<span class="type">C</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">50.227</span> <span class="type">NotebookApp</span>]</span><br><span class="line"></span><br><span class="line">    To access the notebook, open this file <span class="keyword">in</span> a browser:</span><br><span class="line">        file:///C:/Users/Admin/AppData/Roaming/jupyter/runtime/nbserver<span class="literal">-6444</span><span class="literal">-open</span>.html</span><br><span class="line">    Or copy and paste one of these URLs:</span><br><span class="line">        http://localhost:<span class="number">8888</span>/?token=c3ac105eef676358b314723d6d56a53ca773fac409c6fac8</span><br><span class="line">     or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=c3ac105eef676358b314723d6d56a53ca773fac409c6fac8</span><br></pre></td></tr></table></figure><p>注意：之后在Jupyter Notebook的所有操作，都请保持终端<strong>不要关闭</strong>，因为一旦关闭终端，就会断开与本地服务器的链接，你将无法在Jupyter Notebook中进行其他操作啦<br><img src="https://img-blog.csdnimg.cn/20200311175251273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果你同时启动了多个Jupyter Notebook，由于默认端口“8888”被占用，因此地址栏中的数字将从“8888”起，每多启动一个Jupyter Notebook数字就加1，如“8889”、“8890”……</p><p><strong>启动服务器不打开浏览器</strong></p><p>如果你只是想启动Jupyter Notebook的服务器但不打算立刻进入到主页面，那么就无需立刻启动浏览器。在终端中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\python1\<span class="number">1</span>&gt;jupyter  notebook  -<span class="literal">-no</span><span class="literal">-browser</span></span><br></pre></td></tr></table></figure><p>此时，将会在终端显示启动的服务器信息，并在服务器启动之后，显示出打开浏览器页面的链接。当你需要启动浏览器页面时，只需要复制链接，并粘贴在浏览器的地址栏中，轻按回车变转到了你的Jupyter Notebook页面</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">F:\python1\<span class="number">1</span>&gt;jupyter  notebook  -<span class="literal">-no</span><span class="literal">-browser</span></span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.674</span> <span class="type">NotebookApp</span>] Serving notebooks from local directory: F:\python1\<span class="number">1</span></span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.675</span> <span class="type">NotebookApp</span>] The Jupyter Notebook is running at:</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.675</span> <span class="type">NotebookApp</span>] http://localhost:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.675</span> <span class="type">NotebookApp</span>]  or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br><span class="line">[<span class="type">I</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.675</span> <span class="type">NotebookApp</span>] Use Control<span class="literal">-C</span> to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[<span class="type">C</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">51.678</span> <span class="type">NotebookApp</span>]</span><br><span class="line"></span><br><span class="line">    To access the notebook, open this file <span class="keyword">in</span> a browser:</span><br><span class="line">        file:///C:/Users/Admin/AppData/Roaming/jupyter/runtime/nbserver<span class="literal">-7204</span><span class="literal">-open</span>.html</span><br><span class="line">    Or copy and paste one of these URLs:</span><br><span class="line">        http://localhost:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br><span class="line">     or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br></pre></td></tr></table></figure><p>浏览器输入：<code>http://localhost:8888</code>就可以访问<br><img src="https://img-blog.csdnimg.cn/20200311175327800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>根据终端的提示输入token</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Or copy and paste one of these URLs:</span><br><span class="line">    http://localhost:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br><span class="line"> or http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=<span class="number">703</span>a6064cab58c5fe00f63133ee3dd55573fb09cf6fae2d4</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200311175345596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个目录取决于你在哪个目录下启动的</p><h4 id="安装完成后就开始使用"><a href="#安装完成后就开始使用" class="headerlink" title="安装完成后就开始使用"></a>安装完成后就开始使用</h4><h4 id="什么是变量："><a href="#什么是变量：" class="headerlink" title="什么是变量："></a>什么是变量：</h4><blockquote><p><strong>简单理解来说就是，起一个名字用等于号给它赋予一个值，这就是变量（固定不变的量叫做常量）</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">sum1 = <span class="number">0</span>  <span class="comment">#定义变量2</span></span><br><span class="line">sum2 = <span class="number">1</span>  <span class="comment">#定义变量2</span></span><br><span class="line">print(sum1) <span class="comment">#输出定义的变量1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">print(sum2)  <span class="comment">#输出定义的变量2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">#也可以一次定义多个变量</span></span><br><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">print(b)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">print(c)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">print(a,b,c)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>变量的用法有什么好处：</strong></p><blockquote><p><strong>在某种程度上可以实现代码的复用</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要很多地方都用到这个数据，而且这些数据还会存放在计算机内，占用内存</span></span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">print(<span class="string">'北京欢迎你'</span>)</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line"><span class="comment">#定义一个变量message="北京欢迎你"，message就比北京欢迎你占的字符小，占用内存也小</span></span><br><span class="line">message = <span class="string">"北京欢迎你"</span></span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">print(message)</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br><span class="line">北京欢迎你</span><br></pre></td></tr></table></figure><p><strong>变量的命令规则：</strong></p><blockquote><ul><li>只能包换字母、数字、下划线，但是不能以数字打头</li><li>不能包含空格，但是可以用下划线分隔其中的单词</li><li>不能使用Python关键字和函数的名称用作变量，比如：import、class、and、return、def、from …..等等</li><li>变量名应该简短并且见名之意</li><li>慎用小写字母 i 和大写字母 O（容易和数字混淆的字母）</li></ul></blockquote><p><strong>只能包换字母、数字、下划线，但是不能以数字打头</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#错误例子</span></span><br><span class="line">$a=<span class="number">89</span></span><br><span class="line">$a</span><br><span class="line">  File <span class="string">"&lt;ipython-input-6-cf2d0c5b3bb7&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    $a=<span class="number">89</span></span><br><span class="line">    ^</span><br><span class="line">SyntaxError: invalid  <span class="comment">#非法的输入</span></span><br><span class="line"><span class="comment">#数字开头也不行</span></span><br><span class="line"><span class="number">1</span>a=<span class="number">89</span></span><br><span class="line"><span class="number">1</span>a</span><br><span class="line">  File <span class="string">"&lt;ipython-input-7-e78e6d530639&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="number">1</span>a=<span class="number">89</span></span><br><span class="line">     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p><strong>不能包含空格，但是可以用下划线分隔其中的单词</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#包换空格示例</span></span><br><span class="line">a b=<span class="number">89</span></span><br><span class="line">a b</span><br><span class="line">  File <span class="string">"&lt;ipython-input-9-1917d5b6e6ca&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    a b=<span class="number">89</span></span><br><span class="line">      ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="comment">#以下划线分隔</span></span><br><span class="line">a_b=<span class="number">89</span></span><br><span class="line">a_b</span><br><span class="line"><span class="number">89</span></span><br></pre></td></tr></table></figure><p><strong>不能使用Python关键字和函数的名称用作变量</strong></p><p><strong>比如：import、class、and、return、def、from …..等等</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> = <span class="string">'ere'</span></span><br><span class="line">  File <span class="string">"&lt;ipython-input-11-58ece2b8d285&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">import</span> = <span class="string">'ere'</span></span><br><span class="line">           ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="keyword">and</span> = <span class="string">"ddd"</span></span><br><span class="line">  File <span class="string">"&lt;ipython-input-13-9498d9360549&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">and</span> = <span class="string">"ddd"</span></span><br><span class="line">    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="comment">#只要变量名称是绿色或者是红色的就不能使用</span></span><br></pre></td></tr></table></figure><p><strong>变量名应该简短并且见名之意</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="number">1</span></span><br><span class="line">num2=<span class="number">2</span></span><br><span class="line">teacher_name = <span class="string">"苏珊"</span>  <span class="comment">#老师的名字</span></span><br><span class="line">student_name = <span class="string">"吉米"</span>  <span class="comment">#学生的名字</span></span><br><span class="line">lengh_of_student = <span class="number">2</span>  <span class="comment">#学生名字的长度</span></span><br></pre></td></tr></table></figure><p><strong>慎用小写字母 i 和大写字母 O</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l=<span class="number">1</span>  <span class="comment">#小写L=数字1</span></span><br><span class="line">O=<span class="number">0</span>  <span class="comment">#大写O=数字0</span></span><br><span class="line">i=<span class="number">1</span>  <span class="comment">#小写I=数字1</span></span><br><span class="line"><span class="comment">#这些容以与数字混淆的慎用</span></span><br></pre></td></tr></table></figure><p><strong>使用常见的错误：</strong></p><blockquote><p><strong>变量未定义就使用</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>=(num)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-15</span>-f827eafea48a&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 print=(num)</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'num'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="comment">#变量要定义后再进行使用</span></span><br></pre></td></tr></table></figure><h4 id="Python常用的数据类型"><a href="#Python常用的数据类型" class="headerlink" title="Python常用的数据类型"></a>Python常用的数据类型</h4><p><strong>1、字符串</strong></p><p>Python中的字符串类型是一组包含数字、字母和符号的集合，作为一个整体使用</p><p><strong>字符串的表达形式</strong></p><p>在Python中有三种表示字符串的方式，单引号、双引号、三引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'hello'</span></span><br><span class="line">str2 = <span class="string">"world"</span></span><br><span class="line">str3 = <span class="string">'''</span></span><br><span class="line"><span class="string">春眠不觉晓</span></span><br><span class="line"><span class="string">处处闻啼鸟</span></span><br><span class="line"><span class="string">夜来风雨声</span></span><br><span class="line"><span class="string">花落知多少</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(str1)</span><br><span class="line">print(str2)</span><br><span class="line">print(str3)</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"></span><br><span class="line">春眠不觉晓</span><br><span class="line">处处闻啼鸟</span><br><span class="line">夜来风雨声</span><br><span class="line">花落知多少</span><br></pre></td></tr></table></figure><p>需要注意的是，单引号和双引号的作用是一样的，可以根据习惯使用，但是定义多行文字时，必须要使用三引号</p><p><strong>使用字符串的注意事项</strong></p><blockquote><ul><li>字符串的定义方式单引号、双引号、三引号大部分情况下作用是相同的，但在特殊情况下使用也有所区别，下面是需要注意的地方</li><li>单引号、双引号、三引号它们是成对出现的，如以单引号开头就要以单引号结尾，不能混合使用表示字符串</li><li>如果字符串中单独出现单引号或双引号，可以使用另一种引号定义</li><li>当字符串中出现单引号、双引号等特殊字符时，还可以使用转义字符定义。Python中的转移字符是“\”，只要在特殊字符前面加上“\”，就可以原样输出，而不用去管定义字符串使用的是单引号还是双引号</li></ul></blockquote><p><strong>字符串的常用方法</strong></p><blockquote><ul><li>修改字符串大小写（title、upper、lower）</li><li>拼接字符串（+、函数str() ）</li><li>添加空白（空格、换行符：\n、水平制表位：\t、end=’’：不进行换行直接连起来）</li><li>删除空白(开头：lstrip()、末尾：retrip()、两端：strip() )</li></ul></blockquote><p><strong>修改字符串大小写</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"ad loveLace"</span></span><br><span class="line">print(name.title())  <span class="comment">#首字母大写</span></span><br><span class="line">print(name.upper())  <span class="comment">#全部大写</span></span><br><span class="line">print(name.lower())  <span class="comment">#全部小写</span></span><br><span class="line">Ad Lovelace</span><br><span class="line">AD LOVELACE</span><br><span class="line">ad lovelace</span><br></pre></td></tr></table></figure><p><strong>拼接字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将name与要定义的age拼接起来</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">',今年'</span>+str(age)+<span class="string">'岁'</span>)</span><br><span class="line">我叫ad loveLace,今年<span class="number">18</span>岁</span><br></pre></td></tr></table></figure><p>PS：print输出的默认是字符串，而定义的age的值是数字，所以需要函数str() 将数字转化为字符串类型，不然会报错（<code>TypeError: can only concatenate str (not &quot;int&quot;) to str</code>）</p><p><strong>添加空白</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让18岁之间有空格</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">',今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,今年 <span class="number">18</span> 岁</span><br><span class="line"><span class="comment">#换行符：\n</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">',\n今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,</span><br><span class="line">今年 <span class="number">18</span> 岁</span><br><span class="line"><span class="comment">#水平制表为\t</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'我叫\t'</span>+name+<span class="string">',\n今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,</span><br><span class="line">今年 <span class="number">18</span> 岁</span><br><span class="line"><span class="comment">#end=''</span></span><br><span class="line">//先来看看不是使用end=<span class="string">''</span>的效果</span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">','</span>)</span><br><span class="line">print(<span class="string">'今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,</span><br><span class="line">今年 <span class="number">18</span> 岁      <span class="comment">#输出为了两行</span></span><br><span class="line">//使用end=<span class="string">''</span>将两行连起来</span><br><span class="line">print(<span class="string">'我叫'</span>+name+<span class="string">','</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'今年 '</span>+str(age)+<span class="string">' 岁'</span>)</span><br><span class="line">我叫ad loveLace,今年 <span class="number">18</span> 岁</span><br></pre></td></tr></table></figure><p><strong>删除空白</strong></p><p>比如说在登录帐户的时候，一不小心手一抖多了个空格，但是是不允许有空格的，这时候就用到了删除空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量，值的坐中又均有空格</span></span><br><span class="line">content = <span class="string">" test demon "</span></span><br><span class="line">print(content)  <span class="comment">#没有改变的情况</span></span><br><span class="line">print(content.lstrip())  <span class="comment">#去掉左边的空格</span></span><br><span class="line">print(content.rstrip())  <span class="comment">#去掉右边的空格</span></span><br><span class="line">print(content.strip())  <span class="comment">#去掉两边的空格</span></span><br><span class="line"> test demon</span><br><span class="line">test demon </span><br><span class="line"> test demon</span><br><span class="line">test demon</span><br></pre></td></tr></table></figure><p><strong>常见的错误</strong></p><p>单引号里面含撇号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">say = <span class="string">'Let'</span>go!<span class="string">'</span></span><br><span class="line"><span class="string">  File "&lt;ipython-input-28-5ccc2ed9867a&gt;", line 1</span></span><br><span class="line"><span class="string">    say = '</span>Let<span class="string">'go!'</span></span><br><span class="line">               ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>如果引号里面需要用到撇号或着双引号，可以使用不用的引号引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#双引号里套撇号</span></span><br><span class="line">say_content = <span class="string">"Lest'go!"</span></span><br><span class="line">print(say_content)</span><br><span class="line">Lest<span class="string">'go!</span></span><br><span class="line"><span class="string">#三引号里套撇号</span></span><br><span class="line"><span class="string">s= '</span><span class="string">''</span>Let<span class="string">'go!'</span><span class="string">''</span>   <span class="comment">#这个就有点大材小用了，尽量别这样</span></span><br><span class="line">print(s)</span><br><span class="line">Let<span class="string">'go!</span></span><br><span class="line"><span class="string">#单引号里套双引号</span></span><br><span class="line"><span class="string">d = '</span><span class="string">"This is my book!"</span><span class="string">'</span></span><br><span class="line"><span class="string">print(d)</span></span><br><span class="line"><span class="string">"This is my book!"</span></span><br></pre></td></tr></table></figure><p><strong>2、数字</strong></p><p>数字类型包括整型、浮点型、布尔型等，声明时由Python内置的基本数据类型来管理变量，在程序的后台实现数值与类型的关联，以及转换等操作。根据变量的值自动判断变量的类型，我们无需关心变量空间是什么类型，只要知道创建的变量中存放了一个数，程序只是对这个数值进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">8</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">print(num1+num2)</span><br><span class="line">print(num1-num2)</span><br><span class="line">print(num1*num2)</span><br><span class="line">print(num1/num2)</span><br><span class="line">print(num1%num2</span><br><span class="line"><span class="number">8.5</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"><span class="number">4.0</span></span><br><span class="line"><span class="number">16.0</span></span><br><span class="line"><span class="number">0.0</span></span><br></pre></td></tr></table></figure><p><strong>注释（#号和三引号）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">以下代码是关于Python数据类型的演示案例</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#Python中的数字类型</span></span><br><span class="line">num1 = <span class="number">8</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">print(num1+num2)</span><br><span class="line">print(num1-num2)</span><br><span class="line">print(num1*num2)</span><br><span class="line">print(num1/num2)</span><br><span class="line">print(num1%num2)</span><br><span class="line"><span class="number">8.5</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"><span class="number">4.0</span></span><br><span class="line"><span class="number">16.0</span></span><br><span class="line"><span class="number">0.0</span></span><br></pre></td></tr></table></figure><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p>1、将用户的姓名存到一个变量中，并向该用户显示一条信息，显示内容为：“你好，艾瑞克，今天的Python课你学到东西了吗？”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"艾瑞克"</span></span><br><span class="line">print(<span class="string">'你好，'</span>+name+<span class="string">',今天的Python课你学到东西了吗'</span>)</span><br><span class="line">你好，艾瑞克,今天的Python课你学到东西了吗</span><br></pre></td></tr></table></figure><p>2、将一个人的名字存到变量中，再以小写、大写和首字母大写的方式显示这个人的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">noe_name = <span class="string">"mike"</span></span><br><span class="line">print(noe_name.lower())</span><br><span class="line">print(noe_name.upper())</span><br><span class="line">print(noe_name.title())</span><br><span class="line">mike</span><br><span class="line">MIKE</span><br><span class="line">Mike</span><br></pre></td></tr></table></figure><p>3、按一下格式打印诗词：</p><p>《自由》 </p><p>为人进出的门紧锁着;</p><p>想死的门敞开着。</p><p>有个病毒在外面高喊着:</p><p>“出来玩吧，给你自由！”</p><p>但我深深地知道……</p><p>出去了，不一定还能回来。</p><p>人的生命只有一次，</p><p>算球了，</p><p>再关十几天就自由了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">poem = <span class="string">'''</span></span><br><span class="line"><span class="string">《自由》 </span></span><br><span class="line"><span class="string">为人进出的门紧锁着;</span></span><br><span class="line"><span class="string">想死的门敞开着。</span></span><br><span class="line"><span class="string">有个病毒在外面高喊着:</span></span><br><span class="line"><span class="string">“出来玩吧，给你自由！”</span></span><br><span class="line"><span class="string">但我深深地知道……</span></span><br><span class="line"><span class="string">出去了，不一定还能回来。</span></span><br><span class="line"><span class="string">人的生命只有一次，</span></span><br><span class="line"><span class="string">算球了，</span></span><br><span class="line"><span class="string">再关十几天就自由了！</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(poem)</span><br><span class="line">《自由》 </span><br><span class="line">为人进出的门紧锁着;</span><br><span class="line">想死的门敞开着。</span><br><span class="line">有个病毒在外面高喊着:</span><br><span class="line">“出来玩吧，给你自由！”</span><br><span class="line">但我深深地知道……</span><br><span class="line">出去了，不一定还能回来。</span><br><span class="line">人的生命只有一次，</span><br><span class="line">算球了，</span><br><span class="line">再关十几天就自由了</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+GitLba针对k8s集群持续集成</title>
    <link href="http://pdxblog.top/Jenkins+GitLba%E9%92%88%E5%AF%B9k8s%E9%9B%86%E7%BE%A4%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90.html"/>
    <id>http://pdxblog.top/Jenkins+GitLba%E9%92%88%E5%AF%B9k8s%E9%9B%86%E7%BE%A4%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90.html</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2020-03-09T07:17:32.856Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Jenkins-GitLba针对k8s集群持续集成"><a href="#Jenkins-GitLba针对k8s集群持续集成" class="headerlink" title="Jenkins+GitLba针对k8s集群持续集成"></a>Jenkins+GitLba针对k8s集群持续集成</h4><p>持续集成概念</p><blockquote><p>持续集成Continuous Integration</p><p>​    持续集成是指开发者在代码的开发过程中，可以频繁的将代码部署集成到主干，并进程自动化测试</p><p>持续交付Continuous Delivery</p><p>​    持续交付指的是在持续集成的环境基础之上，将代码部署到预生产环境 </p><p>持续部署Continuous Deployment</p><p>​    在持续交付的基础上，把部署到生产环境的过程自动化，持续部署和持续交付的区别就是最终部署到生产环境是自动化的</p></blockquote><p>环境准备</p><blockquote><p>k8s集群环境，三台服务器，IP分别为：192.168.1.70（master）、50（node01）、40（node02）</p><p>Jenkins+GitLab部署在一台Docker服务器上（192.168.1.30），主要用于向仓库上传私有镜像</p><p>环境一共4台服务器，全部指向一个私有仓库，共享Docker镜像</p></blockquote><p>实验所用到的软件都可以在网盘下载：  <a href="https://pan.baidu.com/s/1bhdntBqfV6yIyRH97GT-rA" target="_blank" rel="noopener">下载地址</a></p><p>提取码：trv8  </p><p><strong>验证k8s集群没有问题</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get nodes </span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   64d   v1.15.0</span><br><span class="line">node01   Ready    &lt;none&gt;   64d   v1.15.0</span><br><span class="line">node02   Ready    &lt;none&gt;   64d   v1.15.0</span><br></pre></td></tr></table></figure><p><strong>首先我们需要做一个registry私有仓库，可以选择任意一台服务器都可以，这里我们选择kubernetes-master作为registry私有仓库</strong></p><p><strong>Harbor也是可以的</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker run -d --restart=always -p 5000:5000  registry:2</span><br><span class="line">[root@master ~]# vim  /usr/lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@master ~]# systemctl  daemon-reload </span><br><span class="line">[root@master ~]# systemctl  restart  docker</span><br><span class="line"><span class="meta">#</span><span class="bash">将nginx镜像上传到私有仓库</span></span><br><span class="line">[root@master ~]# docker pull  nginx</span><br><span class="line">[root@master ~]# docker tag nginx:latest  192.168.1.70:5000/nginx:v1</span><br><span class="line">[root@master ~]# docker push  192.168.1.70:5000/nginx:v1</span><br></pre></td></tr></table></figure><p><strong>node01、node02加入私有仓库，并拉去镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意实在那台机器上操作</span></span><br><span class="line">[root@master ~]# scp  /usr/lib/systemd/system/docker.service  node01:/usr/lib/systemd/system/docker.service                                     </span><br><span class="line">[root@master ~]# scp  /usr/lib/systemd/system/docker.service  node02:/usr/lib/systemd/system</span><br><span class="line">[root@node01 ~]# systemctl  daemon-reload </span><br><span class="line">[root@node01 ~]# systemctl  restart  docker</span><br><span class="line">[root@node02 ~]# systemctl  daemon-reload </span><br><span class="line">[root@node02 ~]# systemctl  restart  docker</span><br><span class="line">[root@node01 ~]# docker pull   192.168.1.70:5000/nginx:v1</span><br><span class="line">[root@node02 ~]# docker pull   192.168.1.70:5000/nginx:v1</span><br></pre></td></tr></table></figure><p><strong>建立yaml配置文件让k8s自己控制容器集群，用来模拟我们部署的服务</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">nginx.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span><span class="string">:5000/nginx:v1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span>  <span class="string">Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">nginx.yaml</span> </span><br><span class="line"><span class="string">deployment.extensions/nginx</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span>  <span class="string">deployments.</span></span><br><span class="line"><span class="string">NAME</span>    <span class="string">READY</span>   <span class="string">UP-TO-DATE</span>   <span class="string">AVAILABLE</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">nginx</span>   <span class="number">2</span><span class="string">/2</span>     <span class="number">2</span>            <span class="number">2</span>           <span class="string">61s</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span>  <span class="string">pod</span></span><br><span class="line"><span class="string">NAME</span>                     <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">nginx-57b9fd468d-dn2v7</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">29s</span></span><br><span class="line"><span class="string">nginx-57b9fd468d-q5qm6</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">29s</span></span><br></pre></td></tr></table></figure><p>容器的ip只能在容器本机上访问，集群内的其他主机和集群外的主机都没办法访问，这个时候就需要将容器的端口映射到服务器上的端口了，所以需要做一个service的模板。service 模板可以将容器的端口映射到服务器的端口上，并且可以固定映射在服务器上的端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">nginx-svc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31234</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">nginx-svc.yaml</span> </span><br><span class="line"><span class="string">service/nginx</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">svc</span></span><br><span class="line"><span class="string">NAME</span>         <span class="string">TYPE</span>        <span class="string">CLUSTER-IP</span>       <span class="string">EXTERNAL-IP</span>   <span class="string">PORT(S)</span>        <span class="string">AGE</span></span><br><span class="line"><span class="string">kubernetes</span>   <span class="string">ClusterIP</span>   <span class="number">10.96</span><span class="number">.0</span><span class="number">.1</span>        <span class="string">&lt;none&gt;</span>        <span class="number">443</span><span class="string">/TCP</span>        <span class="string">64d</span></span><br><span class="line"><span class="string">nginx</span>        <span class="string">NodePort</span>    <span class="number">10.105</span><span class="number">.100</span><span class="number">.181</span>   <span class="string">&lt;none&gt;</span>        <span class="number">80</span><span class="string">:31234/TCP</span>   <span class="string">6s</span></span><br></pre></td></tr></table></figure><p><strong>浏览器访问测试：192.168.1.70:31234</strong><br><img src="https://img-blog.csdnimg.cn/2020030914223329.png" alt="在这里插入图片描述"></p><p><strong>kubernetes完毕，开始配hijenkins+gitlab联动</strong></p><p><strong>基本环境准备</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# hostnamectl  set-hostname autoweb</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld</span><br><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">setenforce: SELinux is disabled</span><br><span class="line">[root@localhost ~]# vim  /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line"><span class="meta">#</span><span class="bash">加入私有仓库</span></span><br><span class="line">[root@autoweb ~]# vim  /usr/lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@autoweb ~]# systemctl  daemon-reload</span><br><span class="line">[root@autoweb ~]# systemctl  restart  docker</span><br></pre></td></tr></table></figure><p><strong>首先安装jenkins</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置java环境</span></span><br><span class="line">[root@autoweb ~]# tar zxf  jdk-8u231-linux-x64.tar.gz </span><br><span class="line">[root@autoweb ~]# mv  jdk1.8.0_231  /usr/java   #注意这里的位置，不要多一个“/”</span><br><span class="line"><span class="meta">#</span><span class="bash">配置环境变量</span></span><br><span class="line">[root@autoweb ~]# vim  /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">在最后一行添加以下内容</span></span><br><span class="line">export JAVA_HOME=/usr/java</span><br><span class="line">export JRE_HOME=/usr/java/jre</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar</span><br><span class="line"><span class="meta">#</span><span class="bash">使环境变量生效</span></span><br><span class="line">[root@autoweb ~]# source  /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">验证环境变量</span></span><br><span class="line">[root@autoweb ~]# java -version</span><br><span class="line">java version "1.8.0_231"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br></pre></td></tr></table></figure><p><strong>部署tomcat，将jenkins的包放进tomcat里</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# tar zxf  apache-tomcat-7.0.54.tar.gz </span><br><span class="line">[root@autoweb ~]# mv  apache-tomcat-7.0.54  /usr/tomcat7</span><br><span class="line">[root@autoweb ~]# cd  /usr/tomcat7/webapps/</span><br><span class="line">[root@autoweb webapps]# rm  -rf  *</span><br><span class="line">[root@autoweb webapps]# cp  /root/jenkins.war .</span><br><span class="line"><span class="meta">#</span><span class="bash">修改tomcat的字符集</span></span><br><span class="line">[root@autoweb webapps]# vim  /usr/tomcat7/conf/server.xml</span><br><span class="line"><span class="meta">#</span><span class="bash">在72行左右追加</span></span><br><span class="line">    &lt;Connector port="8080" protocol="HTTP/1.1"</span><br><span class="line">               connectionTimeout="20000"</span><br><span class="line">               redirectPort="8443" URIEncoding="UTF-8" /&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">修改启动脚本，添加jenkins的家目录，这个很重要</span></span><br><span class="line">[root@autoweb webapps]# cd  /usr/tomcat7/bin/</span><br><span class="line">[root@autoweb bin]# vim  catalina.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">export CATALINA_OPTS="-DJENKINS_HOME=/data/jenkins"</span><br><span class="line">export JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Dhudson.ClassicPluginStrategy.noBytecodeTransformer=true"</span><br><span class="line"><span class="meta">#</span><span class="bash">启动tomcat</span></span><br><span class="line">[root@autoweb bin]# ./catalina.sh  start</span><br><span class="line">[root@autoweb bin]# netstat  -anput | grep  8080</span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      6266/java</span><br></pre></td></tr></table></figure><p><strong>浏览器访问：192.168.1.30:8080/jenkins开始配置安装jenkins</strong><br><img src="https://img-blog.csdnimg.cn/2020030914231982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>根据提示查看密码并输入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb bin]# cat /data/jenkins/secrets/initialAdminPassword</span><br><span class="line">7ea904846c9c4cfbb19d3e31d22f889f</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200309142333841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>左边是自动安装， 右边是自定义安装，如果不是这个画面则说明网络很卡或者没有网，网速可以的就选择左边的</p><p>由于网络问题，下载插件会非常慢，这里我就不下载，回到上一步，断网之后再点继续，跳过插件安装</p><p>断网之后，它会等待网络连接，过程有点慢，但是比自动下载插件快多了<br><img src="https://img-blog.csdnimg.cn/20200309142345426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>在创建用户名密码的时候就可以联网了</strong><br><img src="https://img-blog.csdnimg.cn/20200309142359556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>然后一路默认就行</strong><br><img src="https://img-blog.csdnimg.cn/20200309142414900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>因为没有安装，所以就导入插件</strong></p><p><strong>插件存放目录：/data/jenkins/plugins</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将原来的插件目录删除</span></span><br><span class="line">[root@autoweb jenkins]# rm  -rf  plugins/</span><br><span class="line"><span class="meta">#</span><span class="bash">导入下载好的插件，并解压</span></span><br><span class="line">[root@autoweb jenkins]# tar zxf  plugins.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">重新运行jenkins，让它自动识别新导入的插件</span></span><br><span class="line">[root@autoweb bin]# ./catalina.sh  stop</span><br><span class="line">[root@autoweb bin]# ./catalina.sh  start</span><br></pre></td></tr></table></figure><p><strong>使用浏览器重新访问</strong><br><img src="https://img-blog.csdnimg.cn/20200309142444333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>因为很多插件需要翻墙才可以继续下载，Jenkins还提供了代理的设置</p><p>设置插件的国内下载地址</p><p>在Jenkins插件管理-高级设置界面，定位到页面最底部中的【升级站点】模块，将对应URL输入框中的url的https修改为http，即<code>http://updates.jenkins.io/update-center.json</code>，然后点击【提交】保存修改项<br><img src="https://img-blog.csdnimg.cn/20200309142504389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>往下拉，找到插件管理</strong><br><img src="https://img-blog.csdnimg.cn/2020030914251417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>点击高级</strong><br><img src="https://img-blog.csdnimg.cn/20200309142536478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>还需要安装三个插件</strong><br><img src="https://img-blog.csdnimg.cn/20200309142547273.png" alt="在这里插入图片描述"></p><p>因为在我导入的插件里就有这三个，所以不需要安装，如果选择推荐安装的可以搜索并安装这三个插件</p><p>点击可选插件，搜索GitLab就能找到，然后直接安装即可（搜索的时候注意大小写区分）<br><img src="https://img-blog.csdnimg.cn/20200309142558951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>jenkis安装完成以后，再去安装gitlab</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# yum -y install curl policycoreutils openssh-server openssh-clients postfix git</span><br><span class="line">[root@autoweb ~]# systemctl  enable  sshd</span><br><span class="line">[root@autoweb ~]# systemctl  start  sshd</span><br><span class="line">[root@autoweb ~]# systemctl  enable  postfix</span><br><span class="line">[root@autoweb ~]# systemctl  start  postfix</span><br></pre></td></tr></table></figure><p><strong>安装gitlab-ce</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><p><strong>因为网络问题，就不使用这种方式，国内的用户，使用清华大学的镜像进行安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编写yum源</span></span><br><span class="line">[root@autoweb ~]# vim  /etc/yum.repos.d/gitlab-ce.repo</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br><span class="line"><span class="meta">#</span><span class="bash">将gitlab源加入yum</span></span><br><span class="line">[root@autoweb ~]# yum  makecache  </span><br><span class="line"><span class="meta">#</span><span class="bash">下载安装gitlab，这个软件包有点大，需要点时间</span></span><br><span class="line">[root@autoweb ~]# yum -y install gitlab-ce</span><br></pre></td></tr></table></figure><p><strong>修改端口防止端口冲突，默认是80端口，unicorn默认是8080 也是tomcat的端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# vim  /etc/gitlab/gitlab.rb</span><br><span class="line"><span class="meta">#</span><span class="bash">在29行左右的地方进行修改和追加</span></span><br><span class="line">external_url 'http://192.168.1.30:90'</span><br><span class="line">unicorn['listen'] = '127.0.0.1'</span><br><span class="line">unicorn['port'] = 3000</span><br></pre></td></tr></table></figure><p><strong>启动gitlab，这个过程可能会有点慢</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# gitlab-ctl  reconfigure</span><br></pre></td></tr></table></figure><p><strong>浏览器访问：192.168.1.30:90</strong></p><p><strong>设置密码</strong><img src="https://img-blog.csdnimg.cn/20200309142634544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>登录gitlab</strong></p><p><strong>默认用户名是root</strong><br><img src="https://img-blog.csdnimg.cn/20200309142647340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142655818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>jenkins：工具集成平台</strong></p><p><strong>gitlab：软件托管平台</strong></p><p>部署这两个服务的联动，需要经过ssh验证</p><p>首先我们需要在gitlab上绑定jenkins服务器的ssh公钥，因为是在同一台服务器上，所以就自己给自己绑定，这里我们使用的是root用户的公私钥，切记生产环境是不允许随便用root的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# ssh-keygen  -t  rsa  #一路回车即可</span><br><span class="line"><span class="meta">#</span><span class="bash">复制公钥</span></span><br><span class="line">[root@autoweb ~]# cat /root/.ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0PGtK/uFWejdLYfEqEGiimWrpndlkMZMNyvMisdCvWYU2E2UKxpr/h/QCZQpgpe7uAPZpivnsu3XZ4pE4qe7WG4iKEqF6oVmJL9JjmNh86vOUDGttOU3aZJnLp95yoYczBUSObNsSAzkHIMR2u0Zk5nFW2Roe2FHNUyj0e2qM/Zm5+M5EVgpHd9UG5A4Z/Loid/got6Xaufoen1hSFY+S18QPuheN1auaTfnyA0wwf+rlWjqwCLJeUBl0PgOgNNyZ27++U6QBUPNwgC3SVdhbJMCFE9/H2+0aMnjVqnakfJmt95UI/QOJAmnrusps/XPbqdnxZ5u89i97QxuogAgL root@autoweb</span><br></pre></td></tr></table></figure><p><strong>在gitlab上导入公钥</strong><br><img src="https://img-blog.csdnimg.cn/20200309142708109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142719400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142728515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>新建一个代码仓库</strong><br><img src="https://img-blog.csdnimg.cn/202003091427420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142754838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>输入一个仓库的名字 权限选择公共的（public）然后直接点击创建</strong><br><img src="https://img-blog.csdnimg.cn/20200309142807140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>点击新建一个new.file</strong><br><img src="https://img-blog.csdnimg.cn/20200309142827983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>写入代码，起一个名字然后保存</strong><br><img src="https://img-blog.csdnimg.cn/20200309142839741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>将项目克隆到本地测试是否可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# git clone git@192.168.1.30:root/test.git</span><br><span class="line">[root@autoweb ~]# cd  test/</span><br><span class="line">[root@autoweb test]# ls</span><br><span class="line">index.html</span><br><span class="line">[root@autoweb test]# cat index.html </span><br><span class="line">print: "hello world!!!"</span><br></pre></td></tr></table></figure><p><strong>测试没有问题</strong></p><p><strong>打开jenkins，新建任务</strong><br><img src="https://img-blog.csdnimg.cn/20200309142857302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142908127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>地址粘贴进去后没有报错则没错</strong><br><img src="https://img-blog.csdnimg.cn/20200309142919551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>下面的这个插件很重要，就是他实现自动化更新的webhook插件，安装过了就会有这条，然后点击这条下面出来的这些东西保持默认就行。同时注意复制</p><p>这个里面写的是jenkins构建时候会执行的shell脚本，这个是最重要的，就是他实现了下端kubernetes自动更新容器的操作<br><img src="https://img-blog.csdnimg.cn/2020030914293511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309142949794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">backupcode="/data/backcode/$JOB_NAME/$BUILD_NUMBER"</span><br><span class="line">mkdir -p $backupcode</span><br><span class="line">chmod 644 "$JENKINS_HOME"/workspace/"$JOB_NAME"/*</span><br><span class="line">rsync -acP   "$JENKINS_HOME"/workspace/"$JOB_NAME"/*  $backupcode</span><br><span class="line">echo From  192.168.1.70:5000/nginx:v1 &gt; "$JENKINS_HOME"/workspace/Dockerfile</span><br><span class="line">echo COPY ./"$JOB_NAME"/* /usr/share/nginx/html/ &gt;&gt; "$JENKINS_HOME"/workspace/Dockerfile</span><br><span class="line">docker rmi 192.168.1.70:5000/nginx:v1</span><br><span class="line">docker build -t 192.168.1.70:5000/nginx:v1 /"$JENKINS_HOME"/workspace/.</span><br><span class="line">docker push 192.168.1.70:5000/nginx:v1</span><br><span class="line">ssh root@192.168.1.70 kubectl delete deployment nginx</span><br><span class="line">ssh root@192.168.1.70 kubectl apply -f /root/nginx.yaml</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200309143004990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>复制地址去gitlab上绑定webhook</strong></p><p><strong>保存，登录gitlab，点击下图这个设置</strong><br><img src="https://img-blog.csdnimg.cn/20200309143020105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>将复制的地址粘贴</strong><br><img src="https://img-blog.csdnimg.cn/202003091430335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>往下拉，去掉ssh验证，添加webhook</strong><br><img src="https://img-blog.csdnimg.cn/20200309143053938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>出现报错，提示本地连接不了，因为gitlab默认设置不允许想自己发送web hook</strong><br><img src="https://img-blog.csdnimg.cn/20200309143112809.png" alt="在这里插入图片描述"></p><p><strong>解决办法</strong><br><img src="https://img-blog.csdnimg.cn/20200309143131772.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020030914315363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309143207963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>保存之后重试，成功的如下图所示</strong><br><img src="https://img-blog.csdnimg.cn/20200309143223828.png" alt="在这里插入图片描述"></p><p><strong>测试jenkins与gitlab连通</strong><br><img src="https://img-blog.csdnimg.cn/20200309143253322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200309143303304.png" alt="在这里插入图片描述"></p><p><strong>403报错的，解决办法</strong></p><p><strong>回到Jenkins开启匿名访问权限</strong><br><img src="https://img-blog.csdnimg.cn/20200309143323817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>点击全局安全配置</strong><br><img src="https://img-blog.csdnimg.cn/2020030914333892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309143349741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>保存之后再点击系统设置</strong><br><img src="https://img-blog.csdnimg.cn/20200309143358389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>去掉勾选</strong><br><img src="https://img-blog.csdnimg.cn/20200309143411543.png" alt="在这里插入图片描述"></p><p><strong>保存之后，回到gitlab上再次测试</strong></p><p><strong>出现蓝条说明jenkins已经连通gitlab</strong><br><img src="https://img-blog.csdnimg.cn/20200309143424955.png" alt="在这里插入图片描述"></p><p>jenkins和gitlab 都已经互相的ssh通过了，然后我们最后需要做的一个ssh是关于jenkins</p><p>这里是从autoweb向master节点做免密登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb ~]# ssh-copy-id  root@192.168.1.70</span><br></pre></td></tr></table></figure><p><strong>环境全部部署完毕！！！开始测试</strong></p><p><strong>立即构建</strong><br><img src="https://img-blog.csdnimg.cn/20200309143445621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309143456318.png" alt="在这里插入图片描述"></p><p><strong>构建完成之后查看网页的变化</strong><br><img src="https://img-blog.csdnimg.cn/20200309143505725.png" alt="在这里插入图片描述"></p><p><strong>回到Gitlab更新代码测试</strong><br><img src="https://img-blog.csdnimg.cn/2020030914352913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>通过web hook这个插件会自动识别代码的更新，然后自动构建保证实时同步，持续集成</strong><br><img src="https://img-blog.csdnimg.cn/20200309143548150.png" alt="在这里插入图片描述"><br><strong>再次查看网页的变化</strong><br><img src="https://img-blog.csdnimg.cn/20200309143558243.png" alt="在这里插入图片描述"></p><p><strong>构建的历史版本的存放目录：/data/backcode/test</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb test]# pwd</span><br><span class="line">/data/backcode/test</span><br><span class="line">[root@autoweb test]# ls</span><br><span class="line">1  2  3  4  5</span><br><span class="line"><span class="meta">#</span><span class="bash">还有一个关键的目录，这个目录下是将新代码构建成镜像的关键，他和上个目录实时同步</span></span><br><span class="line">[root@autoweb workspace]# pwd</span><br><span class="line">/data/jenkins/workspace</span><br><span class="line">[root@autoweb workspace]# ls</span><br><span class="line">Dockerfile  test</span><br></pre></td></tr></table></figure><p><strong>构建的历史版本的存放目录：/data/backcode/test</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@autoweb test]# pwd</span><br><span class="line">/data/backcode/test</span><br><span class="line">[root@autoweb test]# ls</span><br><span class="line">1  2  3  4  5</span><br><span class="line"><span class="meta">#</span><span class="bash">还有一个关键的目录，这个目录下是将新代码构建成镜像的关键，他和上个目录实时同步</span></span><br><span class="line">[root@autoweb workspace]# pwd</span><br><span class="line">/data/jenkins/workspace</span><br><span class="line">[root@autoweb workspace]# ls</span><br><span class="line">Dockerfile  test</span><br></pre></td></tr></table></figure><p>测试完成</p><p>关于 kubernetes 还有好几种集群管理方法，我们这次用的 deployment模板 就是其中之一， 其他的还有pod 模板 和 rc 模板， 这些都是功能很强大的集群调度模板。 还有更多功能待开发</p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="http://pdxblog.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://pdxblog.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Python的认识与安装</title>
    <link href="http://pdxblog.top/Python%E7%9A%84%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%AE%89%E8%A3%85.html"/>
    <id>http://pdxblog.top/Python%E7%9A%84%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%AE%89%E8%A3%85.html</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2020-03-10T12:41:07.527Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a><strong>初识Python</strong></h4><p><strong>人生苦短，我用Python</strong></p><p><strong>Python的由来：</strong></p><blockquote><p><strong>1989年圣诞节期间，在阿姆斯特丹，Guido为了打发圣诞节的无趣，决心开发一</strong><br><strong>个新的脚本解释程序，作为ABC语言的一种继承。</strong><br><strong>Python是一种跨平台的计算机程序设计语言。是一种面向对象的动态类型语言，</strong><br><strong>最初被设计用于编写自动化脚本，随着版本的不断更新和语言新功能的添加，越</strong><br><strong>多被用于独立的、大型项目的开发</strong></p></blockquote><p><strong>Python的应用领域</strong></p><blockquote><p><strong>web全栈    算法工程师</strong></p><p><strong>人工只能    游戏开发</strong></p><p><strong>机器学习    信息安全</strong></p><p><strong>网络爬虫    自动化测试</strong></p><p><strong>数据分析    自动化运维</strong></p></blockquote><p><strong>Python语言特点</strong></p><blockquote><p><strong>简单易学</strong></p><p><strong>语法优美</strong></p><p><strong>丰富强大的库</strong></p><p><strong>开发效率高</strong></p><p><strong>应用领域广泛</strong></p></blockquote><h4 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h4><p><strong>1、windows系统</strong></p><p><strong>下载地址：</strong></p><p><code>https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe</code></p><p><strong>如果感觉下载太慢，这里附上网盘<a href="https://pan.baidu.com/s/1GjbLM8RbJ_rbp0nQ2uzduA" target="_blank" rel="noopener">连接</a></strong><br><strong>提取码：tp9n</strong></p><p><strong>也可以去python<a href="https://www.python.org" target="_blank" rel="noopener">官网</a>下载想要的版本</strong></p><p><strong>注意事项：</strong></p><blockquote><ul><li>默认安装没有勾选“自动添加python的环境变量”</li><li>不要把python抽象安装到含有中文的目录中</li></ul></blockquote><p><strong>双击安装，勾选两个选项，选择第二个自定义安装</strong><br><img src="https://img-blog.csdnimg.cn/20200309144708638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>默认就行，直接Next</strong><br><img src="https://img-blog.csdnimg.cn/20200309144720422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>自定义目录禁止中文目录安装，选择目录之后，直接Install</strong><br><img src="https://img-blog.csdnimg.cn/2020030914473232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>检查python是否安装成功:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;python</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.2</span> (tags/v3<span class="number">.8</span><span class="number">.2</span>:<span class="number">7</span>b3ab59, Feb <span class="number">25</span> <span class="number">2020</span>, <span class="number">23</span>:<span class="number">03</span>:<span class="number">10</span>) [MSC v<span class="number">.1916</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">'hello python.'</span>)</span><br><span class="line">hello python.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exit()</span><br><span class="line"></span><br><span class="line">C:\Users\Admin&gt;</span><br></pre></td></tr></table></figure><p><strong>退出python的两种方法</strong></p><blockquote><p>ctrl+z 回车</p><p>exit()</p></blockquote><p><strong>Python目录介绍</strong></p><blockquote><p><strong>Python二进制文件的启动目录</strong>：<code>F:\Python</code></p><p><strong>Python库的安装命令端</strong>：<code>F:\Python\Scripts</code></p></blockquote><p><strong>2、linux系统</strong></p><p>Linux环境自带了Python 2.x版本，但是如果要更新到3.x的版本，可以在<a href="https://www.python.org" target="_blank" rel="noopener">Python的官方网站</a>下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以CentOS为例）</p><p><strong>1）安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure><p>这一步可能会出现以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">/var/run/yum.pid 已被锁定，PID 为 15320 的另一个程序正在运行。</span><br><span class="line">Another app is currently holding the yum lock; waiting for it to exit...</span><br><span class="line">  另一个应用程序是：PackageKit</span><br><span class="line">    内存：120 M RSS （546 MB VSZ）</span><br><span class="line">    已启动： Fri Dec 27 15:48:54 2019 - 09:04之前</span><br><span class="line">    状态  ：睡眠中，进程ID：15320</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# rm -rf /var/run/yum.pid</span><br></pre></td></tr></table></figure><p><strong>2）下载python源代码并解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# wget  https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz</span><br><span class="line">[root@python ~]# tar zxf Python-3.8.1.tgz</span><br></pre></td></tr></table></figure><p><strong>3）设置全局变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# export LANG=zh_CN.UTF-8</span><br><span class="line">[root@python ~]# export LANGUAGE=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>否则可能会出现以下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">generate-posix-vars  failed</span><br><span class="line">make[1]: *** [pybuilldddir.txt] 错误 1</span><br><span class="line">make[1]: 离开目录"/root/Python-3.8.1"</span><br><span class="line">make: *** [profile-opt] 错误2</span><br></pre></td></tr></table></figure><p><strong>4）编译安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# cd Python-3.8.1</span><br><span class="line">[root@python ~]# ./configure --prefix=/usr/local/python381 --enable-optimizations</span><br><span class="line">[root@python ~]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>5）修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# vim .bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash">添加</span></span><br><span class="line">export PATH=$PATH:/usr/local/python381/bin</span><br></pre></td></tr></table></figure><p><strong>6）激活环境变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@python ~]# source .bash_profile</span><br></pre></td></tr></table></figure><p><strong>7）运行Python程序</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看Python版本信息</span></span><br><span class="line">[root@python ~]# python3 --version</span><br><span class="line"><span class="meta">#</span><span class="bash">进入交互环境</span></span><br><span class="line">[root@python ~]# python3</span><br></pre></td></tr></table></figure><p>检查Python的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span>  sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.version_info)</span><br><span class="line">sys.version_info(major<span class="number">-3</span>, minor=<span class="number">8</span> micro=<span class="number">1</span> releaselevel=<span class="string">'final'</span>, serial=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.version)</span><br><span class="line"><span class="number">3.8</span><span class="number">.1</span> (default, Mar <span class="number">9</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">21</span>:<span class="number">51</span>)</span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-.9</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python
    
    </summary>
    
    
      <category term="Python" scheme="http://pdxblog.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pdxblog.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Helm应用以及服务升级与回滚</title>
    <link href="http://pdxblog.top/Helm%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E6%BB%9A.html"/>
    <id>http://pdxblog.top/Helm%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E6%BB%9A.html</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-04T12:15:12.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Helm应用以及服务升级与回滚"><a href="#Helm应用以及服务升级与回滚" class="headerlink" title="Helm应用以及服务升级与回滚"></a>Helm应用以及服务升级与回滚</h3><p>helm：包管理工具</p><p>官方提提供的仓库：<a href="https://hub.helm.sh/" target="_blank" rel="noopener">https://hub.helm.sh/</a></p><p><strong>Charts</strong>：是一个Helm的程序包，它包含了运行一个kubernetes应用程序所需要的镜像、依赖关系和资源定义等</p><p><strong>Release</strong>：应用程序运行charts后，得到的一个实例</p><p>部署一个实例：</p><p>helm install + charts -n release名称</p><p><strong>根据以一个包运行一个实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  stable/redis -n  redis --dry-run</span><br><span class="line">--dry-run：用来测试有没有问题，如果没有问题就可以运行</span><br><span class="line">[root@master ~]# helm  install  stable/redis -n  redis</span><br><span class="line"><span class="meta">#</span><span class="bash">这里是运行不成功的，因为他需要镜像，PV等准备工作</span></span><br></pre></td></tr></table></figure><p>运行之后会有三部分描述</p><blockquote><p>1、关于这个Release的描述</p><p>2、关于这个Release资源的描述</p><p>3、怎么使用这个Release</p></blockquote><p>根据提示可以获得redis的密码，等等一些信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get secret --namespace default redis-redis -o jsonpath="&#123;.data.redis-password&#125;" | base64 --decode</span><br><span class="line">rTmeGF2rcY</span><br></pre></td></tr></table></figure><p>删除实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  delete  redis  --purge</span><br></pre></td></tr></table></figure><p>查询chart包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm search mysql</span><br></pre></td></tr></table></figure><p>运行一个实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  stable/mysql -n mysql</span><br></pre></td></tr></table></figure><p>我们运行过的实例都会生成一个charts包存放在这个缓存目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master archive]# pwd</span><br><span class="line">/root/.helm/cache/archive</span><br><span class="line">[root@master archive]# ls</span><br><span class="line">mysql-0.3.5.tgz  redis-1.1.15.tgz</span><br></pre></td></tr></table></figure><p>Charts包解压目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master archive]# tar zxf mysql-0.3.5.tgz</span><br><span class="line">[root@master archive]# tree  -C  mysql</span><br><span class="line">mysql</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── README.md</span><br><span class="line">├── templates</span><br><span class="line">│   ├── configmap.yaml</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── pvc.yaml</span><br><span class="line">│   ├── secrets.yaml</span><br><span class="line">│   └── svc.yaml</span><br><span class="line">└── values.yaml</span><br></pre></td></tr></table></figure><p><strong>Chart.yaml</strong>：这个chart包的概要信息</p><p>​    name和version这两个是必填项，其他可选</p><p><strong>README.md</strong>：是这个chart包的一个使用帮助文档</p><p><strong>templates</strong>：chart包内各种资源对象模板</p><p><strong>values.yaml</strong>：是这个chart包的默认的值，可以被template内的yaml文件使用</p><p>我们在部署之前还可以提前查看这个包会有什么东西</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  inspect values  stable/prometheus</span><br></pre></td></tr></table></figure><p>除了部署实例后会生成chart包，还可以下载chart包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  fetch stable/prometheus</span><br></pre></td></tr></table></figure><p><strong>Helm部署安装一个Mysql服务</strong></p><p>部署NFS服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  /data</span><br><span class="line">[root@master ~]# vim  /etc/exports</span><br><span class="line">/data *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure><p>创建PV：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">nfs-pv1.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysqlpv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">8Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data/mysqlpv</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span> <span class="string">-f</span>  <span class="string">nfs-pv1.yml</span> </span><br><span class="line"><span class="string">persistentvolume/mysqlpv</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">get</span> <span class="string">pv</span></span><br><span class="line"><span class="string">NAME</span>      <span class="string">CAPACITY</span>   <span class="string">ACCESS</span> <span class="string">MODES</span>   <span class="string">RECLAIM</span> <span class="string">POLICY</span>   <span class="string">STATUS</span>      <span class="string">CLAIM</span>   <span class="string">STORAGECLASS</span>   <span class="string">REASON</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">mysqlpv</span>   <span class="string">8Gi</span>        <span class="string">RWO</span>            <span class="string">Recycle</span>          <span class="string">Available</span>                                   <span class="string">16s</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">mkdir</span>  <span class="string">/data/mysqlpv</span></span><br></pre></td></tr></table></figure><p>部署mysql实例（镜像提前准备好）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  stable/mysql  -n  bdqn-mysql  --set  mysqlRootPassword=123.com   #创建实例，并设置密码</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                               READY   STATUS     RESTARTS   AGE</span><br><span class="line">bdqn-mysql-mysql-7b89c7b99-kg4wf   0/1     Init:0/1   0          17s  #正在初始化</span><br><span class="line">[root@master ~]# kubectl  get pvc</span><br><span class="line">NAME               STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">bdqn-mysql-mysql   Bound    mysqlpv   8Gi        RWO                           48s</span><br><span class="line"><span class="meta">#</span><span class="bash">还需要一个小镜像</span></span><br><span class="line">docker pull  busybox:1.25.0</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">bdqn-mysql-mysql-7b89c7b99-kg4wf   1/1     Running   0          2m10s</span><br><span class="line">[root@master ~]# kubectl  get deployments.</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">bdqn-mysql-mysql   1/1     1            1           2m13s</span><br></pre></td></tr></table></figure><p>查看密码是否设置成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get secret --namespace default bdqn-mysql-mysql -o jsonpath="&#123;.data.mysql-root-password&#125;" | base64 --decode; echo</span><br><span class="line">123.com</span><br></pre></td></tr></table></figure><p>验证数据有没有问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec  -it  bdqn-mysql-mysql-7b89c7b99-kg4wf -- mysql  -u root -p123.com</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show  databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>在部署mysql的时候，如何开启storageclass，以及如何使用？</strong></p><p>首先需要部署storageclass（存储类），让他可以自动创建PV</p><blockquote><p>1、需要基于NFS环境</p><p>2、RBAC权限</p><p>3、nfs-deployment.</p><p>4、storageclass</p></blockquote><p>helm在创建实例的时候是基于templates模板里的内容创建的，而模板内需要的信息则是在values.yaml文件里，我们则需要修改values.yaml文件里的内容就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master mysql]# vim  values.yaml  </span><br><span class="line">找到storageClass，去掉注释即可</span><br><span class="line">  storageClass: "test-nfs"  #storageclass的名称</span><br><span class="line">  accessMode: ReadWriteOnce  </span><br><span class="line">  size: 8Gi</span><br></pre></td></tr></table></figure><p>然后直接部署实例，在部署实例的时候 -f 指定这个values.yaml这个文件即可，它会根据实例的PVC自动创建PV</p><p><strong>如果想将sservice资源对象的类型更改为NodePort，又应该怎么做</strong></p><p>同样只需要修改values.yaml文件就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将类型给位NodePort即可，还可以自己指定端口</span></span><br><span class="line">  type: NodePort</span><br><span class="line">  port: 3306</span><br></pre></td></tr></table></figure><p>在创建实例的时候只需要指定以下这个文件就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master mysql]# helm  install  stable/mysql  -n  bdqn-mysql  --set  mysqlRootPassword=123.com  -f  values.yaml</span><br><span class="line">[root@master mysql]# kubectl  get svc</span><br><span class="line">NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">bdqn-mysql-mysql   NodePort    10.104.45.139   &lt;none&gt;        3306:30165/TCP   13m</span><br><span class="line">kubernetes         ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP          60d</span><br></pre></td></tr></table></figure><p><strong>服务的升级：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master mysql]#  helm  upgrade --set imageTag=5.7.15  bdqn-mysql stable/mysql -f values.yaml</span><br><span class="line">[root@master mysql]# kubectl  get deployments. -o wide</span><br><span class="line">NAME        READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">zhb-mysql   1/1     1            1           9m22s   zhb-mysql    mysql:5.7.15   app=zhb-mysql</span><br></pre></td></tr></table></figure><p><strong>回滚</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看有哪些版本</span></span><br><span class="line">[root@master mysql]# helm  history  zhb</span><br><span class="line">REVISIONUPDATED                 STATUS    CHART      DESCRIPTION     </span><br><span class="line">1       Mon Mar  2 16:33:26 2020SUPERSEDEDmysql-0.3.5Install complete</span><br><span class="line">2       Mon Mar  2 16:37:04 2020DEPLOYED  mysql-0.3.5Upgrade complete</span><br><span class="line">回滚到1版本</span><br><span class="line">[root@master mysql]# helm  rollback  zhb  1</span><br><span class="line">Rollback was a success.</span><br><span class="line">[root@master mysql]# kubectl  get deployments. -o wide</span><br><span class="line">NAME        READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">zhb-mysql   1/1     1            1           13m   zhb-mysql    mysql:5.7.14   app=zhb-mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="http://pdxblog.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://pdxblog.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Helm自定义模板以及私有库部署</title>
    <link href="http://pdxblog.top/Helm%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E4%BB%A5%E5%8F%8A%E7%A7%81%E6%9C%89%E5%BA%93%E9%83%A8%E7%BD%B2.html"/>
    <id>http://pdxblog.top/Helm%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E4%BB%A5%E5%8F%8A%E7%A7%81%E6%9C%89%E5%BA%93%E9%83%A8%E7%BD%B2.html</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-04T12:15:12.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Helm自定义模板以及私有库部署"><a href="#Helm自定义模板以及私有库部署" class="headerlink" title="Helm自定义模板以及私有库部署"></a><strong>Helm自定义模板以及私有库部署</strong></h3><hr><p><strong>开发自己的chart</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm create mychart</span><br><span class="line">Creating mychart</span><br><span class="line">[root@master ~]# tree  -C  mychart/</span><br><span class="line">mychart/</span><br><span class="line">├── charts</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── templates</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── service.yaml</span><br><span class="line">│   └── tests</span><br><span class="line">│       └── test-connection.yaml</span><br><span class="line">└── values.yaml</span><br><span class="line">[root@master mychart]# pwd</span><br><span class="line">/root/mychart</span><br><span class="line">[root@master mychart]# vim  values.yaml</span><br><span class="line">replicaCount: 1</span><br><span class="line"></span><br><span class="line">image:</span><br><span class="line">  repository: nginx</span><br><span class="line">  tag: stable</span><br><span class="line">  pullPolicy: IfNotPresent  </span><br><span class="line">----------  #这些都都是默认信息</span><br></pre></td></tr></table></figure><p>因为这是我们自己开发的，所以有可能会出现错误，一般我们在部署之前都会进行调试</p><p><strong>调试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  --dry-run   --debug  mychart</span><br></pre></td></tr></table></figure><p>修改values.yaml文件，模拟一些错误来查看效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  --dry-run   --debug  mychart</span><br><span class="line">): error converting YAML to JSON: yaml: line 12: could not find expected ':'</span><br><span class="line"><span class="meta">#</span><span class="bash">会告诉你第12行少了个：但是这个12行不是特别准确，只是一个大概的方向</span></span><br></pre></td></tr></table></figure><p><strong>安装chart</strong></p><p>四种方法</p><blockquote><ul><li>通过仓库安装</li><li>将chart下载下来，通过tar包安装</li><li>通过chart本地目录安装（将tar包解压得到的目录）</li><li>通过URL安装</li></ul></blockquote><p>1、通过仓库安装（以redis为例）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  stable/redis  -n redis</span><br></pre></td></tr></table></figure><p>2、将chart下载下来，通过tar包安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  fetch stable/redis</span><br><span class="line">[root@master ~]# helm install redis-1.1.15.tgz</span><br></pre></td></tr></table></figure><p>3、通过chart本地目录安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# tar zxf redis-1.1.15.tgz</span><br><span class="line">[root@master ~]# tree -C  redis</span><br><span class="line">redis</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── README.md</span><br><span class="line">├── templates</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── networkpolicy.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── pvc.yaml</span><br><span class="line">│   ├── secrets.yaml</span><br><span class="line">│   └── svc.yaml</span><br><span class="line">└── values.yaml</span><br><span class="line">[root@master ~]# helm  install  redis</span><br></pre></td></tr></table></figure><p>4、通过URL安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  http://xxx/charts/xxx.tgz  -n  name</span><br></pre></td></tr></table></figure><p>使用本地目录安装刚刚自定义的mychart：</p><p>要求：</p><blockquote><p>副本Pod数量为3个</p><p>service类型为NodePort</p><p>映射的端口为31033</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# cd mychart/</span><br><span class="line">[root@master mychart]# vim  values.yaml</span><br><span class="line">replicaCount: 3</span><br><span class="line"></span><br><span class="line">service:</span><br><span class="line">  type: NodePort</span><br><span class="line">  port: 80</span><br><span class="line">  nodePort: 31033</span><br><span class="line">[root@master mychart]# helm  install  -n  test  ../mychart/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master mychart]# kubectl  get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">test-mychart-657bfc65b8-5j8qn   1/1     Running   0          30s</span><br><span class="line">test-mychart-657bfc65b8-bgt2s   1/1     Running   0          30s</span><br><span class="line">test-mychart-657bfc65b8-v2sph   1/1     Running   0          30s</span><br><span class="line">[root@master mychart]# kubectl  get deployments.</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">test-mychart   3/3     3            3           46s</span><br><span class="line">[root@master mychart]# kubectl  get  svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        61d</span><br><span class="line">test-mychart   NodePort    10.104.53.170   &lt;none&gt;        80:30393/TCP   50s</span><br><span class="line"><span class="meta">#</span><span class="bash">可以看到这里的端口与我们指定的并不一致</span></span><br></pre></td></tr></table></figure><p>因为这些yaml文件都是引用template模板，template模板目录下的service.yaml里面没有nodePort字段，只需要在service.yaml文件里添加就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">实例的更新</span></span><br><span class="line">[root@master templates]# pwd</span><br><span class="line">/root/mychart/templates</span><br><span class="line">[root@master templates]# vim  service.yam</span><br><span class="line">spec:</span><br><span class="line">  type: &#123;&#123; .Values.service.type &#125;&#125;</span><br><span class="line">  ports:</span><br><span class="line">    - port: &#123;&#123; .Values.service.port &#125;&#125;</span><br><span class="line">      targetPort: http</span><br><span class="line">      protocol: TCP</span><br><span class="line">      name: http</span><br><span class="line">      nodePort: &#123;&#123;  .Values.service.nodePort&#125;&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">再更新以下，进行验证</span></span><br><span class="line">[root@master ~]# helm  upgrade  test mychart/ -f mychart/values.yaml</span><br><span class="line">[root@master ~]# kubectl  get svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        61d</span><br><span class="line">test-mychart   NodePort    10.104.53.170   &lt;none&gt;        80:31033/TCP   10m</span><br><span class="line"><span class="meta">#</span><span class="bash">端口已经改变了</span></span><br></pre></td></tr></table></figure><p>一般在企业都是使用自己的私有镜像，那么就需要搭建私有仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  /usr/lib/systemd/system/docker.service </span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@master ~]# systemctl  daemon-reload </span><br><span class="line">[root@master ~]# systemctl  restart  docke</span><br><span class="line"><span class="meta">#</span><span class="bash">node01、node02也加入私有仓库</span></span><br><span class="line">[root@node01 ~]# vim  /usr/lib/systemd/system/docker.service </span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@node01 ~]# systemctl  daemon-reload </span><br><span class="line">[root@node01 ~]# systemctl  restart  docke</span><br><span class="line">[root@node02 ~]# vim  /usr/lib/systemd/system/docker.service </span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry  192.168.1.70:5000</span><br><span class="line">[root@node02 ~]# systemctl  daemon-reload </span><br><span class="line">[root@node02 ~]# systemctl  restart  docke</span><br></pre></td></tr></table></figure><p>导入私有镜像，并上传到私有仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker load  &lt;  httpd-v1.tar  &amp;&amp;  docker load  &lt;  httpd-v2.tar  &amp;&amp;  docker  load  &lt;  httpd-v3.tar</span><br><span class="line">[root@master ~]# docker tag   httpd:v1  192.168.1.70:5000/httpd:v1</span><br><span class="line">[root@master ~]# docker  push  192.168.1.70:5000/httpd:v1</span><br><span class="line">[root@master ~]# docker  push  192.168.1.70:5000/httpd:v1 </span><br><span class="line">[root@master ~]# docker  tag   httpd:v2  192.168.1.70:5000/httpd:v2</span><br><span class="line">[root@master ~]# docker  tag   httpd:v3  192.168.1.70:5000/httpd:v3</span><br><span class="line">[root@master ~]# docker push  192.168.1.70:5000/httpd:v2</span><br><span class="line">[root@master ~]# docker push  192.168.1.70:5000/httpd:v3</span><br></pre></td></tr></table></figure><p>node01、node02拉去镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# docker  pull  192.168.1.70:5000/httpd:v1</span><br><span class="line">[root@node01 ~]# docker  pull  192.168.1.70:5000/httpd:v2</span><br><span class="line">[root@node01 ~]# docker  pull  192.168.1.70:5000/httpd:v3</span><br><span class="line">[root@node02 ~]# docker  pull  192.168.1.70:5000/httpd:v1</span><br><span class="line">[root@node02 ~]# docker  pull  192.168.1.70:5000/httpd:v2</span><br><span class="line">[root@node02 ~]# docker  pull  192.168.1.70:5000/httpd:v3</span><br></pre></td></tr></table></figure><p>练习：</p><p>使用mychart部署一个实例，名为bdqn，使用私有镜像v1版本</p><p>完成之后，将实例做一个升级，将镜像改为v2版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改yaml文件，运行实例</span></span><br><span class="line">[root@master ~]# vim  mychart/values.yaml</span><br><span class="line">image:</span><br><span class="line">  repository: 192.168.1.70:5000/httpd</span><br><span class="line">  tag: v1</span><br><span class="line">  pullPolicy: IfNotPresent</span><br><span class="line">[root@master ~]# helm  install  -n  bdqn  mychart/</span><br><span class="line">[root@master ~]# kubectl  get  deployments. -o wide</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                       SELECTOR</span><br><span class="line">bdqn-mychart   1/1     1            1           8s    mychart      192.168.1.70:5000/httpd:v1   app.kubernetes.io/instance=bdqn,app.kubernetes.io/name=mychart</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">bdqn-mychart-574ffc5496-bd8vf   1/1     Running   0          22s</span><br><span class="line"><span class="meta">#</span><span class="bash">实例升级，通过yaml文件的方式</span></span><br><span class="line">[root@master ~]# vim  mychart/values.yaml</span><br><span class="line">image:</span><br><span class="line">  repository: 192.168.1.70:5000/httpd</span><br><span class="line">  tag: v2</span><br><span class="line">[root@master ~]# helm upgrade  bdqn  mychart/  -f  mychart/values.yaml</span><br><span class="line">[root@master ~]# kubectl  get deployments.  -o  wide</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES                       SELECTOR</span><br><span class="line">bdqn-mychart   1/1     1            1           2m54s   mychart      192.168.1.70:5000/httpd:v2   app.kubernetes.io/instance=bdqn,app.kubernetes.io/name=mychart</span><br><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">bdqn-mychart-85dcbbcb8f-8h47q   1/1     Running   0          5m28s</span><br><span class="line"><span class="meta">#</span><span class="bash">还可以通过命令的方式</span></span><br><span class="line">[root@master ~]# helm upgrade bdqn mychart/ --set imageTAG=v2</span><br><span class="line">//这种方法更新完成后，查看deployment的时候，镜像显示是没有更新的</span><br><span class="line"><span class="meta">#</span><span class="bash">还可以通过edit的方式进行更改</span></span><br><span class="line">[root@master ~]# kubectl edit  deployments. bdqn-mychart</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: 192.168.1.70:5000/httpd:v3</span><br><span class="line">[root@master ~]# kubectl  get deployments. -o wide</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                       SELECTOR</span><br><span class="line">bdqn-mychart   1/1     1            1           28m   mychart      192.168.1.70:5000/httpd:v3   app.kubernetes.io/instance=bdqn,app.kubernetes.io/name=mychar</span><br></pre></td></tr></table></figure><p><strong>创建自己的Repo仓库</strong></p><p>我们自己创建的chart包，如果公司内其他的同事也需要用，我们可以cp一份给他，但是效率太低，所以就可以创建一个repo仓库，解决这个需求</p><p>1、在node01上运行一个httpd的容器（作为私有仓库）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# mkdir /var/www</span><br><span class="line">[root@node01 ~]# docker run  -d -p  8080:80  -v  /var/www/:/usr/local/apache2/htdocs  httpd:latest</span><br><span class="line">[root@node01 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">03e5e3ef5c95        httpd:latest           "httpd-foreground"       13 seconds ago      Up 12 seconds       0.0.0.0:8080-&gt;80/tcp   kind_roentgen</span><br></pre></td></tr></table></figure><p>2、master节点上，使用helm  package将mychart目录打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  package mychart/</span><br><span class="line">Successfully packaged chart and saved it to: /root/mychart-0.1.0.tgz</span><br><span class="line">[root@master ~]# ls</span><br><span class="line">mychart-0.1.0.tgz</span><br></pre></td></tr></table></figure><p>3、执行helm repo index生成仓库的index文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  myrepo</span><br><span class="line">[root@master ~]# mv  mychart-0.1.0.tgz myrepo/</span><br><span class="line">[root@master ~]# ls   myrepo/</span><br><span class="line">mychart-0.1.0.tgz</span><br><span class="line">[root@master ~]# helm  repo  index  myrepo/  --url  http://192.168.1.50:8080/charts  #第一步运行的容器的IP+端口</span><br><span class="line">[root@master ~]# ls  myrepo/</span><br><span class="line">index.yaml  mychart-0.1.0.tgz</span><br><span class="line">[root@master ~]# cat myrepo/index.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">entries:</span><br><span class="line">  mychart:</span><br><span class="line">  - apiVersion: v1</span><br><span class="line">    appVersion: "1.0"</span><br><span class="line">    created: "2020-03-04T11:08:33.079034645+08:00"</span><br><span class="line">    description: A Helm chart for Kubernetes</span><br><span class="line">    digest: f2a297c4b377ae7f208848bef8823eeb74ebb7270d8bf07f58270678d0784056</span><br><span class="line">    name: mychart</span><br><span class="line">    urls:</span><br><span class="line">    - http://192.168.1.50:8080/charts/mychart-0.1.0.tgz</span><br><span class="line">    version: 0.1.0</span><br><span class="line">generated: "2020-03-04T11:08:33.07808906+08:00"</span><br></pre></td></tr></table></figure><p>4、将生成的tar包和index.yaml上传到node01的/var/www/charts目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">因为node01上没有sharts目录，所以需要创建</span></span><br><span class="line">[root@node01 ~]# mkdir  /var/www/chart</span><br><span class="line">[root@master ~]# cd  myrepo/</span><br><span class="line">[root@master myrepo]# scp  index.yaml mychart-0.1.0.tgz   node01:/var/www/charts</span><br><span class="line">index.yaml                                                  100%  400     0.4KB/s   00:00    </span><br><span class="line">mychart-0.1.0.tgz                                           100% 2861     2.8KB/s   00:00</span><br><span class="line"><span class="meta">#</span><span class="bash">在node01上进行验证</span></span><br><span class="line">[root@node01 ~]# ls /var/www/charts</span><br><span class="line">index.yaml  mychart-0.1.0.tgz</span><br></pre></td></tr></table></figure><p>5、添加新的repo仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master myrepo]# helm  repo  add  myrepo  http://192.168.1.50:8080/charts</span><br><span class="line">"myrepo" has been added to your repositories</span><br><span class="line">[root@master myrepo]# helm  repo  list</span><br><span class="line">NAME  URL                                                   </span><br><span class="line">stablehttps://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line">local http://127.0.0.1:8879/charts  #这个是不能跨主机的只能在本地使用        </span><br><span class="line">myrepohttp://192.168.1.50:8080/charts  #这个可以跨主机</span><br></pre></td></tr></table></figure><p>至此，已经可以正常供内网环境使用这个charts包的私有仓库了</p><p>6、验证，我们就可以直接使用新的repo仓库部署实例了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master myrepo]# helm  search mychart</span><br><span class="line">NAME          CHART VERSIONAPP VERSIONDESCRIPTION                </span><br><span class="line">local/mychart 0.1.0        1.0        A Helm chart for Kubernetes</span><br><span class="line">myrepo/mychart0.1.0        1.0        A Helm chart for Kubernetes</span><br><span class="line">[root@master myrepo]# helm  install myrepo/mychart  -n test</span><br><span class="line">[root@master ~]# helm  list</span><br><span class="line">NAMEREVISIONUPDATED                 STATUS  CHART        APP VERSIONNAMESPACE</span><br><span class="line">test1       Wed Mar  4 11:23:25 2020DEPLOYEDmychart-0.1.01.0</span><br></pre></td></tr></table></figure><p>7、如果以后仓库中新添加了chart包，需要用helm repo update命令更新本地的index文件</p><p>练习：</p><p>新创建一个bdqn的chart包，然后将chart包上传到上述repo源中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建新的chart</span></span><br><span class="line">[root@master ~]# helm  create  bdqn</span><br><span class="line">Creating bdqn</span><br><span class="line"><span class="meta">#</span><span class="bash">将这个chart目录打包</span></span><br><span class="line">[root@master ~]# helm  package bdqn/</span><br><span class="line">Successfully packaged chart and saved it to: /root/bdqn-0.1.0.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash">移动到myrepo下</span></span><br><span class="line">[root@master ~]# mv bdqn-0.1.0.tgz  myrepo/</span><br><span class="line">[root@master ~]# ls  myrepo/</span><br><span class="line">bdqn-0.1.0.tgz  index.yaml  mychart-0.1.0.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash">更新index文件</span></span><br><span class="line">[root@master ~]# helm  repo  index  myrepo/  --url  http://192.168.1.50:8080/charts</span><br><span class="line">[root@master myrepo]# scp  bdqn-0.1.0.tgz   index.yaml  node01:/var/www/charts</span><br><span class="line">bdqn-0.1.0.tgz                                              100% 2826     2.8KB/s   00:00    </span><br><span class="line">index.yaml                                                  100%  720     0.7KB/s   00:00</span><br><span class="line"><span class="meta">#</span><span class="bash">更新repo仓库</span></span><br><span class="line">[root@master myrepo]# helm  repo  update</span><br><span class="line">Hang tight while we grab the latest from your chart repositories...</span><br><span class="line">...Skip local chart repository</span><br><span class="line">...Successfully got an update from the "myrepo" chart repository</span><br><span class="line">...Successfully got an update from the "stable" chart repository</span><br><span class="line">Update Complete.</span><br><span class="line"><span class="meta">#</span><span class="bash">搜索验证</span></span><br><span class="line">[root@master myrepo]# helm  search  bdqn</span><br><span class="line">NAME       CHART VERSIONAPP VERSIONDESCRIPTION                </span><br><span class="line">local/bdqn 0.1.0        1.0        A Helm chart for Kubernetes</span><br><span class="line">myrepo/bdqn0.1.0        1.0        A Helm chart for Kubernetes</span><br></pre></td></tr></table></figure><p>使用url部署这个bdqn实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  install  http://192.168.1.50:8080/charts/bdqn-0.1.0.tgz  -n  t1</span><br><span class="line">[root@master ~]# helm  list</span><br><span class="line">NAMEREVISIONUPDATED                 STATUS  CHART        APP VERSIONNAMESPACE </span><br><span class="line">t1  1       Wed Mar  4 11:52:50 2020DEPLOYEDbdqn-0.1.0   1.0        default  </span><br><span class="line">test1       Wed Mar  4 11:23:25 2020DEPLOYEDmychart-0.1.01.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="http://pdxblog.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://pdxblog.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Heldm工具部署</title>
    <link href="http://pdxblog.top/Helm%E5%B7%A5%E5%85%B7%E9%83%A8%E7%BD%B2.html"/>
    <id>http://pdxblog.top/Helm%E5%B7%A5%E5%85%B7%E9%83%A8%E7%BD%B2.html</id>
    <published>2020-02-28T16:00:00.000Z</published>
    <updated>2020-02-29T12:11:53.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Helm"><a href="#Helm" class="headerlink" title="Helm"></a>Helm</h3><hr><p>在Kubernetes中部署容器云的应用也是一项有挑战性的工作，Helm就是为了简化在Kubernetes中安装部署容器云应用的一个客户端工具。通过helm能够帮助开发者定义、安装和升级Kubernetes中的容器云应用，同时，也可以通过helm进行容器云应用的分享。在Kubeapps Hub中提供了包括Redis、MySQL和Jenkins等常见的应用，通过helm可以使用一条命令就能够将其部署安装在自己的Kubernetes集群中</p><p>helm的整体架构如下图所示，Helm架构由Helm客户端、Tiller服务器端和Chart仓库所组成；Tiller部署在Kubernetes中，Helm客户端从Chart仓库中获取Chart安装包，并将其安装部署到Kubernetes集群中<br><img src="https://img-blog.csdnimg.cn/20200229200637295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Helm是管理Kubernetes包的工具，Helm能提供下面的能力：</p><blockquote><ul><li>创建新的charts</li><li>将charts打包成tgz文件</li><li>与chart仓库交互</li><li>安装和卸载Kubernetes的应用</li><li>管理使用Helm安装的charts的生命周期</li></ul></blockquote><p>在Helm中，有三个需要了解的重要概念：</p><blockquote><ul><li>chart：是创建Kubernetes应用实例的信息集合；</li><li>config：创建发布对象的chart的配置信息</li><li>release：chart的运行实例，包含特定的config</li></ul></blockquote><p><strong>helm组件</strong></p><hr><p>在Helm中有两个主要的组件，既Helm客户端和Tiller服务器：</p><p><strong>Helm</strong>客户端：这是一个供终端用户使用的命令行工具，客户端负责如下的工作：</p><blockquote><p>本地chart开发</p><p>管理仓库</p><p>与Tiller服务器交互</p><p>​        发送需要被安装的charts，请求关于发布版本的信息，求更新或者卸载已安装的发布版本</p></blockquote><p><strong>Tiller</strong>服务器：Tiller服务部署在Kubernetes集群中，Helm客户端通过与Tiller服务器进行交互，并最终与Kubernetes API服务器进行交互。 Tiller服务器负责如下的工作：</p><blockquote><ul><li>监听来自于Helm客户端的请求</li><li>组合chart和配置来构建一个发布</li><li>在Kubernetes中安装，并跟踪后续的发布</li><li>通过与Kubernetes交互，更新或者char</li></ul></blockquote><p>客户端负责管理chart，服务器发展管理发布</p><p><strong>Helm技术实现</strong></p><hr><p>Helm客户端是使用Go语言编写的，它通过gRPC协议与Tiller服务器交互。</p><p>Tiller服务器也是使用Go语言编写的，它使用Kubernetes客户端类库（当前是哦那个REST+JSON）与Kubernetes进行通讯。</p><p>Tiller服务器通过Kubernetes的ConfigMap存储信息，因此本身没有用于存储数据库</p><h3 id="helm安装部署"><a href="#helm安装部署" class="headerlink" title="helm安装部署"></a>helm安装部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从GitHub上下载helm</span></span><br><span class="line">[root@master ~]# wget https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">解压，获取helm的命令</span></span><br><span class="line">[root@master ~]# tar -zxvf  helm-v2.14.3-linux-amd64.tar.gz</span><br><span class="line">[root@master ~]# mv  linux-amd64/helm   /usr/local/bin/</span><br><span class="line">[root@master ~]# chmod  +x  /usr/local/bin/helm </span><br><span class="line"><span class="meta">#</span><span class="bash">确认命令可用</span></span><br><span class="line">[root@master ~]# helm  help</span><br><span class="line"><span class="meta">#</span><span class="bash">设置tab键自动补全</span></span><br><span class="line">[root@master ~]# source  &lt;(helm completion bash)</span><br></pre></td></tr></table></figure><p><strong>安装Tiller服务</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建授权用户，并授予权限</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">tiller-rbac.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">tiller-rbac.yaml</span> </span><br><span class="line"><span class="string">serviceaccount/tiller</span> <span class="string">created</span></span><br><span class="line"><span class="string">clusterrolebinding.rbac.authorization.k8s.io/tiller</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p>初始化，生成一个包的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  init  --service-account=tiller</span><br></pre></td></tr></table></figure><p>查看pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod -n kube-system</span><br><span class="line">tiller-deploy-8557598fbc-5cfv6   0/1     ImagePullBackOff   0          4m6s</span><br><span class="line">//这个镜像是下载不下来的，因为默认是从谷歌下载的</span><br><span class="line"><span class="meta">#</span><span class="bash">修改yaml文件，将镜像改为阿里云的</span></span><br><span class="line">[root@master ~]# kubectl  edit  pod  -n  kube-system  tiller-deploy-8557598fbc-5cfv6</span><br><span class="line">//修改spec字段的image</span><br><span class="line">image: registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.14.3</span><br><span class="line">保存退出，它会自动下载镜像</span><br><span class="line">[root@master ~]# kubectl  get pod  -n  kube-system  |  grep  tiller</span><br><span class="line">tiller-deploy-8557598fbc-5cfv6   1/1     Running   0          13m</span><br></pre></td></tr></table></figure><p>查看helm仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  repo list</span><br><span class="line">NAME  URL                                             </span><br><span class="line">stablehttps://kubernetes-charts.storage.googleapis.com</span><br><span class="line">local http://127.0.0.1:8879/charts</span><br></pre></td></tr></table></figure><p>添加阿里云的仓库源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line">"stable" has been added to your repositories</span><br><span class="line">[root@master ~]# helm  repo list</span><br><span class="line">NAME  URL                                                   </span><br><span class="line">stablehttps://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line">local http://127.0.0.1:8879/charts</span><br></pre></td></tr></table></figure><p>查看版本信息，必须保证可以看到client和server，才可以正常使用helm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm  version</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:"v2.14.3", GitCommit:"0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085", GitTreeState:"clean"&#125;</span><br><span class="line">Server: &amp;version.Version&#123;SemVer:"v2.14.3", GitCommit:"0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085", GitTreeState:"clean"&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="http://pdxblog.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://pdxblog.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>HPA</title>
    <link href="http://pdxblog.top/HPA.html"/>
    <id>http://pdxblog.top/HPA.html</id>
    <published>2020-02-28T16:00:00.000Z</published>
    <updated>2020-02-29T12:11:53.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HPA"><a href="#HPA" class="headerlink" title="HPA"></a>HPA</h3><hr><p>HPA的全称为Horizontal Pod Autoscaling，它可以根据当前pod资源的使用率（如CPU、磁盘、内存等），进行副本数的动态的扩容与缩容，以便减轻各个pod的压力。当pod负载达到一定的阈值后，会根据扩缩容的策略生成更多新的pod来分担压力，当pod的使用比较空闲时，在稳定空闲一段时间后，还会自动减少pod的副本数量</p><p>前提条件：系统应该能够获取当前Pod的资源使用情况（意思是可以执行 kubectl  top  pod命令，并且能够得到反馈信息）</p><p>heapster：这个组件之前是集成在k8s集群的，不过在1.12版本之后就被移除了。如果还想使用此功能，应该部署metricServer这个k8s集群资源使用情况的聚合器</p><p>要是想实现自动扩容缩容的功能，还需要部署heapster服务，而这个服务集成在Prometheus的MetricServer服务中，也就是说需要部署Prometheus服务，但是我们也可以直接部署heapster服务</p><p><strong>实现Pod的扩容与缩容示例</strong></p><p>因为heapster集成在MetricServer服务中，所以首先部署这个服务</p><p>1、首先安装MerticServer服务，从Github上克隆项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# git clone https://github.com/kubernetes-incubator/metrics-server.git</span><br></pre></td></tr></table></figure><p>2、修改yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  metrics-server/deploy/kubernetes/metrics-server-deployment.yaml  </span><br><span class="line">        image: k8s.gcr.io/metrics-server-amd64:v0.3.1   #更换镜像版本  </span><br><span class="line">//在44行添加  </span><br><span class="line">        command:  </span><br><span class="line">          - /metrics-server  </span><br><span class="line">          - --kubelet-insecure-tls  </span><br><span class="line">          - --kubelet-preferred-address-types=InternalIP</span><br></pre></td></tr></table></figure><p>3、下载metrics-server镜像k8s.gcr.io/metrics-server-amd64:v0.3.1（因为国内无法访问k8s.gcr.io，所以采用以下办法）</p><p><strong>pull-google-container</strong> <strong>工具脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  pull-google.sh  </span><br><span class="line">image=$1  </span><br><span class="line">echo $1  </span><br><span class="line">img=`echo $image | sed 's/k8s\.gcr\.io/anjia0532\/google-containers/g;s/gcr\.io/anjia0532/g;s/\//\./g;s/ /\n/g;s/_/-/g;s/anjia0532\./anjia0532\//g' | uniq | awk '&#123;print ""$1""&#125;'`  </span><br><span class="line">echo "docker pull $img"  </span><br><span class="line">docker pull $img  </span><br><span class="line">echo  "docker tag $img $image"  </span><br><span class="line">docker tag $img $image  </span><br><span class="line">[root@master ~]# chmod  +x  pull-google.sh  &amp;&amp;  cp  pull-google.sh   /usr/local/bin/pull-google-container  </span><br><span class="line">[root@master ~]# pull-google-container k8s.gcr.io/metrics-server-amd64:v0.3.1</span><br></pre></td></tr></table></figure><p>4、将镜像打包发给k8s各个节点 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker save  &gt;  metrics-server-amd64.tar  k8s.gcr.io/metrics-server-amd64:v0.3.1   </span><br><span class="line">[root@master ~]# scp  metrics-server-amd64.tar  node01:/root  </span><br><span class="line">[root@master ~]# scp  metrics-server-amd64.tar  node02:/root  </span><br><span class="line">[root@node01 ~]# docker load &lt; metrics-server-amd64.tar  </span><br><span class="line">[root@node02 ~]# docker load &lt; metrics-server-amd64.tar</span><br></pre></td></tr></table></figure><p>5、运行yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  apply  -f  metrics-server/deploy/kubernetes/  </span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created  </span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created  </span><br><span class="line">rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created  </span><br><span class="line">apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created  </span><br><span class="line">serviceaccount/metrics-server created  </span><br><span class="line">deployment.apps/metrics-server created  </span><br><span class="line">service/metrics-server created  </span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:metrics-server created  </span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created  </span><br><span class="line">[root@master ~]# kubectl  get pod -n kube-system  </span><br><span class="line">metrics-server-849dcc6bb4-hr5xp   1/1     Running   0          13s</span><br></pre></td></tr></table></figure><p>6、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl top node   </span><br><span class="line">error: metrics not available yet  #这里等一会就行  </span><br><span class="line">[root@master ~]# kubectl  top  pod  -n  kube-system metrics-server-849dcc6bb4-hr5xp   </span><br><span class="line">NAME                              CPU(cores)   MEMORY(bytes)     </span><br><span class="line">metrics-server-849dcc6bb4-hr5xp   1m           13Mi              </span><br><span class="line">[root@master ~]# kubectl  top  node  </span><br><span class="line">NAME     CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%     </span><br><span class="line">master   56m          2%     1145Mi          66%         </span><br><span class="line">node01   12m          0%     478Mi           27%         </span><br><span class="line">node02   11m          0%     452Mi           26%</span><br></pre></td></tr></table></figure><p>这里，我们使用一个测试镜像，这个镜像基于php-apache制作的docker镜像，包含了一些可以运行cpu密集计算任务的代码（模拟压力测试）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  run  php-apache  --image=mirrorgooglecontainers/hpa-example:latest  --requests=cpu=200m  --expose  --port=80</span><br><span class="line">[root@master ~]# kubectl  get deployments.</span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   1/1     1            1           33s</span><br><span class="line">[root@master ~]# kubectl  get  pod</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">php-apache-794cdd478f-l9kxn   1/1     Running   0          6m27s</span><br><span class="line">[root@master ~]# kubectl  top  pod  php-apache-794cdd478f-l9kxn </span><br><span class="line">NAME                          CPU(cores)   MEMORY(bytes)   </span><br><span class="line">php-apache-794cdd478f-l9kxn   0m           9Mi</span><br></pre></td></tr></table></figure><p>创建HPA控制器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl autoscale deployment php-apache --cpu-percent=50  --min=1  --max=10</span><br><span class="line">horizontalpodautoscaler.autoscaling/php-apache autoscaled</span><br><span class="line">[root@master ~]# kubectl  get  hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         10        1          2m1s</span><br><span class="line">限制cpu使用率不能超过50%，最少有一个Pod，最多有10个</span><br></pre></td></tr></table></figure><p>实时监控Pod的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod -w</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">php-apache-794cdd478f-l9kxn   1/1     Running   0          40m</span><br></pre></td></tr></table></figure><p>创建一个应用，用来不停的访问我们刚刚创建的php-apache的svc资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  run  -i  --tty  load-generator  --image=busybox  /bin/sh</span><br></pre></td></tr></table></figure><p>进入Pod内，执行此命令用来模拟访问php-apache的svc资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">对Pod进行死循环请求</span></span><br><span class="line">/ #  while true; do wget -q -O- http://php-apache.default.svc.cluster.local; done</span><br></pre></td></tr></table></figure><p>运行一段时间后查看pod的数量变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NAME                             READY   STATUS              RESTARTS   AGE</span><br><span class="line">load-generator-7d549cd44-xm98c   1/1     Running             1          25m</span><br><span class="line">php-apache-867f97c8cb-4r6sk      1/1     Running             0          19m</span><br><span class="line">php-apache-867f97c8cb-4rcpk      1/1     Running             0          13m</span><br><span class="line">php-apache-867f97c8cb-5pbxf      1/1     Running             0          16m</span><br><span class="line">php-apache-867f97c8cb-8htth      1/1     Running             0          13m</span><br><span class="line">php-apache-867f97c8cb-d94h9      0/1     ContainerCreating   0          13m</span><br><span class="line">php-apache-867f97c8cb-drh52      1/1     Running             0          18m</span><br><span class="line">php-apache-867f97c8cb-f67bs      0/1     ContainerCreating   0          17m</span><br><span class="line">php-apache-867f97c8cb-nxc2r      1/1     Running             0          19m</span><br><span class="line">php-apache-867f97c8cb-vw74k      1/1     Running             0          39m</span><br><span class="line">php-apache-867f97c8cb-wb6l5      0/1     ContainerCreating   0          15m</span><br></pre></td></tr></table></figure><p>当停止死循环请求后，也并不会立即减少pod数量，会等一段时间后减少pod数量，防止流量再次激增。</p><p>至此，pod副本数量的自动扩缩容就实现了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get hpa -w</span><br><span class="line">NAME         REFERENCE               TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   106%/50%   1         10        8          50m</span><br><span class="line">php-apache   Deployment/php-apache   102%/50%   1         10        8          50m</span><br><span class="line">php-apache   Deployment/php-apache   93%/50%    1         10        8          51m</span><br><span class="line">php-apache   Deployment/php-apache   87%/50%    1         10        8          51m</span><br><span class="line">php-apache   Deployment/php-apache   82%/50%    1         10        8          51m</span><br><span class="line">php-apache   Deployment/php-apache   77%/50%    1         10        8          51m</span><br><span class="line">php-apache   Deployment/php-apache   68%/50%    1         10        8          52m</span><br><span class="line">php-apache   Deployment/php-apache   61%/50%    1         10        8          52m</span><br></pre></td></tr></table></figure><h3 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h3><hr><p>以下只是yaml文件中的一段，并不是整个yaml文件</p><h4 id="基于Pod"><a href="#基于Pod" class="headerlink" title="基于Pod"></a>基于Pod</h4><p>kubernetes对资源的限制实际上是通过cgroup来控制的，cgroup是容器的一组用来控制内核如何运行进程的相关属性集合，针对内存、cpu和各种设备都有对应的cgroup</p><p>默认情况下，Pod运行没有cpu和内存的限额，这意味着系统中的任何Pod将能够想执行该Pod所在的节点一样，消耗足够多的cpu和内存，一般会针对某些应用的pod资源进行资源限制，这个资源限制通过resources的requeste和limits来实现</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">cgroup-pod.yaml</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span>  <span class="string">Always</span></span><br><span class="line">    <span class="attr">image:</span>  <span class="string">xxx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">containerPort:</span>  <span class="number">80</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span>  <span class="string">"4"</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">2Gi</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span>  <span class="string">260m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">260Mi</span></span><br></pre></td></tr></table></figure><p>requests：要分配的资源，limits为最高请求的资源值。可以简单的理解为初始值和最大值</p><h3 id="基于名称空间"><a href="#基于名称空间" class="headerlink" title="基于名称空间"></a>基于名称空间</h3><hr><p>1）计算资源配额</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">compute-resources.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ResourceQuota</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">compute-resources</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hard:</span></span><br><span class="line">    <span class="attr">pods:</span> <span class="string">"20"</span></span><br><span class="line">    <span class="attr">requests.cppu:</span>  <span class="string">"20"</span></span><br><span class="line">    <span class="attr">requests.memory:</span>  <span class="string">100Gi</span></span><br><span class="line">    <span class="attr">limits.cpu:</span> <span class="string">"40"</span></span><br><span class="line">    <span class="attr">limits.memory:</span>  <span class="string">200Gi</span></span><br></pre></td></tr></table></figure><p>2）配置对象数量配额限制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">object-counts.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ResourceQuota</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">object-counts</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hard:</span> </span><br><span class="line">    <span class="attr">configmaps:</span> <span class="string">"10"</span></span><br><span class="line">    <span class="attr">persistentvolumeclaims:</span> <span class="string">"4"</span></span><br><span class="line">    <span class="attr">replicationcontrollers:</span> <span class="string">"20"</span></span><br><span class="line">    <span class="attr">secrets:</span>  <span class="string">"10"</span></span><br><span class="line">    <span class="attr">service.loadbalancers:</span>  <span class="string">"2"</span></span><br></pre></td></tr></table></figure><p>3）配置CPU和内存的LimitRange</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim limitRange.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: LimiRange</span><br><span class="line">metadata:</span><br><span class="line">  name: mem-limit-range</span><br><span class="line">spec:</span><br><span class="line">  limits:</span><br><span class="line">  - default:</span><br><span class="line">      memory: 50Gi</span><br><span class="line">      cpu:  5</span><br><span class="line">    defaultRequest:</span><br><span class="line">      memory: 1Gi</span><br><span class="line">      cpu:  1</span><br><span class="line">    type: Container</span><br></pre></td></tr></table></figure><p>default即limit的值</p><p>defaultRequest即request的值</p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="http://pdxblog.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://pdxblog.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s监控</title>
    <link href="http://pdxblog.top/k8%E7%9B%91%E6%8E%A7.html"/>
    <id>http://pdxblog.top/k8%E7%9B%91%E6%8E%A7.html</id>
    <published>2020-02-27T16:00:00.000Z</published>
    <updated>2020-02-28T07:02:46.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、k8s的UI访问界面-dashboard"><a href="#一、k8s的UI访问界面-dashboard" class="headerlink" title="一、k8s的UI访问界面-dashboard"></a>一、k8s的UI访问界面-dashboard</h3><blockquote><p>General-purpose web UI for Kubernetes clusters</p><p>用于Kubernetes集群的通用web UI</p></blockquote><p>在dashbord中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它当作监控k8s集群的软件</p><p>dashboard能够直观的看到rc、deployment、pod、services等k8s组件的运行情况和日志信息。</p><p>1、从Github搜索dasgboard，下载yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  dashboard</span><br><span class="line">[root@master ~]# cd dashboard/</span><br><span class="line">[root@master dashboard]# wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml</span><br><span class="line">[root@master dashboard]# ls</span><br><span class="line">recommended.yaml</span><br><span class="line">[root@node01 ~]# docker  pull  kubernetesui/dashboard:v2.0.0-rc5</span><br><span class="line">[root@node02 ~]# docker  pull  kubernetesui/dashboard:v2.0.0-rc5</span><br></pre></td></tr></table></figure><p>2、运行yaml文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">修改service类型类NodePort</span><br><span class="line"><span class="meta">#</span><span class="bash">在40行的spec字段修改</span></span><br><span class="line">[root@master dashboard]# vim  recommended.yaml</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">[root@master dashboard]# kubectl  apply  -f  recommended.yaml </span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# kubectl  get  pod  -n  kubernetes-dashboard </span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-7f5767668b-f7nh6   1/1     Running   0          9m32s</span><br><span class="line">kubernetes-dashboard-57b4bcc994-2rj9k        1/1     Running   0          9m32s</span><br><span class="line">[root@master dashboard]# kubectl  get svc -n kubernetes-dashboard </span><br><span class="line">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.111.237.119   &lt;none&gt;        8000/TCP        16m</span><br><span class="line">kubernetes-dashboard        NodePort    10.107.77.172    &lt;none&gt;        443:30361/TCP   16m</span><br><span class="line">[root@master dashboard]# kubectl  get deployments. -n  kubernetes-dashboard </span><br><span class="line">NAME                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">dashboard-metrics-scraper   1/1     1            1           11m  #将收集到的数据制作成图表的形式</span><br><span class="line">kubernetes-dashboard        1/1     1            1           11m</span><br></pre></td></tr></table></figure><p>3、通过浏览器访问：<a href="https://192.168.1.70:30361" target="_blank" rel="noopener">https://192.168.1.70:30361</a><br><img src="https://img-blog.csdnimg.cn/20200228143349194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>两种登录方式：</p><blockquote><p>kubeconfig：配置文件</p><p>Token：令牌</p></blockquote><p><strong>基于Token的方法登录dashboard</strong></p><p>1、创建一个dashboaed的管理用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# kubectl create  serviceaccount dashboard-admin -n kube-system </span><br><span class="line">serviceaccount/dashboard-admin created</span><br></pre></td></tr></table></figure><p>2、将这个用户绑定为集群管理用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br></pre></td></tr></table></figure><p>3、获取Token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">得到Token的名称</span></span><br><span class="line">[root@master dashboard]# kubectl  get secrets  -n kube-system | grep dashboard-admin</span><br><span class="line">dashboard-admin-token-mwht2                      kubernetes.io/service-account-token   3      5m30s</span><br><span class="line"><span class="meta">#</span><span class="bash">查看上述得到的secret资源的详细信息，会得到Token</span></span><br><span class="line">[root@master dashboard]# kubectl  get secrets -n kube-system  dashboard-admin-token-mwht2 </span><br><span class="line">NAME                          TYPE                                  DATA   AGE</span><br><span class="line">dashboard-admin-token-mwht2   kubernetes.io/service-account-token   3      7m19s</span><br><span class="line">//这个类型不是Opaque，说明不是隐藏的，我们可以看到他的详细信息</span><br><span class="line"><span class="meta">#</span><span class="bash">获取详细信息，得到Token</span></span><br><span class="line">[root@master dashboard]# kubectl  describe secrets -n kube-system  dashboard-admin-token-mwht2</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tbXdodDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNjliODE4YjYtOTA3Zi00NTBmLWI3NjgtMTc2ODIyM2Y1OTIyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.WCcVrx6oXs0k7-0hQOOik30ZPJl0sNeQE987PHv_Jm9ZpLQ4P9VIQdN49uRvNsd7DF4Ozgu5enWFvNsiaCDmYHauK2LAoHbDBURE9wGx8VlMaaquZ1B_ur4lOluP6Ha3wdZB64fEdtrg-6-DjIS7SC2Kqr2Bcl8NeRdtABh3cufgJ2EQoU40-FUy-0ahegYixIrrQ-DXgZeGrXP79RzHmBXaSwbRwTqWXwNf0e25on_gCiiMC-MVmbZ0MXhNNv-jc8uD2obaEUTdOCLg__f482Zy7xLEMjBv9eVn0P5u7c8r45VfDs08zK4Leh5GI4KIgcuxt37TCtfmEz5XEoTLnA</span><br></pre></td></tr></table></figure><p>4、在浏览器上使用Token登录</p><p>PS：如果是使用的是旧版本的dashboard，使用谷歌浏览器登录，可能不成功，需要换成其他的浏览器，比如火狐<br><img src="https://img-blog.csdnimg.cn/20200228143431657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228143451277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>//如果没有显示，就说明serviceaccount，没有绑定账号，就说明没有权限，就什么都看不到</p><p>这里我们可以创建资源，有三种方式<br><img src="https://img-blog.csdnimg.cn/20200228143508996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>从表单创建默认的是Deployment资源对象<br><img src="https://img-blog.csdnimg.cn/20200228143521696.png" alt="在这里插入图片描述"></p><p>还有一些扩容缩容、更新，删除的操作</p><p><strong>除了基于Token的方法登录dashboard，还有基于kuberconfig配置文件的登录方式</strong></p><p>1、获取Tonke</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">得到Token的名称</span></span><br><span class="line">[root@master dashboard]# kubectl  get secrets  -n kube-system | grep dashboard-admin</span><br><span class="line">dashboard-admin-token-mwht2                      kubernetes.io/service-account-token   3      5m30s</span><br><span class="line"><span class="meta">#</span><span class="bash">查看上述得到的secret资源的详细信息，会得到Token</span></span><br><span class="line">[root@master dashboard]# kubectl  get secrets -n kube-system  dashboard-admin-token-mwht2 </span><br><span class="line">NAME                          TYPE                                  DATA   AGE</span><br><span class="line">dashboard-admin-token-mwht2   kubernetes.io/service-account-token   3      7m19s</span><br></pre></td></tr></table></figure><p>2、生成kubeconfig配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置一个环境变量代表获取Token</span></span><br><span class="line">[root@master dashboard]# DASH_TOKEN=$(kubectl  get  secrets -n kube-system dashboard-admin-token-mwht2 -o  jsonpath=&#123;.data.token&#125; | base64 -d)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将k8s集群的配置信息写入kubeconfig配置文件中</span></span><br><span class="line">[root@master dashboard]# kubectl  config  set-cluster kubernetes  --server=192.168.1.70:6443  --kubeconfig=/root/.dashboard-admin.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将Token写入配置文件里</span></span><br><span class="line">[root@master dashboard]# kubectl  config  set-credentials  dashboard-admin  --token=$DASH_TOKEN  --kubeconfig=/root/.dashboard-admin.conf</span><br><span class="line">[root@master dashboard]# kubectl config set-context dashboard-admin@kubernetes --cluster=kubernetes --user=dashboard-admin --kubeconfig=/root/.dashboard-admin.conf</span><br><span class="line">[root@master dashboard]# kubectl config use-context dashboard-admin@kubernetes --kubeconfig=/root/.dashboard-admin.conf</span><br></pre></td></tr></table></figure><p>3、将生成的/root/.dashboard-admin.config的配置文件，导出并保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# sz  /root/.dashboard-admin.conf</span><br></pre></td></tr></table></figure><p>4、从浏览器选择kubeconfig的登录方式，然后导入配置文件即可<br><img src="https://img-blog.csdnimg.cn/20200228143540197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="二、weave-scope监控k8s集群Scope"><a href="#二、weave-scope监控k8s集群Scope" class="headerlink" title="二、weave-scope监控k8s集群Scope"></a>二、weave-scope监控k8s集群Scope</h3><p>Weave Scope是Weaveworks开发的监控工具。Weave Scope在Kubernetes集群中生成进程，容器和主机的映射，以帮助实时了解Docker容器。还可基于图形UI管理容器并在容器上运行诊断命令</p><p>1、在Github上直接搜索scope，找到yaml文件并下载下来<br><img src="https://img-blog.csdnimg.cn/20200228143556719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2、往下拉找到kubernetes，点击<br><img src="https://img-blog.csdnimg.cn/20200228143616545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3、将这个yaml文件下载下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# wget https://cloud.weave.works/k8s/scope.yaml</span><br></pre></td></tr></table></figure><p>4、修改yaml，修改service的端口类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  scope.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash">在212行的spec字段中添加</span></span><br><span class="line">      type: NodePort</span><br><span class="line"><span class="meta">#</span><span class="bash">保存并退出，运行yaml文件</span></span><br><span class="line">root@master ~]# kubectl  apply  -f  scope.yaml </span><br><span class="line">namespace/weave created</span><br><span class="line">serviceaccount/weave-scope created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/weave-scope created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/weave-scope created</span><br><span class="line">deployment.apps/weave-scope-app created</span><br><span class="line">service/weave-scope-app created</span><br><span class="line">deployment.apps/weave-scope-cluster-agent created</span><br><span class="line">daemonset.apps/weave-scope-agent created</span><br><span class="line">[root@master ~]# kubectl  get deployments. -n weave </span><br><span class="line">NAME                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">weave-scope-app             1/1     1            1           26m  #展示信息</span><br><span class="line">weave-scope-cluster-agent   1/1     1            1           26m  #收集信息</span><br><span class="line">[root@master ~]# kubectl  get pod  -n  weave </span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">weave-scope-agent-jv4g8                      1/1     Running   0          21s</span><br><span class="line">weave-scope-agent-kw7x9                      1/1     Running   0          21s</span><br><span class="line">weave-scope-agent-vnqks                      1/1     Running   0          21s</span><br><span class="line">weave-scope-app-78cff98cbc-nx6p5             1/1     Running   0          21s</span><br><span class="line">weave-scope-cluster-agent-7cc889fbbf-tnrhv   1/1     Running   0          21s</span><br></pre></td></tr></table></figure><p>5、查看端口，使用浏览器访问：192.168.1.70:30366</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get svc  -n  weave </span><br><span class="line">NAME              TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">weave-scope-app   NodePort   10.110.46.45   &lt;none&gt;        80:30366/TCP   41s</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200228143639816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在scope的web界面中，可以查看很多的东西，pod、node节点等详细信息，包括打开容器的终端，查看其日志信息等等……</p><h3 id="三、Prometheus"><a href="#三、Prometheus" class="headerlink" title="三、Prometheus"></a>三、Prometheus</h3><p>Prometheus可以原生地监测Kubernetes，Prometheus Operator简化了Kubernetes上的Prometheus设置，并允许使用Prometheus适配器提供自定义指标API。 Prometheus提供强大的查询语言和内置仪表板，用于查询和可视化数据</p><blockquote><p>PS：在这里部署的prometheus，并不是Prometheus官网提供的，而是使用的coreOS提供的Prometheus项目</p></blockquote><p><strong>Prometheus各个组件的作用：</strong></p><blockquote><p><strong>MetricsServer</strong>：是k8s集群资源使用情况的聚合器，收集数据给k8s集群内使用，如kubectl，hpa，scheduler等</p><p><strong>Prometheus Operator</strong>：是一个系统检测和警报工具箱，用来存储监控数据</p><p><strong>Prometheus node-exporter</strong>：收集k8s集群内资源的数据，指定告警规则</p><p><strong>Prometheus</strong>：收集apiServer，scheduler，contorller-manager，kubelet组件的数据，通过http协议传输</p><p><strong>Grnfana</strong>：可视化数据统计和监控平台</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200228143703917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228143716114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1、克隆Prometheus的项目地址到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  prometheus</span><br><span class="line">[root@master ~]# cd  prometheus/</span><br><span class="line">[root@master prometheus]# git  clone  https://github.com/coreos/kube-prometheus.git</span><br><span class="line">[root@master prometheus]# ls</span><br><span class="line">kube-prometheus</span><br></pre></td></tr></table></figure><p>2、修改grafana-service.yaml文件，使用NodePort的暴露方式，暴露的端口为31001</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master prometheus]# cd  kube-prometheus/manifests/</span><br><span class="line">[root@master manifests]# vim  grafana-service.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash">在spec字段下添加</span></span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 3000</span><br><span class="line">    targetPort: http</span><br><span class="line">    nodePort: 31001</span><br></pre></td></tr></table></figure><p>3、修改prometheus-service.yaml文件，使用NodePort的暴露方式，暴露的端口为31002</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]# vim  prometheus-service.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash">在spec字段下添加</span></span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9090</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 31002</span><br></pre></td></tr></table></figure><p>4、修改alertmanager-service.yaml（配置告警模板）文件，使用NodePort的暴露方式，暴露的端口为31003</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]# vim  alertmanager-service.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash">在spec字段下添加</span></span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9093</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 31003</span><br></pre></td></tr></table></figure><p>5、将这个目录中的yaml，全部运行，是运行以上yaml文件的基础环境配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]# cd  setup/   #如果想要运行上面的yaml，首先要运行基础环境的设置</span><br><span class="line">[root@master setup]# cd  ..</span><br><span class="line">[root@master manifests]# pwd</span><br><span class="line">/root/prometheus/kube-prometheus/manifests</span><br><span class="line">[root@master manifests]# kubectl  apply  -f  setup/</span><br></pre></td></tr></table></figure><p>6、运行主yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]# cd  ..</span><br><span class="line">[root@master kube-prometheus]# pwd</span><br><span class="line">/root/prometheus/kube-prometheus</span><br><span class="line">[root@master kube-prometheus]# kubectl  apply  -f  manifests/</span><br></pre></td></tr></table></figure><p>7、浏览器访问：192.168.1.70:31001<br><img src="https://img-blog.csdnimg.cn/2020022814373886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>//根据提示修改密码，然后保存登录<br><img src="https://img-blog.csdnimg.cn/20200228143754903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228143805782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228143913188.png" alt="在这里插入图片描述"></p><p>//将这三个导入一下</p><p>浏览器访问grafan官网：<a href="https://grafana.com/导入监控模板" target="_blank" rel="noopener">https://grafana.com/导入监控模板</a><br><img src="https://img-blog.csdnimg.cn/20200228143943712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>搜索prometheus，选择相应的模板<br><img src="https://img-blog.csdnimg.cn/20200228144006585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>复制ID号<br><img src="https://img-blog.csdnimg.cn/20200228144029692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>回到grafan，导入模板<br><img src="https://img-blog.csdnimg.cn/20200228144045253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228144059783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228144116795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>部署成功以后，就可运行一条命令，查看资源使用情况（MetricsServer必须部署成功）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  top  node </span><br><span class="line">NAME     CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">master   182m         9%     1380Mi          80%       </span><br><span class="line">node01   383m         19%    1402Mi          81%       </span><br><span class="line">node02   396m         19%    1406Mi          81%</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>dashboard：</p><p>可以查看集群中应用的运行状态，也能够修改、创建k8s集群中的个各种资源</p><blockquote><p>用于Kubernetes集群的通用web UI，在dasgboard中，虽然可以做到创建、删除、修改资源等操作，但通常情况下，我们会把它仿作监控k8s集群的软件。dashboard能够直观的看到rc、deployment、pod、service等k8s组件与逆行的情况和日志信息</p></blockquote><p>weave-scope：</p><p>可以查看集群中应用的运行状态，也能够修改、创建k8s集群中的个各种资源</p><blockquote><p>Weave Scope是Weaveworks开发的监控工具。Weave Scope在Kubernetes集群中生成进程，容器和主机的映射，以帮助实时了解Docker容器。还可基于图形UI管理容器并在容器上运行诊断命令</p></blockquote><p>Prometheus：</p><p>Prometheus是一个开源系统监控和报警工具。</p><p>Prometheus服务可以直接通过目标拉取数据，或者间接地通过中间网关拉取数据。它在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中，PromQL和其他API可视化展示收集的数据在K8s中，关于集群的资源有metrics度量值的概念，有各种不同的exporter可以通过api接口对外提供各种度量值的及时数据，prometheus在与k8s融合工作的过程中就是通过与这些提供metric值的exporter进行交互，获取数据，整合数据，展示数据，触发告警的过程</p><blockquote><p>Prometheus可以原生地监测Kubernetes，Prometheus Operator简化了Kubernetes上的Prometheus设置，并允许使用Prometheus适配器提供自定义指标API。 Prometheus提供强大的查询语言和内置仪表板，用于查询和可视化数据</p></blockquote>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="http://pdxblog.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://pdxblog.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Ingress实现虚拟主机和Https代理访问</title>
    <link href="http://pdxblog.top/Ingress%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA.html"/>
    <id>http://pdxblog.top/Ingress%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA.html</id>
    <published>2020-02-25T16:00:00.000Z</published>
    <updated>2020-02-28T07:01:19.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ingress实现虚拟主机和Https代理访问"><a href="#Ingress实现虚拟主机和Https代理访问" class="headerlink" title="Ingress实现虚拟主机和Https代理访问"></a>Ingress实现虚拟主机和Https代理访问</h2><p>虚拟主机，也叫“网站空间”，就是把一台运行在互联网上的物理服务器划分成多个“虚拟”服务器。虚拟主机技术极大的促进了网络技术的应用和普及。同时虚拟主机的租用服务也成了网络时代的一种新型经济形式</p><p>1、首先确定要运行Ingress-nginx-controller服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod -n ingress-nginx </span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-controller-5954d475b6-ktpf9   1/1     Running   1          43h</span><br></pre></td></tr></table></figure><p>2、将Ingress-nginx-controller暴露为一个service资源对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get svc -n ingress-nginx </span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.97.246   &lt;none&gt;        80:32007/TCP,443:30741/TCP   43h</span><br></pre></td></tr></table></figure><p>3、创建一个Deployment资源和一个Service资源，并相互关联</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">deploy1.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deploy1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span>  <span class="string">nginx1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx1</span></span><br><span class="line">        <span class="attr">image:</span>  <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">svc-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span>  <span class="string">nginx1</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">deploy1.yaml</span> </span><br><span class="line"><span class="string">deployment.extensions/deploy1</span> <span class="string">created</span></span><br><span class="line"><span class="string">service/svc-1</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get  pod </span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">deploy1-7df6778547-v6ww9   1/1     Running   0          2m33s</span><br><span class="line">deploy1-7df6778547-vkvwf   1/1     Running   0          2m33s</span><br><span class="line">[root@master ~]# kubectl  get svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        52d</span><br><span class="line">svc-1          ClusterIP   10.109.213.247   &lt;none&gt;        80/TCP         3m17s</span><br></pre></td></tr></table></figure><p>4、创建另外“一对”服务（delpoy2.yaml和svc-2）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim  deploy2.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app:  nginx2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx2</span><br><span class="line">        image:  nginx   #这里没有更换镜像，使用相同的nginx镜像</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-2</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app:  nginx2</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">[root@master ~]# kubectl  apply  -f  deploy2.yaml </span><br><span class="line">deployment.extensions/deploy2 created</span><br><span class="line">service/svc-2 created</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get pod</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">deploy2-7b6786d8bf-6xnjs   1/1     Running   0          19s</span><br><span class="line">deploy2-7b6786d8bf-dvjqt   1/1     Running   0          19s</span><br><span class="line">[root@master ~]# kubectl  get svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        52d</span><br><span class="line">svc-2          ClusterIP   10.106.67.155    &lt;none&gt;        80/TCP         24s</span><br></pre></td></tr></table></figure><p>4、创建Ingress规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www1.bdqn.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span>  <span class="string">svc-1</span></span><br><span class="line">            <span class="attr">servicePort:</span>  <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www2.bdqn.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span>  <span class="string">svc-2</span></span><br><span class="line">            <span class="attr">servicePort:</span>  <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">ingress.yaml</span> </span><br><span class="line"><span class="string">ingress.extensions/ingress-1</span> <span class="string">created</span></span><br><span class="line"><span class="string">ingress.extensions/ingress-2</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  describe  ingresses.  ingress-1</span><br><span class="line">Rules:</span><br><span class="line">  Host           Path  Backends</span><br><span class="line">  ----           ----  --------</span><br><span class="line">  www1.bdqn.com  </span><br><span class="line">                 /   svc-1:80 (10.244.1.4:80,10.244.2.4:80)</span><br><span class="line">[root@master ~]# kubectl  describe  ingresses.  ingress-1</span><br><span class="line">Rules:</span><br><span class="line">  Host           Path  Backends</span><br><span class="line">  ----           ----  --------</span><br><span class="line">  www2.bdqn.com  </span><br><span class="line">                 /   svc-2:80 (10.244.1.5:80,10.244.2.5:80)</span><br><span class="line">[root@master ~]# kubectl  get svc -n ingress-nginx </span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.97.246   &lt;none&gt;        80:32007/TCP,443:30741/TCP   43h</span><br></pre></td></tr></table></figure><p>5、由于实验环境限制（这个域名是假的），所以自己用来模拟一个域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在windows上添加域名解析：C:\Windows\System32\drivers\etc</span><br><span class="line">192.168.1.70  www1.bdqn.com</span><br><span class="line">192.168.1.70  www2.bdqn.com</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200226151905178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226151922114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Ingress资源实现https代理访问"><a href="#Ingress资源实现https代理访问" class="headerlink" title="Ingress资源实现https代理访问"></a>Ingress资源实现https代理访问</h3><p>在上面的操作中，实现了使用ingress-nginx为后端所有pod提供一个统一的入口，那么，有一个非常严肃的问题需要考虑，就是如何为我们的pod配置CA证书来实现HTTPS访问？在pod中直接配置CA么？那需要进行多少重复性的操作？而且，pod是随时可能被kubelet杀死再创建的。当然这些问题有很多解决方法，比如直接将CA配置到镜像中，但是这样又需要很多个CA证书。</p><p>这里有更简便的一种方法，就拿上面的情况来说，后端有多个pod，pod与service进行关联，service又被ingress规则发现并动态写入到ingress-nginx-controller容器中，然后又为ingress-nginx-controller创建了一个Service映射到群集节点上的端口，来供client来访问。</p><p>在上面的一系列流程中，关键的点就在于Ingress规则，我们只需要在Ingress的yaml文件中，为域名配置CA证书即可，只要可以通过HTTPS访问到域名，至于这个域名是怎么关联到后端提供服务的pod，这就是属于k8s群集内部的通信了，即便是使用http来通信，也无伤大雅</p><p>1、生成一个证书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir  https</span><br><span class="line">[root@master ~]# cd  https</span><br><span class="line">[root@master https]# openssl  req  -x509  -sha256  -nodes  -days  365  -newkey  rsa:2048  -keyout  tls.key  -out  tls.crt  -subj  "/CN=testsvc  /0=testsvc"</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">......................................................................................+++</span><br><span class="line">............+++</span><br><span class="line">writing new private key to 'tls.key'</span><br><span class="line">-----</span><br><span class="line">Subject Attribute 0 has no known NID, skipped</span><br><span class="line">[root@master https]# ls</span><br><span class="line">tls.crt  tls.key</span><br></pre></td></tr></table></figure><p>2、创建secret资源，保存证书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master https]# kubectl create secret tls tls-secret --key=tls.key --cert tls.crt</span><br><span class="line">secret/tls-secret created</span><br></pre></td></tr></table></figure><p>3、创建一个Deployment资源对象，用来模拟web服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@master https]# vim  deploy3.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy3</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app:  nginx3</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx3</span><br><span class="line">        image:  nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-3</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app:  nginx3</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">[root@master https]# kubectl  apply  -f  deploy3.yaml</span><br><span class="line">deployment.extensions/deploy3 created</span><br><span class="line">service/svc-3 created</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master https]# kubectl  get pod</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">deploy3-5c545fcc5f-4n9bw   1/1     Running   0          17s</span><br><span class="line">deploy3-5c545fcc5f-7b4g2   1/1     Running   0          17s</span><br><span class="line">[root@master https]# kubectl  get  svc</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        52d</span><br><span class="line">svc-3          ClusterIP   10.97.212.56     &lt;none&gt;        80/TCP         22m</span><br><span class="line">[root@master https]# curl -I  10.97.212.56</span><br><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p>4、创建对应的Ingress规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">https]#</span> <span class="string">vim</span>  <span class="string">ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-3</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span>  <span class="comment">#引用CA证书</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">www3.bdqn.com</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">tls-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span>  <span class="string">www3.bdqn.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span>  <span class="string">svc-3</span></span><br><span class="line">            <span class="attr">servicePort:</span>  <span class="number">80</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">https]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">ingress.yaml</span> </span><br><span class="line"><span class="string">ingress.extensions/ingress-3</span> <span class="string">created</span></span><br><span class="line"><span class="string">//同样，添加域名解析</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.70</span>  <span class="string">www3.bdqn.com</span></span><br></pre></td></tr></table></figure><p>5、查找对应service-NodePort的443端口映射的端口，直接用浏览器访问即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master https]# kubectl  get svc -n ingress-nginx </span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.97.246   &lt;none&gt;        80:32007/TCP,443:30741/TCP   44h</span><br></pre></td></tr></table></figure><p>通过浏览器访问：<a href="https://www3.bdqn.com:30741" target="_blank" rel="noopener">https://www3.bdqn.com:30741</a><br><img src="https://img-blog.csdnimg.cn/20200226151954779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226152032715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYzNjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="http://pdxblog.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://pdxblog.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Ingress原理及配置</title>
    <link href="http://pdxblog.top/Ingress.html"/>
    <id>http://pdxblog.top/Ingress.html</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2020-02-24T06:19:01.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p>在Kubernetes中，服务和Pod的IP地址仅可以在集群网络内部使用，对于集群外的应用是不可见的。为了使外部的应用能够访问集群内的服务，在Kubernetes中目前提供了以下几种方案：</p><blockquote><p>NodePort</p><p>LoadBalancer</p><p>Ingress</p></blockquote><p>NodePort：简单的来说就是通过Service资源对象，为后端的Pod提供一个统一的访问入口，然后将Service的统一访问接口映射到集群节点上，最终实现client通过映射到集群节点上的端口访问到后端Pod提供的服务</p><p>但是，这种方法有个弊端，就是当新生成一个pod服务就需要创建对应的service将其映射到节点端口，当运行的pod过多时，我们节点暴露给client端的端口也会随之增加，这样我们整个k8s群集的危险系数就会增加，因为我们在搭建群集之处，官方明确指出，必须关闭firewalld防火墙及清空iptables规则，现在我们又暴露了那么多端口给client，安全系数可想而知</p><p>Ingress就解决了这个弊端：</p><p>简单的理解：原先暴露的service，现在给定一个统一的访问入口</p><p><strong>Ingress资源对象的组成：</strong></p><blockquote><p><strong>Ingress-nginx-controller：</strong></p><p>将新加入的Ingress转化为反向代理服务器的配置文件，并使之生效（动态的感知k8s集群内Ingress资源的变化，通过lua脚本实现）</p><p><strong>Ingress：</strong></p><p>将反向代理服务器抽象成一个Ingress对象，每添加一个新的服务，只需要写一个新的Ingress的yaml文件即可，或修改已经存在的Ingress规则的yaml</p></blockquote><p>在k8s集群前边部署一个反向代理服务器，这个服务器代理着k8s集群内部的service资源</p><p><strong>Ingress-nginx可以解决什么问题：</strong></p><blockquote><p>动态的配置服务</p><p>​    如果按照传统方式, 当新增加一个服务时, 我们可能需要在流量入口加一个反向代理指向我们新的k8s服务. 而如果用了Ingress-nginx, 只需要配置好这个服务, 当服务启动时, 会自动注册到Ingress的中, 不需要而外的操作</p><p>减少不必要的端口暴露</p><p>​    配置过k8s的都清楚, 第一步是要关闭防火墙的, 主要原因是k8s的很多服务会以NodePort方式映射出去, 这样就相当于给宿主机打了很多孔, 既不安全也不优雅. 而Ingress可以避免这个问题, 除了Ingress自身服务可能需要映射出去, 其他服务都不要用NodePort方式</p></blockquote><p><strong>Ingress-nginx工作原理：</strong></p><blockquote><p>1）Ingress controller通过和kubernetes api交互，动态的去感知集群中Ingress规则变化，<br>2）然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段nginx配置，<br>3）再写到nginx-ingress-controller的pod里，这个Ingress controller的pod里运行着一个Nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，<br>4）然后reload一下使配置生效。以此达到域名分别配置和动态更新的问题</p></blockquote><p><strong>基于Nginx的Ingress  controller根据不同的开发公司，又分为两种：</strong></p><blockquote><p>k8s社区版的：Ingress-nginx</p><p>nginx公司自己开发的：nginx-ingress</p></blockquote><h4 id="Ingress-nginx配置实例："><a href="#Ingress-nginx配置实例：" class="headerlink" title="Ingress-nginx配置实例："></a><strong>Ingress-nginx配置实例：</strong></h4><p>1）创建一个web服务，用deployment资源，用httpd奖项，然后创建一个service资源与之关联</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">deploy_1.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bdqn-ns</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">bdqn-ns</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpd-deploy</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span>  <span class="string">bdqn-ns</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">image:</span>  <span class="string">httpd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpd-svc</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span>  <span class="string">bdqn-ns</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">httpd-port</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span>   </span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31033</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">deploy_1.yaml</span> </span><br><span class="line"><span class="string">namespace/bdqn-ns</span> <span class="string">created</span></span><br><span class="line"><span class="string">deployment.extensions/httpd-deploy</span> <span class="string">created</span></span><br><span class="line"><span class="string">service/httpd-svc</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get svc  -n bdqn-ns </span><br><span class="line">NAME        TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">httpd-svc   NodePort   10.97.86.190   &lt;none&gt;        80:31033/TCP   3m31s</span><br><span class="line">[root@master ~]# kubectl  get pod  -n bdqn-ns </span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd-deploy-966699d76-25wkn   1/1     Running   0          3m33s</span><br><span class="line">httpd-deploy-966699d76-6cdwf   1/1     Running   0          3m34s</span><br><span class="line">[root@master ~]# kubectl  get deployments. -n bdqn-ns </span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-deploy   2/2     2            2           3m37s</span><br><span class="line">[root@master ~]# kubectl  describe svc  -n bdqn-ns</span><br><span class="line">Selector:                 app=bdqn-ns</span><br><span class="line">Type:                     NodePort</span><br><span class="line">IP:                       10.97.86.190</span><br><span class="line">Port:                     httpd-port  80/TCP</span><br><span class="line">TargetPort:               80/TCP</span><br><span class="line">NodePort:                 httpd-port  31033/TCP</span><br><span class="line">Endpoints:                10.244.1.2:80,10.244.2.2:80</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br></pre></td></tr></table></figure><p>2）创建一个web服务，用deployment资源，用tomcat镜像，然后创建一个service资源与之关联</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">deploy_2.yaml</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-deploy</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span>  <span class="string">bdqn-tomcat</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">        <span class="attr">image:</span>  <span class="string">tomcat:8.5.45</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-svc</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span>  <span class="string">bdqn-tomcat</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat-port</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span>   </span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32033</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">deploy_2.yaml</span> </span><br><span class="line"><span class="string">deployment.extensions/tomcat-deploy</span> <span class="string">created</span></span><br><span class="line"><span class="string">service/tomcat-svc</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get deployments. -n bdqn-ns </span><br><span class="line">NAME            READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-deploy    2/2     2            2           9m58s</span><br><span class="line">tomcat-deploy   2/2     2            2           58s</span><br><span class="line">[root@master ~]# kubectl  get pod -n bdqn-ns </span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd-deploy-966699d76-25wkn     1/1     Running   0          10m</span><br><span class="line">httpd-deploy-966699d76-6cdwf     1/1     Running   0          10m</span><br><span class="line">tomcat-deploy-759dc8c885-9wgqw   1/1     Running   0          70s</span><br><span class="line">tomcat-deploy-759dc8c885-9xmhj   1/1     Running   0          70s</span><br><span class="line">[root@master ~]# kubectl  get svc -n bdqn-ns </span><br><span class="line">NAME         TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">httpd-svc    NodePort   10.97.86.190   &lt;none&gt;        80:31033/TCP     10m</span><br><span class="line">tomcat-svc   NodePort   10.98.122.36   &lt;none&gt;        8080:32033/TCP   75s</span><br></pre></td></tr></table></figure><p>3）创建Ingress -nginx-controller</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml</span><br><span class="line">//将yaml文件下载下来</span><br><span class="line">在yaml文件中添加：hostNetwork: true</span><br><span class="line">    spec:    //在212行的spec字段下添加</span><br><span class="line">      hostNetwork:  true   //添加这行就行</span><br><span class="line">      # wait up to five minutes for the drain of connections</span><br><span class="line">[root@master ~]# kubectl  apply  -f  mandatory.yaml</span><br><span class="line">[root@master ~]# kubectl  get pod -n  ingress-nginx </span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-controller-5954d475b6-xtzbc   1/1     Running   0          16m</span><br></pre></td></tr></table></figure><p><strong>hostNetwork: true</strong></p><blockquote><p>在deployment资源中，如果添加了此字段，意味着Pod中运行的应用可以直接使用node节点的端口，这样node节点主机所在网络的其他主机，就可以通过访问该端口访问此应用。（类似于docker映射到宿主机的端口）</p></blockquote><p>4）创建Ingress资源：（定义Ingress规则）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">vim</span>  <span class="string">ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bdqn-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span>  <span class="string">bdqn-ns</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span>  <span class="string">/</span> <span class="comment">#这个千万不要写错，不然后面无法访问</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">ingress.bdqn.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span>  <span class="string">httpd-svc</span></span><br><span class="line">          <span class="attr">servicePort:</span>  <span class="number">80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/tomcat</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span>  <span class="string">tomcat-svc</span></span><br><span class="line">          <span class="attr">servicePort:</span>  <span class="number">8080</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">apply</span>  <span class="string">-f</span>  <span class="string">ingress.yaml</span> </span><br><span class="line"><span class="string">ingress.extensions/bdqn-ingress</span> <span class="string">created</span></span><br><span class="line"><span class="string">[root@master</span> <span class="string">~]#</span> <span class="string">kubectl</span>  <span class="string">describe</span>  <span class="string">ingresses.</span> <span class="string">-n</span> <span class="string">bdqn-ns</span>  <span class="string">bdqn-ingress</span></span><br><span class="line"><span class="attr">Rules:</span></span><br><span class="line">  <span class="string">Host</span>              <span class="string">Path</span>  <span class="string">Backends</span></span><br><span class="line">  <span class="string">----</span>              <span class="string">----</span>  <span class="string">--------</span></span><br><span class="line">  <span class="string">ingress.bdqn.com</span>  </span><br><span class="line">                    <span class="string">/</span>         <span class="string">httpd-svc:80</span> <span class="string">(10.244.1.5:80,10.244.2.4:80)</span></span><br><span class="line">                    <span class="string">/tomcat</span>   <span class="string">httpd-tomcat:8080</span> <span class="string">(10.244.1.4:8080,10.244.2.5:8080)</span></span><br><span class="line"><span class="string">//如果没有这个信息说明Ingress创建的有问题</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  exec  -it  -n  ingress-nginx  nginx-ingress-controller-5954d475b6-wkqr2  sh</span><br><span class="line">/etc/nginx $ cat  nginx.conf</span><br><span class="line">//没创建Ingress之前这些值都是空的，这就是动态的感知，然后写入配置文件</span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">set $namespace      "bdqn-ns";</span><br><span class="line">set $ingress_name   "bdqn-ingress";</span><br><span class="line">set $service_name   "httpd-svc";</span><br><span class="line">set $service_port   "80";</span><br><span class="line">set $location_path  "/";</span><br><span class="line">location ~* "^/tomcat" &#123;</span><br><span class="line"></span><br><span class="line">set $namespace      "bdqn-ns";</span><br><span class="line">set $ingress_name   "bdqn-ingress";</span><br><span class="line">set $service_name   "tomcat-svc";</span><br><span class="line">set $service_port   "8080";</span><br><span class="line">set $location_path  "/tomcat";</span><br></pre></td></tr></table></figure><p>因为域名是自定义的，所以要配置域名解析，修改windows的host文件，将IP与域名绑定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//查看Ingress-controller运行在哪个节点，IP 是 ingress-controller  Pod运行所在的节点</span><br><span class="line">[root@master ~]# kubectl get pod -n  ingress-nginx -o wide</span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE   IP             NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-ingress-controller-5954d475b6-wkqr2   1/1     Running   1          44h   192.168.1.50   node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">//找到host文件，进行修改</span><br><span class="line">C:\Windows\System32\drivers\etc</span><br><span class="line">192.168.1.50  ingress.bdqn.com</span><br></pre></td></tr></table></figure><p>现在已经达到了我们想要的功能，现在可以通过ingress.bdqn.com访问httpd服务，通过ingress.bdqn.com/tomcat访问tomcat服务<br><img src="https://img-blog.csdnimg.cn/20200224140327586.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200224140345625.png" alt="在这里插入图片描述"></p><p>在上面的访问测试中，虽然访问到了对应的服务，但是有一个弊端，就是在做DNS解析的时候，只能指定Ingress-nginx容器所在的节点IP。而指定k8s集群内部的其他节点IP（包括master）都是不可以访问到的，如果这个节点一旦宕机，Ingress-nginx容器被转移到其他节点上运行（不考虑节点标签的问题，其实保持Ingress-nginx的yaml文件中默认的标签的话，那么每个节点都是有那个标签的）。随之还要我们手动去更改DNS解析的IP（要更改为Ingress-nginx容器所在节点的IP，通过命令“kubectl get pod -n ingress-nginx -o wide”可以查看到其所在节点），很是麻烦</p><p>所以就要为ingress资源对象创建一个Service（NodePort），这样在配置DNS解析的时候，就可以通过Ingress.bdqn.com  所有node节点，包括master节点的IP来配置，很方便</p><p>5）创建service资源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/provider/baremetal/service-nodeport.yaml</span><br><span class="line">[root@master ~]# kubectl  apply  -f  service-nodeport.yaml</span><br><span class="line">[root@master ~]# kubectl  get svc -n ingress-nginx </span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.167.12   &lt;none&gt;        80:32756/TCP,443:30501/TCP   2m7s</span><br></pre></td></tr></table></figure><p><strong>Service-Nodeport</strong></p><blockquote><p>因为Ingress-nginx-controller运行在了集群内的其中一个节点，为了保证即使这个节点宕机，我们对应的域名仍然能够正常的访问服务，所以我们将Ingress-nginx-controller也暴露为一个service资源</p></blockquote><p>至此，这个域名就可以和集群中任意节点的 32756/30501端口进行绑定了<br><img src="https://img-blog.csdnimg.cn/20200224140157984.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200224140212599.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      K8s
    
    </summary>
    
    
      <category term="k8s" scheme="http://pdxblog.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://pdxblog.top/tags/k8s/"/>
    
  </entry>
  
</feed>
