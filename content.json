{"meta":{"title":"派大星の博客","subtitle":"记录生活中的点点滴滴","description":"知道这一刻微笑着说话为止，我至少留下了一公升眼泪","author":"派大星","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-01-24T14:29:44.000Z","updated":"2020-01-24T14:30:26.053Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"ReplicaSet","slug":"ReplicaSet、DaemonSet","date":"2020-01-24T14:31:00.000Z","updated":"2020-01-24T15:51:14.867Z","comments":true,"path":"2020/01/24/ReplicaSet、DaemonSet/","link":"","permalink":"http://yoursite.com/2020/01/24/ReplicaSet%E3%80%81DaemonSet/","excerpt":"","text":"ReplicaSet&lt; !– more –&gt;RC：ReplicationoController（老一代的Pod控制器） RS：ReplicaSet（新一代的Pod控制器） 用于确保由其管理的控制的Pod对象副本，能够满足用户期望，多则删除，少则通过模板创建 deployment、rs、rc 特点： 确保Pod资源对象的数量精准确保Pod健康运行弹性伸缩 同样，它也可以通过yaml或json格式的资源清单来创建，其中spec字段一般嵌套一下字段 replicas：期望的Pod对象副本数量selector：当前控制器匹配Pod对象副本的标签template：Pod副本的模板 与RC相比而言，RS不仅支持基于等值的标签选择器，而且还支持集合的标签选择器 标签：解决同类型的资源对象越来越多，为了更好的管理，按照标签分组 常用标签分类： release（版本）：stable（稳定版）、canary（金丝雀）、beta（测试版）environment（环境变量）：dev（开发）、qa（测试）、production（生产）application（应用）：ui、as（application software应用软件）、pc、sctier（架构层级）：frontend（前端）、backend（后端）、cache（缓存）partition（分区）：customerA（客户A）、customoerB（客户B）track（品控级别）：daily（每天）、weekly（每周）标签要做到：见名知意 //通过–show-labels显示资源对象的标签 1[root@master ~]# kubectl get pod --show-labels //通过-l选项查看仅含有包含某个标签的资源 1[root@master ~]# kubectl get pod -l env //通过-L显示某个键对应的值 1[root@master ~]# kubectl get pod -L env //给Pod资源添加标签 1[root@master ~]# kubectl label pod label app=pc //删除标签 1[root@master ~]# kubectl label pod label app- //修改标签 [root@master ~]# kubectl label pod label env=dev –overwrite如果标签有多个，标签选择器选择其中一个，也可以关联成功，相反，如果选择器有多个，那标签必须完全满足条件，才可以关联成功 标签选择器：标签的查询过滤条件 基于等值关系的（equality-based）：”=”，”==”，”!=” =” 前面两个都是相等，最后是不等基于集合关系（set-based）：in、notin、exists三种 例子： 123456selector: matchLables: app: nginx metchExpressions: - &#123;key: name,operator: In,values: [zhangsan,lisi]&#125; - &#123;key: age,operator: Exists,values:&#125; matchLabels：指定键值对来表示的标签选择器 matchExpressions：基于表达式来指定的标签选择器，选择器列表间为”逻辑与”关系；使用In或者Notin操作时，其values不强制要求为非控的字符串，而使用Exists或DosNotExist时，其values必须为空 使用标签选择器的逻辑： 同时指定的多个选择器之间的逻辑关系为”与”操作使用空值的标签选择器意味着每个资源对象都将被选择中空的标签选择器无法选中任何资源 DaemonSet 它也是一种Pod控制器 使用场景：如果必须将Pod运行再固定的某个或某几个节点，且要优先其他Pod的启动，通常情况下，默认会每个节点都会运行，并且只能运行一个Pod，这种情况推荐使用DaemonSet资源对象 监控程序： 日志收集程序： 运行一个web服务，在每一个节点都运行一个Pod 1234567891011121314[root@master ~]# vim daemonset.yamlkind: DaemonSetapiVersion: extensions/v1beta1metadata: name: test-dsspec: template: metadata: labels: name: test-ns spec: containers: - name: test-ns image: httpd:v1 RC、RS、Deployment、DaemonSet，Pod控制器。statfulSet（有状态）、Ingress。Pod RBAC：基于用户的认证授权机制","categories":[{"name":"k8s","slug":"k8s","permalink":"http://yoursite.com/categories/k8s/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-01-23T16:00:00.000Z","updated":"2020-01-24T15:50:16.692Z","comments":true,"path":"2020/01/24/hello-world/","link":"","permalink":"http://yoursite.com/2020/01/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.&lt; !– more –&gt; Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"测试","slug":"测试","permalink":"http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[]}]}